/** Guard statement to avoid multiple declaration */
#ifndef AKA_SRC_E__CPP_PROJECTS_COLLECTION_NHATMINH_LVANDEVE_LODEPNG_SRC_LODEPNG_UNITTEST_CPP
#define AKA_SRC_E__CPP_PROJECTS_COLLECTION_NHATMINH_LVANDEVE_LODEPNG_SRC_LODEPNG_UNITTEST_CPP
#include <string>
#include <string.h>
#include <vector>
extern "C++" int AKA_mark(char* str);
extern "C++" void AKA_assert(char* actualName, int actualVal, char* expectedName, int expectedVal);
extern "C++" int AKA_assert_double(char* actualName, double actualVal, char* expectedName, double expectedVal);
extern "C++" int AKA_assert_ptr(char* actualName, void* actualVal, char* expectedName, void* expectedVal);
extern "C++" int AKA_fCall;
extern "C++" char* AKA_test_case_name;



/*
LodePNG Unit Test

Copyright (c) 2005-2025 Lode Vandevenne

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

    1. The origin of this software must not be misrepresented; you must not
    claim that you wrote the original software. If you use this software
    in a product, an acknowledgment in the product documentation would be
    appreciated but is not required.

    2. Altered source versions must be plainly marked as such, and must not be
    misrepresented as being the original software.

    3. This notice may not be removed or altered from any source
    distribution.
*/

//g++ lodepng.cpp lodepng_util.cpp lodepng_unittest.cpp -Wall -Wextra -Wsign-conversion -pedantic -ansi -O3

/*
Testing instructions:

*) Ensure no tests commented out below or early return in doMain

*) Compile with g++ with all warnings and run the unit test
g++ lodepng.cpp lodepng_util.cpp lodepng_unittest.cpp -Werror -Wall -Wextra -Wsign-conversion -Wshadow -pedantic -ansi -O3 && ./a.out

*) Compile with clang, which may sometimes give different warnings
clang++ lodepng.cpp -c -Werror -Wall -Wextra -Wsign-conversion -Wshorten-64-to-32 -Wshadow -pedantic -ansi -O3

*) Compile with pure ISO C90 and all warnings:
mv lodepng.cpp lodepng.c ; gcc -I ./ lodepng.c examples/example_decode.c -ansi -pedantic -Werror -Wall -Wextra -O3 ; mv lodepng.c lodepng.cpp

mv lodepng.cpp lodepng.c ; clang -I ./ lodepng.c examples/example_decode.c -ansi -pedantic -Werror -Wall -Wextra -O3 ; mv lodepng.c lodepng.cpp

*) Compile with C with -pedantic but not -ansi flag so it warns about // style comments in C++-only ifdefs
mv lodepng.cpp lodepng.c ; gcc -I ./ lodepng.c examples/example_decode.c -pedantic -Werror -Wall -Wextra -O3 ; mv lodepng.c lodepng.cpp

*) test other compilers

*) try lodepng_benchmark.cpp
g++ lodepng.cpp lodepng_benchmark.cpp -Werror -Wall -Wextra -pedantic -ansi -lSDL2 -O3 && ./a.out testdata/corpus/''*

*) try the fuzzer
clang++ -fsanitize=fuzzer -DLODEPNG_MAX_ALLOC=100000000 lodepng.cpp lodepng_fuzzer.cpp -O3 -o fuzzer && ./fuzzer

clang++ -fsanitize=fuzzer,address,undefined -DLODEPNG_MAX_ALLOC=100000000 lodepng.cpp lodepng_fuzzer.cpp -O3 -o fuzzer && ./fuzzer

*) Check if all C++ examples compile without warnings:
g++ -I ./ lodepng.cpp examples/''*.cpp -Werror -W -Wall -ansi -pedantic -O3 -c

*) Check if all C examples compile without warnings:
mv lodepng.cpp lodepng.c ; gcc -I ./ lodepng.c examples/''*.c -Werror -W -Wall -ansi -pedantic -O3 -c ; mv lodepng.c lodepng.cpp

*) Check pngdetail.cpp:
g++ lodepng.cpp lodepng_util.cpp pngdetail.cpp -Werror -W -Wall -ansi -pedantic -O3 -o pngdetail
./pngdetail testdata/PngSuite/basi0g01.png

*) Test compiling with some code sections with #defines disabled, for unused static function warnings etc...
g++ lodepng.cpp -W -Wall -ansi -pedantic -O3 -c -DLODEPNG_NO_COMPILE_CRC
g++ lodepng.cpp -W -Wall -ansi -pedantic -O3 -c -DLODEPNG_NO_COMPILE_ZLIB
g++ lodepng.cpp -W -Wall -ansi -pedantic -O3 -c -DLODEPNG_NO_COMPILE_PNG
g++ lodepng.cpp -W -Wall -ansi -pedantic -O3 -c -DLODEPNG_NO_COMPILE_DECODER
g++ lodepng.cpp -W -Wall -ansi -pedantic -O3 -c -DLODEPNG_NO_COMPILE_ENCODER
g++ lodepng.cpp -W -Wall -ansi -pedantic -O3 -c -DLODEPNG_NO_COMPILE_DISK
g++ lodepng.cpp -W -Wall -ansi -pedantic -O3 -c -DLODEPNG_NO_COMPILE_ANCILLARY_CHUNKS
g++ lodepng.cpp -W -Wall -ansi -pedantic -O3 -c -DLODEPNG_NO_COMPILE_ERROR_TEXT
g++ lodepng.cpp -W -Wall -ansi -pedantic -O3 -c -DLODEPNG_NO_COMPILE_CPP
g++ lodepng.cpp -W -Wall -ansi -pedantic -O3 -c -DLODEPNG_NO_COMPILE_ZLIB -DLODEPNG_NO_COMPILE_DECODER
g++ lodepng.cpp -W -Wall -ansi -pedantic -O3 -c -DLODEPNG_NO_COMPILE_ZLIB -DLODEPNG_NO_COMPILE_ENCODER
g++ lodepng.cpp -W -Wall -ansi -pedantic -O3 -c -DLODEPNG_NO_COMPILE_PNG -DLODEPNG_NO_COMPILE_DECODER
g++ lodepng.cpp -W -Wall -ansi -pedantic -O3 -c -DLODEPNG_NO_COMPILE_PNG -DLODEPNG_NO_COMPILE_ENCODER
g++ lodepng.cpp -W -Wall -ansi -pedantic -O3 -c -DLODEPNG_NO_COMPILE_DECODER -DLODEPNG_NO_COMPILE_ANCILLARY_CHUNKS -DLODEPNG_NO_COMPILE_ERROR_TEXT -DLODEPNG_NO_COMPILE_DISK
g++ lodepng.cpp -W -Wall -ansi -pedantic -O3 -c -DLODEPNG_NO_COMPILE_ENCODER -DLODEPNG_NO_COMPILE_ANCILLARY_CHUNKS -DLODEPNG_NO_COMPILE_ERROR_TEXT -DLODEPNG_NO_COMPILE_DISK
rm *.o

*) analyze with clang:
clang++ lodepng.cpp --analyze

More verbose:
clang++ --analyze -Xanalyzer -analyzer-output=text lodepng.cpp

Or html, look under lodepng.plist dir afterwards and find the numbered locations in the pages:
clang++ --analyze -Xanalyzer -analyzer-output=html lodepng.cpp

*) check for memory leaks and vulnerabilities with valgrind
(DISABLE_SLOW disables a few tests that are very slow with valgrind)
g++ -DDISABLE_SLOW lodepng.cpp lodepng_util.cpp lodepng_unittest.cpp -Wall -Wextra -pedantic -ansi -O3 -DLODEPNG_MAX_ALLOC=100000000 && valgrind --leak-check=full --track-origins=yes ./a.out

*) Try with clang++ and address sanitizer (to get line numbers, make sure 'llvm' is also installed to get 'llvm-symbolizer'
clang++ -O3 -fsanitize=address,undefined lodepng.cpp lodepng_util.cpp lodepng_unittest.cpp -Werror -Wall -Wextra -Wshadow -pedantic -ansi && ASAN_OPTIONS=allocator_may_return_null=1 ./a.out

clang++ -g3 -fsanitize=address,undefined lodepng.cpp lodepng_util.cpp lodepng_unittest.cpp -Werror -Wall -Wextra -Wshadow -pedantic -ansi && ASAN_OPTIONS=allocator_may_return_null=1 ./a.out

*) remove "#include <iostream>" from lodepng.cpp if it's still in there (some are legit)
cat lodepng.cpp lodepng_util.cpp | grep iostream
cat lodepng.cpp lodepng_util.cpp | grep stdio
cat lodepng.cpp lodepng_util.cpp | grep "#include"

*) try the Makefile
make clean && make -j
rm *.o *.obj

*) check that no plain free, malloc, realloc, strlen, memcpy, memset, ... used, but the lodepng_* versions instead

*) check version dates in copyright message and LODEPNG_VERSION_STRING

*) check year in copyright message at top of all files

*) check examples/sdl.cpp with the png test suite images (the "x" ones are expected to show error)
g++ -I ./ lodepng.cpp examples/example_sdl.cpp -Werror -Wall -Wextra -pedantic -ansi -O3 -lSDL2 -o showpng && ./showpng testdata/PngSuite/''*.png

*) strip trailing spaces and ensure consistent newlines

*) test warnings in other compilers

*) check diff of lodepng.cpp and lodepng.h before submitting
git difftool -y

*/

/** Guard statement to avoid multiple declaration */
#ifndef AKA_INCLUDE__LODEPNG_H_
#define AKA_INCLUDE__LODEPNG_H_
#include "lodepng.akaignore.h"
#endif

/** Guard statement to avoid multiple declaration */
#ifndef AKA_INCLUDE__LODEPNG_UTIL_H_
#define AKA_INCLUDE__LODEPNG_UTIL_H_
#include "lodepng_util.akaignore.h"
#endif


#include <cmath>
#include <map>
#include <iomanip>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

#include <stdio.h>
#include <stdlib.h>

////////////////////////////////////////////////////////////////////////////////

/** Instrumented function fail() */
void fail() /* << Aka begin of function void fail() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fail()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.fail.7064.stub"

  AKA_mark("lis===147###sois===7076###eois===7084###lif===1###soif===17###eoif===25###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fail()");throw 1; //that's how to let a unittest fail
}

//Utility for debug messages
template<typename T>
/** Instrumented function valtostr(T const&) */
std::string valtostr(const T& val) /* << Aka begin of function std::string valtostr(const T& val) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\valtostr(T const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.valtostr.7191.stub"

  AKA_mark("lis===153###sois===7219###eois===7246###lif===1###soif===40###eoif===67###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\valtostr(T const&)");std::ostringstream sstream;
  AKA_mark("lis===154###sois===7250###eois===7265###lif===2###soif===71###eoif===86###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\valtostr(T const&)");sstream << val;
  AKA_mark("lis===155###sois===7269###eois===7290###lif===3###soif===90###eoif===111###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\valtostr(T const&)");return sstream.str();
}

//Print char as a numeric value rather than a character
template<>
/** Instrumented function valtostr(unsigned char const&) */
std::string valtostr(const unsigned char& val) /* << Aka begin of function std::string valtostr(const unsigned char& val) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\valtostr(unsigned char const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.valtostr.7378.stub"

  AKA_mark("lis===161###sois===7418###eois===7445###lif===1###soif===52###eoif===79###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\valtostr(unsigned char const&)");std::ostringstream sstream;
  AKA_mark("lis===162###sois===7449###eois===7469###lif===2###soif===83###eoif===103###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\valtostr(unsigned char const&)");sstream << (int)val;
  AKA_mark("lis===163###sois===7473###eois===7494###lif===3###soif===107###eoif===128###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\valtostr(unsigned char const&)");return sstream.str();
}

//Print char pointer as pointer, not as string
template<typename T>
/** Instrumented function valtostr(T const*) */
std::string valtostr(const T* val) /* << Aka begin of function std::string valtostr(const T* val) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\valtostr(T const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.valtostr.7583.stub"

  AKA_mark("lis===169###sois===7611###eois===7638###lif===1###soif===40###eoif===67###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\valtostr(T const*)");std::ostringstream sstream;
  AKA_mark("lis===170###sois===7642###eois===7670###lif===2###soif===71###eoif===99###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\valtostr(T const*)");sstream << (const void*)val;
  AKA_mark("lis===171###sois===7674###eois===7695###lif===3###soif===103###eoif===124###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\valtostr(T const*)");return sstream.str();
}

template<typename T>
/** Instrumented function valtostr(std::vector<T>const&) */
std::string valtostr(const std::vector<T>& val) /* << Aka begin of function std::string valtostr(const std::vector<T>& val) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\valtostr(std::vector<T>const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.valtostr.7736.stub"

  AKA_mark("lis===176###sois===7777###eois===7804###lif===1###soif===53###eoif===80###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\valtostr(std::vector<T>const&)");std::ostringstream sstream;
  AKA_mark("lis===177###sois===7808###eois===7861###lif===2###soif===84###eoif===137###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\valtostr(std::vector<T>const&)");sstream << "[vector with size " << val.size() << "]";
  AKA_mark("lis===178###sois===7865###eois===7886###lif===3###soif===141###eoif===162###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\valtostr(std::vector<T>const&)");return sstream.str();
}

// TODO: remove, use only ASSERT_EQUALS (it prints line number). Requires adding extra message ability to ASSERT_EQUALS
template<typename T, typename U>
/** Instrumented function assertEquals(T const&,U const&,std::string const&= "") */
void assertEquals(const T& expected, const U& actual, const std::string& message = "") /* << Aka begin of function void assertEquals(const T& expected, const U& actual, const std::string& message = "") >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertEquals(T const&,U const&,std::string const&= "")");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.assertEquals.8053.stub"

  if(AKA_mark("lis===184###sois===8143###eois===8164###lif===1###soif===95###eoif===116###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertEquals(T const&,U const&,std::string const&= "")") && (AKA_mark("lis===184###sois===8143###eois===8164###lif===1###soif===95###eoif===116###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertEquals(T const&,U const&,std::string const&= "")") && (expected != (T)actual))) {
    AKA_mark("lis===185###sois===8173###eois===8349###lif===2###soif===125###eoif===301###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertEquals(T const&,U const&,std::string const&= "")");std::cout << "Error: Not equal! Expected " << valtostr(expected)
              << " got " << valtostr((T)actual) << ". "
              << "Message: " << message << std::endl;
    AKA_mark("lis===188###sois===8355###eois===8362###lif===5###soif===307###eoif===314###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertEquals(T const&,U const&,std::string const&= "")");fail();
  }
else {
AKA_mark("lis===-184-###sois===-8143-###eois===-814321-###lif===-1-###soif===-###eoif===-116-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertEquals(T const&,U const&,std::string const&= "")");
}
}

// TODO: remove, use only ASSERT_TRUE (it prints line number). Requires adding extra message ability to ASSERT_TRUE
/** Instrumented function assertTrue(bool,std::string const&= "") */
void assertTrue(bool value, const std::string& message = "") /* << Aka begin of function void assertTrue(bool value, const std::string& message = "") >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertTrue(bool,std::string const&= "")");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.assertTrue.8496.stub"

  if(AKA_mark("lis===194###sois===8560###eois===8566###lif===1###soif===69###eoif===75###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertTrue(bool,std::string const&= "")") && (AKA_mark("lis===194###sois===8560###eois===8566###lif===1###soif===69###eoif===75###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertTrue(bool,std::string const&= "")") && (!value))) {
    AKA_mark("lis===195###sois===8575###eois===8652###lif===2###soif===84###eoif===161###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertTrue(bool,std::string const&= "")");std::cout << "Error: expected true. " << "Message: " << message << std::endl;
    AKA_mark("lis===196###sois===8658###eois===8665###lif===3###soif===167###eoif===174###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertTrue(bool,std::string const&= "")");fail();
  }
else {
AKA_mark("lis===-194-###sois===-8560-###eois===-85606-###lif===-1-###soif===-###eoif===-75-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertTrue(bool,std::string const&= "")");
}
}

//assert that no error
/** Instrumented function assertNoPNGError(unsigned,std::string const&= "") */
void assertNoPNGError(unsigned error, const std::string& message = "") /* << Aka begin of function void assertNoPNGError(unsigned error, const std::string& message = "") >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertNoPNGError(unsigned,std::string const&= "")");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.assertNoPNGError.8706.stub"

  if(AKA_mark("lis===202###sois===8780###eois===8785###lif===1###soif===79###eoif===84###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertNoPNGError(unsigned,std::string const&= "")") && (AKA_mark("lis===202###sois===8780###eois===8785###lif===1###soif===79###eoif===84###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertNoPNGError(unsigned,std::string const&= "")") && (error))) {
    AKA_mark("lis===203###sois===8794###eois===8953###lif===2###soif===93###eoif===252###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertNoPNGError(unsigned,std::string const&= "")");std::string msg = (message == "") ? lodepng_error_text(error)
                                      : message + std::string(": ") + lodepng_error_text(error);
    AKA_mark("lis===205###sois===8959###eois===8987###lif===4###soif===258###eoif===286###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertNoPNGError(unsigned,std::string const&= "")");assertEquals(0, error, msg);
  }
else {
AKA_mark("lis===-202-###sois===-8780-###eois===-87805-###lif===-1-###soif===-###eoif===-84-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertNoPNGError(unsigned,std::string const&= "")");
}
}

/** Instrumented function assertNoError(unsigned) */
void assertNoError(unsigned error) /* << Aka begin of function void assertNoError(unsigned error) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertNoError(unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.assertNoError.9004.stub"

  if(AKA_mark("lis===210###sois===9042###eois===9047###lif===1###soif===43###eoif===48###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertNoError(unsigned)") && (AKA_mark("lis===210###sois===9042###eois===9047###lif===1###soif===43###eoif===48###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertNoError(unsigned)") && (error))) {
    AKA_mark("lis===211###sois===9056###eois===9100###lif===2###soif===57###eoif===101###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertNoError(unsigned)");assertEquals(0, error, "Expected no error");
  }
else {
AKA_mark("lis===-210-###sois===-9042-###eois===-90425-###lif===-1-###soif===-###eoif===-48-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertNoError(unsigned)");
}
}

#define STR_EXPAND(s) #s
#define STR(s) STR_EXPAND(s)
#define ASSERT_TRUE(v) {\
  if(!(v)) {\
    std::cout << std::string("line ") + STR(__LINE__) + ": " + STR(v) + " ASSERT_TRUE failed: ";\
    std::cout << "Expected true but got " << valtostr(v) << ". " << std::endl;\
    fail();\
  }\
}
#define ASSERT_EQUALS(e, v) {\
  if((e) != (v)) {\
    std::cout << std::string("line ") + STR(__LINE__) + ": " + STR(v) + " ASSERT_EQUALS failed: ";\
    std::cout << "Expected " << valtostr(e) << " but got " << valtostr(v) << ". " << std::endl;\
    fail();\
  }\
}
#define ASSERT_NOT_EQUALS(e, v) {\
  if((e) == (v)) {\
    std::cout << std::string("line ") + STR(__LINE__) + ": " + STR(v) + " ASSERT_NOT_EQUALS failed: ";\
    std::cout << "Expected not " << valtostr(e) << " but got " << valtostr(v) << ". " << std::endl;\
    fail();\
  }\
}

template<typename T, typename U, typename V>
/** Instrumented function isNear(T,U,V) */
bool isNear(T e, U v, V maxdist) /* << Aka begin of function bool isNear(T e, U v, V maxdist) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\isNear(T,U,V)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.isNear.10028.stub"

  AKA_mark("lis===241###sois===10061###eois===10101###lif===1###soif===38###eoif===78###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\isNear(T,U,V)");T dist = e > (T)v ? e - (T)v : (T)v - e;
  AKA_mark("lis===242###sois===10105###eois===10131###lif===2###soif===82###eoif===108###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\isNear(T,U,V)");return dist <= (T)maxdist;
}

template<typename T, typename U>
/** Instrumented function diff(T,U) */
T diff(T e, U v) /* << Aka begin of function T diff(T e, U v) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\diff(T,U)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.diff.10174.stub"

  AKA_mark("lis===247###sois===10194###eois===10223###lif===1###soif===22###eoif===51###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\diff(T,U)");return v > e ? v - e : e - v;
}

#define ASSERT_NEAR(e, v, maxdist) {\
  if(!isNear(e, v, maxdist)) {\
    std::cout << std::string("line ") + STR(__LINE__) + ": " + STR(v) + " ASSERT_NEAR failed: ";\
    std::cout << "dist too great! Expected near " << valtostr(e) << " but got " << valtostr(v) << ", with max dist " << valtostr(maxdist)\
              << " but got dist " << valtostr(diff(e, v)) << ". " << std::endl;\
    fail();\
  }\
}

#define ASSERT_STRING_EQUALS(e, v) ASSERT_EQUALS(std::string(e), std::string(v))
#define ASSERT_NO_PNG_ERROR_MSG(error, message) assertNoPNGError(error, std::string("line ") + STR(__LINE__) + (std::string(message).empty() ? std::string("") : (": " + std::string(message))))
#define ASSERT_NO_PNG_ERROR(error) ASSERT_NO_PNG_ERROR_MSG(error, std::string(""))

static const std::string BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";



//T and U can be std::string or std::vector<unsigned char>
template<typename T, typename U>
/** Instrumented function toBase64(T&,U const&) */
void toBase64(T& out, const U& in) /* << Aka begin of function void toBase64(T& out, const U& in) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.toBase64.11218.stub"

  int AKA_BLOCK_LOOP_11253 = 0;
    AKA_mark("lis===270###sois===11257###eois===11270###lif===1###soif===44###eoif===57###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)");
for(size_t i = 0; AKA_mark("lis===270###sois===11271###eois===11284###lif===1###soif===58###eoif===71###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)") && (AKA_mark("lis===270###sois===11271###eois===11284###lif===1###soif===58###eoif===71###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)") && (i < in.size())); ({AKA_mark("lis===270###sois===11286###eois===11292###lif===1###soif===73###eoif===79###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)");i += 3;})) {
        AKA_BLOCK_LOOP_11253++;
        if (AKA_BLOCK_LOOP_11253 > 1000) {
            //break;
        }
    AKA_mark("lis===271###sois===11301###eois===11323###lif===2###soif===88###eoif===110###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)");int v = 65536 * in[i];
    if(AKA_mark("lis===272###sois===11332###eois===11349###lif===3###soif===119###eoif===136###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)") && (AKA_mark("lis===272###sois===11332###eois===11349###lif===3###soif===119###eoif===136###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)") && (i + 1 < in.size()))) {
AKA_mark("lis===272###sois===11351###eois===11372###lif===3###soif===138###eoif===159###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)");v += 256 * in[i + 1];
}

else {
AKA_mark("lis===-272-###sois===-11332-###eois===-1133217-###lif===-3-###soif===-###eoif===-136-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)");
}
    if(AKA_mark("lis===273###sois===11381###eois===11398###lif===4###soif===168###eoif===185###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)") && (AKA_mark("lis===273###sois===11381###eois===11398###lif===4###soif===168###eoif===185###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)") && (i + 2 < in.size()))) {
AKA_mark("lis===273###sois===11400###eois===11415###lif===4###soif===187###eoif===202###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)");v += in[i + 2];
}

else {
AKA_mark("lis===-273-###sois===-11381-###eois===-1138117-###lif===-4-###soif===-###eoif===-185-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)");
}
    AKA_mark("lis===274###sois===11421###eois===11461###lif===5###soif===208###eoif===248###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)");out.push_back(BASE64[(v >> 18) & 0x3f]);
    AKA_mark("lis===275###sois===11467###eois===11507###lif===6###soif===254###eoif===294###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)");out.push_back(BASE64[(v >> 12) & 0x3f]);
    if(AKA_mark("lis===276###sois===11516###eois===11533###lif===7###soif===303###eoif===320###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)") && (AKA_mark("lis===276###sois===11516###eois===11533###lif===7###soif===303###eoif===320###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)") && (i + 1 < in.size()))) {
AKA_mark("lis===276###sois===11535###eois===11574###lif===7###soif===322###eoif===361###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)");out.push_back(BASE64[(v >> 6) & 0x3f]);
}

    else {
AKA_mark("lis===277###sois===11585###eois===11604###lif===8###soif===372###eoif===391###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)");out.push_back('=');
}

    if(AKA_mark("lis===278###sois===11613###eois===11630###lif===9###soif===400###eoif===417###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)") && (AKA_mark("lis===278###sois===11613###eois===11630###lif===9###soif===400###eoif===417###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)") && (i + 2 < in.size()))) {
AKA_mark("lis===278###sois===11632###eois===11671###lif===9###soif===419###eoif===458###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)");out.push_back(BASE64[(v >> 0) & 0x3f]);
}

    else {
AKA_mark("lis===279###sois===11682###eois===11701###lif===10###soif===469###eoif===488###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\toBase64(T&,U const&)");out.push_back('=');
}

  }
}

/** Instrumented function fromBase64(int) */
int fromBase64(int v) /* << Aka begin of function int fromBase64(int v) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.fromBase64.11717.stub"

  if(AKA_mark("lis===284###sois===11743###eois===11763###lif===1###soif===30###eoif===50###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)") && ((AKA_mark("lis===284###sois===11743###eois===11751###lif===1###soif===30###eoif===38###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)") && (v >= 'A')) && (AKA_mark("lis===284###sois===11755###eois===11763###lif===1###soif===42###eoif===50###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)") && (v <= 'Z')))) {
AKA_mark("lis===284###sois===11765###eois===11782###lif===1###soif===52###eoif===69###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)");return (v - 'A');
}

else {
AKA_mark("lis===-284-###sois===-11743-###eois===-1174320-###lif===-1-###soif===-###eoif===-50-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)");
}
  if(AKA_mark("lis===285###sois===11789###eois===11809###lif===2###soif===76###eoif===96###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)") && ((AKA_mark("lis===285###sois===11789###eois===11797###lif===2###soif===76###eoif===84###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)") && (v >= 'a')) && (AKA_mark("lis===285###sois===11801###eois===11809###lif===2###soif===88###eoif===96###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)") && (v <= 'z')))) {
AKA_mark("lis===285###sois===11811###eois===11833###lif===2###soif===98###eoif===120###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)");return (v - 'a' + 26);
}

else {
AKA_mark("lis===-285-###sois===-11789-###eois===-1178920-###lif===-2-###soif===-###eoif===-96-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)");
}
  if(AKA_mark("lis===286###sois===11840###eois===11860###lif===3###soif===127###eoif===147###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)") && ((AKA_mark("lis===286###sois===11840###eois===11848###lif===3###soif===127###eoif===135###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)") && (v >= '0')) && (AKA_mark("lis===286###sois===11852###eois===11860###lif===3###soif===139###eoif===147###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)") && (v <= '9')))) {
AKA_mark("lis===286###sois===11862###eois===11884###lif===3###soif===149###eoif===171###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)");return (v - '0' + 52);
}

else {
AKA_mark("lis===-286-###sois===-11840-###eois===-1184020-###lif===-3-###soif===-###eoif===-147-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)");
}
  if(AKA_mark("lis===287###sois===11891###eois===11899###lif===4###soif===178###eoif===186###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)") && (AKA_mark("lis===287###sois===11891###eois===11899###lif===4###soif===178###eoif===186###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)") && (v == '+'))) {
AKA_mark("lis===287###sois===11901###eois===11911###lif===4###soif===188###eoif===198###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)");return 62;
}

else {
AKA_mark("lis===-287-###sois===-11891-###eois===-118918-###lif===-4-###soif===-###eoif===-186-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)");
}
  if(AKA_mark("lis===288###sois===11918###eois===11926###lif===5###soif===205###eoif===213###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)") && (AKA_mark("lis===288###sois===11918###eois===11926###lif===5###soif===205###eoif===213###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)") && (v == '/'))) {
AKA_mark("lis===288###sois===11928###eois===11938###lif===5###soif===215###eoif===225###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)");return 63;
}

else {
AKA_mark("lis===-288-###sois===-11918-###eois===-119188-###lif===-5-###soif===-###eoif===-213-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)");
}
  AKA_mark("lis===289###sois===11942###eois===11951###lif===6###soif===229###eoif===238###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(int)");return 0; //v == '='
}

//T and U can be std::string or std::vector<unsigned char>
template<typename T, typename U>
/** Instrumented function fromBase64(T&,U const&) */
void fromBase64(T& out, const U& in) /* << Aka begin of function void fromBase64(T& out, const U& in) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(T&,U const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.fromBase64.12068.stub"

  int AKA_BLOCK_LOOP_12105 = 0;
    AKA_mark("lis===295###sois===12109###eois===12122###lif===1###soif===46###eoif===59###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(T&,U const&)");
for(size_t i = 0; AKA_mark("lis===295###sois===12123###eois===12140###lif===1###soif===60###eoif===77###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(T&,U const&)") && (AKA_mark("lis===295###sois===12123###eois===12140###lif===1###soif===60###eoif===77###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(T&,U const&)") && (i + 3 < in.size())); ({AKA_mark("lis===295###sois===12142###eois===12148###lif===1###soif===79###eoif===85###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(T&,U const&)");i += 4;})) {
        AKA_BLOCK_LOOP_12105++;
        if (AKA_BLOCK_LOOP_12105 > 1000) {
            //break;
        }
    AKA_mark("lis===296###sois===12157###eois===12276###lif===2###soif===94###eoif===213###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(T&,U const&)");int v = 262144 * fromBase64(in[i]) + 4096 * fromBase64(in[i + 1]) + 64 * fromBase64(in[i + 2]) + fromBase64(in[i + 3]);
    AKA_mark("lis===297###sois===12282###eois===12314###lif===3###soif===219###eoif===251###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(T&,U const&)");out.push_back((v >> 16) & 0xff);
    if(AKA_mark("lis===298###sois===12323###eois===12339###lif===4###soif===260###eoif===276###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(T&,U const&)") && (AKA_mark("lis===298###sois===12323###eois===12339###lif===4###soif===260###eoif===276###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(T&,U const&)") && (in[i + 2] != '='))) {
AKA_mark("lis===298###sois===12341###eois===12372###lif===4###soif===278###eoif===309###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(T&,U const&)");out.push_back((v >> 8) & 0xff);
}

else {
AKA_mark("lis===-298-###sois===-12323-###eois===-1232316-###lif===-4-###soif===-###eoif===-276-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(T&,U const&)");
}
    if(AKA_mark("lis===299###sois===12381###eois===12397###lif===5###soif===318###eoif===334###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(T&,U const&)") && (AKA_mark("lis===299###sois===12381###eois===12397###lif===5###soif===318###eoif===334###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(T&,U const&)") && (in[i + 3] != '='))) {
AKA_mark("lis===299###sois===12399###eois===12430###lif===5###soif===336###eoif===367###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(T&,U const&)");out.push_back((v >> 0) & 0xff);
}

else {
AKA_mark("lis===-299-###sois===-12381-###eois===-1238116-###lif===-5-###soif===-###eoif===-334-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\fromBase64(T&,U const&)");
}
  }
}

/** Instrumented function getRandom() */
unsigned aka_static_getRandom_s;
unsigned getRandom() /* << Aka begin of function unsigned getRandom() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\getRandom()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.getRandom.12451.stub"

  AKA_mark("lis===304###sois===12468###eois===12499###lif===1###soif===26###eoif===57###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\getRandom()");static unsigned 
#ifdef AKA_STATIC_GETRANDOM_S
s = aka_static_getRandom_s
#else
s = 1000000000
#endif // AKA_STATIC_GETRANDOM_S
;
  // xorshift32, good enough for testing
  AKA_mark("lis===306###sois===12545###eois===12560###lif===3###soif===103###eoif===118###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\getRandom()");s ^= (s << 13);
  AKA_mark("lis===307###sois===12564###eois===12579###lif===4###soif===122###eoif===137###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\getRandom()");s ^= (s >> 17);
  AKA_mark("lis===308###sois===12583###eois===12597###lif===5###soif===141###eoif===155###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\getRandom()");s ^= (s << 5);
  AKA_mark("lis===309###sois===12601###eois===12610###lif===6###soif===159###eoif===168###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\getRandom()");return s;
}

////////////////////////////////////////////////////////////////////////////////


/** Instrumented function leftrotate(unsigned,unsigned) */
unsigned leftrotate(unsigned x, unsigned c) /* << Aka begin of function unsigned leftrotate(unsigned x, unsigned c) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\leftrotate(unsigned,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.leftrotate.12712.stub"

  AKA_mark("lis===316###sois===12752###eois===12787###lif===1###soif===49###eoif===84###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\leftrotate(unsigned,unsigned)");return (x << c) | (x >> (32u - c));
}

// the 128-bit result is output in 4 32-bit integers a0..d0 (to make 16-byte digest: append a0|b0|c0|d0 in little endian)
/** Instrumented function md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*) */
void md5sum(const unsigned char* in, size_t size, unsigned* a0, unsigned* b0, unsigned* c0, unsigned* d0) /* << Aka begin of function void md5sum(const unsigned char* in, size_t size, unsigned* a0, unsigned* b0, unsigned* c0, unsigned* d0) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.md5sum.12922.stub"

  AKA_mark("lis===321###sois===13028###eois===13062###lif===1###soif===111###eoif===145###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");ASSERT_EQUALS(4, sizeof(unsigned));
  // per-round shift amounts
  AKA_mark("lis===323###sois===13097###eois===13384###lif===3###soif===180###eoif===467###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");static const unsigned s[64] = {
    7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
    4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21,
  };
  // precomputed table from sines
  AKA_mark("lis===328###sois===13423###eois===14268###lif===8###soif===506###eoif===1351###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");static const unsigned k[64] = {
    0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee, 0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
    0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be, 0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
    0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa, 0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
    0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed, 0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
    0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c, 0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
    0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05, 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
    0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039, 0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
    0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1, 0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391,
  };

  AKA_mark("lis===339###sois===14274###eois===14291###lif===19###soif===1357###eoif===1374###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");*a0 = 0x67452301;
  AKA_mark("lis===340###sois===14295###eois===14312###lif===20###soif===1378###eoif===1395###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");*b0 = 0xefcdab89;
  AKA_mark("lis===341###sois===14316###eois===14333###lif===21###soif===1399###eoif===1416###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");*c0 = 0x98badcfe;
  AKA_mark("lis===342###sois===14337###eois===14354###lif===22###soif===1420###eoif===1437###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");*d0 = 0x10325476;

  // append bit, padding and size to input
  AKA_mark("lis===345###sois===14404###eois===14451###lif===25###soif===1487###eoif===1534###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");std::vector<unsigned char> data(in, in + size);
  AKA_mark("lis===346###sois===14455###eois===14503###lif===26###soif===1538###eoif===1586###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");data.resize(((size + 1 + 8 + 63) / 64) * 64, 0);
  AKA_mark("lis===347###sois===14507###eois===14524###lif===27###soif===1590###eoif===1607###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");data[size] = 128; // append 1 bit (msb)
  AKA_mark("lis===348###sois===14550###eois===14576###lif===28###soif===1633###eoif===1659###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");size_t bitsize = size * 8; // append the size (shifts > 31 are avoided)
  AKA_mark("lis===349###sois===14625###eois===14682###lif===29###soif===1708###eoif===1765###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");data[data.size() - 1] = ((bitsize >> 28u) >> 28u) & 255u;
  AKA_mark("lis===350###sois===14686###eois===14743###lif===30###soif===1769###eoif===1826###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");data[data.size() - 2] = ((bitsize >> 24u) >> 24u) & 255u;
  AKA_mark("lis===351###sois===14747###eois===14804###lif===31###soif===1830###eoif===1887###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");data[data.size() - 3] = ((bitsize >> 20u) >> 20u) & 255u;
  AKA_mark("lis===352###sois===14808###eois===14865###lif===32###soif===1891###eoif===1948###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");data[data.size() - 4] = ((bitsize >> 16u) >> 16u) & 255u;
  AKA_mark("lis===353###sois===14869###eois===14917###lif===33###soif===1952###eoif===2000###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");data[data.size() - 5] = (bitsize >> 24u) & 255u;
  AKA_mark("lis===354###sois===14921###eois===14969###lif===34###soif===2004###eoif===2052###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");data[data.size() - 6] = (bitsize >> 16u) & 255u;
  AKA_mark("lis===355###sois===14973###eois===15020###lif===35###soif===2056###eoif===2103###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");data[data.size() - 7] = (bitsize >> 8u) & 255u;
  AKA_mark("lis===356###sois===15024###eois===15063###lif===36###soif===2107###eoif===2146###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");data[data.size() - 8] = bitsize & 255u;

  // per chunk
  int AKA_BLOCK_LOOP_15085 = 0;
    AKA_mark("lis===359###sois===15089###eois===15102###lif===39###soif===2172###eoif===2185###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");
for(size_t i = 0; AKA_mark("lis===359###sois===15103###eois===15118###lif===39###soif===2186###eoif===2201###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)") && (AKA_mark("lis===359###sois===15103###eois===15118###lif===39###soif===2186###eoif===2201###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)") && (i < data.size())); ({AKA_mark("lis===359###sois===15120###eois===15127###lif===39###soif===2203###eoif===2210###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");i += 64;})) {
        AKA_BLOCK_LOOP_15085++;
        if (AKA_BLOCK_LOOP_15085 > 1000) {
            //break;
        }
    AKA_mark("lis===360###sois===15136###eois===15153###lif===40###soif===2219###eoif===2236###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");unsigned a = *a0;
    AKA_mark("lis===361###sois===15159###eois===15176###lif===41###soif===2242###eoif===2259###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");unsigned b = *b0;
    AKA_mark("lis===362###sois===15182###eois===15199###lif===42###soif===2265###eoif===2282###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");unsigned c = *c0;
    AKA_mark("lis===363###sois===15205###eois===15222###lif===43###soif===2288###eoif===2305###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");unsigned d = *d0;

    int AKA_BLOCK_LOOP_15230 = 0;
    AKA_mark("lis===365###sois===15234###eois===15247###lif===45###soif===2317###eoif===2330###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");
for(size_t j = 0; AKA_mark("lis===365###sois===15248###eois===15254###lif===45###soif===2331###eoif===2337###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)") && (AKA_mark("lis===365###sois===15248###eois===15254###lif===45###soif===2331###eoif===2337###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)") && (j < 64)); ({AKA_mark("lis===365###sois===15256###eois===15259###lif===45###soif===2339###eoif===2342###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");j++;})) {
        AKA_BLOCK_LOOP_15230++;
        if (AKA_BLOCK_LOOP_15230 > 1000) {
            //break;
        }
      AKA_mark("lis===366###sois===15270###eois===15284###lif===46###soif===2353###eoif===2367###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");unsigned f, g;
      if(AKA_mark("lis===367###sois===15295###eois===15303###lif===47###soif===2378###eoif===2386###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)") && (AKA_mark("lis===367###sois===15295###eois===15303###lif===47###soif===2378###eoif===2386###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)") && (j <= 15u))) {
        AKA_mark("lis===368###sois===15316###eois===15339###lif===48###soif===2399###eoif===2422###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");f = (b & c) | (~b & d);
        AKA_mark("lis===369###sois===15349###eois===15355###lif===49###soif===2432###eoif===2438###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");g = j;
      } else {
if(AKA_mark("lis===370###sois===15373###eois===15381###lif===50###soif===2456###eoif===2464###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)") && (AKA_mark("lis===370###sois===15373###eois===15381###lif===50###soif===2456###eoif===2464###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)") && (j <= 31u))) {
        AKA_mark("lis===371###sois===15394###eois===15417###lif===51###soif===2477###eoif===2500###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");f = (d & b) | (~d & c);
        AKA_mark("lis===372###sois===15427###eois===15451###lif===52###soif===2510###eoif===2534###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");g = (5u * j + 1u) & 15u;
      } else {
if(AKA_mark("lis===373###sois===15469###eois===15477###lif===53###soif===2552###eoif===2560###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)") && (AKA_mark("lis===373###sois===15469###eois===15477###lif===53###soif===2552###eoif===2560###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)") && (j <= 47u))) {
        AKA_mark("lis===374###sois===15490###eois===15504###lif===54###soif===2573###eoif===2587###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");f = b ^ c ^ d;
        AKA_mark("lis===375###sois===15514###eois===15538###lif===55###soif===2597###eoif===2621###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");g = (3u * j + 5u) & 15u;
      } else {
        AKA_mark("lis===377###sois===15564###eois===15581###lif===57###soif===2647###eoif===2664###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");f = c ^ (b | ~d);
        AKA_mark("lis===378###sois===15591###eois===15610###lif===58###soif===2674###eoif===2693###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");g = (7u * j) & 15u;
      }
}

}

      AKA_mark("lis===380###sois===15627###eois===15806###lif===60###soif===2710###eoif===2889###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");unsigned m = (unsigned)(data[i + g * 4 + 3] << 24u) | (unsigned)(data[i + g * 4 + 2] << 16u)
                 | (unsigned)(data[i + g * 4 + 1] << 8u) | (unsigned)data[i + g * 4];
      AKA_mark("lis===382###sois===15814###eois===15832###lif===62###soif===2897###eoif===2915###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");f += a + k[j] + m;
      AKA_mark("lis===383###sois===15840###eois===15846###lif===63###soif===2923###eoif===2929###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");a = d;
      AKA_mark("lis===384###sois===15854###eois===15860###lif===64###soif===2937###eoif===2943###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");d = c;
      AKA_mark("lis===385###sois===15868###eois===15874###lif===65###soif===2951###eoif===2957###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");c = b;
      AKA_mark("lis===386###sois===15882###eois===15907###lif===66###soif===2965###eoif===2990###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");b += leftrotate(f, s[j]);
    }
    AKA_mark("lis===388###sois===15920###eois===15929###lif===68###soif===3003###eoif===3012###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");*a0 += a;
    AKA_mark("lis===389###sois===15935###eois===15944###lif===69###soif===3018###eoif===3027###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");*b0 += b;
    AKA_mark("lis===390###sois===15950###eois===15959###lif===70###soif===3033###eoif===3042###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");*c0 += c;
    AKA_mark("lis===391###sois===15965###eois===15974###lif===71###soif===3048###eoif===3057###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t,unsigned*,unsigned*,unsigned*,unsigned*)");*d0 += d;
  }
}

/** Instrumented function md5sum(unsigned char const*,size_t) */
std::string md5sum(const unsigned char* data, size_t size) /* << Aka begin of function std::string md5sum(const unsigned char* data, size_t size) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.md5sum.15998.stub"

  AKA_mark("lis===396###sois===16050###eois===16074###lif===1###soif===64###eoif===88###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t)");unsigned a0, b0, c0, d0;
  AKA_mark("lis===397###sois===16078###eois===16117###lif===2###soif===92###eoif===131###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t)");md5sum(data, size, &a0, &b0, &c0, &d0);
  AKA_mark("lis===398###sois===16121###eois===16137###lif===3###soif===135###eoif===151###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t)");char result[33];
  //sprintf(result, "%8.8x%8.8x%8.8x%8.8x", a0, b0, c0, d0);
  AKA_mark("lis===400###sois===16203###eois===16599###lif===5###soif===217###eoif===613###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t)");sprintf(result, "%2.2x%2.2x%2.2x%2.2x%2.2x%2.2x%2.2x%2.2x%2.2x%2.2x%2.2x%2.2x%2.2x%2.2x%2.2x%2.2x",
          a0 & 255, (a0 >> 8) & 255, (a0 >> 16) & 255, (a0 >> 24) & 255,
          b0 & 255, (b0 >> 8) & 255, (b0 >> 16) & 255, (b0 >> 24) & 255,
          c0 & 255, (c0 >> 8) & 255, (c0 >> 16) & 255, (c0 >> 24) & 255,
          d0 & 255, (d0 >> 8) & 255, (d0 >> 16) & 255, (d0 >> 24) & 255);
  AKA_mark("lis===405###sois===16603###eois===16630###lif===10###soif===617###eoif===644###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(unsigned char const*,size_t)");return std::string(result);
}

/** Instrumented function md5sum(std::vector<unsigned char>const&) */
std::string md5sum(const std::vector<unsigned char>& in) /* << Aka begin of function std::string md5sum(const std::vector<unsigned char>& in) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(std::vector<unsigned char>const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.md5sum.16649.stub"

  AKA_mark("lis===409###sois===16699###eois===16735###lif===1###soif===62###eoif===98###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\md5sum(std::vector<unsigned char>const&)");return md5sum(in.data(), in.size());
}

////////////////////////////////////////////////////////////////////////////////

//Test image data
struct Image {
  std::vector<unsigned char> data;
  unsigned width;
  unsigned height;
  LodePNGColorType colorType;
  unsigned bitDepth;
};

//Get number of color channels for a given PNG color type
/** Instrumented function getNumColorChannels(unsigned) */
unsigned getNumColorChannels(unsigned colorType) /* << Aka begin of function unsigned getNumColorChannels(unsigned colorType) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\getNumColorChannels(unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.getNumColorChannels.17063.stub"

  AKA_mark("lis===425###sois===17115###eois===17124###lif===1###soif===61###eoif===70###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\getNumColorChannels(unsigned)");switch(colorType) {
    case 0: if (colorType == 0)
AKA_mark("lis===426###sois===17133###eois===17140###lif===2###soif===79###eoif===86###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\getNumColorChannels(unsigned)");
 AKA_mark("lis===426###sois===17141###eois===17150###lif===2###soif===87###eoif===96###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\getNumColorChannels(unsigned)");return 1; /*gray*/
    case 2: if (colorType == 2)
AKA_mark("lis===427###sois===17165###eois===17172###lif===3###soif===111###eoif===118###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\getNumColorChannels(unsigned)");
 AKA_mark("lis===427###sois===17173###eois===17182###lif===3###soif===119###eoif===128###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\getNumColorChannels(unsigned)");return 3; /*RGB*/
    case 3: if (colorType == 3)
AKA_mark("lis===428###sois===17196###eois===17203###lif===4###soif===142###eoif===149###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\getNumColorChannels(unsigned)");
 AKA_mark("lis===428###sois===17204###eois===17213###lif===4###soif===150###eoif===159###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\getNumColorChannels(unsigned)");return 1; /*palette*/
    case 4: if (colorType == 4)
AKA_mark("lis===429###sois===17231###eois===17238###lif===5###soif===177###eoif===184###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\getNumColorChannels(unsigned)");
 AKA_mark("lis===429###sois===17239###eois===17248###lif===5###soif===185###eoif===194###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\getNumColorChannels(unsigned)");return 2; /*gray + alpha*/
    case 6: if (colorType == 6)
AKA_mark("lis===430###sois===17271###eois===17278###lif===6###soif===217###eoif===224###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\getNumColorChannels(unsigned)");
 AKA_mark("lis===430###sois===17279###eois===17288###lif===6###soif===225###eoif===234###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\getNumColorChannels(unsigned)");return 4; /*RGBA*/
  }
  AKA_mark("lis===432###sois===17306###eois===17315###lif===8###soif===252###eoif===261###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\getNumColorChannels(unsigned)");return 0; /*unexisting color type*/
}

//Generate a test image with some data in it, the contents of the data is unspecified,
//except the content is not just one plain color, and not true random either to be compressible.
/** Instrumented function generateTestImage(Image&,unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8) */
void generateTestImage(Image& image, unsigned width, unsigned height, LodePNGColorType colorType = LCT_RGBA, unsigned bitDepth = 8) /* << Aka begin of function void generateTestImage(Image& image, unsigned width, unsigned height, LodePNGColorType colorType = LCT_RGBA, unsigned bitDepth = 8) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImage(Image&,unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.generateTestImage.17539.stub"

  AKA_mark("lis===438###sois===17671###eois===17691###lif===1###soif===137###eoif===157###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImage(Image&,unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8)");image.width = width;
  AKA_mark("lis===439###sois===17695###eois===17717###lif===2###soif===161###eoif===183###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImage(Image&,unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8)");image.height = height;
  AKA_mark("lis===440###sois===17721###eois===17749###lif===3###soif===187###eoif===215###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImage(Image&,unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8)");image.colorType = colorType;
  AKA_mark("lis===441###sois===17753###eois===17779###lif===4###soif===219###eoif===245###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImage(Image&,unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8)");image.bitDepth = bitDepth;

  AKA_mark("lis===443###sois===17785###eois===17841###lif===6###soif===251###eoif===307###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImage(Image&,unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8)");size_t bits = bitDepth * getNumColorChannels(colorType); //bits per pixel
  AKA_mark("lis===444###sois===17862###eois===17908###lif===7###soif===328###eoif===374###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImage(Image&,unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8)");size_t size = (width * height * bits + 7) / 8; //total image size in bytes
  AKA_mark("lis===445###sois===17940###eois===17964###lif===8###soif===406###eoif===430###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImage(Image&,unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8)");image.data.resize(size);
  AKA_mark("lis===446###sois===17968###eois===17994###lif===9###soif===434###eoif===460###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImage(Image&,unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8)");unsigned char value = 128;
  int AKA_BLOCK_LOOP_17998 = 0;
    AKA_mark("lis===447###sois===18002###eois===18015###lif===10###soif===468###eoif===481###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImage(Image&,unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8)");
for(size_t i = 0; AKA_mark("lis===447###sois===18016###eois===18024###lif===10###soif===482###eoif===490###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImage(Image&,unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8)") && (AKA_mark("lis===447###sois===18016###eois===18024###lif===10###soif===482###eoif===490###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImage(Image&,unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8)") && (i < size)); ({AKA_mark("lis===447###sois===18026###eois===18029###lif===10###soif===492###eoif===495###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImage(Image&,unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8)");i++;})) {
        AKA_BLOCK_LOOP_17998++;
        if (AKA_BLOCK_LOOP_17998 > 1000) {
            //break;
        }
    AKA_mark("lis===448###sois===18038###eois===18062###lif===11###soif===504###eoif===528###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImage(Image&,unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8)");image.data[i] = value++;
  }
}

//Generate a 16-bit test image with minimal size that requires at minimum the given color type (bit depth, grayscaleness, ...)
//If key is true, makes it such that exactly one color is transparent, so it can use a key. If false, adds a translucent color depending on
//whether it's an alpha color type or not.
/** Instrumented function generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool) */
void generateTestImageRequiringColorType16(Image& image, LodePNGColorType colorType, unsigned bitDepth, bool key) /* << Aka begin of function void generateTestImageRequiringColorType16(Image& image, LodePNGColorType colorType, unsigned bitDepth, bool key) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.generateTestImageRequiringColorType16.18392.stub"

  AKA_mark("lis===456###sois===18506###eois===18534###lif===1###soif===119###eoif===147###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.colorType = colorType;
  AKA_mark("lis===457###sois===18538###eois===18564###lif===2###soif===151###eoif===177###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.bitDepth = bitDepth;
  AKA_mark("lis===458###sois===18568###eois===18583###lif===3###soif===181###eoif===196###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");unsigned w = 1;
  AKA_mark("lis===459###sois===18587###eois===18602###lif===4###soif===200###eoif===215###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");unsigned h = 1;

  AKA_mark("lis===461###sois===18608###eois===18673###lif===6###soif===221###eoif===286###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");bool gray = colorType == LCT_GREY || colorType == LCT_GREY_ALPHA;
  AKA_mark("lis===462###sois===18677###eois===18743###lif===7###soif===290###eoif===356###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");bool alpha = colorType == LCT_RGBA || colorType == LCT_GREY_ALPHA;

  if(AKA_mark("lis===464###sois===18752###eois===18776###lif===9###soif===365###eoif===389###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)") && (AKA_mark("lis===464###sois===18752###eois===18776###lif===9###soif===365###eoif===389###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)") && (colorType == LCT_PALETTE))) {
    AKA_mark("lis===465###sois===18785###eois===18804###lif===10###soif===398###eoif===417###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");w = 1u << bitDepth;
    AKA_mark("lis===466###sois===18810###eois===18818###lif===11###soif===423###eoif===431###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");h = 256; // ensure it'll really choose palette, not omit it due to small image size
    AKA_mark("lis===467###sois===18899###eois===18928###lif===12###soif===512###eoif===541###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data.resize(w * h * 8);
    int AKA_BLOCK_LOOP_18934 = 0;
    AKA_mark("lis===468###sois===18938###eois===18951###lif===13###soif===551###eoif===564###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");
for(size_t y = 0; AKA_mark("lis===468###sois===18952###eois===18957###lif===13###soif===565###eoif===570###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)") && (AKA_mark("lis===468###sois===18952###eois===18957###lif===13###soif===565###eoif===570###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)") && (y < h)); ({AKA_mark("lis===468###sois===18959###eois===18962###lif===13###soif===572###eoif===575###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");y++;})) {
        AKA_BLOCK_LOOP_18934++;
        if (AKA_BLOCK_LOOP_18934 > 1000) {
            //break;
        }
      int AKA_BLOCK_LOOP_18973 = 0;
    AKA_mark("lis===469###sois===18977###eois===18990###lif===14###soif===590###eoif===603###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");
for(size_t x = 0; AKA_mark("lis===469###sois===18991###eois===18996###lif===14###soif===604###eoif===609###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)") && (AKA_mark("lis===469###sois===18991###eois===18996###lif===14###soif===604###eoif===609###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)") && (x < w)); ({AKA_mark("lis===469###sois===18998###eois===19001###lif===14###soif===611###eoif===614###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");x++;})) {
        AKA_BLOCK_LOOP_18973++;
        if (AKA_BLOCK_LOOP_18973 > 1000) {
            //break;
        }
        AKA_mark("lis===470###sois===19014###eois===19043###lif===15###soif===627###eoif===656###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");size_t i = y * w * 8 + x * 8;
        AKA_mark("lis===471###sois===19053###eois===19095###lif===16###soif===666###eoif===708###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[i + 0] = image.data[i + 1] = y;
        AKA_mark("lis===472###sois===19105###eois===19149###lif===17###soif===718###eoif===762###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[i + 2] = image.data[i + 3] = 255;
        AKA_mark("lis===473###sois===19159###eois===19201###lif===18###soif===772###eoif===814###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[i + 4] = image.data[i + 5] = 0;
        AKA_mark("lis===474###sois===19211###eois===19277###lif===19###soif===824###eoif===890###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[i + 6] = image.data[i + 7] = (key && y == 0) ? 0 : 255;
      }
    }
  } else {
if(AKA_mark("lis===477###sois===19307###eois===19321###lif===22###soif===920###eoif===934###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)") && (AKA_mark("lis===477###sois===19307###eois===19321###lif===22###soif===920###eoif===934###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)") && (bitDepth == 16))) {
    // one color suffices for this model. But add one more to support key.
    AKA_mark("lis===479###sois===19406###eois===19412###lif===24###soif===1019###eoif===1025###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");w = 2;
    AKA_mark("lis===480###sois===19418###eois===19447###lif===25###soif===1031###eoif===1060###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data.resize(w * h * 8);
    AKA_mark("lis===481###sois===19453###eois===19472###lif===26###soif===1066###eoif===1085###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[0] = 10; AKA_mark("lis===481###sois===19473###eois===19492###lif===26###soif===1086###eoif===1105###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[1] = 20;
    AKA_mark("lis===482###sois===19498###eois===19517###lif===27###soif===1111###eoif===1130###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[2] = 10; AKA_mark("lis===482###sois===19518###eois===19537###lif===27###soif===1131###eoif===1150###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[3] = 20;
    AKA_mark("lis===483###sois===19543###eois===19575###lif===28###soif===1156###eoif===1188###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[4] = gray ? 10 : 110; AKA_mark("lis===483###sois===19576###eois===19608###lif===28###soif===1189###eoif===1221###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[5] = gray ? 20 : 120;
    AKA_mark("lis===484###sois===19614###eois===19648###lif===29###soif===1227###eoif===1261###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[6] = alpha ? 128 : 255; AKA_mark("lis===484###sois===19649###eois===19682###lif===29###soif===1262###eoif===1295###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[7] = alpha ? 20 : 255;

    AKA_mark("lis===486###sois===19690###eois===19709###lif===31###soif===1303###eoif===1322###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[8] = 40; AKA_mark("lis===486###sois===19710###eois===19729###lif===31###soif===1323###eoif===1342###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[9] = 50;
    AKA_mark("lis===487###sois===19735###eois===19755###lif===32###soif===1348###eoif===1368###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[10] = 40; AKA_mark("lis===487###sois===19756###eois===19776###lif===32###soif===1369###eoif===1389###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[11] = 50;
    AKA_mark("lis===488###sois===19782###eois===19815###lif===33###soif===1395###eoif===1428###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[12] = gray ? 40 : 140; AKA_mark("lis===488###sois===19816###eois===19849###lif===33###soif===1429###eoif===1462###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[13] = gray ? 50 : 150;
    AKA_mark("lis===489###sois===19855###eois===19886###lif===34###soif===1468###eoif===1499###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[14] = key ? 0 : 255; AKA_mark("lis===489###sois===19887###eois===19918###lif===34###soif===1500###eoif===1531###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[15] = key ? 0 : 255;
  } else {
if(AKA_mark("lis===490###sois===19932###eois===19936###lif===35###soif===1545###eoif===1549###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)") && (AKA_mark("lis===490###sois===19932###eois===19936###lif===35###soif===1545###eoif===1549###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)") && (gray))) {
    AKA_mark("lis===491###sois===19945###eois===19951###lif===36###soif===1558###eoif===1564###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");w = 2;
    AKA_mark("lis===492###sois===19957###eois===20001###lif===37###soif===1570###eoif===1614###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");unsigned v = 255u / ((1u << bitDepth) - 1u); // value that forces at least this bitdepth
    AKA_mark("lis===493###sois===20051###eois===20080###lif===38###soif===1664###eoif===1693###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data.resize(w * h * 8);
    AKA_mark("lis===494###sois===20086###eois===20104###lif===39###soif===1699###eoif===1717###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[0] = v; AKA_mark("lis===494###sois===20105###eois===20123###lif===39###soif===1718###eoif===1736###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[1] = v;
    AKA_mark("lis===495###sois===20129###eois===20147###lif===40###soif===1742###eoif===1760###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[2] = v; AKA_mark("lis===495###sois===20148###eois===20166###lif===40###soif===1761###eoif===1779###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[3] = v;
    AKA_mark("lis===496###sois===20172###eois===20190###lif===41###soif===1785###eoif===1803###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[4] = v; AKA_mark("lis===496###sois===20191###eois===20209###lif===41###soif===1804###eoif===1822###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[5] = v;
    AKA_mark("lis===497###sois===20215###eois===20247###lif===42###soif===1828###eoif===1860###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[6] = alpha ? v : 255; AKA_mark("lis===497###sois===20248###eois===20280###lif===42###soif===1861###eoif===1893###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[7] = alpha ? v : 255;

    AKA_mark("lis===499###sois===20288###eois===20322###lif===44###soif===1901###eoif===1935###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[8] = image.data[9] = 0;
    AKA_mark("lis===500###sois===20328###eois===20364###lif===45###soif===1941###eoif===1977###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[10] = image.data[11] = 0;
    AKA_mark("lis===501###sois===20370###eois===20406###lif===46###soif===1983###eoif===2019###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[12] = image.data[13] = 0;
    AKA_mark("lis===502###sois===20412###eois===20460###lif===47###soif===2025###eoif===2073###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[14] = image.data[15] = key ? 0 : 255;
  } else {
    // now it's RGB or RGBA with bitdepth 8
    AKA_mark("lis===505###sois===20523###eois===20531###lif===50###soif===2136###eoif===2144###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");w = 257; // must have at least more than 256 colors so it won't use palette
    AKA_mark("lis===506###sois===20604###eois===20633###lif===51###soif===2217###eoif===2246###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data.resize(w * h * 8);
    int AKA_BLOCK_LOOP_20639 = 0;
    AKA_mark("lis===507###sois===20643###eois===20656###lif===52###soif===2256###eoif===2269###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");
for(size_t y = 0; AKA_mark("lis===507###sois===20657###eois===20662###lif===52###soif===2270###eoif===2275###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)") && (AKA_mark("lis===507###sois===20657###eois===20662###lif===52###soif===2270###eoif===2275###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)") && (y < h)); ({AKA_mark("lis===507###sois===20664###eois===20667###lif===52###soif===2277###eoif===2280###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");y++;})) {
        AKA_BLOCK_LOOP_20639++;
        if (AKA_BLOCK_LOOP_20639 > 1000) {
            //break;
        }
      int AKA_BLOCK_LOOP_20678 = 0;
    AKA_mark("lis===508###sois===20682###eois===20695###lif===53###soif===2295###eoif===2308###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");
for(size_t x = 0; AKA_mark("lis===508###sois===20696###eois===20701###lif===53###soif===2309###eoif===2314###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)") && (AKA_mark("lis===508###sois===20696###eois===20701###lif===53###soif===2309###eoif===2314###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)") && (x < w)); ({AKA_mark("lis===508###sois===20703###eois===20706###lif===53###soif===2316###eoif===2319###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");x++;})) {
        AKA_BLOCK_LOOP_20678++;
        if (AKA_BLOCK_LOOP_20678 > 1000) {
            //break;
        }
        AKA_mark("lis===509###sois===20719###eois===20748###lif===54###soif===2332###eoif===2361###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");size_t i = y * w * 8 + x * 8;
        AKA_mark("lis===510###sois===20758###eois===20804###lif===55###soif===2371###eoif===2417###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[i + 0] = image.data[i + 1] = i / 2;
        AKA_mark("lis===511###sois===20814###eois===20860###lif===56###soif===2427###eoif===2473###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[i + 2] = image.data[i + 3] = i / 3;
        AKA_mark("lis===512###sois===20870###eois===20916###lif===57###soif===2483###eoif===2529###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[i + 4] = image.data[i + 5] = i / 5;
        AKA_mark("lis===513###sois===20926###eois===21006###lif===58###soif===2539###eoif===2619###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.data[i + 6] = image.data[i + 7] = (key && y == 0) ? 0 : (alpha ? i : 255);
      }
    }
  }
}

}


  AKA_mark("lis===518###sois===21033###eois===21049###lif===63###soif===2646###eoif===2662###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.width = w;
  AKA_mark("lis===519###sois===21053###eois===21070###lif===64###soif===2666###eoif===2683###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType16(Image&,LodePNGColorType,unsigned,bool)");image.height = h;
}

//Generate a 8-bit test image with minimal size that requires at minimum the given color type (bit depth, grayscaleness, ...). bitDepth max 8 here.
//If key is true, makes it such that exactly one color is transparent, so it can use a key. If false, adds a translucent color depending on
//whether it's an alpha color type or not.
/** Instrumented function generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool) */
void generateTestImageRequiringColorType8(Image& image, LodePNGColorType colorType, unsigned bitDepth, bool key) /* << Aka begin of function void generateTestImageRequiringColorType8(Image& image, LodePNGColorType colorType, unsigned bitDepth, bool key) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.generateTestImageRequiringColorType8.21416.stub"

  AKA_mark("lis===526###sois===21529###eois===21557###lif===1###soif===118###eoif===146###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.colorType = colorType;
  AKA_mark("lis===527###sois===21561###eois===21587###lif===2###soif===150###eoif===176###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.bitDepth = bitDepth;
  AKA_mark("lis===528###sois===21591###eois===21606###lif===3###soif===180###eoif===195###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");unsigned w = 1;
  AKA_mark("lis===529###sois===21610###eois===21625###lif===4###soif===199###eoif===214###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");unsigned h = 1;

  AKA_mark("lis===531###sois===21631###eois===21696###lif===6###soif===220###eoif===285###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");bool gray = colorType == LCT_GREY || colorType == LCT_GREY_ALPHA;
  AKA_mark("lis===532###sois===21700###eois===21766###lif===7###soif===289###eoif===355###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");bool alpha = colorType == LCT_RGBA || colorType == LCT_GREY_ALPHA;

  if(AKA_mark("lis===534###sois===21775###eois===21799###lif===9###soif===364###eoif===388###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)") && (AKA_mark("lis===534###sois===21775###eois===21799###lif===9###soif===364###eoif===388###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)") && (colorType == LCT_PALETTE))) {
    AKA_mark("lis===535###sois===21808###eois===21827###lif===10###soif===397###eoif===416###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");w = 1u << bitDepth;
    AKA_mark("lis===536###sois===21833###eois===21841###lif===11###soif===422###eoif===430###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");h = 256; // ensure it'll really choose palette, not omit it due to small image size
    AKA_mark("lis===537###sois===21922###eois===21951###lif===12###soif===511###eoif===540###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.data.resize(w * h * 4);
    int AKA_BLOCK_LOOP_21957 = 0;
    AKA_mark("lis===538###sois===21961###eois===21974###lif===13###soif===550###eoif===563###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");
for(size_t y = 0; AKA_mark("lis===538###sois===21975###eois===21980###lif===13###soif===564###eoif===569###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)") && (AKA_mark("lis===538###sois===21975###eois===21980###lif===13###soif===564###eoif===569###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)") && (y < h)); ({AKA_mark("lis===538###sois===21982###eois===21985###lif===13###soif===571###eoif===574###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");y++;})) {
        AKA_BLOCK_LOOP_21957++;
        if (AKA_BLOCK_LOOP_21957 > 1000) {
            //break;
        }
      int AKA_BLOCK_LOOP_21996 = 0;
    AKA_mark("lis===539###sois===22000###eois===22013###lif===14###soif===589###eoif===602###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");
for(size_t x = 0; AKA_mark("lis===539###sois===22014###eois===22019###lif===14###soif===603###eoif===608###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)") && (AKA_mark("lis===539###sois===22014###eois===22019###lif===14###soif===603###eoif===608###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)") && (x < w)); ({AKA_mark("lis===539###sois===22021###eois===22024###lif===14###soif===610###eoif===613###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");x++;})) {
        AKA_BLOCK_LOOP_21996++;
        if (AKA_BLOCK_LOOP_21996 > 1000) {
            //break;
        }
        AKA_mark("lis===540###sois===22037###eois===22066###lif===15###soif===626###eoif===655###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");size_t i = y * w * 4 + x * 4;
        AKA_mark("lis===541###sois===22076###eois===22098###lif===16###soif===665###eoif===687###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.data[i + 0] = x;
        AKA_mark("lis===542###sois===22108###eois===22132###lif===17###soif===697###eoif===721###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.data[i + 1] = 255;
        AKA_mark("lis===543###sois===22142###eois===22164###lif===18###soif===731###eoif===753###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.data[i + 2] = 0;
        AKA_mark("lis===544###sois===22174###eois===22220###lif===19###soif===763###eoif===809###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.data[i + 3] = (key && x == 0) ? 0 : 255;
      }
    }
  } else {
if(AKA_mark("lis===547###sois===22250###eois===22254###lif===22###soif===839###eoif===843###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)") && (AKA_mark("lis===547###sois===22250###eois===22254###lif===22###soif===839###eoif===843###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)") && (gray))) {
    AKA_mark("lis===548###sois===22263###eois===22269###lif===23###soif===852###eoif===858###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");w = 2;
    AKA_mark("lis===549###sois===22275###eois===22319###lif===24###soif===864###eoif===908###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");unsigned v = 255u / ((1u << bitDepth) - 1u); // value that forces at least this bitdepth
    AKA_mark("lis===550###sois===22369###eois===22398###lif===25###soif===958###eoif===987###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.data.resize(w * h * 4);
    AKA_mark("lis===551###sois===22404###eois===22422###lif===26###soif===993###eoif===1011###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.data[0] = v;
    AKA_mark("lis===552###sois===22428###eois===22446###lif===27###soif===1017###eoif===1035###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.data[1] = v;
    AKA_mark("lis===553###sois===22452###eois===22470###lif===28###soif===1041###eoif===1059###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.data[2] = v;
    AKA_mark("lis===554###sois===22476###eois===22508###lif===29###soif===1065###eoif===1097###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.data[3] = alpha ? v : 255;

    AKA_mark("lis===556###sois===22516###eois===22534###lif===31###soif===1105###eoif===1123###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.data[4] = 0;
    AKA_mark("lis===557###sois===22540###eois===22558###lif===32###soif===1129###eoif===1147###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.data[5] = 0;
    AKA_mark("lis===558###sois===22564###eois===22582###lif===33###soif===1153###eoif===1171###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.data[6] = 0;
    AKA_mark("lis===559###sois===22588###eois===22618###lif===34###soif===1177###eoif===1207###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.data[7] = key ? 0 : 255;
  } else {
    // now it's RGB or RGBA with bitdepth 8
    AKA_mark("lis===562###sois===22681###eois===22689###lif===37###soif===1270###eoif===1278###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");w = 257; // must have at least more than 256 colors so it won't use palette
    AKA_mark("lis===563###sois===22762###eois===22791###lif===38###soif===1351###eoif===1380###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.data.resize(w * h * 4);
    int AKA_BLOCK_LOOP_22797 = 0;
    AKA_mark("lis===564###sois===22801###eois===22814###lif===39###soif===1390###eoif===1403###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");
for(size_t y = 0; AKA_mark("lis===564###sois===22815###eois===22820###lif===39###soif===1404###eoif===1409###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)") && (AKA_mark("lis===564###sois===22815###eois===22820###lif===39###soif===1404###eoif===1409###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)") && (y < h)); ({AKA_mark("lis===564###sois===22822###eois===22825###lif===39###soif===1411###eoif===1414###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");y++;})) {
        AKA_BLOCK_LOOP_22797++;
        if (AKA_BLOCK_LOOP_22797 > 1000) {
            //break;
        }
      int AKA_BLOCK_LOOP_22836 = 0;
    AKA_mark("lis===565###sois===22840###eois===22853###lif===40###soif===1429###eoif===1442###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");
for(size_t x = 0; AKA_mark("lis===565###sois===22854###eois===22859###lif===40###soif===1443###eoif===1448###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)") && (AKA_mark("lis===565###sois===22854###eois===22859###lif===40###soif===1443###eoif===1448###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)") && (x < w)); ({AKA_mark("lis===565###sois===22861###eois===22864###lif===40###soif===1450###eoif===1453###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");x++;})) {
        AKA_BLOCK_LOOP_22836++;
        if (AKA_BLOCK_LOOP_22836 > 1000) {
            //break;
        }
        AKA_mark("lis===566###sois===22877###eois===22906###lif===41###soif===1466###eoif===1495###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");size_t i = y * w * 4 + x * 4;
        AKA_mark("lis===567###sois===22916###eois===22942###lif===42###soif===1505###eoif===1531###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.data[i + 0] = i / 2;
        AKA_mark("lis===568###sois===22952###eois===22978###lif===43###soif===1541###eoif===1567###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.data[i + 1] = i / 3;
        AKA_mark("lis===569###sois===22988###eois===23014###lif===44###soif===1577###eoif===1603###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.data[i + 2] = i / 5;
        AKA_mark("lis===570###sois===23024###eois===23084###lif===45###soif===1613###eoif===1673###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.data[i + 3] = (key && x == 0) ? 0 : (alpha ? i : 255);
      }
    }
  }
}


  AKA_mark("lis===575###sois===23111###eois===23127###lif===50###soif===1700###eoif===1716###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.width = w;
  AKA_mark("lis===576###sois===23131###eois===23148###lif===51###soif===1720###eoif===1737###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\generateTestImageRequiringColorType8(Image&,LodePNGColorType,unsigned,bool)");image.height = h;
}

//Check that the decoded PNG pixels are the same as the pixels in the image
/** Instrumented function assertPixels(Image&,unsigned char const*,std::string const&) */
void assertPixels(Image& image, const unsigned char* decoded, const std::string& message) /* << Aka begin of function void assertPixels(Image& image, const unsigned char* decoded, const std::string& message) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.assertPixels.23237.stub"

  int AKA_BLOCK_LOOP_23327 = 0;
    AKA_mark("lis===581###sois===23331###eois===23344###lif===1###soif===99###eoif===112###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)");
for(size_t i = 0; AKA_mark("lis===581###sois===23345###eois===23366###lif===1###soif===113###eoif===134###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)") && (AKA_mark("lis===581###sois===23345###eois===23366###lif===1###soif===113###eoif===134###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)") && (i < image.data.size())); ({AKA_mark("lis===581###sois===23368###eois===23371###lif===1###soif===136###eoif===139###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)");i++;})) {
        AKA_BLOCK_LOOP_23327++;
        if (AKA_BLOCK_LOOP_23327 > 1000) {
            //break;
        }
    AKA_mark("lis===582###sois===23380###eois===23414###lif===2###soif===148###eoif===182###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)");int byte_expected = image.data[i];
    AKA_mark("lis===583###sois===23420###eois===23449###lif===3###soif===188###eoif===217###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)");int byte_actual = decoded[i];

    //last byte is special due to possible random padding bits which need not to be equal
    if(AKA_mark("lis===586###sois===23551###eois===23577###lif===6###soif===319###eoif===345###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)") && (AKA_mark("lis===586###sois===23551###eois===23577###lif===6###soif===319###eoif===345###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)") && (i == image.data.size() - 1))) {
      AKA_mark("lis===587###sois===23588###eois===23688###lif===7###soif===356###eoif===456###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)");size_t numbits = getNumColorChannels(image.colorType) * image.bitDepth * image.width * image.height;
      AKA_mark("lis===588###sois===23696###eois===23750###lif===8###soif===464###eoif===518###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)");size_t padding = 8u - (numbits - 8u * (numbits / 8u));
      if(AKA_mark("lis===589###sois===23761###eois===23774###lif===9###soif===529###eoif===542###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)") && (AKA_mark("lis===589###sois===23761###eois===23774###lif===9###soif===529###eoif===542###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)") && (padding != 8u))) {
        //set all padding bits of both to 0
        int AKA_BLOCK_LOOP_23832 = 0;
    AKA_mark("lis===591###sois===23836###eois===23849###lif===11###soif===604###eoif===617###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)");
for(size_t j = 0; AKA_mark("lis===591###sois===23850###eois===23861###lif===11###soif===618###eoif===629###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)") && (AKA_mark("lis===591###sois===23850###eois===23861###lif===11###soif===618###eoif===629###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)") && (j < padding)); ({AKA_mark("lis===591###sois===23863###eois===23866###lif===11###soif===631###eoif===634###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)");j++;})) {
        AKA_BLOCK_LOOP_23832++;
        if (AKA_BLOCK_LOOP_23832 > 1000) {
            //break;
        }
          AKA_mark("lis===592###sois===23881###eois===23933###lif===12###soif===649###eoif===701###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)");byte_expected = (byte_expected & (~(1 << j))) % 256;
          AKA_mark("lis===593###sois===23945###eois===23993###lif===13###soif===713###eoif===761###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)");byte_actual = (byte_actual & (~(1 << j))) % 256;
        }
      }
else {
AKA_mark("lis===-589-###sois===-23761-###eois===-2376113-###lif===-9-###soif===-###eoif===-542-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)");
}
    }
else {
AKA_mark("lis===-586-###sois===-23551-###eois===-2355126-###lif===-6-###soif===-###eoif===-345-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)");
}

    AKA_mark("lis===598###sois===24028###eois===24098###lif===18###soif===796###eoif===866###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertPixels(Image&,unsigned char const*,std::string const&)");assertEquals(byte_expected, byte_actual, message + " " + valtostr(i));
  }
}

//Test LodePNG encoding and decoding the encoded result, using the C interface
/** Instrumented function doCodecTestC(Image&) */
void doCodecTestC(Image& image) /* << Aka begin of function void doCodecTestC(Image& image) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.doCodecTestC.24195.stub"

  AKA_mark("lis===604###sois===24227###eois===24254###lif===1###soif===37###eoif===64###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)");unsigned char* encoded = 0;
  AKA_mark("lis===605###sois===24258###eois===24282###lif===2###soif===68###eoif===92###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)");size_t encoded_size = 0;
  AKA_mark("lis===606###sois===24286###eois===24313###lif===3###soif===96###eoif===123###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)");unsigned char* decoded = 0;
  AKA_mark("lis===607###sois===24317###eois===24336###lif===4###soif===127###eoif===146###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)");unsigned decoded_w;
  AKA_mark("lis===608###sois===24340###eois===24359###lif===5###soif===150###eoif===169###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)");unsigned decoded_h;

  AKA_mark("lis===610###sois===24365###eois===24590###lif===7###soif===175###eoif===400###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)");struct OnExitScope {
    unsigned char** a;
    unsigned char** b;
    OnExitScope(unsigned char** ca, unsigned char** cb) : a(ca), b(cb) {}
    ~OnExitScope() { free(*a); free(*b); }
  } onExitScope(&encoded, &decoded);

  AKA_mark("lis===617###sois===24596###eois===24786###lif===14###soif===406###eoif===596###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)");unsigned error_enc = lodepng_encode_memory(&encoded, &encoded_size, &image.data[0],
                                             image.width, image.height, image.colorType, image.bitDepth);

  if(AKA_mark("lis===620###sois===24795###eois===24809###lif===17###soif===605###eoif===619###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)") && (AKA_mark("lis===620###sois===24795###eois===24809###lif===17###soif===605###eoif===619###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)") && (error_enc != 0))) {
AKA_mark("lis===620###sois===24811###eois===24880###lif===17###soif===621###eoif===690###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)");std::cout << "Error: " << lodepng_error_text(error_enc) << std::endl;
}

else {
AKA_mark("lis===-620-###sois===-24795-###eois===-2479514-###lif===-17-###soif===-###eoif===-619-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)");
}
  AKA_mark("lis===621###sois===24884###eois===24938###lif===18###soif===694###eoif===748###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)");ASSERT_NO_PNG_ERROR_MSG(error_enc, "encoder error C");

  //if the image is large enough, compressing it should result in smaller size
  if(AKA_mark("lis===624###sois===25027###eois===25050###lif===21###soif===837###eoif===860###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)") && (AKA_mark("lis===624###sois===25027###eois===25050###lif===21###soif===837###eoif===860###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)") && (image.data.size() > 512))) {
AKA_mark("lis===624###sois===25052###eois===25116###lif===21###soif===862###eoif===926###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)");assertTrue(encoded_size < image.data.size(), "compressed size");
}

else {
AKA_mark("lis===-624-###sois===-25027-###eois===-2502723-###lif===-21-###soif===-###eoif===-860-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)");
}

  AKA_mark("lis===626###sois===25122###eois===25301###lif===23###soif===932###eoif===1111###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)");unsigned error_dec = lodepng_decode_memory(&decoded, &decoded_w, &decoded_h,
                                             encoded, encoded_size, image.colorType, image.bitDepth);

  if(AKA_mark("lis===629###sois===25310###eois===25324###lif===26###soif===1120###eoif===1134###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)") && (AKA_mark("lis===629###sois===25310###eois===25324###lif===26###soif===1120###eoif===1134###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)") && (error_dec != 0))) {
AKA_mark("lis===629###sois===25326###eois===25395###lif===26###soif===1136###eoif===1205###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)");std::cout << "Error: " << lodepng_error_text(error_dec) << std::endl;
}

else {
AKA_mark("lis===-629-###sois===-25310-###eois===-2531014-###lif===-26-###soif===-###eoif===-1134-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)");
}
  AKA_mark("lis===630###sois===25399###eois===25453###lif===27###soif===1209###eoif===1263###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)");ASSERT_NO_PNG_ERROR_MSG(error_dec, "decoder error C");

  AKA_mark("lis===632###sois===25459###eois===25496###lif===29###soif===1269###eoif===1306###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)");ASSERT_EQUALS(image.width, decoded_w);
  AKA_mark("lis===633###sois===25501###eois===25539###lif===30###soif===1311###eoif===1349###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)");ASSERT_EQUALS(image.height, decoded_h);
  AKA_mark("lis===634###sois===25544###eois===25585###lif===31###soif===1354###eoif===1395###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestC(Image&)");assertPixels(image, decoded, "Pixels C");
}

//Test LodePNG encoding and decoding the encoded result, using the C++ interface
/** Instrumented function doCodecTestCPP(Image&) */
void doCodecTestCPP(Image& image) /* << Aka begin of function void doCodecTestCPP(Image& image) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestCPP(Image&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.doCodecTestCPP.25679.stub"

  AKA_mark("lis===639###sois===25713###eois===25748###lif===1###soif===39###eoif===74###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestCPP(Image&)");std::vector<unsigned char> encoded;
  AKA_mark("lis===640###sois===25752###eois===25787###lif===2###soif===78###eoif===113###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestCPP(Image&)");std::vector<unsigned char> decoded;
  AKA_mark("lis===641###sois===25791###eois===25810###lif===3###soif===117###eoif===136###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestCPP(Image&)");unsigned decoded_w;
  AKA_mark("lis===642###sois===25814###eois===25833###lif===4###soif===140###eoif===159###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestCPP(Image&)");unsigned decoded_h;

  AKA_mark("lis===644###sois===25839###eois===25997###lif===6###soif===165###eoif===323###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestCPP(Image&)");unsigned error_enc = lodepng::encode(encoded, image.data, image.width, image.height,
                                       image.colorType, image.bitDepth);

  AKA_mark("lis===647###sois===26003###eois===26059###lif===9###soif===329###eoif===385###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestCPP(Image&)");ASSERT_NO_PNG_ERROR_MSG(error_enc, "encoder error C++");

  //if the image is large enough, compressing it should result in smaller size
  if(AKA_mark("lis===650###sois===26148###eois===26171###lif===12###soif===474###eoif===497###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestCPP(Image&)") && (AKA_mark("lis===650###sois===26148###eois===26171###lif===12###soif===474###eoif===497###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestCPP(Image&)") && (image.data.size() > 512))) {
AKA_mark("lis===650###sois===26173###eois===26239###lif===12###soif===499###eoif===565###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestCPP(Image&)");assertTrue(encoded.size() < image.data.size(), "compressed size");
}

else {
AKA_mark("lis===-650-###sois===-26148-###eois===-2614823-###lif===-12-###soif===-###eoif===-497-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestCPP(Image&)");
}

  AKA_mark("lis===652###sois===26245###eois===26355###lif===14###soif===571###eoif===681###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestCPP(Image&)");unsigned error_dec = lodepng::decode(decoded, decoded_w, decoded_h, encoded, image.colorType, image.bitDepth);

  AKA_mark("lis===654###sois===26361###eois===26417###lif===16###soif===687###eoif===743###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestCPP(Image&)");ASSERT_NO_PNG_ERROR_MSG(error_dec, "decoder error C++");

  AKA_mark("lis===656###sois===26423###eois===26460###lif===18###soif===749###eoif===786###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestCPP(Image&)");ASSERT_EQUALS(image.width, decoded_w);
  AKA_mark("lis===657###sois===26465###eois===26503###lif===19###soif===791###eoif===829###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestCPP(Image&)");ASSERT_EQUALS(image.height, decoded_h);
  AKA_mark("lis===658###sois===26508###eois===26556###lif===20###soif===834###eoif===882###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestCPP(Image&)");ASSERT_EQUALS(image.data.size(), decoded.size());
  AKA_mark("lis===659###sois===26561###eois===26608###lif===21###soif===887###eoif===934###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestCPP(Image&)");assertPixels(image, &decoded[0], "Pixels C++");
}


/** Instrumented function doCodecTestWithEncState(Image&,lodepng::State&) */
void doCodecTestWithEncState(Image& image, lodepng::State& state) /* << Aka begin of function void doCodecTestWithEncState(Image& image, lodepng::State& state) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestWithEncState(Image&,lodepng::State&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.doCodecTestWithEncState.26622.stub"

  AKA_mark("lis===664###sois===26688###eois===26723###lif===1###soif===71###eoif===106###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestWithEncState(Image&,lodepng::State&)");std::vector<unsigned char> encoded;
  AKA_mark("lis===665###sois===26727###eois===26762###lif===2###soif===110###eoif===145###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestWithEncState(Image&,lodepng::State&)");std::vector<unsigned char> decoded;
  AKA_mark("lis===666###sois===26766###eois===26785###lif===3###soif===149###eoif===168###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestWithEncState(Image&,lodepng::State&)");unsigned decoded_w;
  AKA_mark("lis===667###sois===26789###eois===26808###lif===4###soif===172###eoif===191###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestWithEncState(Image&,lodepng::State&)");unsigned decoded_h;
  AKA_mark("lis===668###sois===26812###eois===26855###lif===5###soif===195###eoif===238###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestWithEncState(Image&,lodepng::State&)");state.info_raw.colortype = image.colorType;
  AKA_mark("lis===669###sois===26859###eois===26900###lif===6###soif===242###eoif===283###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestWithEncState(Image&,lodepng::State&)");state.info_raw.bitdepth = image.bitDepth;


  AKA_mark("lis===672###sois===26908###eois===27000###lif===9###soif===291###eoif===383###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestWithEncState(Image&,lodepng::State&)");unsigned error_enc = lodepng::encode(encoded, image.data, image.width, image.height, state);
  AKA_mark("lis===673###sois===27004###eois===27069###lif===10###soif===387###eoif===452###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestWithEncState(Image&,lodepng::State&)");ASSERT_NO_PNG_ERROR_MSG(error_enc, "encoder error uncompressed");

  AKA_mark("lis===675###sois===27075###eois===27185###lif===12###soif===458###eoif===568###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestWithEncState(Image&,lodepng::State&)");unsigned error_dec = lodepng::decode(decoded, decoded_w, decoded_h, encoded, image.colorType, image.bitDepth);

  AKA_mark("lis===677###sois===27191###eois===27256###lif===14###soif===574###eoif===639###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestWithEncState(Image&,lodepng::State&)");ASSERT_NO_PNG_ERROR_MSG(error_dec, "decoder error uncompressed");

  AKA_mark("lis===679###sois===27262###eois===27299###lif===16###soif===645###eoif===682###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestWithEncState(Image&,lodepng::State&)");ASSERT_EQUALS(image.width, decoded_w);
  AKA_mark("lis===680###sois===27304###eois===27342###lif===17###soif===687###eoif===725###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestWithEncState(Image&,lodepng::State&)");ASSERT_EQUALS(image.height, decoded_h);
  AKA_mark("lis===681###sois===27347###eois===27395###lif===18###soif===730###eoif===778###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestWithEncState(Image&,lodepng::State&)");ASSERT_EQUALS(image.data.size(), decoded.size());
  AKA_mark("lis===682###sois===27400###eois===27456###lif===19###soif===783###eoif===839###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestWithEncState(Image&,lodepng::State&)");assertPixels(image, &decoded[0], "Pixels uncompressed");
}


//Test LodePNG encoding and decoding the encoded result, using the C++ interface
/** Instrumented function doCodecTestUncompressed(Image&) */
void doCodecTestUncompressed(Image& image) /* << Aka begin of function void doCodecTestUncompressed(Image& image) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestUncompressed(Image&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.doCodecTestUncompressed.27552.stub"

  AKA_mark("lis===688###sois===27595###eois===27616###lif===1###soif===48###eoif===69###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestUncompressed(Image&)");lodepng::State state;
  AKA_mark("lis===689###sois===27620###eois===27657###lif===2###soif===73###eoif===110###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestUncompressed(Image&)");state.encoder.zlibsettings.btype = 0;
  AKA_mark("lis===690###sois===27661###eois===27699###lif===3###soif===114###eoif===152###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestUncompressed(Image&)");doCodecTestWithEncState(image, state);
}

/** Instrumented function doCodecTestNoLZ77(Image&) */
void doCodecTestNoLZ77(Image& image) /* << Aka begin of function void doCodecTestNoLZ77(Image& image) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestNoLZ77(Image&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.doCodecTestNoLZ77.27711.stub"

  AKA_mark("lis===694###sois===27748###eois===27769###lif===1###soif===42###eoif===63###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestNoLZ77(Image&)");lodepng::State state;
  AKA_mark("lis===695###sois===27773###eois===27813###lif===2###soif===67###eoif===107###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestNoLZ77(Image&)");state.encoder.zlibsettings.use_lz77 = 0;
  AKA_mark("lis===696###sois===27817###eois===27855###lif===3###soif===111###eoif===149###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestNoLZ77(Image&)");doCodecTestWithEncState(image, state);
}

/** Instrumented function testGetFilterTypes() */
void testGetFilterTypes() /* << Aka begin of function void testGetFilterTypes() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testGetFilterTypes()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testGetFilterTypes.27867.stub"

  AKA_mark("lis===700###sois===27893###eois===27940###lif===1###soif===31###eoif===78###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testGetFilterTypes()");std::cout << "testGetFilterTypes" << std::endl;
  // Test that getFilterTypes works on the special case of 1-pixel wide interlaced image
  AKA_mark("lis===702###sois===28034###eois===28173###lif===3###soif===172###eoif===311###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testGetFilterTypes()");std::string png64 = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAAHCAIAAAExKYBVAAAAHUlEQVR4ASXHAQoAAAjCwPX/R9tK4ZBN4EHKcPcLXCgGAQa0TV8AAAAASUVORK5CYII=";
  AKA_mark("lis===703###sois===28177###eois===28208###lif===4###soif===315###eoif===346###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testGetFilterTypes()");std::vector<unsigned char> png;
  AKA_mark("lis===704###sois===28212###eois===28235###lif===5###soif===350###eoif===373###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testGetFilterTypes()");fromBase64(png, png64);
  AKA_mark("lis===705###sois===28239###eois===28272###lif===6###soif===377###eoif===410###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testGetFilterTypes()");std::vector<unsigned char> types;
  AKA_mark("lis===706###sois===28276###eois===28312###lif===7###soif===414###eoif===450###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testGetFilterTypes()");lodepng::getFilterTypes(types, png);
  AKA_mark("lis===707###sois===28316###eois===28346###lif===8###soif===454###eoif===484###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testGetFilterTypes()");ASSERT_EQUALS(7, types.size());
  AKA_mark("lis===708###sois===28351###eois===28377###lif===9###soif===489###eoif===515###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testGetFilterTypes()");ASSERT_EQUALS(1, types[0]);
  AKA_mark("lis===709###sois===28382###eois===28408###lif===10###soif===520###eoif===546###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testGetFilterTypes()");ASSERT_EQUALS(1, types[1]);
  AKA_mark("lis===710###sois===28413###eois===28439###lif===11###soif===551###eoif===577###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testGetFilterTypes()");ASSERT_EQUALS(1, types[2]);
  AKA_mark("lis===711###sois===28444###eois===28470###lif===12###soif===582###eoif===608###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testGetFilterTypes()");ASSERT_EQUALS(0, types[3]);
  AKA_mark("lis===712###sois===28475###eois===28501###lif===13###soif===613###eoif===639###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testGetFilterTypes()");ASSERT_EQUALS(1, types[4]);
  AKA_mark("lis===713###sois===28506###eois===28532###lif===14###soif===644###eoif===670###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testGetFilterTypes()");ASSERT_EQUALS(1, types[5]);
  AKA_mark("lis===714###sois===28537###eois===28563###lif===15###soif===675###eoif===701###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testGetFilterTypes()");ASSERT_EQUALS(1, types[6]);
}

//Test LodePNG encoding and decoding the encoded result, using the C++ interface, with interlace
/** Instrumented function doCodecTestInterlaced(Image&) */
void doCodecTestInterlaced(Image& image) /* << Aka begin of function void doCodecTestInterlaced(Image& image) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.doCodecTestInterlaced.28674.stub"

  AKA_mark("lis===719###sois===28715###eois===28750###lif===1###soif===46###eoif===81###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");std::vector<unsigned char> encoded;
  AKA_mark("lis===720###sois===28754###eois===28789###lif===2###soif===85###eoif===120###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");std::vector<unsigned char> decoded;
  AKA_mark("lis===721###sois===28793###eois===28812###lif===3###soif===124###eoif===143###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");unsigned decoded_w;
  AKA_mark("lis===722###sois===28816###eois===28835###lif===4###soif===147###eoif===166###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");unsigned decoded_h;

  AKA_mark("lis===724###sois===28841###eois===28862###lif===6###soif===172###eoif===193###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");lodepng::State state;
  AKA_mark("lis===725###sois===28866###eois===28902###lif===7###soif===197###eoif===233###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");state.info_png.interlace_method = 1;
  AKA_mark("lis===726###sois===28906###eois===28949###lif===8###soif===237###eoif===280###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");state.info_raw.colortype = image.colorType;
  AKA_mark("lis===727###sois===28953###eois===28994###lif===9###soif===284###eoif===325###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");state.info_raw.bitdepth = image.bitDepth;

  AKA_mark("lis===729###sois===29000###eois===29092###lif===11###soif===331###eoif===423###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");unsigned error_enc = lodepng::encode(encoded, image.data, image.width, image.height, state);

  AKA_mark("lis===731###sois===29098###eois===29161###lif===13###soif===429###eoif===492###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");ASSERT_NO_PNG_ERROR_MSG(error_enc, "encoder error interlaced");

  //if the image is large enough, compressing it should result in smaller size
  if(AKA_mark("lis===734###sois===29250###eois===29273###lif===16###soif===581###eoif===604###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)") && (AKA_mark("lis===734###sois===29250###eois===29273###lif===16###soif===581###eoif===604###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)") && (image.data.size() > 512))) {
AKA_mark("lis===734###sois===29275###eois===29341###lif===16###soif===606###eoif===672###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");assertTrue(encoded.size() < image.data.size(), "compressed size");
}

else {
AKA_mark("lis===-734-###sois===-29250-###eois===-2925023-###lif===-16-###soif===-###eoif===-604-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");
}

  AKA_mark("lis===736###sois===29347###eois===29390###lif===18###soif===678###eoif===721###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");state.info_raw.colortype = image.colorType;
  AKA_mark("lis===737###sois===29394###eois===29435###lif===19###soif===725###eoif===766###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");state.info_raw.bitdepth = image.bitDepth;
  AKA_mark("lis===738###sois===29439###eois===29523###lif===20###soif===770###eoif===854###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");unsigned error_dec = lodepng::decode(decoded, decoded_w, decoded_h, state, encoded);

  AKA_mark("lis===740###sois===29529###eois===29592###lif===22###soif===860###eoif===923###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");ASSERT_NO_PNG_ERROR_MSG(error_dec, "decoder error interlaced");

  AKA_mark("lis===742###sois===29598###eois===29635###lif===24###soif===929###eoif===966###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");ASSERT_EQUALS(image.width, decoded_w);
  AKA_mark("lis===743###sois===29640###eois===29678###lif===25###soif===971###eoif===1009###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");ASSERT_EQUALS(image.height, decoded_h);
  AKA_mark("lis===744###sois===29683###eois===29731###lif===26###soif===1014###eoif===1062###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");ASSERT_EQUALS(image.data.size(), decoded.size());
  AKA_mark("lis===745###sois===29736###eois===29790###lif===27###soif===1067###eoif===1121###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTestInterlaced(Image&)");assertPixels(image, &decoded[0], "Pixels interlaced");
}

//Test LodePNG encoding and decoding the encoded result
/** Instrumented function doCodecTest(Image&) */
void doCodecTest(Image& image) /* << Aka begin of function void doCodecTest(Image& image) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTest(Image&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.doCodecTest.29859.stub"

  AKA_mark("lis===750###sois===29890###eois===29910###lif===1###soif===36###eoif===56###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTest(Image&)");doCodecTestC(image);
  AKA_mark("lis===751###sois===29914###eois===29936###lif===2###soif===60###eoif===82###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTest(Image&)");doCodecTestCPP(image);
  AKA_mark("lis===752###sois===29940###eois===29969###lif===3###soif===86###eoif===115###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTest(Image&)");doCodecTestInterlaced(image);
  AKA_mark("lis===753###sois===29973###eois===30004###lif===4###soif===119###eoif===150###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTest(Image&)");doCodecTestUncompressed(image);
  AKA_mark("lis===754###sois===30008###eois===30033###lif===5###soif===154###eoif===179###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doCodecTest(Image&)");doCodecTestNoLZ77(image);
}


//Test LodePNG encoding and decoding using some image generated with the given parameters
/** Instrumented function codecTest(unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8) */
void codecTest(unsigned width, unsigned height, LodePNGColorType colorType = LCT_RGBA, unsigned bitDepth = 8) /* << Aka begin of function void codecTest(unsigned width, unsigned height, LodePNGColorType colorType = LCT_RGBA, unsigned bitDepth = 8) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\codecTest(unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.codecTest.30138.stub"

  AKA_mark("lis===760###sois===30248###eois===30314###lif===1###soif===115###eoif===181###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\codecTest(unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8)");std::cout << "codec test " << width << " " << height << std::endl;
  AKA_mark("lis===761###sois===30318###eois===30330###lif===2###soif===185###eoif===197###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\codecTest(unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8)");Image image;
  AKA_mark("lis===762###sois===30334###eois===30395###lif===3###soif===201###eoif===262###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\codecTest(unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8)");generateTestImage(image, width, height, colorType, bitDepth);
  AKA_mark("lis===763###sois===30399###eois===30418###lif===4###soif===266###eoif===285###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\codecTest(unsigned,unsigned,LodePNGColorType= LCT_RGBA,unsigned= 8)");doCodecTest(image);
}

/** Instrumented function removeSpaces(std::string const&) */
std::string removeSpaces(const std::string& s) /* << Aka begin of function std::string removeSpaces(const std::string& s) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\removeSpaces(std::string const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.removeSpaces.30437.stub"

  AKA_mark("lis===767###sois===30477###eois===30496###lif===1###soif===52###eoif===71###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\removeSpaces(std::string const&)");std::string result;
  int AKA_BLOCK_LOOP_30500 = 0;
    AKA_mark("lis===768###sois===30504###eois===30517###lif===2###soif===79###eoif===92###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\removeSpaces(std::string const&)");
for(size_t i = 0; AKA_mark("lis===768###sois===30518###eois===30530###lif===2###soif===93###eoif===105###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\removeSpaces(std::string const&)") && (AKA_mark("lis===768###sois===30518###eois===30530###lif===2###soif===93###eoif===105###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\removeSpaces(std::string const&)") && (i < s.size())); ({AKA_mark("lis===768###sois===30532###eois===30535###lif===2###soif===107###eoif===110###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\removeSpaces(std::string const&)");i++;})) {
if(AKA_mark("lis===768###sois===30540###eois===30551###lif===2###soif===115###eoif===126###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\removeSpaces(std::string const&)") && (AKA_mark("lis===768###sois===30540###eois===30551###lif===2###soif===115###eoif===126###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\removeSpaces(std::string const&)") && (s[i] != ' '))) {
AKA_mark("lis===768###sois===30553###eois===30568###lif===2###soif===128###eoif===143###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\removeSpaces(std::string const&)");result += s[i];
}

else {
AKA_mark("lis===-768-###sois===-30540-###eois===-3054011-###lif===-2-###soif===-###eoif===-126-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\removeSpaces(std::string const&)");
}
}

  AKA_mark("lis===769###sois===30572###eois===30586###lif===3###soif===147###eoif===161###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\removeSpaces(std::string const&)");return result;
}

/** Instrumented function bitStringToBytes(std::vector<unsigned char>&,std::string const&) */
void bitStringToBytes(std::vector<unsigned char>& bytes, const std::string& bits_) /* << Aka begin of function void bitStringToBytes(std::vector<unsigned char>& bytes, const std::string& bits_) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\bitStringToBytes(std::vector<unsigned char>&,std::string const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.bitStringToBytes.30598.stub"

  AKA_mark("lis===773###sois===30681###eois===30720###lif===1###soif===88###eoif===127###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\bitStringToBytes(std::vector<unsigned char>&,std::string const&)");std::string bits = removeSpaces(bits_);
  AKA_mark("lis===774###sois===30724###eois===30760###lif===2###soif===131###eoif===167###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\bitStringToBytes(std::vector<unsigned char>&,std::string const&)");bytes.resize((bits.size()) + 7 / 8);
  int AKA_BLOCK_LOOP_30764 = 0;
    AKA_mark("lis===775###sois===30768###eois===30781###lif===3###soif===175###eoif===188###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\bitStringToBytes(std::vector<unsigned char>&,std::string const&)");
for(size_t i = 0; AKA_mark("lis===775###sois===30782###eois===30797###lif===3###soif===189###eoif===204###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\bitStringToBytes(std::vector<unsigned char>&,std::string const&)") && (AKA_mark("lis===775###sois===30782###eois===30797###lif===3###soif===189###eoif===204###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\bitStringToBytes(std::vector<unsigned char>&,std::string const&)") && (i < bits.size())); ({AKA_mark("lis===775###sois===30799###eois===30802###lif===3###soif===206###eoif===209###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\bitStringToBytes(std::vector<unsigned char>&,std::string const&)");i++;})) {
        AKA_BLOCK_LOOP_30764++;
        if (AKA_BLOCK_LOOP_30764 > 1000) {
            //break;
        }
    AKA_mark("lis===776###sois===30811###eois===30828###lif===4###soif===218###eoif===235###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\bitStringToBytes(std::vector<unsigned char>&,std::string const&)");size_t j = i / 8;
    AKA_mark("lis===777###sois===30834###eois===30851###lif===5###soif===241###eoif===258###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\bitStringToBytes(std::vector<unsigned char>&,std::string const&)");size_t k = i % 8;
    AKA_mark("lis===778###sois===30857###eois===30874###lif===6###soif===264###eoif===281###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\bitStringToBytes(std::vector<unsigned char>&,std::string const&)");char c = bits[i];
    if(AKA_mark("lis===779###sois===30883###eois===30889###lif===7###soif===290###eoif===296###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\bitStringToBytes(std::vector<unsigned char>&,std::string const&)") && (AKA_mark("lis===779###sois===30883###eois===30889###lif===7###soif===290###eoif===296###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\bitStringToBytes(std::vector<unsigned char>&,std::string const&)") && (k == 0))) {
AKA_mark("lis===779###sois===30891###eois===30904###lif===7###soif===298###eoif===311###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\bitStringToBytes(std::vector<unsigned char>&,std::string const&)");bytes[j] = 0;
}

else {
AKA_mark("lis===-779-###sois===-30883-###eois===-308836-###lif===-7-###soif===-###eoif===-296-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\bitStringToBytes(std::vector<unsigned char>&,std::string const&)");
}
    if(AKA_mark("lis===780###sois===30913###eois===30921###lif===8###soif===320###eoif===328###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\bitStringToBytes(std::vector<unsigned char>&,std::string const&)") && (AKA_mark("lis===780###sois===30913###eois===30921###lif===8###soif===320###eoif===328###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\bitStringToBytes(std::vector<unsigned char>&,std::string const&)") && (c == '1'))) {
AKA_mark("lis===780###sois===30923###eois===30950###lif===8###soif===330###eoif===357###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\bitStringToBytes(std::vector<unsigned char>&,std::string const&)");bytes[j] |= (1 << (7 - k));
}

else {
AKA_mark("lis===-780-###sois===-30913-###eois===-309138-###lif===-8-###soif===-###eoif===-328-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\bitStringToBytes(std::vector<unsigned char>&,std::string const&)");
}
  }
}

/*
test color convert on a single pixel. Testing palette and testing color keys is
not supported by this function. Pixel values given using bits in an std::string
of 0's and 1's.
*/
/** Instrumented function colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned) */
void colorConvertTest(const std::string& bits_in, LodePNGColorType colorType_in, unsigned bitDepth_in,
                      const std::string& bits_out, LodePNGColorType colorType_out, unsigned bitDepth_out) /* << Aka begin of function void colorConvertTest(const std::string& bits_in, LodePNGColorType colorType_in, unsigned bitDepth_in,
                      const std::string& bits_out, LodePNGColorType colorType_out, unsigned bitDepth_out) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.colorConvertTest.31154.stub"

  AKA_mark("lis===791###sois===31364###eois===31444###lif===2###soif===215###eoif===295###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)");std::cout << "color convert test " << bits_in << " - " << bits_out << std::endl;

  AKA_mark("lis===793###sois===31450###eois===31501###lif===4###soif===301###eoif===352###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)");std::vector<unsigned char> expected, actual, image;
  AKA_mark("lis===794###sois===31505###eois===31542###lif===5###soif===356###eoif===393###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)");bitStringToBytes(expected, bits_out);
  AKA_mark("lis===795###sois===31546###eois===31577###lif===6###soif===397###eoif===428###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)");actual.resize(expected.size());
  AKA_mark("lis===796###sois===31581###eois===31614###lif===7###soif===432###eoif===465###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)");bitStringToBytes(image, bits_in);
  AKA_mark("lis===797###sois===31618###eois===31653###lif===8###soif===469###eoif===504###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)");LodePNGColorMode mode_in, mode_out;
  AKA_mark("lis===798###sois===31657###eois===31691###lif===9###soif===508###eoif===542###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)");lodepng_color_mode_init(&mode_in);
  AKA_mark("lis===799###sois===31695###eois===31730###lif===10###soif===546###eoif===581###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)");lodepng_color_mode_init(&mode_out);
  AKA_mark("lis===800###sois===31734###eois===31767###lif===11###soif===585###eoif===618###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)");mode_in.colortype = colorType_in;
  AKA_mark("lis===801###sois===31771###eois===31802###lif===12###soif===622###eoif===653###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)");mode_in.bitdepth = bitDepth_in;
  AKA_mark("lis===802###sois===31806###eois===31841###lif===13###soif===657###eoif===692###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)");mode_out.colortype = colorType_out;
  AKA_mark("lis===803###sois===31845###eois===31878###lif===14###soif===696###eoif===729###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)");mode_out.bitdepth = bitDepth_out;
  AKA_mark("lis===804###sois===31882###eois===31965###lif===15###soif===733###eoif===816###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)");unsigned error = lodepng_convert(&actual[0], &image[0], &mode_out, &mode_in, 1, 1);

  AKA_mark("lis===806###sois===31971###eois===32019###lif===17###soif===822###eoif===870###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)");ASSERT_NO_PNG_ERROR_MSG(error, "convert error");

  int AKA_BLOCK_LOOP_32025 = 0;
    AKA_mark("lis===808###sois===32029###eois===32042###lif===19###soif===880###eoif===893###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)");
for(size_t i = 0; AKA_mark("lis===808###sois===32043###eois===32062###lif===19###soif===894###eoif===913###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)") && (AKA_mark("lis===808###sois===32043###eois===32062###lif===19###soif===894###eoif===913###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)") && (i < expected.size())); ({AKA_mark("lis===808###sois===32064###eois===32067###lif===19###soif===915###eoif===918###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)");i++;})) {
        AKA_BLOCK_LOOP_32025++;
        if (AKA_BLOCK_LOOP_32025 > 1000) {
            //break;
        }
    AKA_mark("lis===809###sois===32076###eois===32146###lif===20###soif===927###eoif===997###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)");assertEquals((int)expected[i], (int)actual[i], "byte " + valtostr(i));
  }

  AKA_mark("lis===812###sois===32157###eois===32194###lif===23###soif===1008###eoif===1045###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)");lodepng_color_mode_cleanup(&mode_in);
  AKA_mark("lis===813###sois===32198###eois===32236###lif===24###soif===1049###eoif===1087###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\colorConvertTest(std::string const&,LodePNGColorType,unsigned,std::string const&,LodePNGColorType,unsigned)");lodepng_color_mode_cleanup(&mode_out);
}

/** Instrumented function testOtherPattern1() */
void testOtherPattern1() /* << Aka begin of function void testOtherPattern1() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testOtherPattern1.32248.stub"

  AKA_mark("lis===817###sois===32273###eois===32323###lif===1###soif===30###eoif===80###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()");std::cout << "codec other pattern 1" << std::endl;

  AKA_mark("lis===819###sois===32329###eois===32342###lif===3###soif===86###eoif===99###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()");Image image1;
  AKA_mark("lis===820###sois===32346###eois===32361###lif===4###soif===103###eoif===118###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()");size_t w = 192;
  AKA_mark("lis===821###sois===32365###eois===32380###lif===5###soif===122###eoif===137###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()");size_t h = 192;
  AKA_mark("lis===822###sois===32384###eois===32401###lif===6###soif===141###eoif===158###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()");image1.width = w;
  AKA_mark("lis===823###sois===32405###eois===32423###lif===7###soif===162###eoif===180###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()");image1.height = h;
  AKA_mark("lis===824###sois===32427###eois===32455###lif===8###soif===184###eoif===212###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()");image1.colorType = LCT_RGBA;
  AKA_mark("lis===825###sois===32459###eois===32479###lif===9###soif===216###eoif===236###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()");image1.bitDepth = 8;
  AKA_mark("lis===826###sois===32483###eois===32514###lif===10###soif===240###eoif===271###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()");image1.data.resize(w * h * 4u);
  int AKA_BLOCK_LOOP_32518 = 0;
    AKA_mark("lis===827###sois===32522###eois===32535###lif===11###soif===279###eoif===292###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()");
for(size_t y = 0; AKA_mark("lis===827###sois===32536###eois===32541###lif===11###soif===293###eoif===298###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()") && (AKA_mark("lis===827###sois===32536###eois===32541###lif===11###soif===293###eoif===298###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()") && (y < h)); ({AKA_mark("lis===827###sois===32543###eois===32546###lif===11###soif===300###eoif===303###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()");y++;}))
  {
int AKA_BLOCK_LOOP_32551 = 0;
    AKA_mark("lis===828###sois===32555###eois===32568###lif===12###soif===312###eoif===325###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()");
for(size_t x = 0; AKA_mark("lis===828###sois===32569###eois===32574###lif===12###soif===326###eoif===331###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()") && (AKA_mark("lis===828###sois===32569###eois===32574###lif===12###soif===326###eoif===331###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()") && (x < w)); ({AKA_mark("lis===828###sois===32576###eois===32579###lif===12###soif===333###eoif===336###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()");x++;})) {
        AKA_BLOCK_LOOP_32551++;
        if (AKA_BLOCK_LOOP_32551 > 1000) {
            //break;
        }
    //pattern 1
    AKA_mark("lis===830###sois===32605###eois===32756###lif===14###soif===362###eoif===513###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()");image1.data[4u * w * y + 4u * x + 0u] = (unsigned char)(127 * (1 + std::sin((                    x * x +                     y * y) / (w * h / 8.0))));
    AKA_mark("lis===831###sois===32762###eois===32913###lif===15###soif===519###eoif===670###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()");image1.data[4u * w * y + 4u * x + 1u] = (unsigned char)(127 * (1 + std::sin(((w - x - 1) * (w - x - 1) +                     y * y) / (w * h / 8.0))));
    AKA_mark("lis===832###sois===32919###eois===33070###lif===16###soif===676###eoif===827###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()");image1.data[4u * w * y + 4u * x + 2u] = (unsigned char)(127 * (1 + std::sin((                    x * x + (h - y - 1) * (h - y - 1)) / (w * h / 8.0))));
    AKA_mark("lis===833###sois===33076###eois===33227###lif===17###soif===833###eoif===984###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()");image1.data[4u * w * y + 4u * x + 3u] = (unsigned char)(127 * (1 + std::sin(((w - x - 1) * (w - x - 1) + (h - y - 1) * (h - y - 1)) / (w * h / 8.0))));
  }
}


  AKA_mark("lis===836###sois===33238###eois===33258###lif===20###soif===995###eoif===1015###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern1()");doCodecTest(image1);
}

/** Instrumented function testOtherPattern2() */
void testOtherPattern2() /* << Aka begin of function void testOtherPattern2() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testOtherPattern2.33270.stub"

  AKA_mark("lis===840###sois===33295###eois===33345###lif===1###soif===30###eoif===80###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()");std::cout << "codec other pattern 2" << std::endl;

  AKA_mark("lis===842###sois===33351###eois===33364###lif===3###soif===86###eoif===99###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()");Image image1;
  AKA_mark("lis===843###sois===33368###eois===33383###lif===4###soif===103###eoif===118###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()");size_t w = 192;
  AKA_mark("lis===844###sois===33387###eois===33402###lif===5###soif===122###eoif===137###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()");size_t h = 192;
  AKA_mark("lis===845###sois===33406###eois===33423###lif===6###soif===141###eoif===158###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()");image1.width = w;
  AKA_mark("lis===846###sois===33427###eois===33445###lif===7###soif===162###eoif===180###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()");image1.height = h;
  AKA_mark("lis===847###sois===33449###eois===33477###lif===8###soif===184###eoif===212###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()");image1.colorType = LCT_RGBA;
  AKA_mark("lis===848###sois===33481###eois===33501###lif===9###soif===216###eoif===236###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()");image1.bitDepth = 8;
  AKA_mark("lis===849###sois===33505###eois===33536###lif===10###soif===240###eoif===271###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()");image1.data.resize(w * h * 4u);
  int AKA_BLOCK_LOOP_33540 = 0;
    AKA_mark("lis===850###sois===33544###eois===33557###lif===11###soif===279###eoif===292###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()");
for(size_t y = 0; AKA_mark("lis===850###sois===33558###eois===33563###lif===11###soif===293###eoif===298###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()") && (AKA_mark("lis===850###sois===33558###eois===33563###lif===11###soif===293###eoif===298###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()") && (y < h)); ({AKA_mark("lis===850###sois===33565###eois===33568###lif===11###soif===300###eoif===303###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()");y++;}))
  {
int AKA_BLOCK_LOOP_33573 = 0;
    AKA_mark("lis===851###sois===33577###eois===33590###lif===12###soif===312###eoif===325###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()");
for(size_t x = 0; AKA_mark("lis===851###sois===33591###eois===33596###lif===12###soif===326###eoif===331###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()") && (AKA_mark("lis===851###sois===33591###eois===33596###lif===12###soif===326###eoif===331###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()") && (x < w)); ({AKA_mark("lis===851###sois===33598###eois===33601###lif===12###soif===333###eoif===336###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()");x++;})) {
        AKA_BLOCK_LOOP_33573++;
        if (AKA_BLOCK_LOOP_33573 > 1000) {
            //break;
        }
    AKA_mark("lis===852###sois===33610###eois===33665###lif===13###soif===345###eoif===400###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()");image1.data[4u * w * y + 4u * x + 0u] = 255 * !(x & y);
    AKA_mark("lis===853###sois===33671###eois===33717###lif===14###soif===406###eoif===452###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()");image1.data[4u * w * y + 4u * x + 1u] = x ^ y;
    AKA_mark("lis===854###sois===33723###eois===33769###lif===15###soif===458###eoif===504###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()");image1.data[4u * w * y + 4u * x + 2u] = x | y;
    AKA_mark("lis===855###sois===33775###eois===33819###lif===16###soif===510###eoif===554###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()");image1.data[4u * w * y + 4u * x + 3u] = 255;
  }
}


  AKA_mark("lis===858###sois===33830###eois===33850###lif===19###soif===565###eoif===585###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testOtherPattern2()");doCodecTest(image1);
}

/** Instrumented function testSinglePixel(int,int,int,int) */
void testSinglePixel(int r, int g, int b, int a) /* << Aka begin of function void testSinglePixel(int r, int g, int b, int a) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSinglePixel(int,int,int,int)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testSinglePixel.33862.stub"

  AKA_mark("lis===862###sois===33911###eois===34000###lif===1###soif===54###eoif===143###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSinglePixel(int,int,int,int)");std::cout << "codec single pixel " << r << " " << g << " " << b << " " << a << std::endl;
  AKA_mark("lis===863###sois===34004###eois===34016###lif===2###soif===147###eoif===159###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSinglePixel(int,int,int,int)");Image pixel;
  AKA_mark("lis===864###sois===34020###eois===34036###lif===3###soif===163###eoif===179###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSinglePixel(int,int,int,int)");pixel.width = 1;
  AKA_mark("lis===865###sois===34040###eois===34057###lif===4###soif===183###eoif===200###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSinglePixel(int,int,int,int)");pixel.height = 1;
  AKA_mark("lis===866###sois===34061###eois===34088###lif===5###soif===204###eoif===231###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSinglePixel(int,int,int,int)");pixel.colorType = LCT_RGBA;
  AKA_mark("lis===867###sois===34092###eois===34111###lif===6###soif===235###eoif===254###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSinglePixel(int,int,int,int)");pixel.bitDepth = 8;
  AKA_mark("lis===868###sois===34115###eois===34136###lif===7###soif===258###eoif===279###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSinglePixel(int,int,int,int)");pixel.data.resize(4);
  AKA_mark("lis===869###sois===34140###eois===34158###lif===8###soif===283###eoif===301###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSinglePixel(int,int,int,int)");pixel.data[0] = r;
  AKA_mark("lis===870###sois===34162###eois===34180###lif===9###soif===305###eoif===323###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSinglePixel(int,int,int,int)");pixel.data[1] = g;
  AKA_mark("lis===871###sois===34184###eois===34202###lif===10###soif===327###eoif===345###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSinglePixel(int,int,int,int)");pixel.data[2] = b;
  AKA_mark("lis===872###sois===34206###eois===34224###lif===11###soif===349###eoif===367###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSinglePixel(int,int,int,int)");pixel.data[3] = a;

  AKA_mark("lis===874###sois===34230###eois===34249###lif===13###soif===373###eoif===392###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSinglePixel(int,int,int,int)");doCodecTest(pixel);
}

/** Instrumented function testColor(int,int,int,int) */
void testColor(int r, int g, int b, int a) /* << Aka begin of function void testColor(int r, int g, int b, int a) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testColor.34261.stub"

  AKA_mark("lis===878###sois===34304###eois===34391###lif===1###soif===48###eoif===135###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");std::cout << "codec test color " << r << " " << g << " " << b << " " << a << std::endl;
  AKA_mark("lis===879###sois===34395###eois===34407###lif===2###soif===139###eoif===151###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");Image image;
  AKA_mark("lis===880###sois===34411###eois===34428###lif===3###soif===155###eoif===172###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");image.width = 20;
  AKA_mark("lis===881###sois===34432###eois===34450###lif===4###soif===176###eoif===194###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");image.height = 20;
  AKA_mark("lis===882###sois===34454###eois===34481###lif===5###soif===198###eoif===225###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");image.colorType = LCT_RGBA;
  AKA_mark("lis===883###sois===34485###eois===34504###lif===6###soif===229###eoif===248###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");image.bitDepth = 8;
  AKA_mark("lis===884###sois===34508###eois===34539###lif===7###soif===252###eoif===283###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");image.data.resize(20 * 20 * 4);
  int AKA_BLOCK_LOOP_34543 = 0;
    AKA_mark("lis===885###sois===34547###eois===34560###lif===8###soif===291###eoif===304###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");
for(size_t y = 0; AKA_mark("lis===885###sois===34561###eois===34567###lif===8###soif===305###eoif===311###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)") && (AKA_mark("lis===885###sois===34561###eois===34567###lif===8###soif===305###eoif===311###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)") && (y < 20)); ({AKA_mark("lis===885###sois===34569###eois===34572###lif===8###soif===313###eoif===316###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");y++;}))
  {
int AKA_BLOCK_LOOP_34577 = 0;
    AKA_mark("lis===886###sois===34581###eois===34594###lif===9###soif===325###eoif===338###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");
for(size_t x = 0; AKA_mark("lis===886###sois===34595###eois===34601###lif===9###soif===339###eoif===345###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)") && (AKA_mark("lis===886###sois===34595###eois===34601###lif===9###soif===339###eoif===345###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)") && (x < 20)); ({AKA_mark("lis===886###sois===34603###eois===34606###lif===9###soif===347###eoif===350###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");x++;})) {
        AKA_BLOCK_LOOP_34577++;
        if (AKA_BLOCK_LOOP_34577 > 1000) {
            //break;
        }
    AKA_mark("lis===887###sois===34615###eois===34654###lif===10###soif===359###eoif===398###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");image.data[20 * 4 * y + 4 * x + 0] = r;
    AKA_mark("lis===888###sois===34660###eois===34699###lif===11###soif===404###eoif===443###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");image.data[20 * 4 * y + 4 * x + 0] = g;
    AKA_mark("lis===889###sois===34705###eois===34744###lif===12###soif===449###eoif===488###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");image.data[20 * 4 * y + 4 * x + 0] = b;
    AKA_mark("lis===890###sois===34750###eois===34789###lif===13###soif===494###eoif===533###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");image.data[20 * 4 * y + 4 * x + 0] = a;
  }
}


  AKA_mark("lis===893###sois===34800###eois===34819###lif===16###soif===544###eoif===563###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");doCodecTest(image);

  AKA_mark("lis===895###sois===34825###eois===34846###lif===18###soif===569###eoif===590###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");Image image2 = image;
  AKA_mark("lis===896###sois===34850###eois===34869###lif===19###soif===594###eoif===613###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");image2.data[3] = 0; //one fully transparent pixel
  AKA_mark("lis===897###sois===34903###eois===34923###lif===20###soif===647###eoif===667###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");doCodecTest(image2);
  AKA_mark("lis===898###sois===34927###eois===34948###lif===21###soif===671###eoif===692###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");image2.data[3] = 128; //one semi transparent pixel
  AKA_mark("lis===899###sois===34981###eois===35001###lif===22###soif===725###eoif===745###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");doCodecTest(image2);

  AKA_mark("lis===901###sois===35007###eois===35028###lif===24###soif===751###eoif===772###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");Image image3 = image;
  // add 255 different colors
  int AKA_BLOCK_LOOP_35063 = 0;
    AKA_mark("lis===903###sois===35067###eois===35080###lif===26###soif===811###eoif===824###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");
for(size_t i = 0; AKA_mark("lis===903###sois===35081###eois===35088###lif===26###soif===825###eoif===832###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)") && (AKA_mark("lis===903###sois===35081###eois===35088###lif===26###soif===825###eoif===832###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)") && (i < 255)); ({AKA_mark("lis===903###sois===35090###eois===35093###lif===26###soif===834###eoif===837###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");i++;})) {
        AKA_BLOCK_LOOP_35063++;
        if (AKA_BLOCK_LOOP_35063 > 1000) {
            //break;
        }
    AKA_mark("lis===904###sois===35102###eois===35128###lif===27###soif===846###eoif===872###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");image.data[i * 4 + 0] = i;
    AKA_mark("lis===905###sois===35134###eois===35160###lif===28###soif===878###eoif===904###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");image.data[i * 4 + 1] = i;
    AKA_mark("lis===906###sois===35166###eois===35192###lif===29###soif===910###eoif===936###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");image.data[i * 4 + 2] = i;
    AKA_mark("lis===907###sois===35198###eois===35226###lif===30###soif===942###eoif===970###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");image.data[i * 4 + 3] = 255;
  }
  AKA_mark("lis===909###sois===35235###eois===35255###lif===32###soif===979###eoif===999###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");doCodecTest(image3);
  // a 256th color
  AKA_mark("lis===911###sois===35279###eois===35309###lif===34###soif===1023###eoif===1053###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");image.data[255 * 4 + 0] = 255;
  AKA_mark("lis===912###sois===35313###eois===35343###lif===35###soif===1057###eoif===1087###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");image.data[255 * 4 + 1] = 255;
  AKA_mark("lis===913###sois===35347###eois===35377###lif===36###soif===1091###eoif===1121###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");image.data[255 * 4 + 2] = 255;
  AKA_mark("lis===914###sois===35381###eois===35411###lif===37###soif===1125###eoif===1155###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");image.data[255 * 4 + 3] = 255;
  AKA_mark("lis===915###sois===35415###eois===35435###lif===38###soif===1159###eoif===1179###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");doCodecTest(image3);

  AKA_mark("lis===917###sois===35441###eois===35469###lif===40###soif===1185###eoif===1213###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColor(int,int,int,int)");testSinglePixel(r, g, b, a);
}

// Tests combinations of various colors in different orders
/** Instrumented function testFewColors() */
void testFewColors() /* << Aka begin of function void testFewColors() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testFewColors.35542.stub"

  AKA_mark("lis===922###sois===35563###eois===35614###lif===1###soif===26###eoif===77###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");std::cout << "codec test few colors " << std::endl;
  AKA_mark("lis===923###sois===35618###eois===35630###lif===2###soif===81###eoif===93###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");Image image;
  AKA_mark("lis===924###sois===35634###eois===35650###lif===3###soif===97###eoif===113###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");image.width = 4;
  AKA_mark("lis===925###sois===35654###eois===35671###lif===4###soif===117###eoif===134###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");image.height = 4;
  AKA_mark("lis===926###sois===35675###eois===35702###lif===5###soif===138###eoif===165###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");image.colorType = LCT_RGBA;
  AKA_mark("lis===927###sois===35706###eois===35725###lif===6###soif===169###eoif===188###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");image.bitDepth = 8;
  AKA_mark("lis===928###sois===35729###eois===35779###lif===7###soif===192###eoif===242###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");image.data.resize(image.width * image.height * 4);
  AKA_mark("lis===929###sois===35783###eois===35817###lif===8###soif===246###eoif===280###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");std::vector<unsigned char> colors;
  AKA_mark("lis===930###sois===35821###eois===35841###lif===9###soif===284###eoif===304###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(0); AKA_mark("lis===930###sois===35842###eois===35862###lif===9###soif===305###eoif===325###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(0); AKA_mark("lis===930###sois===35863###eois===35883###lif===9###soif===326###eoif===346###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(0); AKA_mark("lis===930###sois===35884###eois===35906###lif===9###soif===347###eoif===369###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(255); // black
  AKA_mark("lis===931###sois===35919###eois===35941###lif===10###soif===382###eoif===404###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(255); AKA_mark("lis===931###sois===35942###eois===35964###lif===10###soif===405###eoif===427###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(255); AKA_mark("lis===931###sois===35965###eois===35987###lif===10###soif===428###eoif===450###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(255); AKA_mark("lis===931###sois===35988###eois===36010###lif===10###soif===451###eoif===473###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(255); // white
  AKA_mark("lis===932###sois===36023###eois===36045###lif===11###soif===486###eoif===508###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(128); AKA_mark("lis===932###sois===36046###eois===36068###lif===11###soif===509###eoif===531###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(128); AKA_mark("lis===932###sois===36069###eois===36091###lif===11###soif===532###eoif===554###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(128); AKA_mark("lis===932###sois===36092###eois===36114###lif===11###soif===555###eoif===577###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(255); // gray
  AKA_mark("lis===933###sois===36126###eois===36146###lif===12###soif===589###eoif===609###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(0); AKA_mark("lis===933###sois===36147###eois===36167###lif===12###soif===610###eoif===630###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(0); AKA_mark("lis===933###sois===36168###eois===36190###lif===12###soif===631###eoif===653###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(255); AKA_mark("lis===933###sois===36191###eois===36213###lif===12###soif===654###eoif===676###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(255); // blue
  AKA_mark("lis===934###sois===36225###eois===36247###lif===13###soif===688###eoif===710###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(255); AKA_mark("lis===934###sois===36248###eois===36270###lif===13###soif===711###eoif===733###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(255); AKA_mark("lis===934###sois===36271###eois===36293###lif===13###soif===734###eoif===756###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(255); AKA_mark("lis===934###sois===36294###eois===36314###lif===13###soif===757###eoif===777###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(0); // transparent white
  AKA_mark("lis===935###sois===36339###eois===36361###lif===14###soif===802###eoif===824###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(255); AKA_mark("lis===935###sois===36362###eois===36384###lif===14###soif===825###eoif===847###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(255); AKA_mark("lis===935###sois===36385###eois===36407###lif===14###soif===848###eoif===870###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(255); AKA_mark("lis===935###sois===36408###eois===36428###lif===14###soif===871###eoif===891###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");colors.push_back(1); // translucent white
  int AKA_BLOCK_LOOP_36453 = 0;
    AKA_mark("lis===936###sois===36457###eois===36470###lif===15###soif===920###eoif===933###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");
for(size_t i = 0; AKA_mark("lis===936###sois===36471###eois===36488###lif===15###soif===934###eoif===951###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (AKA_mark("lis===936###sois===36471###eois===36488###lif===15###soif===934###eoif===951###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (i < colors.size())); ({AKA_mark("lis===936###sois===36490###eois===36496###lif===15###soif===953###eoif===959###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");i += 4;}))
  {
int AKA_BLOCK_LOOP_36501 = 0;
    AKA_mark("lis===937###sois===36505###eois===36518###lif===16###soif===968###eoif===981###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");
for(size_t j = 0; AKA_mark("lis===937###sois===36519###eois===36536###lif===16###soif===982###eoif===999###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (AKA_mark("lis===937###sois===36519###eois===36536###lif===16###soif===982###eoif===999###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (j < colors.size())); ({AKA_mark("lis===937###sois===36538###eois===36544###lif===16###soif===1001###eoif===1007###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");j += 4;}))
  {
int AKA_BLOCK_LOOP_36549 = 0;
    AKA_mark("lis===938###sois===36553###eois===36566###lif===17###soif===1016###eoif===1029###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");
for(size_t k = 0; AKA_mark("lis===938###sois===36567###eois===36584###lif===17###soif===1030###eoif===1047###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (AKA_mark("lis===938###sois===36567###eois===36584###lif===17###soif===1030###eoif===1047###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (k < colors.size())); ({AKA_mark("lis===938###sois===36586###eois===36592###lif===17###soif===1049###eoif===1055###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");k += 4;}))
  {
int AKA_BLOCK_LOOP_36597 = 0;
    AKA_mark("lis===939###sois===36601###eois===36614###lif===18###soif===1064###eoif===1077###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");
for(size_t l = 0; AKA_mark("lis===939###sois===36615###eois===36632###lif===18###soif===1078###eoif===1095###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (AKA_mark("lis===939###sois===36615###eois===36632###lif===18###soif===1078###eoif===1095###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (l < colors.size())); ({AKA_mark("lis===939###sois===36634###eois===36640###lif===18###soif===1097###eoif===1103###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");l += 4;})) {
        AKA_BLOCK_LOOP_36597++;
        if (AKA_BLOCK_LOOP_36597 > 1000) {
            //break;
        }
    int AKA_BLOCK_LOOP_36649 = 0;
    AKA_mark("lis===940###sois===36653###eois===36668###lif===19###soif===1116###eoif===1131###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");
for(unsigned y = 0; AKA_mark("lis===940###sois===36669###eois===36685###lif===19###soif===1132###eoif===1148###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (AKA_mark("lis===940###sois===36669###eois===36685###lif===19###soif===1132###eoif===1148###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (y < image.height)); ({AKA_mark("lis===940###sois===36687###eois===36690###lif===19###soif===1150###eoif===1153###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");y++;}))
    {
int AKA_BLOCK_LOOP_36697 = 0;
    AKA_mark("lis===941###sois===36701###eois===36716###lif===20###soif===1164###eoif===1179###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");
for(unsigned x = 0; AKA_mark("lis===941###sois===36717###eois===36732###lif===20###soif===1180###eoif===1195###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (AKA_mark("lis===941###sois===36717###eois===36732###lif===20###soif===1180###eoif===1195###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (x < image.width)); ({AKA_mark("lis===941###sois===36734###eois===36737###lif===20###soif===1197###eoif===1200###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");x++;})) {
        AKA_BLOCK_LOOP_36697++;
        if (AKA_BLOCK_LOOP_36697 > 1000) {
            //break;
        }
      AKA_mark("lis===942###sois===36748###eois===36785###lif===21###soif===1211###eoif===1248###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");size_t a = (y * image.width + x) & 3;
      AKA_mark("lis===943###sois===36793###eois===36855###lif===22###soif===1256###eoif===1318###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");size_t b = (a == 0) ? i : ((a == 1) ? j : ((a == 2) ? k : l));
      int AKA_BLOCK_LOOP_36863 = 0;
    AKA_mark("lis===944###sois===36867###eois===36880###lif===23###soif===1330###eoif===1343###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");
for(size_t c = 0; AKA_mark("lis===944###sois===36881###eois===36886###lif===23###soif===1344###eoif===1349###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (AKA_mark("lis===944###sois===36881###eois===36886###lif===23###soif===1344###eoif===1349###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (c < 4)); ({AKA_mark("lis===944###sois===36888###eois===36891###lif===23###soif===1351###eoif===1354###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");c++;})) {
        AKA_BLOCK_LOOP_36863++;
        if (AKA_BLOCK_LOOP_36863 > 1000) {
            //break;
        }
        AKA_mark("lis===945###sois===36904###eois===36964###lif===24###soif===1367###eoif===1427###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");image.data[y * image.width * 4 + x * 4 + c] = colors[b + c];
      }
    }
}

    AKA_mark("lis===948###sois===36986###eois===37005###lif===27###soif===1449###eoif===1468###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");doCodecTest(image);
  }
}

}

}

  AKA_mark("lis===950###sois===37014###eois===37031###lif===29###soif===1477###eoif===1494###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");image.width = 20;
  AKA_mark("lis===951###sois===37035###eois===37053###lif===30###soif===1498###eoif===1516###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");image.height = 20;
  AKA_mark("lis===952###sois===37057###eois===37107###lif===31###soif===1520###eoif===1570###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");image.data.resize(image.width * image.height * 4);
  int AKA_BLOCK_LOOP_37111 = 0;
    AKA_mark("lis===953###sois===37115###eois===37128###lif===32###soif===1578###eoif===1591###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");
for(size_t i = 0; AKA_mark("lis===953###sois===37129###eois===37146###lif===32###soif===1592###eoif===1609###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (AKA_mark("lis===953###sois===37129###eois===37146###lif===32###soif===1592###eoif===1609###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (i < colors.size())); ({AKA_mark("lis===953###sois===37148###eois===37154###lif===32###soif===1611###eoif===1617###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");i += 4;}))
  {
int AKA_BLOCK_LOOP_37159 = 0;
    AKA_mark("lis===954###sois===37163###eois===37176###lif===33###soif===1626###eoif===1639###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");
for(size_t j = 0; AKA_mark("lis===954###sois===37177###eois===37194###lif===33###soif===1640###eoif===1657###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (AKA_mark("lis===954###sois===37177###eois===37194###lif===33###soif===1640###eoif===1657###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (j < colors.size())); ({AKA_mark("lis===954###sois===37196###eois===37202###lif===33###soif===1659###eoif===1665###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");j += 4;}))
  {
int AKA_BLOCK_LOOP_37207 = 0;
    AKA_mark("lis===955###sois===37211###eois===37224###lif===34###soif===1674###eoif===1687###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");
for(size_t k = 0; AKA_mark("lis===955###sois===37225###eois===37242###lif===34###soif===1688###eoif===1705###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (AKA_mark("lis===955###sois===37225###eois===37242###lif===34###soif===1688###eoif===1705###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (k < colors.size())); ({AKA_mark("lis===955###sois===37244###eois===37250###lif===34###soif===1707###eoif===1713###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");k += 4;})) {
        AKA_BLOCK_LOOP_37207++;
        if (AKA_BLOCK_LOOP_37207 > 1000) {
            //break;
        }
    int AKA_BLOCK_LOOP_37259 = 0;
    AKA_mark("lis===956###sois===37263###eois===37278###lif===35###soif===1726###eoif===1741###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");
for(unsigned y = 0; AKA_mark("lis===956###sois===37279###eois===37295###lif===35###soif===1742###eoif===1758###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (AKA_mark("lis===956###sois===37279###eois===37295###lif===35###soif===1742###eoif===1758###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (y < image.height)); ({AKA_mark("lis===956###sois===37297###eois===37300###lif===35###soif===1760###eoif===1763###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");y++;}))
    {
int AKA_BLOCK_LOOP_37307 = 0;
    AKA_mark("lis===957###sois===37311###eois===37326###lif===36###soif===1774###eoif===1789###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");
for(unsigned x = 0; AKA_mark("lis===957###sois===37327###eois===37342###lif===36###soif===1790###eoif===1805###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (AKA_mark("lis===957###sois===37327###eois===37342###lif===36###soif===1790###eoif===1805###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (x < image.width)); ({AKA_mark("lis===957###sois===37344###eois===37347###lif===36###soif===1807###eoif===1810###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");x++;})) {
        AKA_BLOCK_LOOP_37307++;
        if (AKA_BLOCK_LOOP_37307 > 1000) {
            //break;
        }
      AKA_mark("lis===958###sois===37358###eois===37395###lif===37###soif===1821###eoif===1858###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");size_t a = (y * image.width + x) % 3;
      AKA_mark("lis===959###sois===37403###eois===37448###lif===38###soif===1866###eoif===1911###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");size_t b = (a == 0) ? i : ((a == 1) ? j : k);
      int AKA_BLOCK_LOOP_37456 = 0;
    AKA_mark("lis===960###sois===37460###eois===37473###lif===39###soif===1923###eoif===1936###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");
for(size_t c = 0; AKA_mark("lis===960###sois===37474###eois===37479###lif===39###soif===1937###eoif===1942###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (AKA_mark("lis===960###sois===37474###eois===37479###lif===39###soif===1937###eoif===1942###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()") && (c < 4)); ({AKA_mark("lis===960###sois===37481###eois===37484###lif===39###soif===1944###eoif===1947###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");c++;})) {
        AKA_BLOCK_LOOP_37456++;
        if (AKA_BLOCK_LOOP_37456 > 1000) {
            //break;
        }
        AKA_mark("lis===961###sois===37497###eois===37557###lif===40###soif===1960###eoif===2020###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");image.data[y * image.width * 4 + x * 4 + c] = colors[b + c];
      }
    }
}

    AKA_mark("lis===964###sois===37579###eois===37598###lif===43###soif===2042###eoif===2061###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFewColors()");doCodecTest(image);
  }
}

}

}

/** Instrumented function testSize(unsigned,unsigned) */
void testSize(unsigned w, unsigned h) /* << Aka begin of function void testSize(unsigned w, unsigned h) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testSize.37615.stub"

  AKA_mark("lis===969###sois===37653###eois===37715###lif===1###soif===43###eoif===105###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)");std::cout << "codec test size " << w << " " << h << std::endl;
  AKA_mark("lis===970###sois===37719###eois===37731###lif===2###soif===109###eoif===121###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)");Image image;
  AKA_mark("lis===971###sois===37735###eois===37751###lif===3###soif===125###eoif===141###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)");image.width = w;
  AKA_mark("lis===972###sois===37755###eois===37772###lif===4###soif===145###eoif===162###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)");image.height = h;
  AKA_mark("lis===973###sois===37776###eois===37803###lif===5###soif===166###eoif===193###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)");image.colorType = LCT_RGBA;
  AKA_mark("lis===974###sois===37807###eois===37826###lif===6###soif===197###eoif===216###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)");image.bitDepth = 8;
  AKA_mark("lis===975###sois===37830###eois===37859###lif===7###soif===220###eoif===249###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)");image.data.resize(w * h * 4);
  int AKA_BLOCK_LOOP_37863 = 0;
    AKA_mark("lis===976###sois===37867###eois===37880###lif===8###soif===257###eoif===270###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)");
for(size_t y = 0; AKA_mark("lis===976###sois===37881###eois===37886###lif===8###soif===271###eoif===276###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)") && (AKA_mark("lis===976###sois===37881###eois===37886###lif===8###soif===271###eoif===276###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)") && (y < h)); ({AKA_mark("lis===976###sois===37888###eois===37891###lif===8###soif===278###eoif===281###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)");y++;}))
  {
int AKA_BLOCK_LOOP_37896 = 0;
    AKA_mark("lis===977###sois===37900###eois===37913###lif===9###soif===290###eoif===303###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)");
for(size_t x = 0; AKA_mark("lis===977###sois===37914###eois===37919###lif===9###soif===304###eoif===309###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)") && (AKA_mark("lis===977###sois===37914###eois===37919###lif===9###soif===304###eoif===309###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)") && (x < w)); ({AKA_mark("lis===977###sois===37921###eois===37924###lif===9###soif===311###eoif===314###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)");x++;})) {
        AKA_BLOCK_LOOP_37896++;
        if (AKA_BLOCK_LOOP_37896 > 1000) {
            //break;
        }
    AKA_mark("lis===978###sois===37933###eois===37977###lif===10###soif===323###eoif===367###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)");image.data[w * 4 * y + 4 * x + 0] = x & 255;
    AKA_mark("lis===979###sois===37983###eois===38027###lif===11###soif===373###eoif===417###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)");image.data[w * 4 * y + 4 * x + 1] = y & 255;
    AKA_mark("lis===980###sois===38033###eois===38073###lif===12###soif===423###eoif===463###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)");image.data[w * 4 * y + 4 * x + 2] = 255;
    AKA_mark("lis===981###sois===38079###eois===38119###lif===13###soif===469###eoif===509###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)");image.data[w * 4 * y + 4 * x + 3] = 255;
  }
}


  AKA_mark("lis===984###sois===38130###eois===38149###lif===16###soif===520###eoif===539###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSize(unsigned,unsigned)");doCodecTest(image);
}

/** Instrumented function testPNGCodec() */
void testPNGCodec() /* << Aka begin of function void testPNGCodec() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testPNGCodec.38161.stub"

  AKA_mark("lis===988###sois===38181###eois===38197###lif===1###soif===25###eoif===41###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");codecTest(1, 1);
  AKA_mark("lis===989###sois===38201###eois===38217###lif===2###soif===45###eoif===61###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");codecTest(2, 2);
  AKA_mark("lis===990###sois===38221###eois===38250###lif===3###soif===65###eoif===94###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");codecTest(1, 1, LCT_GREY, 1);
  AKA_mark("lis===991###sois===38254###eois===38283###lif===4###soif===98###eoif===127###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");codecTest(7, 7, LCT_GREY, 1);
#ifndef DISABLE_SLOW
  AKA_mark("lis===993###sois===38309###eois===38329###lif===6###soif===153###eoif===173###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");codecTest(127, 127);
  AKA_mark("lis===994###sois===38333###eois===38366###lif===7###soif===177###eoif===210###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");codecTest(127, 127, LCT_GREY, 1);
  AKA_mark("lis===995###sois===38370###eois===38390###lif===8###soif===214###eoif===234###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");codecTest(320, 320);
  AKA_mark("lis===996###sois===38394###eois===38414###lif===9###soif===238###eoif===258###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");codecTest(1, 10000);
  AKA_mark("lis===997###sois===38418###eois===38438###lif===10###soif===262###eoif===282###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");codecTest(10000, 1);

  AKA_mark("lis===999###sois===38444###eois===38464###lif===12###soif===288###eoif===308###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testOtherPattern1();
  AKA_mark("lis===1000###sois===38468###eois===38488###lif===13###soif===312###eoif===332###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testOtherPattern2();
#endif // DISABLE_SLOW

  AKA_mark("lis===1003###sois===38518###eois===38548###lif===16###soif===362###eoif===392###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testColor(255, 255, 255, 255);
  AKA_mark("lis===1004###sois===38552###eois===38576###lif===17###soif===396###eoif===420###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testColor(0, 0, 0, 255);
  AKA_mark("lis===1005###sois===38580###eois===38604###lif===18###soif===424###eoif===448###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testColor(1, 2, 3, 255);
  AKA_mark("lis===1006###sois===38608###eois===38634###lif===19###soif===452###eoif===478###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testColor(255, 0, 0, 255);
  AKA_mark("lis===1007###sois===38638###eois===38664###lif===20###soif===482###eoif===508###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testColor(0, 255, 0, 255);
  AKA_mark("lis===1008###sois===38668###eois===38694###lif===21###soif===512###eoif===538###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testColor(0, 0, 255, 255);
  AKA_mark("lis===1009###sois===38698###eois===38722###lif===22###soif===542###eoif===566###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testColor(0, 0, 0, 255);
  AKA_mark("lis===1010###sois===38726###eois===38750###lif===23###soif===570###eoif===594###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testColor(1, 1, 1, 255);
  AKA_mark("lis===1011###sois===38754###eois===38776###lif===24###soif===598###eoif===620###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testColor(1, 1, 1, 1);
  AKA_mark("lis===1012###sois===38780###eois===38804###lif===25###soif===624###eoif===648###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testColor(0, 0, 0, 128);
  AKA_mark("lis===1013###sois===38808###eois===38834###lif===26###soif===652###eoif===678###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testColor(255, 0, 0, 128);
  AKA_mark("lis===1014###sois===38838###eois===38868###lif===27###soif===682###eoif===712###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testColor(127, 127, 127, 255);
  AKA_mark("lis===1015###sois===38872###eois===38902###lif===28###soif===716###eoif===746###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testColor(128, 128, 128, 255);
  AKA_mark("lis===1016###sois===38906###eois===38936###lif===29###soif===750###eoif===780###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testColor(127, 127, 127, 128);
  AKA_mark("lis===1017###sois===38940###eois===38970###lif===30###soif===784###eoif===814###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testColor(128, 128, 128, 128);
  //transparent single pixels
  AKA_mark("lis===1019###sois===39005###eois===39027###lif===32###soif===849###eoif===871###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testColor(0, 0, 0, 0);
  AKA_mark("lis===1020###sois===39031###eois===39055###lif===33###soif===875###eoif===899###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testColor(255, 0, 0, 0);
  AKA_mark("lis===1021###sois===39059###eois===39081###lif===34###soif===903###eoif===925###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testColor(1, 2, 3, 0);
  AKA_mark("lis===1022###sois===39085###eois===39113###lif===35###soif===929###eoif===957###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testColor(255, 255, 255, 0);
  AKA_mark("lis===1023###sois===39117###eois===39145###lif===36###soif===961###eoif===989###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testColor(254, 254, 254, 0);

  // This is mainly to test the Adam7 interlacing
  int AKA_BLOCK_LOOP_39202 = 0;
    AKA_mark("lis===1026###sois===39206###eois===39221###lif===39###soif===1050###eoif===1065###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");
for(unsigned h = 1; AKA_mark("lis===1026###sois===39222###eois===39228###lif===39###soif===1066###eoif===1072###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()") && (AKA_mark("lis===1026###sois===39222###eois===39228###lif===39###soif===1066###eoif===1072###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()") && (h < 12)); ({AKA_mark("lis===1026###sois===39230###eois===39233###lif===39###soif===1074###eoif===1077###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");h++;}))
  {
int AKA_BLOCK_LOOP_39238 = 0;
    AKA_mark("lis===1027###sois===39242###eois===39257###lif===40###soif===1086###eoif===1101###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");
for(unsigned w = 1; AKA_mark("lis===1027###sois===39258###eois===39264###lif===40###soif===1102###eoif===1108###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()") && (AKA_mark("lis===1027###sois===39258###eois===39264###lif===40###soif===1102###eoif===1108###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()") && (w < 12)); ({AKA_mark("lis===1027###sois===39266###eois===39269###lif===40###soif===1110###eoif===1113###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");w++;})) {
        AKA_BLOCK_LOOP_39238++;
        if (AKA_BLOCK_LOOP_39238 > 1000) {
            //break;
        }
    AKA_mark("lis===1028###sois===39278###eois===39293###lif===41###soif===1122###eoif===1137###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPNGCodec()");testSize(w, h);
  }
}

}

//Tests some specific color conversions with specific color bit combinations
/** Instrumented function testColorConvert() */
void testColorConvert() /* << Aka begin of function void testColorConvert() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testColorConvert.39388.stub"

  //test color conversions to RGBA8
  AKA_mark("lis===1035###sois===39449###eois===39536###lif===2###soif===66###eoif===153###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("1", LCT_GREY, 1, "11111111 11111111 11111111 11111111", LCT_RGBA, 8);
  AKA_mark("lis===1036###sois===39540###eois===39628###lif===3###soif===157###eoif===245###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("10", LCT_GREY, 2, "10101010 10101010 10101010 11111111", LCT_RGBA, 8);
  AKA_mark("lis===1037###sois===39632###eois===39722###lif===4###soif===249###eoif===339###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("1001", LCT_GREY, 4, "10011001 10011001 10011001 11111111", LCT_RGBA, 8);
  AKA_mark("lis===1038###sois===39726###eois===39820###lif===5###soif===343###eoif===437###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("10010101", LCT_GREY, 8, "10010101 10010101 10010101 11111111", LCT_RGBA, 8);
  AKA_mark("lis===1039###sois===39824###eois===39933###lif===6###soif===441###eoif===550###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("10010101 11111110", LCT_GREY_ALPHA, 8, "10010101 10010101 10010101 11111110", LCT_RGBA, 8);
  AKA_mark("lis===1040###sois===39937###eois===40065###lif===7###soif===554###eoif===682###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("10010101 00000001 11111110 00000001", LCT_GREY_ALPHA, 16, "10010101 10010101 10010101 11111110", LCT_RGBA, 8);
  AKA_mark("lis===1041###sois===40069###eois===40180###lif===8###soif===686###eoif===797###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("01010101 00000000 00110011", LCT_RGB, 8, "01010101 00000000 00110011 11111111", LCT_RGBA, 8);
  AKA_mark("lis===1042###sois===40184###eois===40305###lif===9###soif===801###eoif===922###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("01010101 00000000 00110011 10101010", LCT_RGBA, 8, "01010101 00000000 00110011 10101010", LCT_RGBA, 8);
  AKA_mark("lis===1043###sois===40309###eois===40448###lif===10###soif===926###eoif===1065###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("10101010 01010101 11111111 00000000 11001100 00110011", LCT_RGB, 16, "10101010 11111111 11001100 11111111", LCT_RGBA, 8);
  AKA_mark("lis===1044###sois===40452###eois===40610###lif===11###soif===1069###eoif===1227###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("10101010 01010101 11111111 00000000 11001100 00110011 11100111 00011000", LCT_RGBA, 16, "10101010 11111111 11001100 11100111", LCT_RGBA, 8);

  //test color conversions to RGB8
  AKA_mark("lis===1047###sois===40652###eois===40729###lif===14###soif===1269###eoif===1346###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("1", LCT_GREY, 1, "11111111 11111111 11111111", LCT_RGB, 8);
  AKA_mark("lis===1048###sois===40733###eois===40811###lif===15###soif===1350###eoif===1428###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("10", LCT_GREY, 2, "10101010 10101010 10101010", LCT_RGB, 8);
  AKA_mark("lis===1049###sois===40815###eois===40895###lif===16###soif===1432###eoif===1512###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("1001", LCT_GREY, 4, "10011001 10011001 10011001", LCT_RGB, 8);
  AKA_mark("lis===1050###sois===40899###eois===40983###lif===17###soif===1516###eoif===1600###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("10010101", LCT_GREY, 8, "10010101 10010101 10010101", LCT_RGB, 8);
  AKA_mark("lis===1051###sois===40987###eois===41086###lif===18###soif===1604###eoif===1703###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("10010101 11111110", LCT_GREY_ALPHA, 8, "10010101 10010101 10010101", LCT_RGB, 8);
  AKA_mark("lis===1052###sois===41090###eois===41208###lif===19###soif===1707###eoif===1825###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("10010101 00000001 11111110 00000001", LCT_GREY_ALPHA, 16, "10010101 10010101 10010101", LCT_RGB, 8);
  AKA_mark("lis===1053###sois===41212###eois===41313###lif===20###soif===1829###eoif===1930###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("01010101 00000000 00110011", LCT_RGB, 8, "01010101 00000000 00110011", LCT_RGB, 8);
  AKA_mark("lis===1054###sois===41317###eois===41428###lif===21###soif===1934###eoif===2045###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("01010101 00000000 00110011 10101010", LCT_RGBA, 8, "01010101 00000000 00110011", LCT_RGB, 8);
  AKA_mark("lis===1055###sois===41432###eois===41561###lif===22###soif===2049###eoif===2178###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("10101010 01010101 11111111 00000000 11001100 00110011", LCT_RGB, 16, "10101010 11111111 11001100", LCT_RGB, 8);
  AKA_mark("lis===1056###sois===41565###eois===41713###lif===23###soif===2182###eoif===2330###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("10101010 01010101 11111111 00000000 11001100 00110011 11100111 00011000", LCT_RGBA, 16, "10101010 11111111 11001100", LCT_RGB, 8);

  //test color conversions to RGBA16
  AKA_mark("lis===1059###sois===41757###eois===41881###lif===26###soif===2374###eoif===2498###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("1", LCT_GREY, 1, "11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111", LCT_RGBA, 16);
  AKA_mark("lis===1060###sois===41885###eois===42010###lif===27###soif===2502###eoif===2627###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("10", LCT_GREY, 2, "10101010 10101010 10101010 10101010 10101010 10101010 11111111 11111111", LCT_RGBA, 16);

  //test grayscale color conversions
  AKA_mark("lis===1063###sois===42054###eois===42114###lif===30###soif===2671###eoif===2731###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("1", LCT_GREY, 1, "11111111", LCT_GREY, 8);
  AKA_mark("lis===1064###sois===42118###eois===42187###lif===31###soif===2735###eoif===2804###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("1", LCT_GREY, 1, "1111111111111111", LCT_GREY, 16);
  AKA_mark("lis===1065###sois===42191###eois===42251###lif===32###soif===2808###eoif===2868###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("0", LCT_GREY, 1, "00000000", LCT_GREY, 8);
  AKA_mark("lis===1066###sois===42255###eois===42324###lif===33###soif===2872###eoif===2941###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("0", LCT_GREY, 1, "0000000000000000", LCT_GREY, 16);
  AKA_mark("lis===1067###sois===42328###eois===42389###lif===34###soif===2945###eoif===3006###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("11", LCT_GREY, 2, "11111111", LCT_GREY, 8);
  AKA_mark("lis===1068###sois===42393###eois===42463###lif===35###soif===3010###eoif===3080###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("11", LCT_GREY, 2, "1111111111111111", LCT_GREY, 16);
  AKA_mark("lis===1069###sois===42467###eois===42528###lif===36###soif===3084###eoif===3145###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("10", LCT_GREY, 2, "10101010", LCT_GREY, 8);
  AKA_mark("lis===1070###sois===42532###eois===42602###lif===37###soif===3149###eoif===3219###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("10", LCT_GREY, 2, "1010101010101010", LCT_GREY, 16);
  AKA_mark("lis===1071###sois===42606###eois===42669###lif===38###soif===3223###eoif===3286###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("1000", LCT_GREY, 4, "10001000", LCT_GREY, 8);
  AKA_mark("lis===1072###sois===42673###eois===42745###lif===39###soif===3290###eoif===3362###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("1000", LCT_GREY, 4, "1000100010001000", LCT_GREY, 16);
  AKA_mark("lis===1073###sois===42749###eois===42825###lif===40###soif===3366###eoif===3442###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("10110101", LCT_GREY, 8, "1011010110110101", LCT_GREY, 16);
  AKA_mark("lis===1074###sois===42829###eois===42905###lif===41###soif===3446###eoif===3522###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("1011010110110101", LCT_GREY, 16, "10110101", LCT_GREY, 8);

  //others
  AKA_mark("lis===1077###sois===42923###eois===43028###lif===44###soif===3540###eoif===3645###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("11111111 11111111 11111111 00000000 00000000 00000000", LCT_RGB, 8, "10", LCT_GREY, 1);
  AKA_mark("lis===1078###sois===43032###eois===43192###lif===45###soif===3649###eoif===3809###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert()");colorConvertTest("11111111 11111111 11111111 11111111 11111111 11111111 00000000 00000000 00000000 00000000 00000000 00000000", LCT_RGB, 16, "10", LCT_GREY, 1);
}

//This tests color conversions from any color model to any color model, with any bit depth
//But it tests only with colors black and white, because that are the only colors every single model supports
/** Instrumented function testColorConvert2() */
void testColorConvert2() /* << Aka begin of function void testColorConvert2() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testColorConvert2.43407.stub"

  AKA_mark("lis===1084###sois===43432###eois===43478###lif===1###soif===30###eoif===76###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");std::cout << "testColorConvert2" << std::endl;
  AKA_mark("lis===1085###sois===43482###eois===43559###lif===2###soif===80###eoif===157###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");struct Combo {
    LodePNGColorType colortype;
    unsigned bitdepth;
  };

  AKA_mark("lis===1090###sois===43565###eois===43857###lif===7###soif===163###eoif===455###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");Combo combos[15] = { { LCT_GREY, 1}, { LCT_GREY, 2}, { LCT_GREY, 4}, { LCT_GREY, 8}, { LCT_GREY, 16}, { LCT_RGB, 8}, { LCT_RGB, 16}, { LCT_PALETTE, 1}, { LCT_PALETTE, 2}, { LCT_PALETTE, 4}, { LCT_PALETTE, 8}, { LCT_GREY_ALPHA, 8}, { LCT_GREY_ALPHA, 16}, { LCT_RGBA, 8}, { LCT_RGBA, 16},
  };

  AKA_mark("lis===1093###sois===43863###eois===43884###lif===10###soif===461###eoif===482###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");lodepng::State state;
  AKA_mark("lis===1094###sois===43888###eois===43937###lif===11###soif===486###eoif===535###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");LodePNGColorMode& mode_in = state.info_png.color;
  AKA_mark("lis===1095###sois===43941###eois===43985###lif===12###soif===539###eoif===583###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");LodePNGColorMode& mode_out = state.info_raw;
  AKA_mark("lis===1096###sois===43989###eois===44013###lif===13###soif===587###eoif===611###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");LodePNGColorMode mode_8;
  AKA_mark("lis===1097###sois===44017###eois===44050###lif===14###soif===615###eoif===648###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");lodepng_color_mode_init(&mode_8);

  int AKA_BLOCK_LOOP_44056 = 0;
    AKA_mark("lis===1099###sois===44060###eois===44073###lif===16###soif===658###eoif===671###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");
for(size_t i = 0; AKA_mark("lis===1099###sois===44074###eois===44081###lif===16###soif===672###eoif===679###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()") && (AKA_mark("lis===1099###sois===44074###eois===44081###lif===16###soif===672###eoif===679###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()") && (i < 256)); ({AKA_mark("lis===1099###sois===44083###eois===44086###lif===16###soif===681###eoif===684###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");i++;})) {
        AKA_BLOCK_LOOP_44056++;
        if (AKA_BLOCK_LOOP_44056 > 1000) {
            //break;
        }
    AKA_mark("lis===1100###sois===44095###eois===44123###lif===17###soif===693###eoif===721###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");size_t j = i == 1 ? 255 : i;
    AKA_mark("lis===1101###sois===44129###eois===44173###lif===18###soif===727###eoif===771###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");lodepng_palette_add(&mode_in, j, j, j, 255);
    AKA_mark("lis===1102###sois===44179###eois===44224###lif===19###soif===777###eoif===822###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");lodepng_palette_add(&mode_out, j, j, j, 255);
  }

  int AKA_BLOCK_LOOP_44235 = 0;
    AKA_mark("lis===1105###sois===44239###eois===44252###lif===22###soif===837###eoif===850###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");
for(size_t i = 0; AKA_mark("lis===1105###sois===44253###eois===44259###lif===22###soif===851###eoif===857###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()") && (AKA_mark("lis===1105###sois===44253###eois===44259###lif===22###soif===851###eoif===857###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()") && (i < 15)); ({AKA_mark("lis===1105###sois===44261###eois===44264###lif===22###soif===859###eoif===862###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");i++;})) {
        AKA_BLOCK_LOOP_44235++;
        if (AKA_BLOCK_LOOP_44235 > 1000) {
            //break;
        }
    AKA_mark("lis===1106###sois===44273###eois===44313###lif===23###soif===871###eoif===911###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");mode_in.colortype = combos[i].colortype;
    AKA_mark("lis===1107###sois===44319###eois===44357###lif===24###soif===917###eoif===955###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");mode_in.bitdepth = combos[i].bitdepth;

    int AKA_BLOCK_LOOP_44365 = 0;
    AKA_mark("lis===1109###sois===44369###eois===44382###lif===26###soif===967###eoif===980###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");
for(size_t j = 0; AKA_mark("lis===1109###sois===44383###eois===44389###lif===26###soif===981###eoif===987###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()") && (AKA_mark("lis===1109###sois===44383###eois===44389###lif===26###soif===981###eoif===987###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()") && (j < 15)); ({AKA_mark("lis===1109###sois===44391###eois===44394###lif===26###soif===989###eoif===992###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");j++;})) {
        AKA_BLOCK_LOOP_44365++;
        if (AKA_BLOCK_LOOP_44365 > 1000) {
            //break;
        }
      AKA_mark("lis===1110###sois===44405###eois===44446###lif===27###soif===1003###eoif===1044###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");mode_out.colortype = combos[j].colortype;
      AKA_mark("lis===1111###sois===44454###eois===44493###lif===28###soif===1052###eoif===1091###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");mode_out.bitdepth = combos[j].bitdepth;

      AKA_mark("lis===1113###sois===44503###eois===44716###lif===30###soif===1101###eoif===1314###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");unsigned char eight[36] = {
          0,0,0,255, 255,255,255,255,
          0,0,0,255, 255,255,255,255,
          255,255,255,255, 0,0,0,255,
          255,255,255,255, 255,255,255,255,
          0,0,0,255 }; //input in RGBA8
      AKA_mark("lis===1119###sois===44741###eois===44762###lif===36###soif===1339###eoif===1360###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");unsigned char in[72]; //custom input color type
      AKA_mark("lis===1120###sois===44796###eois===44818###lif===37###soif===1394###eoif===1416###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");unsigned char out[72]; //custom output color type
      AKA_mark("lis===1121###sois===44853###eois===44878###lif===38###soif===1451###eoif===1476###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");unsigned char eight2[36]; //back in RGBA8 after all conversions to check correctness
      AKA_mark("lis===1122###sois===44945###eois===44964###lif===39###soif===1543###eoif===1562###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");unsigned error = 0;

      AKA_mark("lis===1124###sois===44974###eois===45035###lif===41###soif===1572###eoif===1633###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");error |= lodepng_convert(in, eight, &mode_in, &mode_8, 3, 3);
      if(AKA_mark("lis===1125###sois===45046###eois===45052###lif===42###soif===1644###eoif===1650###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()") && (AKA_mark("lis===1125###sois===45046###eois===45052###lif===42###soif===1644###eoif===1650###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()") && (!error))) {
AKA_mark("lis===1125###sois===45054###eois===45115###lif===42###soif===1652###eoif===1713###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");error |= lodepng_convert(out, in, &mode_out, &mode_in, 3, 3);
}

else {
AKA_mark("lis===-1125-###sois===-45046-###eois===-450466-###lif===-42-###soif===-###eoif===-1650-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");
} //Test input to output type
      if(AKA_mark("lis===1126###sois===45154###eois===45160###lif===43###soif===1752###eoif===1758###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()") && (AKA_mark("lis===1126###sois===45154###eois===45160###lif===43###soif===1752###eoif===1758###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()") && (!error))) {
AKA_mark("lis===1126###sois===45162###eois===45226###lif===43###soif===1760###eoif===1824###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");error |= lodepng_convert(eight2, out, &mode_8, &mode_out, 3, 3);
}

else {
AKA_mark("lis===-1126-###sois===-45154-###eois===-451546-###lif===-43-###soif===-###eoif===-1758-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");
}

      if(AKA_mark("lis===1128###sois===45239###eois===45245###lif===45###soif===1837###eoif===1843###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()") && (AKA_mark("lis===1128###sois===45239###eois===45245###lif===45###soif===1837###eoif===1843###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()") && (!error))) {
        int AKA_BLOCK_LOOP_45258 = 0;
    AKA_mark("lis===1129###sois===45262###eois===45275###lif===46###soif===1860###eoif===1873###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");
for(size_t k = 0; AKA_mark("lis===1129###sois===45276###eois===45282###lif===46###soif===1874###eoif===1880###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()") && (AKA_mark("lis===1129###sois===45276###eois===45282###lif===46###soif===1874###eoif===1880###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()") && (k < 36)); ({AKA_mark("lis===1129###sois===45284###eois===45287###lif===46###soif===1882###eoif===1885###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");k++;})) {
        AKA_BLOCK_LOOP_45258++;
        if (AKA_BLOCK_LOOP_45258 > 1000) {
            //break;
        }
          if(AKA_mark("lis===1130###sois===45305###eois===45326###lif===47###soif===1903###eoif===1924###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()") && (AKA_mark("lis===1130###sois===45305###eois===45326###lif===47###soif===1903###eoif===1924###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()") && (eight[k] != eight2[k]))) {
            AKA_mark("lis===1131###sois===45343###eois===45357###lif===48###soif===1941###eoif===1955###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");error = 99999;
            AKA_mark("lis===1132###sois===45371###eois===45377###lif===49###soif===1969###eoif===1975###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");break;
          }
else {
AKA_mark("lis===-1130-###sois===-45305-###eois===-4530521-###lif===-47-###soif===-###eoif===-1924-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");
}
        }
      }
else {
AKA_mark("lis===-1128-###sois===-45239-###eois===-452396-###lif===-45-###soif===-###eoif===-1843-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");
}

      if(AKA_mark("lis===1137###sois===45423###eois===45428###lif===54###soif===2021###eoif===2026###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()") && (AKA_mark("lis===1137###sois===45423###eois===45428###lif===54###soif===2021###eoif===2026###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()") && (error))) {
        AKA_mark("lis===1138###sois===45441###eois===45738###lif===55###soif===2039###eoif===2336###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");std::cout << "Error " << error << " i: " << i << " j: " << j
          << " colortype i: " << combos[i].colortype
          << " bitdepth i: " << combos[i].bitdepth
          << " colortype j: " << combos[j].colortype
          << " bitdepth j: " << combos[j].bitdepth
          << std::endl;
        if(AKA_mark("lis===1144###sois===45751###eois===45765###lif===61###soif===2349###eoif===2363###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()") && (AKA_mark("lis===1144###sois===45751###eois===45765###lif===61###soif===2349###eoif===2363###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()") && (error != 99999))) {
AKA_mark("lis===1144###sois===45767###eois===45794###lif===61###soif===2365###eoif===2392###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");ASSERT_NO_PNG_ERROR(error);
}

        else {
AKA_mark("lis===1145###sois===45809###eois===45816###lif===62###soif===2407###eoif===2414###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");fail();
}

      }
else {
AKA_mark("lis===-1137-###sois===-45423-###eois===-454235-###lif===-54-###soif===-###eoif===-2026-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorConvert2()");
}
    }
  }
}

//if compressible is true, the test will also assert that the compressed string is smaller
/** Instrumented function testCompressStringZlib(std::string const&,bool) */
void testCompressStringZlib(const std::string& text, bool compressible) /* << Aka begin of function void testCompressStringZlib(const std::string& text, bool compressible) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testCompressStringZlib.45941.stub"

  if(AKA_mark("lis===1153###sois===46016###eois===46033###lif===1###soif===80###eoif===97###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)") && (AKA_mark("lis===1153###sois===46016###eois===46033###lif===1###soif===80###eoif===97###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)") && (text.size() < 500))) {
AKA_mark("lis===1153###sois===46035###eois===46097###lif===1###soif===99###eoif===161###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");std::cout << "compress test with text: " << text << std::endl;
}

  else {
AKA_mark("lis===1154###sois===46106###eois===46182###lif===2###soif===170###eoif===246###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");std::cout << "compress test with text length: " << text.size() << std::endl;
}


  AKA_mark("lis===1156###sois===46188###eois===46231###lif===4###soif===252###eoif===295###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");std::vector<unsigned char> in(text.size());
  int AKA_BLOCK_LOOP_46235 = 0;
    AKA_mark("lis===1157###sois===46239###eois===46252###lif===5###soif===303###eoif===316###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");
for(size_t i = 0; AKA_mark("lis===1157###sois===46253###eois===46268###lif===5###soif===317###eoif===332###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)") && (AKA_mark("lis===1157###sois===46253###eois===46268###lif===5###soif===317###eoif===332###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)") && (i < text.size())); ({AKA_mark("lis===1157###sois===46270###eois===46273###lif===5###soif===334###eoif===337###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");i++;})) {
AKA_mark("lis===1157###sois===46275###eois===46306###lif===5###soif===339###eoif===370###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");in[i] = (unsigned char)text[i];
}

  AKA_mark("lis===1158###sois===46310###eois===46333###lif===6###soif===374###eoif===397###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");unsigned char* out = 0;
  AKA_mark("lis===1159###sois===46337###eois===46356###lif===7###soif===401###eoif===420###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");size_t outsize = 0;
  AKA_mark("lis===1160###sois===46360###eois===46379###lif===8###soif===424###eoif===443###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");unsigned error = 0;

  AKA_mark("lis===1162###sois===46385###eois===46503###lif===10###soif===449###eoif===567###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");error = lodepng_zlib_compress(&out, &outsize, in.empty() ? 0 : &in[0], in.size(), &lodepng_default_compress_settings);
  AKA_mark("lis===1163###sois===46507###eois===46534###lif===11###soif===571###eoif===598###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");ASSERT_NO_PNG_ERROR(error);
  if(AKA_mark("lis===1164###sois===46541###eois===46553###lif===12###soif===605###eoif===617###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)") && (AKA_mark("lis===1164###sois===46541###eois===46553###lif===12###soif===605###eoif===617###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)") && (compressible))) {
AKA_mark("lis===1164###sois===46555###eois===46587###lif===12###soif===619###eoif===651###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");assertTrue(outsize < in.size());
}

else {
AKA_mark("lis===-1164-###sois===-46541-###eois===-4654112-###lif===-12-###soif===-###eoif===-617-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");
}

  AKA_mark("lis===1166###sois===46593###eois===46617###lif===14###soif===657###eoif===681###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");unsigned char* out2 = 0;
  AKA_mark("lis===1167###sois===46621###eois===46641###lif===15###soif===685###eoif===705###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");size_t outsize2 = 0;

  AKA_mark("lis===1169###sois===46647###eois===46749###lif===17###soif===711###eoif===813###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");error = lodepng_zlib_decompress(&out2, &outsize2, out, outsize, &lodepng_default_decompress_settings);
  AKA_mark("lis===1170###sois===46753###eois===46780###lif===18###soif===817###eoif===844###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");ASSERT_NO_PNG_ERROR(error);
  AKA_mark("lis===1171###sois===46784###eois===46818###lif===19###soif===848###eoif===882###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");ASSERT_EQUALS(outsize2, in.size());
  int AKA_BLOCK_LOOP_46823 = 0;
    AKA_mark("lis===1172###sois===46827###eois===46840###lif===20###soif===891###eoif===904###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");
for(size_t i = 0; AKA_mark("lis===1172###sois===46841###eois===46854###lif===20###soif===905###eoif===918###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)") && (AKA_mark("lis===1172###sois===46841###eois===46854###lif===20###soif===905###eoif===918###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)") && (i < in.size())); ({AKA_mark("lis===1172###sois===46856###eois===46859###lif===20###soif===920###eoif===923###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");i++;})) {
        AKA_BLOCK_LOOP_46823++;
        if (AKA_BLOCK_LOOP_46823 > 1000) {
            //break;
        }AKA_mark("lis===1172###sois===46861###eois===46890###lif===20###soif===925###eoif===954###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");ASSERT_EQUALS(in[i], out2[i])};

  AKA_mark("lis===1174###sois===46897###eois===46907###lif===22###soif===961###eoif===971###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");free(out);
  AKA_mark("lis===1175###sois===46911###eois===46922###lif===23###soif===975###eoif===986###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressStringZlib(std::string const&,bool)");free(out2);
}

/** Instrumented function testCompressZlib() */
void testCompressZlib() /* << Aka begin of function void testCompressZlib() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressZlib()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testCompressZlib.46934.stub"

  AKA_mark("lis===1179###sois===46958###eois===46992###lif===1###soif===29###eoif===63###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressZlib()");testCompressStringZlib("", false);
  AKA_mark("lis===1180###sois===46996###eois===47031###lif===2###soif===67###eoif===102###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressZlib()");testCompressStringZlib("a", false);
  AKA_mark("lis===1181###sois===47035###eois===47071###lif===3###soif===106###eoif===142###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressZlib()");testCompressStringZlib("aa", false);
  AKA_mark("lis===1182###sois===47075###eois===47194###lif===4###soif===146###eoif===265###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressZlib()");testCompressStringZlib("ababababababababababababababababababababababababababababababababababababababababababab", true);
  AKA_mark("lis===1183###sois===47198###eois===47317###lif===5###soif===269###eoif===388###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressZlib()");testCompressStringZlib("abaaaabaabbbaabbabbababbbbabababbbaabbbaaaabbbbabbbabbbaababbbbbaaabaabbabaaaabbbbbbab", true);
  AKA_mark("lis===1184###sois===47321###eois===47391###lif===6###soif===392###eoif===462###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressZlib()");testCompressStringZlib("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab", true);
  AKA_mark("lis===1185###sois===47395###eois===47460###lif===7###soif===466###eoif===531###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressZlib()");testCompressStringZlib("omnomnomnomnomnomnomnomnomnomnom", true);
  AKA_mark("lis===1186###sois===47464###eois===47586###lif===8###soif===535###eoif===657###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressZlib()");testCompressStringZlib("the quick brown fox jumps over the lazy dog. the quick brown fox jumps over the lazy dog.", true);
  AKA_mark("lis===1187###sois===47590###eois===47635###lif===9###soif===661###eoif===706###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressZlib()");testCompressStringZlib("abracadabra", false);
  AKA_mark("lis===1188###sois===47639###eois===47738###lif===10###soif===710###eoif===809###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressZlib()");testCompressStringZlib("hello hello hello hello hello hello hello hello hello hello hello?", true);
  AKA_mark("lis===1189###sois===47742###eois===47897###lif===11###soif===813###eoif===968###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressZlib()");testCompressStringZlib("WPgZX2D*um0H::,4/KU\"kt\"Ne\"#Qa.&#<aF9{jag]|{hv,IXez\
\\DKn5zYdV{XxBi=n|1J-TwakWvp[b8|-kOcZ@QkAxJSMeZ0l&<*w0BP/CXM(LFH'", false);
  AKA_mark("lis===1191###sois===47901###eois===47988###lif===13###soif===972###eoif===1059###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressZlib()");testCompressStringZlib("asdfhlkhfafsduyfbasiuytfgbiasuidygiausygdifaubsydfsdf", false);
  AKA_mark("lis===1192###sois===47992###eois===48076###lif===14###soif===1063###eoif===1147###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressZlib()");testCompressStringZlib("418541499849814614617987416457317375467441841687487", true);
  AKA_mark("lis===1193###sois===48080###eois===48190###lif===15###soif===1151###eoif===1261###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressZlib()");testCompressStringZlib("3.141592653589793238462643383279502884197169399375105820974944592307816406286", true);
  AKA_mark("lis===1194###sois===48194###eois===48321###lif===16###soif===1265###eoif===1392###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCompressZlib()");testCompressStringZlib("lodepng_zlib_decompress(&out2, &outsize2, out, outsize, &lodepng_default_decompress_settings);", true);
}

/** Instrumented function testDiskCompressZlib(std::string const&) */
void testDiskCompressZlib(const std::string& filename) /* << Aka begin of function void testDiskCompressZlib(const std::string& filename) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testDiskCompressZlib(std::string const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testDiskCompressZlib.48333.stub"

  AKA_mark("lis===1198###sois===48388###eois===48456###lif===1###soif===60###eoif===128###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testDiskCompressZlib(std::string const&)");std::cout << "testDiskCompressZlib: File " << filename << std::endl;

  AKA_mark("lis===1200###sois===48462###eois===48496###lif===3###soif===134###eoif===168###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testDiskCompressZlib(std::string const&)");std::vector<unsigned char> buffer;
  AKA_mark("lis===1201###sois===48500###eois===48537###lif===4###soif===172###eoif===209###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testDiskCompressZlib(std::string const&)");lodepng::load_file(buffer, filename);
  AKA_mark("lis===1202###sois===48541###eois===48555###lif===5###soif===213###eoif===227###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testDiskCompressZlib(std::string const&)");std::string f;
  int AKA_BLOCK_LOOP_48559 = 0;
    AKA_mark("lis===1203###sois===48563###eois===48576###lif===6###soif===235###eoif===248###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testDiskCompressZlib(std::string const&)");
for(size_t i = 0; AKA_mark("lis===1203###sois===48577###eois===48594###lif===6###soif===249###eoif===266###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testDiskCompressZlib(std::string const&)") && (AKA_mark("lis===1203###sois===48577###eois===48594###lif===6###soif===249###eoif===266###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testDiskCompressZlib(std::string const&)") && (i < buffer.size())); ({AKA_mark("lis===1203###sois===48596###eois===48599###lif===6###soif===268###eoif===271###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testDiskCompressZlib(std::string const&)");i++;})) {
AKA_mark("lis===1203###sois===48601###eois===48622###lif===6###soif===273###eoif===294###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testDiskCompressZlib(std::string const&)");f += (char)buffer[i];
}

  AKA_mark("lis===1204###sois===48626###eois===48659###lif===7###soif===298###eoif===331###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testDiskCompressZlib(std::string const&)");testCompressStringZlib(f, false);
}

/** Instrumented function testDiskPNG(std::string const&) */
void testDiskPNG(const std::string& filename) /* << Aka begin of function void testDiskPNG(const std::string& filename) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testDiskPNG(std::string const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testDiskPNG.48671.stub"

  AKA_mark("lis===1208###sois===48717###eois===48776###lif===1###soif===51###eoif===110###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testDiskPNG(std::string const&)");std::cout << "testDiskPNG: File " << filename << std::endl;

  AKA_mark("lis===1210###sois===48782###eois===48794###lif===3###soif===116###eoif===128###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testDiskPNG(std::string const&)");Image image;
  AKA_mark("lis===1211###sois===48798###eois===48824###lif===4###soif===132###eoif===158###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testDiskPNG(std::string const&)");image.colorType = LCT_RGB;
  AKA_mark("lis===1212###sois===48828###eois===48847###lif===5###soif===162###eoif===181###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testDiskPNG(std::string const&)");image.bitDepth = 8;
  AKA_mark("lis===1213###sois===48851###eois===48966###lif===6###soif===185###eoif===300###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testDiskPNG(std::string const&)");unsigned error = lodepng::decode(image.data, image.width, image.height, filename, image.colorType, image.bitDepth);
  AKA_mark("lis===1214###sois===48970###eois===48997###lif===7###soif===304###eoif===331###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testDiskPNG(std::string const&)");ASSERT_NO_PNG_ERROR(error);

  AKA_mark("lis===1216###sois===49003###eois===49022###lif===9###soif===337###eoif===356###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testDiskPNG(std::string const&)");doCodecTest(image);
}

/** Instrumented function strtovector(std::string const&) */
std::vector<unsigned> strtovector(const std::string& numbers) /* << Aka begin of function std::vector<unsigned> strtovector(const std::string& numbers) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\strtovector(std::string const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.strtovector.49051.stub"

  AKA_mark("lis===1220###sois===49096###eois===49125###lif===1###soif===67###eoif===96###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\strtovector(std::string const&)");std::vector<unsigned> result;
  AKA_mark("lis===1221###sois===49129###eois===49159###lif===2###soif===100###eoif===130###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\strtovector(std::string const&)");std::stringstream ss(numbers);
  AKA_mark("lis===1222###sois===49163###eois===49174###lif===3###soif===134###eoif===145###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\strtovector(std::string const&)");unsigned i;
  int AKA_BLOCK_LOOP_49178 = 0;
    while(AKA_mark("lis===1223###sois===49184###eois===49191###lif===4###soif===155###eoif===162###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\strtovector(std::string const&)") && (AKA_mark("lis===1223###sois===49184###eois===49191###lif===4###soif===155###eoif===162###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\strtovector(std::string const&)") && (ss >> i))) {
AKA_mark("lis===1223###sois===49193###eois===49213###lif===4###soif===164###eoif===184###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\strtovector(std::string const&)");result.push_back(i);
}

  AKA_mark("lis===1224###sois===49217###eois===49231###lif===5###soif===188###eoif===202###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\strtovector(std::string const&)");return result;
}

/** Instrumented function doTestHuffmanCodeLengths(std::string const&,std::string const&,size_t) */
void doTestHuffmanCodeLengths(const std::string& expectedstr, const std::string& counts, size_t bitlength) /* << Aka begin of function void doTestHuffmanCodeLengths(const std::string& expectedstr, const std::string& counts, size_t bitlength) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doTestHuffmanCodeLengths(std::string const&,std::string const&,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.doTestHuffmanCodeLengths.49243.stub"

  AKA_mark("lis===1228###sois===49350###eois===49408###lif===1###soif===112###eoif===170###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doTestHuffmanCodeLengths(std::string const&,std::string const&,size_t)");std::vector<unsigned> expected = strtovector(expectedstr);
  AKA_mark("lis===1229###sois===49412###eois===49462###lif===2###soif===174###eoif===224###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doTestHuffmanCodeLengths(std::string const&,std::string const&,size_t)");std::vector<unsigned> count = strtovector(counts);
  AKA_mark("lis===1230###sois===49466###eois===49531###lif===3###soif===228###eoif===293###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doTestHuffmanCodeLengths(std::string const&,std::string const&,size_t)");std::cout << "doTestHuffmanCodeLengths: " << counts << std::endl;
  AKA_mark("lis===1231###sois===49535###eois===49578###lif===4###soif===297###eoif===340###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doTestHuffmanCodeLengths(std::string const&,std::string const&,size_t)");std::vector<unsigned> result(count.size());
  AKA_mark("lis===1232###sois===49582###eois===49676###lif===5###soif===344###eoif===438###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doTestHuffmanCodeLengths(std::string const&,std::string const&,size_t)");unsigned error = lodepng_huffman_code_lengths(&result[0], &count[0], count.size(), bitlength);
  AKA_mark("lis===1233###sois===49680###eois===49724###lif===6###soif===442###eoif===486###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doTestHuffmanCodeLengths(std::string const&,std::string const&,size_t)");ASSERT_NO_PNG_ERROR_MSG(error, "errorcode");
  AKA_mark("lis===1234###sois===49728###eois===49755###lif===7###soif===490###eoif===517###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doTestHuffmanCodeLengths(std::string const&,std::string const&,size_t)");std::stringstream ss1, ss2;
  int AKA_BLOCK_LOOP_49759 = 0;
    AKA_mark("lis===1235###sois===49763###eois===49776###lif===8###soif===525###eoif===538###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doTestHuffmanCodeLengths(std::string const&,std::string const&,size_t)");
for(size_t i = 0; AKA_mark("lis===1235###sois===49777###eois===49793###lif===8###soif===539###eoif===555###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doTestHuffmanCodeLengths(std::string const&,std::string const&,size_t)") && (AKA_mark("lis===1235###sois===49777###eois===49793###lif===8###soif===539###eoif===555###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doTestHuffmanCodeLengths(std::string const&,std::string const&,size_t)") && (i < count.size())); ({AKA_mark("lis===1235###sois===49795###eois===49798###lif===8###soif===557###eoif===560###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doTestHuffmanCodeLengths(std::string const&,std::string const&,size_t)");i++;})) {
        AKA_BLOCK_LOOP_49759++;
        if (AKA_BLOCK_LOOP_49759 > 1000) {
            //break;
        }
    AKA_mark("lis===1236###sois===49807###eois===49833###lif===9###soif===569###eoif===595###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doTestHuffmanCodeLengths(std::string const&,std::string const&,size_t)");ss1 << expected[i] << " ";
    AKA_mark("lis===1237###sois===49839###eois===49863###lif===10###soif===601###eoif===625###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doTestHuffmanCodeLengths(std::string const&,std::string const&,size_t)");ss2 << result[i] << " ";
  }
  AKA_mark("lis===1239###sois===49872###eois===49916###lif===12###soif===634###eoif===678###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doTestHuffmanCodeLengths(std::string const&,std::string const&,size_t)");assertEquals(ss1.str(), ss2.str(), "value");
}

/** Instrumented function testHuffmanCodeLengths() */
void testHuffmanCodeLengths() /* << Aka begin of function void testHuffmanCodeLengths() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testHuffmanCodeLengths.49928.stub"

  AKA_mark("lis===1243###sois===49958###eois===49981###lif===1###soif===35###eoif===58###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");bool atleasttwo = true; //LodePNG generates at least two, instead of at least one, symbol
  if(AKA_mark("lis===1244###sois===50054###eois===50064###lif===2###soif===131###eoif===141###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()") && (AKA_mark("lis===1244###sois===50054###eois===50064###lif===2###soif===131###eoif===141###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()") && (atleasttwo))) {
    AKA_mark("lis===1245###sois===50073###eois===50116###lif===3###soif===150###eoif===193###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("1 1", "0 0", 16);
    AKA_mark("lis===1246###sois===50122###eois===50169###lif===4###soif===199###eoif===246###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("1 1 0", "0 0 0", 16);
    AKA_mark("lis===1247###sois===50175###eois===50218###lif===5###soif===252###eoif===295###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("1 1", "1 0", 16);
    AKA_mark("lis===1248###sois===50224###eois===50295###lif===6###soif===301###eoif===372###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("1 1 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0", 16);
    AKA_mark("lis===1249###sois===50301###eois===50372###lif===7###soif===378###eoif===449###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("1 1 0 0 0 0 0 0 0", "1 0 0 0 0 0 0 0 0", 16);
    AKA_mark("lis===1250###sois===50378###eois===50449###lif===8###soif===455###eoif===526###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("1 1 0 0 0 0 0 0 0", "0 1 0 0 0 0 0 0 0", 16);
    AKA_mark("lis===1251###sois===50455###eois===50526###lif===9###soif===532###eoif===603###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("1 0 0 0 0 0 0 0 1", "0 0 0 0 0 0 0 0 1", 16);
    AKA_mark("lis===1252###sois===50532###eois===50603###lif===10###soif===609###eoif===680###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("0 0 0 0 0 0 0 1 1", "0 0 0 0 0 0 0 1 1", 16);
  } else {
    AKA_mark("lis===1254###sois===50621###eois===50664###lif===12###soif===698###eoif===741###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("1 0", "0 0", 16);
    AKA_mark("lis===1255###sois===50670###eois===50717###lif===13###soif===747###eoif===794###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("1 0 0", "0 0 0", 16);
    AKA_mark("lis===1256###sois===50723###eois===50766###lif===14###soif===800###eoif===843###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("1 0", "1 0", 16);
    AKA_mark("lis===1257###sois===50772###eois===50811###lif===15###soif===849###eoif===888###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("1", "1", 16);
    AKA_mark("lis===1258###sois===50817###eois===50856###lif===16###soif===894###eoif===933###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("1", "0", 16);
  }
  AKA_mark("lis===1260###sois===50865###eois===50908###lif===18###soif===942###eoif===985###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("1 1", "1 1", 16);
  AKA_mark("lis===1261###sois===50912###eois===50957###lif===19###soif===989###eoif===1034###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("1 1", "1 100", 16);
  AKA_mark("lis===1262###sois===50961###eois===51008###lif===20###soif===1038###eoif===1085###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("2 2 1", "1 2 3", 16);
  AKA_mark("lis===1263###sois===51012###eois===51059###lif===21###soif===1089###eoif===1136###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("2 1 2", "2 3 1", 16);
  AKA_mark("lis===1264###sois===51063###eois===51110###lif===22###soif===1140###eoif===1187###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("1 2 2", "3 1 2", 16);
  AKA_mark("lis===1265###sois===51114###eois===51168###lif===23###soif===1191###eoif===1245###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("3 3 2 1", "1 30 31 32", 16);
  AKA_mark("lis===1266###sois===51172###eois===51225###lif===24###soif===1249###eoif===1302###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("2 2 2 2", "1 30 31 32", 2);
  AKA_mark("lis===1267###sois===51229###eois===51298###lif===25###soif===1306###eoif===1375###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testHuffmanCodeLengths()");doTestHuffmanCodeLengths("5 5 4 4 4 3 3 1", "1 2 3 4 5 6 7 500", 16);
}

/*
Create a PNG image with all known chunks (except only one of tEXt or zTXt) plus
unknown chunks, and a palette.
*/
/** Instrumented function createComplexPNG(std::vector<unsigned char>&) */
void createComplexPNG(std::vector<unsigned char>& png) /* << Aka begin of function void createComplexPNG(std::vector<unsigned char>& png) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.createComplexPNG.51431.stub"

  AKA_mark("lis===1275###sois===51486###eois===51510###lif===1###soif===60###eoif===84###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");unsigned w = 16, h = 17;
  AKA_mark("lis===1276###sois===51514###eois===51554###lif===2###soif===88###eoif===128###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");std::vector<unsigned char> image(w * h);
  int AKA_BLOCK_LOOP_51558 = 0;
    AKA_mark("lis===1277###sois===51562###eois===51575###lif===3###soif===136###eoif===149###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");
for(size_t i = 0; AKA_mark("lis===1277###sois===51576###eois===51585###lif===3###soif===150###eoif===159###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)") && (AKA_mark("lis===1277###sois===51576###eois===51585###lif===3###soif===150###eoif===159###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)") && (i < w * h)); ({AKA_mark("lis===1277###sois===51587###eois===51590###lif===3###soif===161###eoif===164###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");i++;})) {
        AKA_BLOCK_LOOP_51558++;
        if (AKA_BLOCK_LOOP_51558 > 1000) {
            //break;
        }
    AKA_mark("lis===1278###sois===51599###eois===51618###lif===4###soif===173###eoif===192###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");image[i] = i % 256;
  }

  AKA_mark("lis===1281###sois===51629###eois===51650###lif===7###soif===203###eoif===224###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");lodepng::State state;
  AKA_mark("lis===1282###sois===51654###eois===51689###lif===8###soif===228###eoif===263###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");LodePNGInfo& info = state.info_png;
  AKA_mark("lis===1283###sois===51693###eois===51728###lif===9###soif===267###eoif===302###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");info.color.colortype = LCT_PALETTE;
  AKA_mark("lis===1284###sois===51732###eois===51756###lif===10###soif===306###eoif===330###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");info.color.bitdepth = 8;
  AKA_mark("lis===1285###sois===51760###eois===51799###lif===11###soif===334###eoif===373###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");state.info_raw.colortype = LCT_PALETTE;
  AKA_mark("lis===1286###sois===51803###eois===51831###lif===12###soif===377###eoif===405###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");state.info_raw.bitdepth = 8;
  AKA_mark("lis===1287###sois===51835###eois===51870###lif===13###soif===409###eoif===444###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");state.encoder.auto_convert = false;
  AKA_mark("lis===1288###sois===51874###eois===51909###lif===14###soif===448###eoif===483###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");state.encoder.text_compression = 1;
  AKA_mark("lis===1289###sois===51913###eois===51938###lif===15###soif===487###eoif===512###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");state.encoder.add_id = 1;
  int AKA_BLOCK_LOOP_51942 = 0;
    AKA_mark("lis===1290###sois===51946###eois===51959###lif===16###soif===520###eoif===533###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");
for(size_t i = 0; AKA_mark("lis===1290###sois===51960###eois===51967###lif===16###soif===534###eoif===541###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)") && (AKA_mark("lis===1290###sois===51960###eois===51967###lif===16###soif===534###eoif===541###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)") && (i < 256)); ({AKA_mark("lis===1290###sois===51969###eois===51972###lif===16###soif===543###eoif===546###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");i++;})) {
        AKA_BLOCK_LOOP_51942++;
        if (AKA_BLOCK_LOOP_51942 > 1000) {
            //break;
        }
    AKA_mark("lis===1291###sois===51981###eois===52026###lif===17###soif===555###eoif===600###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");lodepng_palette_add(&info.color, i, i, i, i);
    AKA_mark("lis===1292###sois===52032###eois===52081###lif===18###soif===606###eoif===655###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");lodepng_palette_add(&state.info_raw, i, i, i, i);
  }

  AKA_mark("lis===1295###sois===52092###eois===52120###lif===21###soif===666###eoif===694###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");info.background_defined = 1;
  AKA_mark("lis===1296###sois===52124###eois===52148###lif===22###soif===698###eoif===722###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");info.background_r = 127;

  AKA_mark("lis===1298###sois===52154###eois===52197###lif===24###soif===728###eoif===771###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");lodepng_add_text(&info, "key0", "string0");
  AKA_mark("lis===1299###sois===52201###eois===52244###lif===25###soif===775###eoif===818###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");lodepng_add_text(&info, "key1", "string1");

  AKA_mark("lis===1301###sois===52250###eois===52323###lif===27###soif===824###eoif===897###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");lodepng_add_itext(&info, "ikey0", "ilangtag0", "itranskey0", "istring0");
  AKA_mark("lis===1302###sois===52327###eois===52400###lif===28###soif===901###eoif===974###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");lodepng_add_itext(&info, "ikey1", "ilangtag1", "itranskey1", "istring1");

  AKA_mark("lis===1304###sois===52406###eois===52428###lif===30###soif===980###eoif===1002###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");info.time_defined = 1;
  AKA_mark("lis===1305###sois===52432###eois===52454###lif===31###soif===1006###eoif===1028###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");info.time.year = 2012;
  AKA_mark("lis===1306###sois===52458###eois===52478###lif===32###soif===1032###eoif===1052###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");info.time.month = 1;
  AKA_mark("lis===1307###sois===52482###eois===52500###lif===33###soif===1056###eoif===1074###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");info.time.day = 2;
  AKA_mark("lis===1308###sois===52504###eois===52523###lif===34###soif===1078###eoif===1097###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");info.time.hour = 3;
  AKA_mark("lis===1309###sois===52527###eois===52548###lif===35###soif===1101###eoif===1122###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");info.time.minute = 4;
  AKA_mark("lis===1310###sois===52552###eois===52573###lif===36###soif===1126###eoif===1147###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");info.time.second = 5;

  AKA_mark("lis===1312###sois===52579###eois===52601###lif===38###soif===1153###eoif===1175###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");info.phys_defined = 1;
  AKA_mark("lis===1313###sois===52605###eois===52621###lif===39###soif===1179###eoif===1195###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");info.phys_x = 1;
  AKA_mark("lis===1314###sois===52625###eois===52641###lif===40###soif===1199###eoif===1215###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");info.phys_y = 2;
  AKA_mark("lis===1315###sois===52645###eois===52664###lif===41###soif===1219###eoif===1238###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");info.phys_unit = 1;

  AKA_mark("lis===1317###sois===52670###eois===52785###lif===43###soif===1244###eoif===1359###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");lodepng_chunk_create(&info.unknown_chunks_data[0], &info.unknown_chunks_size[0], 3, "uNKa", (unsigned char*)"a00");
  AKA_mark("lis===1318###sois===52789###eois===52904###lif===44###soif===1363###eoif===1478###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");lodepng_chunk_create(&info.unknown_chunks_data[0], &info.unknown_chunks_size[0], 3, "uNKa", (unsigned char*)"a01");
  AKA_mark("lis===1319###sois===52908###eois===53023###lif===45###soif===1482###eoif===1597###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");lodepng_chunk_create(&info.unknown_chunks_data[1], &info.unknown_chunks_size[1], 3, "uNKb", (unsigned char*)"b00");
  AKA_mark("lis===1320###sois===53027###eois===53142###lif===46###soif===1601###eoif===1716###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");lodepng_chunk_create(&info.unknown_chunks_data[2], &info.unknown_chunks_size[2], 3, "uNKc", (unsigned char*)"c00");

  AKA_mark("lis===1322###sois===53148###eois===53210###lif===48###soif===1722###eoif===1784###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");unsigned error = lodepng::encode(png, &image[0], w, h, state);
  AKA_mark("lis===1323###sois===53214###eois===53241###lif===49###soif===1788###eoif===1815###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\createComplexPNG(std::vector<unsigned char>&)");ASSERT_NO_PNG_ERROR(error);
}

/** Instrumented function extractChunkNames(std::vector<unsigned char>const&) */
std::string extractChunkNames(const std::vector<unsigned char>& png) /* << Aka begin of function std::string extractChunkNames(const std::vector<unsigned char>& png) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\extractChunkNames(std::vector<unsigned char>const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.extractChunkNames.53260.stub"

  AKA_mark("lis===1327###sois===53322###eois===53359###lif===1###soif===74###eoif===111###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\extractChunkNames(std::vector<unsigned char>const&)");const unsigned char* chunk = &png[8];
  AKA_mark("lis===1328###sois===53363###eois===53406###lif===2###soif===115###eoif===158###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\extractChunkNames(std::vector<unsigned char>const&)");const unsigned char* end = &png.back() + 1;
  AKA_mark("lis===1329###sois===53410###eois===53423###lif===3###soif===162###eoif===175###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\extractChunkNames(std::vector<unsigned char>const&)");char name[5];
  AKA_mark("lis===1330###sois===53427###eois===53451###lif===4###soif===179###eoif===203###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\extractChunkNames(std::vector<unsigned char>const&)");std::string result = "";
  int AKA_BLOCK_LOOP_53455 = 0;
    for(;;) {
        AKA_BLOCK_LOOP_53455++;
        if (AKA_BLOCK_LOOP_53455 > 1000) {
            //break;
        }
    AKA_mark("lis===1332###sois===53470###eois===53502###lif===6###soif===222###eoif===254###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\extractChunkNames(std::vector<unsigned char>const&)");lodepng_chunk_type(name, chunk);
    AKA_mark("lis===1333###sois===53508###eois===53544###lif===7###soif===260###eoif===296###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\extractChunkNames(std::vector<unsigned char>const&)");result += (std::string(" ") + name);
    if(AKA_mark("lis===1334###sois===53553###eois===53580###lif===8###soif===305###eoif===332###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\extractChunkNames(std::vector<unsigned char>const&)") && (AKA_mark("lis===1334###sois===53553###eois===53580###lif===8###soif===305###eoif===332###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\extractChunkNames(std::vector<unsigned char>const&)") && (std::string(name) == "IEND"))) {
AKA_mark("lis===1334###sois===53582###eois===53588###lif===8###soif===334###eoif===340###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\extractChunkNames(std::vector<unsigned char>const&)");break;
}

else {
AKA_mark("lis===-1334-###sois===-53553-###eois===-5355327-###lif===-8-###soif===-###eoif===-332-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\extractChunkNames(std::vector<unsigned char>const&)");
}
    AKA_mark("lis===1335###sois===53594###eois===53639###lif===9###soif===346###eoif===391###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\extractChunkNames(std::vector<unsigned char>const&)");chunk = lodepng_chunk_next_const(chunk, end);
    AKA_mark("lis===1336###sois===53645###eois===53701###lif===10###soif===397###eoif===453###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\extractChunkNames(std::vector<unsigned char>const&)");assertTrue(chunk < &png.back(), "jumped out of chunks");
  }
  AKA_mark("lis===1338###sois===53710###eois===53724###lif===12###soif===462###eoif===476###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\extractChunkNames(std::vector<unsigned char>const&)");return result;
}

/** Instrumented function testComplexPNG() */
void testComplexPNG() /* << Aka begin of function void testComplexPNG() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testComplexPNG.53736.stub"

  AKA_mark("lis===1342###sois===53758###eois===53801###lif===1###soif===27###eoif===70###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");std::cout << "testComplexPNG" << std::endl;

  AKA_mark("lis===1344###sois===53807###eois===53838###lif===3###soif===76###eoif===107###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");std::vector<unsigned char> png;
  AKA_mark("lis===1345###sois===53842###eois===53864###lif===4###soif===111###eoif===133###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");createComplexPNG(png);
 {
    AKA_mark("lis===1347###sois===53874###eois===53895###lif===6###soif===143###eoif===164###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");lodepng::State state;
    AKA_mark("lis===1348###sois===53901###eois===53936###lif===7###soif===170###eoif===205###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");LodePNGInfo& info = state.info_png;
    AKA_mark("lis===1349###sois===53942###eois===53956###lif===8###soif===211###eoif===225###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");unsigned w, h;
    AKA_mark("lis===1350###sois===53962###eois===53995###lif===9###soif===231###eoif===264###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");std::vector<unsigned char> image;
    AKA_mark("lis===1351###sois===54001###eois===54075###lif===10###soif===270###eoif===344###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");unsigned error = lodepng::decode(image, w, h, state, &png[0], png.size());
    AKA_mark("lis===1352###sois===54081###eois===54108###lif===11###soif===350###eoif===377###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_NO_PNG_ERROR(error);

    AKA_mark("lis===1354###sois===54116###eois===54136###lif===13###soif===385###eoif===405###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(16, w);
    AKA_mark("lis===1355###sois===54143###eois===54163###lif===14###soif===412###eoif===432###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(17, h);
    AKA_mark("lis===1356###sois===54170###eois===54211###lif===15###soif===439###eoif===480###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(1, info.background_defined);
    AKA_mark("lis===1357###sois===54218###eois===54255###lif===16###soif===487###eoif===524###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(127, info.background_r);
    AKA_mark("lis===1358###sois===54262###eois===54297###lif===17###soif===531###eoif===566###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(1, info.time_defined);
    AKA_mark("lis===1359###sois===54304###eois===54339###lif===18###soif===573###eoif===608###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(2012, info.time.year);
    AKA_mark("lis===1360###sois===54346###eois===54379###lif===19###soif===615###eoif===648###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(1, info.time.month);
    AKA_mark("lis===1361###sois===54386###eois===54417###lif===20###soif===655###eoif===686###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(2, info.time.day);
    AKA_mark("lis===1362###sois===54424###eois===54456###lif===21###soif===693###eoif===725###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(3, info.time.hour);
    AKA_mark("lis===1363###sois===54463###eois===54497###lif===22###soif===732###eoif===766###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(4, info.time.minute);
    AKA_mark("lis===1364###sois===54504###eois===54538###lif===23###soif===773###eoif===807###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(5, info.time.second);
    AKA_mark("lis===1365###sois===54545###eois===54580###lif===24###soif===814###eoif===849###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(1, info.phys_defined);
    AKA_mark("lis===1366###sois===54587###eois===54616###lif===25###soif===856###eoif===885###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(1, info.phys_x);
    AKA_mark("lis===1367###sois===54623###eois===54652###lif===26###soif===892###eoif===921###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(2, info.phys_y);
    AKA_mark("lis===1368###sois===54659###eois===54691###lif===27###soif===928###eoif===960###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(1, info.phys_unit);

    AKA_mark("lis===1370###sois===54700###eois===54748###lif===29###soif===969###eoif===1017###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");std::string chunknames = extractChunkNames(png);
    //std::string expectednames = " IHDR uNKa uNKa PLTE tRNS bKGD pHYs uNKb IDAT tIME tEXt tEXt tEXt iTXt iTXt uNKc IEND";
    AKA_mark("lis===1372###sois===54878###eois===54994###lif===31###soif===1147###eoif===1263###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");std::string expectednames = " IHDR uNKa uNKa PLTE tRNS bKGD pHYs uNKb IDAT tIME zTXt zTXt tEXt iTXt iTXt uNKc IEND";
    AKA_mark("lis===1373###sois===55000###eois===55040###lif===32###soif===1269###eoif===1309###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(expectednames, chunknames);

    AKA_mark("lis===1375###sois===55049###eois===55080###lif===34###soif===1318###eoif===1349###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(3, info.text_num);
    AKA_mark("lis===1376###sois===55087###eois===55134###lif===35###soif===1356###eoif===1403###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_STRING_EQUALS("key0", info.text_keys[0]);
    AKA_mark("lis===1377###sois===55141###eois===55194###lif===36###soif===1410###eoif===1463###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_STRING_EQUALS("string0", info.text_strings[0]);
    AKA_mark("lis===1378###sois===55201###eois===55248###lif===37###soif===1470###eoif===1517###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_STRING_EQUALS("key1", info.text_keys[1]);
    AKA_mark("lis===1379###sois===55255###eois===55308###lif===38###soif===1524###eoif===1577###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_STRING_EQUALS("string1", info.text_strings[1]);
    AKA_mark("lis===1380###sois===55315###eois===55365###lif===39###soif===1584###eoif===1634###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_STRING_EQUALS("LodePNG", info.text_keys[2]);
    AKA_mark("lis===1381###sois===55372###eois===55438###lif===40###soif===1641###eoif===1707###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_STRING_EQUALS(LODEPNG_VERSION_STRING, info.text_strings[2]);

    AKA_mark("lis===1383###sois===55447###eois===55479###lif===42###soif===1716###eoif===1748###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(2, info.itext_num);
    AKA_mark("lis===1384###sois===55486###eois===55535###lif===43###soif===1755###eoif===1804###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_STRING_EQUALS("ikey0", info.itext_keys[0]);
    AKA_mark("lis===1385###sois===55542###eois===55599###lif===44###soif===1811###eoif===1868###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_STRING_EQUALS("ilangtag0", info.itext_langtags[0]);
    AKA_mark("lis===1386###sois===55606###eois===55665###lif===45###soif===1875###eoif===1934###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_STRING_EQUALS("itranskey0", info.itext_transkeys[0]);
    AKA_mark("lis===1387###sois===55672###eois===55727###lif===46###soif===1941###eoif===1996###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_STRING_EQUALS("istring0", info.itext_strings[0]);
    AKA_mark("lis===1388###sois===55734###eois===55783###lif===47###soif===2003###eoif===2052###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_STRING_EQUALS("ikey1", info.itext_keys[1]);
    AKA_mark("lis===1389###sois===55790###eois===55847###lif===48###soif===2059###eoif===2116###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_STRING_EQUALS("ilangtag1", info.itext_langtags[1]);
    AKA_mark("lis===1390###sois===55854###eois===55913###lif===49###soif===2123###eoif===2182###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_STRING_EQUALS("itranskey1", info.itext_transkeys[1]);
    AKA_mark("lis===1391###sois===55920###eois===55975###lif===50###soif===2189###eoif===2244###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_STRING_EQUALS("istring1", info.itext_strings[1]);

    // TODO: test if unknown chunks listed too
  }


  // Test that if read_text_chunks is disabled, we do not get the texts
  {
    AKA_mark("lis===1399###sois===56119###eois===56140###lif===58###soif===2388###eoif===2409###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");lodepng::State state;
    AKA_mark("lis===1400###sois===56146###eois===56181###lif===59###soif===2415###eoif===2450###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");state.decoder.read_text_chunks = 0;
    AKA_mark("lis===1401###sois===56187###eois===56201###lif===60###soif===2456###eoif===2470###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");unsigned w, h;
    AKA_mark("lis===1402###sois===56207###eois===56240###lif===61###soif===2476###eoif===2509###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");std::vector<unsigned char> image;
    AKA_mark("lis===1403###sois===56246###eois===56320###lif===62###soif===2515###eoif===2589###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");unsigned error = lodepng::decode(image, w, h, state, &png[0], png.size());
    AKA_mark("lis===1404###sois===56326###eois===56353###lif===63###soif===2595###eoif===2622###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_NO_PNG_ERROR(error);

    AKA_mark("lis===1406###sois===56361###eois===56402###lif===65###soif===2630###eoif===2671###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(0, state.info_png.text_num);
    AKA_mark("lis===1407###sois===56409###eois===56451###lif===66###soif===2678###eoif===2720###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(0, state.info_png.itext_num);

    // But we should still get other values.
    AKA_mark("lis===1410###sois===56506###eois===56551###lif===69###soif===2775###eoif===2820###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testComplexPNG()");ASSERT_EQUALS(2012, state.info_png.time.year);
  }
}

// Tests lodepng_inspect_chunk, and also lodepng_chunk_find to find the chunk to inspect
/** Instrumented function testInspectChunk() */
void testInspectChunk() /* << Aka begin of function void testInspectChunk() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testInspectChunk.56659.stub"

  AKA_mark("lis===1416###sois===56683###eois===56728###lif===1###soif===29###eoif===74###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");std::cout << "testInspectChunk" << std::endl;

  AKA_mark("lis===1418###sois===56734###eois===56765###lif===3###soif===80###eoif===111###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");std::vector<unsigned char> png;
  AKA_mark("lis===1419###sois===56769###eois===56791###lif===4###soif===115###eoif===137###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");createComplexPNG(png);

  AKA_mark("lis===1421###sois===56797###eois===56824###lif===6###soif===143###eoif===170###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");const unsigned char* chunk;
  AKA_mark("lis===1422###sois===56828###eois===56849###lif===7###soif===174###eoif===195###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");lodepng::State state;
  AKA_mark("lis===1423###sois===56853###eois===56888###lif===8###soif===199###eoif===234###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");LodePNGInfo& info = state.info_png;
  AKA_mark("lis===1424###sois===56892###eois===56927###lif===9###soif===238###eoif===273###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");state.decoder.read_text_chunks = 0;
  AKA_mark("lis===1425###sois===56931###eois===56985###lif===10###soif===277###eoif===331###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");lodepng_inspect(0, 0, &state, png.data(), png.size());
  AKA_mark("lis===1426###sois===56989###eois===57061###lif===11###soif===335###eoif===407###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");chunk = lodepng_chunk_find(png.data(), png.data() + png.size(), "tIME");
  AKA_mark("lis===1427###sois===57065###eois===57114###lif===12###soif===411###eoif===460###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");ASSERT_NOT_EQUALS((const unsigned char*)0, chunk); // should be non-null, since it should find it
  AKA_mark("lis===1428###sois===57166###eois===57201###lif===13###soif===512###eoif===547###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");ASSERT_EQUALS(0, info.time_defined);
  AKA_mark("lis===1429###sois===57206###eois===57290###lif===14###soif===552###eoif===636###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");lodepng_inspect_chunk(&state, (size_t)(chunk - png.data()), png.data(), png.size());
  AKA_mark("lis===1430###sois===57294###eois===57329###lif===15###soif===640###eoif===675###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");ASSERT_EQUALS(1, info.time_defined);
  AKA_mark("lis===1431###sois===57334###eois===57379###lif===16###soif===680###eoif===725###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");ASSERT_EQUALS(2012, state.info_png.time.year);
  AKA_mark("lis===1432###sois===57384###eois===57417###lif===17###soif===730###eoif===763###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");ASSERT_EQUALS(1, info.time.month);
  AKA_mark("lis===1433###sois===57422###eois===57453###lif===18###soif===768###eoif===799###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");ASSERT_EQUALS(2, info.time.day);
  AKA_mark("lis===1434###sois===57458###eois===57490###lif===19###soif===804###eoif===836###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");ASSERT_EQUALS(3, info.time.hour);
  AKA_mark("lis===1435###sois===57495###eois===57529###lif===20###soif===841###eoif===875###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");ASSERT_EQUALS(4, info.time.minute);
  AKA_mark("lis===1436###sois===57534###eois===57568###lif===21###soif===880###eoif===914###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");ASSERT_EQUALS(5, info.time.second);

  AKA_mark("lis===1438###sois===57575###eois===57606###lif===23###soif===921###eoif===952###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");ASSERT_EQUALS(0, info.text_num);
  AKA_mark("lis===1439###sois===57611###eois===57689###lif===24###soif===957###eoif===1035###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");chunk = lodepng_chunk_find_const(png.data(), png.data() + png.size(), "zTXt");
  AKA_mark("lis===1440###sois===57693###eois===57777###lif===25###soif===1039###eoif===1123###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");lodepng_inspect_chunk(&state, (size_t)(chunk - png.data()), png.data(), png.size());
  AKA_mark("lis===1441###sois===57781###eois===57812###lif===26###soif===1127###eoif===1158###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");ASSERT_EQUALS(1, info.text_num);
  AKA_mark("lis===1442###sois===57817###eois===57890###lif===27###soif===1163###eoif===1236###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");chunk = lodepng_chunk_find_const(chunk, png.data() + png.size(), "zTXt");
  AKA_mark("lis===1443###sois===57894###eois===57978###lif===28###soif===1240###eoif===1324###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");lodepng_inspect_chunk(&state, (size_t)(chunk - png.data()), png.data(), png.size());
  AKA_mark("lis===1444###sois===57982###eois===58013###lif===29###soif===1328###eoif===1359###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testInspectChunk()");ASSERT_EQUALS(2, info.text_num);
}

//test that, by default, it chooses filter type zero for all scanlines if the image has a palette
/** Instrumented function testPaletteFilterTypesZero() */
void testPaletteFilterTypesZero() /* << Aka begin of function void testPaletteFilterTypesZero() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteFilterTypesZero()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testPaletteFilterTypesZero.58125.stub"

  AKA_mark("lis===1449###sois===58159###eois===58214###lif===1###soif===39###eoif===94###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteFilterTypesZero()");std::cout << "testPaletteFilterTypesZero" << std::endl;

  AKA_mark("lis===1451###sois===58220###eois===58251###lif===3###soif===100###eoif===131###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteFilterTypesZero()");std::vector<unsigned char> png;
  AKA_mark("lis===1452###sois===58255###eois===58277###lif===4###soif===135###eoif===157###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteFilterTypesZero()");createComplexPNG(png);

  AKA_mark("lis===1454###sois===58283###eois===58322###lif===6###soif===163###eoif===202###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteFilterTypesZero()");std::vector<unsigned char> filterTypes;
  AKA_mark("lis===1455###sois===58326###eois===58368###lif===7###soif===206###eoif===248###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteFilterTypesZero()");lodepng::getFilterTypes(filterTypes, png);

  AKA_mark("lis===1457###sois===58374###eois===58411###lif===9###soif===254###eoif===291###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteFilterTypesZero()");ASSERT_EQUALS(17, filterTypes.size());
  int AKA_BLOCK_LOOP_58416 = 0;
    AKA_mark("lis===1458###sois===58420###eois===58433###lif===10###soif===300###eoif===313###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteFilterTypesZero()");
for(size_t i = 0; AKA_mark("lis===1458###sois===58434###eois===58440###lif===10###soif===314###eoif===320###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteFilterTypesZero()") && (AKA_mark("lis===1458###sois===58434###eois===58440###lif===10###soif===314###eoif===320###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteFilterTypesZero()") && (i < 17)); ({AKA_mark("lis===1458###sois===58442###eois===58445###lif===10###soif===322###eoif===325###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteFilterTypesZero()");i++;})) {
        AKA_BLOCK_LOOP_58416++;
        if (AKA_BLOCK_LOOP_58416 > 1000) {
            //break;
        }AKA_mark("lis===1458###sois===58447###eois===58479###lif===10###soif===327###eoif===359###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteFilterTypesZero()");ASSERT_EQUALS(0, filterTypes[i])};
}

//tests that there are no crashes with auto color chooser in case of palettes with translucency etc...
/** Instrumented function testPaletteToPaletteConvert() */
void testPaletteToPaletteConvert() /* << Aka begin of function void testPaletteToPaletteConvert() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testPaletteToPaletteConvert.58596.stub"

  AKA_mark("lis===1463###sois===58631###eois===58687###lif===1###soif===40###eoif===96###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");std::cout << "testPaletteToPaletteConvert" << std::endl;
  AKA_mark("lis===1464###sois===58691###eois===58706###lif===2###soif===100###eoif===115###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");unsigned error;
  AKA_mark("lis===1465###sois===58710###eois===58734###lif===3###soif===119###eoif===143###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");unsigned w = 16, h = 16;
  AKA_mark("lis===1466###sois===58738###eois===58778###lif===4###soif===147###eoif===187###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");std::vector<unsigned char> image(w * h);
  int AKA_BLOCK_LOOP_58782 = 0;
    AKA_mark("lis===1467###sois===58786###eois===58799###lif===5###soif===195###eoif===208###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");
for(size_t i = 0; AKA_mark("lis===1467###sois===58800###eois===58809###lif===5###soif===209###eoif===218###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()") && (AKA_mark("lis===1467###sois===58800###eois===58809###lif===5###soif===209###eoif===218###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()") && (i < w * h)); ({AKA_mark("lis===1467###sois===58811###eois===58814###lif===5###soif===220###eoif===223###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");i++;})) {
AKA_mark("lis===1467###sois===58816###eois===58835###lif===5###soif===225###eoif===244###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");image[i] = i % 256;
}

  AKA_mark("lis===1468###sois===58839###eois===58860###lif===6###soif===248###eoif===269###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");lodepng::State state;
  AKA_mark("lis===1469###sois===58864###eois===58899###lif===7###soif===273###eoif===308###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");LodePNGInfo& info = state.info_png;
  AKA_mark("lis===1470###sois===58903###eois===58965###lif===8###soif===312###eoif===374###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");info.color.colortype = state.info_raw.colortype = LCT_PALETTE;
  AKA_mark("lis===1471###sois===58969###eois===59019###lif===9###soif===378###eoif===428###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");info.color.bitdepth = state.info_raw.bitdepth = 8;
  AKA_mark("lis===1472###sois===59023###eois===59070###lif===10###soif===432###eoif===479###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");ASSERT_EQUALS(true, state.encoder.auto_convert);
  int AKA_BLOCK_LOOP_59075 = 0;
    AKA_mark("lis===1473###sois===59079###eois===59092###lif===11###soif===488###eoif===501###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");
for(size_t i = 0; AKA_mark("lis===1473###sois===59093###eois===59100###lif===11###soif===502###eoif===509###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()") && (AKA_mark("lis===1473###sois===59093###eois===59100###lif===11###soif===502###eoif===509###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()") && (i < 256)); ({AKA_mark("lis===1473###sois===59102###eois===59105###lif===11###soif===511###eoif===514###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");i++;})) {
        AKA_BLOCK_LOOP_59075++;
        if (AKA_BLOCK_LOOP_59075 > 1000) {
            //break;
        }
    AKA_mark("lis===1474###sois===59114###eois===59159###lif===12###soif===523###eoif===568###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");lodepng_palette_add(&info.color, i, i, i, i);
  }
  AKA_mark("lis===1476###sois===59168###eois===59199###lif===14###soif===577###eoif===608###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");std::vector<unsigned char> png;
  int AKA_BLOCK_LOOP_59203 = 0;
    AKA_mark("lis===1477###sois===59207###eois===59220###lif===15###soif===616###eoif===629###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");
for(size_t i = 0; AKA_mark("lis===1477###sois===59221###eois===59228###lif===15###soif===630###eoif===637###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()") && (AKA_mark("lis===1477###sois===59221###eois===59228###lif===15###soif===630###eoif===637###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()") && (i < 256)); ({AKA_mark("lis===1477###sois===59230###eois===59233###lif===15###soif===639###eoif===642###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");i++;})) {
        AKA_BLOCK_LOOP_59203++;
        if (AKA_BLOCK_LOOP_59203 > 1000) {
            //break;
        }
    AKA_mark("lis===1478###sois===59242###eois===59291###lif===16###soif===651###eoif===700###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");lodepng_palette_add(&state.info_raw, i, i, i, i);
  }
  AKA_mark("lis===1480###sois===59300###eois===59353###lif===18###soif===709###eoif===762###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");error = lodepng::encode(png, &image[0], w, h, state);
  AKA_mark("lis===1481###sois===59357###eois===59384###lif===19###soif===766###eoif===793###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteConvert()");ASSERT_NO_PNG_ERROR(error);
}

//for this test, you have to choose palette colors that cause LodePNG to actually use a palette,
//so don't use all grayscale colors for example
/** Instrumented function doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE) */
void doRGBAToPaletteTest(unsigned char* palette, size_t size, LodePNGColorType expectedType = LCT_PALETTE) /* << Aka begin of function void doRGBAToPaletteTest(unsigned char* palette, size_t size, LodePNGColorType expectedType = LCT_PALETTE) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.doRGBAToPaletteTest.59543.stub"

  AKA_mark("lis===1487###sois===59650###eois===59711###lif===1###soif===112###eoif===173###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");std::cout << "testRGBToPaletteConvert " << size << std::endl;
  AKA_mark("lis===1488###sois===59715###eois===59730###lif===2###soif===177###eoif===192###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");unsigned error;
  AKA_mark("lis===1489###sois===59734###eois===59814###lif===3###soif===196###eoif===276###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");unsigned w = size, h = 257 /*LodePNG encodes no palette if image is too small*/;
  AKA_mark("lis===1490###sois===59818###eois===59862###lif===4###soif===280###eoif===324###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");std::vector<unsigned char> image(w * h * 4);
  int AKA_BLOCK_LOOP_59866 = 0;
    AKA_mark("lis===1491###sois===59870###eois===59883###lif===5###soif===332###eoif===345###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");
for(size_t i = 0; AKA_mark("lis===1491###sois===59884###eois===59900###lif===5###soif===346###eoif===362###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)") && (AKA_mark("lis===1491###sois===59884###eois===59900###lif===5###soif===346###eoif===362###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)") && (i < image.size())); ({AKA_mark("lis===1491###sois===59902###eois===59905###lif===5###soif===364###eoif===367###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");i++;})) {
AKA_mark("lis===1491###sois===59907###eois===59942###lif===5###soif===369###eoif===404###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");image[i] = palette[i % (size * 4)];
}

  AKA_mark("lis===1492###sois===59946###eois===59977###lif===6###soif===408###eoif===439###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");std::vector<unsigned char> png;
  AKA_mark("lis===1493###sois===59981###eois===60027###lif===7###soif===443###eoif===489###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");error = lodepng::encode(png, &image[0], w, h);
  AKA_mark("lis===1494###sois===60031###eois===60058###lif===8###soif===493###eoif===520###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");ASSERT_NO_PNG_ERROR(error);
  AKA_mark("lis===1495###sois===60062###eois===60083###lif===9###soif===524###eoif===545###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");lodepng::State state;
  AKA_mark("lis===1496###sois===60087###eois===60121###lif===10###soif===549###eoif===583###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");std::vector<unsigned char> image2;
  AKA_mark("lis===1497###sois===60125###eois===60175###lif===11###soif===587###eoif===637###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");error = lodepng::decode(image2, w, h, state, png);
  AKA_mark("lis===1498###sois===60179###eois===60206###lif===12###soif===641###eoif===668###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");ASSERT_NO_PNG_ERROR(error);
  AKA_mark("lis===1499###sois===60210###eois===60252###lif===13###soif===672###eoif===714###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");ASSERT_EQUALS(image.size(), image2.size());
  int AKA_BLOCK_LOOP_60257 = 0;
    AKA_mark("lis===1500###sois===60261###eois===60274###lif===14###soif===723###eoif===736###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");
for(size_t i = 0; AKA_mark("lis===1500###sois===60275###eois===60291###lif===14###soif===737###eoif===753###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)") && (AKA_mark("lis===1500###sois===60275###eois===60291###lif===14###soif===737###eoif===753###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)") && (i < image.size())); ({AKA_mark("lis===1500###sois===60293###eois===60296###lif===14###soif===755###eoif===758###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");i++;})) {
        AKA_BLOCK_LOOP_60257++;
        if (AKA_BLOCK_LOOP_60257 > 1000) {
            //break;
        }AKA_mark("lis===1500###sois===60298###eois===60332###lif===14###soif===760###eoif===794###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");ASSERT_EQUALS(image[i], image2[i])};

  AKA_mark("lis===1502###sois===60339###eois===60398###lif===16###soif===801###eoif===860###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");ASSERT_EQUALS(expectedType, state.info_png.color.colortype);
  if(AKA_mark("lis===1503###sois===60406###eois===60433###lif===17###soif===868###eoif===895###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)") && (AKA_mark("lis===1503###sois===60406###eois===60433###lif===17###soif===868###eoif===895###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)") && (expectedType == LCT_PALETTE))) {

    AKA_mark("lis===1505###sois===60444###eois===60497###lif===19###soif===906###eoif===959###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");ASSERT_EQUALS(size, state.info_png.color.palettesize);
    int AKA_BLOCK_LOOP_60504 = 0;
    AKA_mark("lis===1506###sois===60508###eois===60521###lif===20###soif===970###eoif===983###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");
for(size_t i = 0; AKA_mark("lis===1506###sois===60522###eois===60534###lif===20###soif===984###eoif===996###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)") && (AKA_mark("lis===1506###sois===60522###eois===60534###lif===20###soif===984###eoif===996###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)") && (i < size * 4)); ({AKA_mark("lis===1506###sois===60536###eois===60539###lif===20###soif===998###eoif===1001###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");i++;})) {
        AKA_BLOCK_LOOP_60504++;
        if (AKA_BLOCK_LOOP_60504 > 1000) {
            //break;
        }AKA_mark("lis===1506###sois===60541###eois===60597###lif===20###soif===1003###eoif===1059###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");ASSERT_EQUALS(state.info_png.color.palette[i], image[i])};
  }
else {
AKA_mark("lis===-1503-###sois===-60406-###eois===-6040627-###lif===-17-###soif===-###eoif===-895-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doRGBAToPaletteTest(unsigned char*,size_t,LodePNGColorType= LCT_PALETTE)");
}
}

/** Instrumented function testRGBToPaletteConvert() */
void testRGBToPaletteConvert() /* << Aka begin of function void testRGBToPaletteConvert() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testRGBToPaletteConvert.60615.stub"

  AKA_mark("lis===1511###sois===60646###eois===60684###lif===1###soif===36###eoif===74###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()");unsigned char palette1[4] = {1,2,3,4};
  AKA_mark("lis===1512###sois===60688###eois===60721###lif===2###soif===78###eoif===111###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()");doRGBAToPaletteTest(palette1, 1);
  AKA_mark("lis===1513###sois===60725###eois===60772###lif===3###soif===115###eoif===162###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()");unsigned char palette2[8] = {1,2,3,4, 5,6,7,8};
  AKA_mark("lis===1514###sois===60776###eois===60809###lif===4###soif===166###eoif===199###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()");doRGBAToPaletteTest(palette2, 2);
  AKA_mark("lis===1515###sois===60813###eois===60882###lif===5###soif===203###eoif===272###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()");unsigned char palette3[12] = {1,1,1,255, 20,20,20,255, 20,20,21,255};
  AKA_mark("lis===1516###sois===60886###eois===60919###lif===6###soif===276###eoif===309###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()");doRGBAToPaletteTest(palette3, 3);

  AKA_mark("lis===1518###sois===60925###eois===60960###lif===8###soif===315###eoif===350###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()");std::vector<unsigned char> palette;
  int AKA_BLOCK_LOOP_60964 = 0;
    AKA_mark("lis===1519###sois===60968###eois===60978###lif===9###soif===358###eoif===368###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()");
for(int i = 0; AKA_mark("lis===1519###sois===60979###eois===60986###lif===9###soif===369###eoif===376###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()") && (AKA_mark("lis===1519###sois===60979###eois===60986###lif===9###soif===369###eoif===376###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()") && (i < 256)); ({AKA_mark("lis===1519###sois===60988###eois===60991###lif===9###soif===378###eoif===381###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()");i++;})) {
        AKA_BLOCK_LOOP_60964++;
        if (AKA_BLOCK_LOOP_60964 > 1000) {
            //break;
        }
    AKA_mark("lis===1520###sois===61000###eois===61021###lif===10###soif===390###eoif===411###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()");palette.push_back(i);
    AKA_mark("lis===1521###sois===61027###eois===61048###lif===11###soif===417###eoif===438###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()");palette.push_back(5);
    AKA_mark("lis===1522###sois===61054###eois===61075###lif===12###soif===444###eoif===465###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()");palette.push_back(6);
    AKA_mark("lis===1523###sois===61081###eois===61104###lif===13###soif===471###eoif===494###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()");palette.push_back(128);
  }
  AKA_mark("lis===1525###sois===61113###eois===61151###lif===15###soif===503###eoif===541###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()");doRGBAToPaletteTest(&palette[0], 256);
  AKA_mark("lis===1526###sois===61155###eois===61176###lif===16###soif===545###eoif===566###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()");palette.push_back(5);
  AKA_mark("lis===1527###sois===61180###eois===61201###lif===17###soif===570###eoif===591###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()");palette.push_back(6);
  AKA_mark("lis===1528###sois===61205###eois===61226###lif===18###soif===595###eoif===616###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()");palette.push_back(7);
  AKA_mark("lis===1529###sois===61230###eois===61251###lif===19###soif===620###eoif===641###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()");palette.push_back(8);
  AKA_mark("lis===1530###sois===61255###eois===61303###lif===20###soif===645###eoif===693###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testRGBToPaletteConvert()");doRGBAToPaletteTest(&palette[0], 257, LCT_RGBA);
}

/** Instrumented function testColorKeyConvert() */
void testColorKeyConvert() /* << Aka begin of function void testColorKeyConvert() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testColorKeyConvert.61315.stub"

  AKA_mark("lis===1534###sois===61342###eois===61390###lif===1###soif===32###eoif===80###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");std::cout << "testColorKeyConvert" << std::endl;
  AKA_mark("lis===1535###sois===61394###eois===61409###lif===2###soif===84###eoif===99###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");unsigned error;
  AKA_mark("lis===1536###sois===61413###eois===61437###lif===3###soif===103###eoif===127###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");unsigned w = 32, h = 32;
  AKA_mark("lis===1537###sois===61441###eois===61485###lif===4###soif===131###eoif===175###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");std::vector<unsigned char> image(w * h * 4);
  int AKA_BLOCK_LOOP_61489 = 0;
    AKA_mark("lis===1538###sois===61493###eois===61506###lif===5###soif===183###eoif===196###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");
for(size_t i = 0; AKA_mark("lis===1538###sois===61507###eois===61516###lif===5###soif===197###eoif===206###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()") && (AKA_mark("lis===1538###sois===61507###eois===61516###lif===5###soif===197###eoif===206###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()") && (i < w * h)); ({AKA_mark("lis===1538###sois===61518###eois===61521###lif===5###soif===208###eoif===211###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");i++;})) {
        AKA_BLOCK_LOOP_61489++;
        if (AKA_BLOCK_LOOP_61489 > 1000) {
            //break;
        }
    AKA_mark("lis===1539###sois===61530###eois===61557###lif===6###soif===220###eoif===247###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");image[i * 4 + 0] = i % 256;
    AKA_mark("lis===1540###sois===61563###eois===61590###lif===7###soif===253###eoif===280###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");image[i * 4 + 1] = i / 256;
    AKA_mark("lis===1541###sois===61596###eois===61617###lif===8###soif===286###eoif===307###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");image[i * 4 + 2] = 0;
    AKA_mark("lis===1542###sois===61623###eois===61660###lif===9###soif===313###eoif===350###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");image[i * 4 + 3] = i == 23 ? 0 : 255;
  }
  AKA_mark("lis===1544###sois===61669###eois===61700###lif===11###soif===359###eoif===390###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");std::vector<unsigned char> png;
  AKA_mark("lis===1545###sois===61704###eois===61750###lif===12###soif===394###eoif===440###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");error = lodepng::encode(png, &image[0], w, h);
  AKA_mark("lis===1546###sois===61754###eois===61781###lif===13###soif===444###eoif===471###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");ASSERT_NO_PNG_ERROR(error);

  AKA_mark("lis===1548###sois===61787###eois===61808###lif===15###soif===477###eoif===498###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");lodepng::State state;
  AKA_mark("lis===1549###sois===61812###eois===61846###lif===16###soif===502###eoif===536###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");std::vector<unsigned char> image2;
  AKA_mark("lis===1550###sois===61850###eois===61900###lif===17###soif===540###eoif===590###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");error = lodepng::decode(image2, w, h, state, png);
  AKA_mark("lis===1551###sois===61904###eois===61931###lif===18###soif===594###eoif===621###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");ASSERT_NO_PNG_ERROR(error);
  AKA_mark("lis===1552###sois===61935###eois===61955###lif===19###soif===625###eoif===645###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");ASSERT_EQUALS(32, w);
  AKA_mark("lis===1553###sois===61960###eois===61980###lif===20###soif===650###eoif===670###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");ASSERT_EQUALS(32, h);
  AKA_mark("lis===1554###sois===61985###eois===62035###lif===21###soif===675###eoif===725###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");ASSERT_EQUALS(1, state.info_png.color.key_defined);
  AKA_mark("lis===1555###sois===62040###eois===62085###lif===22###soif===730###eoif===775###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");ASSERT_EQUALS(23, state.info_png.color.key_r);
  AKA_mark("lis===1556###sois===62090###eois===62134###lif===23###soif===780###eoif===824###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");ASSERT_EQUALS(0, state.info_png.color.key_g);
  AKA_mark("lis===1557###sois===62139###eois===62183###lif===24###soif===829###eoif===873###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");ASSERT_EQUALS(0, state.info_png.color.key_b);
  AKA_mark("lis===1558###sois===62188###eois===62230###lif===25###soif===878###eoif===920###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");ASSERT_EQUALS(image.size(), image2.size());
  int AKA_BLOCK_LOOP_62235 = 0;
    AKA_mark("lis===1559###sois===62239###eois===62252###lif===26###soif===929###eoif===942###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");
for(size_t i = 0; AKA_mark("lis===1559###sois===62253###eois===62269###lif===26###soif===943###eoif===959###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()") && (AKA_mark("lis===1559###sois===62253###eois===62269###lif===26###soif===943###eoif===959###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()") && (i < image.size())); ({AKA_mark("lis===1559###sois===62271###eois===62274###lif===26###soif===961###eoif===964###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");i++;})) {
        AKA_BLOCK_LOOP_62235++;
        if (AKA_BLOCK_LOOP_62235 > 1000) {
            //break;
        }
    AKA_mark("lis===1560###sois===62283###eois===62317###lif===27###soif===973###eoif===1007###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorKeyConvert()");ASSERT_EQUALS(image[i], image2[i]);
  }
}

/** Instrumented function testNoAutoConvert() */
void testNoAutoConvert() /* << Aka begin of function void testNoAutoConvert() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testNoAutoConvert.62335.stub"

  AKA_mark("lis===1565###sois===62360###eois===62406###lif===1###soif===30###eoif===76###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");std::cout << "testNoAutoConvert" << std::endl;
  AKA_mark("lis===1566###sois===62410###eois===62425###lif===2###soif===80###eoif===95###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");unsigned error;
  AKA_mark("lis===1567###sois===62429###eois===62453###lif===3###soif===99###eoif===123###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");unsigned w = 32, h = 32;
  AKA_mark("lis===1568###sois===62457###eois===62501###lif===4###soif===127###eoif===171###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");std::vector<unsigned char> image(w * h * 4);
  int AKA_BLOCK_LOOP_62505 = 0;
    AKA_mark("lis===1569###sois===62509###eois===62522###lif===5###soif===179###eoif===192###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");
for(size_t i = 0; AKA_mark("lis===1569###sois===62523###eois===62532###lif===5###soif===193###eoif===202###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()") && (AKA_mark("lis===1569###sois===62523###eois===62532###lif===5###soif===193###eoif===202###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()") && (i < w * h)); ({AKA_mark("lis===1569###sois===62534###eois===62537###lif===5###soif===204###eoif===207###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");i++;})) {
        AKA_BLOCK_LOOP_62505++;
        if (AKA_BLOCK_LOOP_62505 > 1000) {
            //break;
        }
    AKA_mark("lis===1570###sois===62546###eois===62583###lif===6###soif===216###eoif===253###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");image[i * 4 + 0] = (i % 2) ? 255 : 0;
    AKA_mark("lis===1571###sois===62589###eois===62626###lif===7###soif===259###eoif===296###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");image[i * 4 + 1] = (i % 2) ? 255 : 0;
    AKA_mark("lis===1572###sois===62632###eois===62669###lif===8###soif===302###eoif===339###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");image[i * 4 + 2] = (i % 2) ? 255 : 0;
    AKA_mark("lis===1573###sois===62675###eois===62696###lif===9###soif===345###eoif===366###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");image[i * 4 + 3] = 0;
  }
  AKA_mark("lis===1575###sois===62705###eois===62736###lif===11###soif===375###eoif===406###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");std::vector<unsigned char> png;
  AKA_mark("lis===1576###sois===62740###eois===62761###lif===12###soif===410###eoif===431###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");lodepng::State state;
  AKA_mark("lis===1577###sois===62765###eois===62807###lif===13###soif===435###eoif===477###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");state.info_png.color.colortype = LCT_RGBA;
  AKA_mark("lis===1578###sois===62811###eois===62845###lif===14###soif===481###eoif===515###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");state.info_png.color.bitdepth = 8;
  AKA_mark("lis===1579###sois===62849###eois===62884###lif===15###soif===519###eoif===554###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");state.encoder.auto_convert = false;
  AKA_mark("lis===1580###sois===62888###eois===62941###lif===16###soif===558###eoif===611###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");error = lodepng::encode(png, &image[0], w, h, state);
  AKA_mark("lis===1581###sois===62945###eois===62972###lif===17###soif===615###eoif===642###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");ASSERT_NO_PNG_ERROR(error);

  AKA_mark("lis===1583###sois===62978###eois===63000###lif===19###soif===648###eoif===670###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");lodepng::State state2;
  AKA_mark("lis===1584###sois===63004###eois===63038###lif===20###soif===674###eoif===708###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");std::vector<unsigned char> image2;
  AKA_mark("lis===1585###sois===63042###eois===63093###lif===21###soif===712###eoif===763###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");error = lodepng::decode(image2, w, h, state2, png);
  AKA_mark("lis===1586###sois===63097###eois===63124###lif===22###soif===767###eoif===794###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");ASSERT_NO_PNG_ERROR(error);
  AKA_mark("lis===1587###sois===63128###eois===63148###lif===23###soif===798###eoif===818###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");ASSERT_EQUALS(32, w);
  AKA_mark("lis===1588###sois===63153###eois===63173###lif===24###soif===823###eoif===843###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");ASSERT_EQUALS(32, h);
  AKA_mark("lis===1589###sois===63178###eois===63234###lif===25###soif===848###eoif===904###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");ASSERT_EQUALS(LCT_RGBA, state2.info_png.color.colortype);
  AKA_mark("lis===1590###sois===63239###eois===63287###lif===26###soif===909###eoif===957###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");ASSERT_EQUALS(8, state2.info_png.color.bitdepth);
  AKA_mark("lis===1591###sois===63292###eois===63334###lif===27###soif===962###eoif===1004###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");ASSERT_EQUALS(image.size(), image2.size());
  int AKA_BLOCK_LOOP_63339 = 0;
    AKA_mark("lis===1592###sois===63343###eois===63356###lif===28###soif===1013###eoif===1026###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");
for(size_t i = 0; AKA_mark("lis===1592###sois===63357###eois===63373###lif===28###soif===1027###eoif===1043###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()") && (AKA_mark("lis===1592###sois===63357###eois===63373###lif===28###soif===1027###eoif===1043###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()") && (i < image.size())); ({AKA_mark("lis===1592###sois===63375###eois===63378###lif===28###soif===1045###eoif===1048###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");i++;})) {
        AKA_BLOCK_LOOP_63339++;
        if (AKA_BLOCK_LOOP_63339 > 1000) {
            //break;
        }
    AKA_mark("lis===1593###sois===63387###eois===63421###lif===29###soif===1057###eoif===1091###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testNoAutoConvert()");ASSERT_EQUALS(image[i], image2[i]);
  }
}

/** Instrumented function flipBit(unsigned char,int) */
unsigned char flipBit(unsigned char c, int bitpos) /* << Aka begin of function unsigned char flipBit(unsigned char c, int bitpos) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\flipBit(unsigned char,int)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.flipBit.63448.stub"

  AKA_mark("lis===1598###sois===63490###eois===63515###lif===1###soif===56###eoif===81###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\flipBit(unsigned char,int)");return c ^ (1 << bitpos);
}

//Test various broken inputs. Returned errors are not checked, what is tested is
//that is doesn't crash, and, when run with valgrind, no memory warnings are
//given.
/** Instrumented function testFuzzing() */
void testFuzzing() /* << Aka begin of function void testFuzzing() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testFuzzing.63697.stub"

  AKA_mark("lis===1605###sois===63716###eois===63756###lif===1###soif===24###eoif===64###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");std::cout << "testFuzzing" << std::endl;
  AKA_mark("lis===1606###sois===63760###eois===63791###lif===2###soif===68###eoif===99###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");std::vector<unsigned char> png;
  AKA_mark("lis===1607###sois===63795###eois===63817###lif===3###soif===103###eoif===125###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");createComplexPNG(png);
  AKA_mark("lis===1608###sois===63821###eois===63861###lif===4###soif===129###eoif===169###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");std::vector<unsigned char> broken = png;
  AKA_mark("lis===1609###sois===63865###eois===63899###lif===5###soif===173###eoif===207###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");std::vector<unsigned char> result;
  AKA_mark("lis===1610###sois===63903###eois===63939###lif===6###soif===211###eoif===247###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");std::map<unsigned, unsigned> errors;
  AKA_mark("lis===1611###sois===63943###eois===63957###lif===7###soif===251###eoif===265###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");unsigned w, h;
  AKA_mark("lis===1612###sois===63961###eois===63982###lif===8###soif===269###eoif===290###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");lodepng::State state;
  AKA_mark("lis===1613###sois===63986###eois===64015###lif===9###soif===294###eoif===323###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");state.decoder.ignore_crc = 1;
  AKA_mark("lis===1614###sois===64019###eois===64065###lif===10###soif===327###eoif===373###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");state.decoder.zlibsettings.ignore_adler32 = 1;
  int AKA_BLOCK_LOOP_64069 = 0;
    AKA_mark("lis===1615###sois===64073###eois===64086###lif===11###soif===381###eoif===394###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");
for(size_t i = 0; AKA_mark("lis===1615###sois===64087###eois===64101###lif===11###soif===395###eoif===409###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()") && (AKA_mark("lis===1615###sois===64087###eois===64101###lif===11###soif===395###eoif===409###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()") && (i < png.size())); ({AKA_mark("lis===1615###sois===64103###eois===64106###lif===11###soif===411###eoif===414###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");i++;})) {
        AKA_BLOCK_LOOP_64069++;
        if (AKA_BLOCK_LOOP_64069 > 1000) {
            //break;
        }
    AKA_mark("lis===1616###sois===64115###eois===64130###lif===12###soif===423###eoif===438###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");result.clear();
    AKA_mark("lis===1617###sois===64136###eois===64156###lif===13###soif===444###eoif===464###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");broken[i] = ~png[i];
    AKA_mark("lis===1618###sois===64162###eois===64217###lif===14###soif===470###eoif===525###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");errors[lodepng::decode(result, w, h, state, broken)]++;
    AKA_mark("lis===1619###sois===64223###eois===64237###lif===15###soif===531###eoif===545###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");broken[i] = 0;
    AKA_mark("lis===1620###sois===64243###eois===64298###lif===16###soif===551###eoif===606###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");errors[lodepng::decode(result, w, h, state, broken)]++;
    int AKA_BLOCK_LOOP_64304 = 0;
    AKA_mark("lis===1621###sois===64308###eois===64318###lif===17###soif===616###eoif===626###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");
for(int j = 0; AKA_mark("lis===1621###sois===64319###eois===64324###lif===17###soif===627###eoif===632###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()") && (AKA_mark("lis===1621###sois===64319###eois===64324###lif===17###soif===627###eoif===632###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()") && (j < 8)); ({AKA_mark("lis===1621###sois===64326###eois===64329###lif===17###soif===634###eoif===637###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");j++;})) {
        AKA_BLOCK_LOOP_64304++;
        if (AKA_BLOCK_LOOP_64304 > 1000) {
            //break;
        }
      AKA_mark("lis===1622###sois===64340###eois===64371###lif===18###soif===648###eoif===679###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");broken[i] = flipBit(png[i], j);
      AKA_mark("lis===1623###sois===64379###eois===64434###lif===19###soif===687###eoif===742###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");errors[lodepng::decode(result, w, h, state, broken)]++;
    }
    AKA_mark("lis===1625###sois===64447###eois===64463###lif===21###soif===755###eoif===771###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");broken[i] = 255;
    AKA_mark("lis===1626###sois===64469###eois===64524###lif===22###soif===777###eoif===832###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");errors[lodepng::decode(result, w, h, state, broken)]++;
    AKA_mark("lis===1627###sois===64530###eois===64549###lif===23###soif===838###eoif===857###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");broken[i] = png[i]; //fix it again for the next test
  }
  AKA_mark("lis===1629###sois===64591###eois===64641###lif===25###soif===899###eoif===949###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");std::cout << "testFuzzing shrinking" << std::endl;
  AKA_mark("lis===1630###sois===64645###eois===64658###lif===26###soif===953###eoif===966###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");broken = png;
  int AKA_BLOCK_LOOP_64662 = 0;
    while(AKA_mark("lis===1631###sois===64668###eois===64685###lif===27###soif===976###eoif===993###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()") && (AKA_mark("lis===1631###sois===64668###eois===64685###lif===27###soif===976###eoif===993###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()") && (broken.size() > 0))) {
        AKA_BLOCK_LOOP_64662++;
        if (AKA_BLOCK_LOOP_64662 > 1000) {
            //break;
        }
    AKA_mark("lis===1632###sois===64694###eois===64727###lif===28###soif===1002###eoif===1035###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");broken.resize(broken.size() - 1);
    AKA_mark("lis===1633###sois===64733###eois===64788###lif===29###soif===1041###eoif===1096###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");errors[lodepng::decode(result, w, h, state, broken)]++;
  }

  //For fun, print the number of each error
  AKA_mark("lis===1637###sois===64844###eois===64887###lif===33###soif===1152###eoif===1195###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");std::cout << "Fuzzing error code counts: ";
  int AKA_BLOCK_LOOP_64891 = 0;
    AKA_mark("lis===1638###sois===64895###eois===64954###lif===34###soif===1203###eoif===1262###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");
for(std::map<unsigned, unsigned>::iterator it = errors.begin(); AKA_mark("lis===1638###sois===64955###eois===64973###lif===34###soif===1263###eoif===1281###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()") && (AKA_mark("lis===1638###sois===64955###eois===64973###lif===34###soif===1263###eoif===1281###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()") && (it != errors.end())); ({AKA_mark("lis===1638###sois===64975###eois===64979###lif===34###soif===1283###eoif===1287###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");++it;})) {
        AKA_BLOCK_LOOP_64891++;
        if (AKA_BLOCK_LOOP_64891 > 1000) {
            //break;
        }
    AKA_mark("lis===1639###sois===64988###eois===65040###lif===35###soif===1296###eoif===1348###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");std::cout << it->first << ":" << it->second << ", ";
  }
  AKA_mark("lis===1641###sois===65049###eois===65072###lif===37###soif===1357###eoif===1380###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testFuzzing()");std::cout << std::endl;
}

int custom_proof = 0; // global variable for nested function to call. Of course when this test is switched to modern C++ we can use a lamba instead.

/** Instrumented function testCustomZlibCompress() */
void testCustomZlibCompress() /* << Aka begin of function void testCustomZlibCompress() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testCustomZlibCompress.65236.stub"

  AKA_mark("lis===1647###sois===65266###eois===65317###lif===1###soif===35###eoif===86###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress()");std::cout << "testCustomZlibCompress" << std::endl;
  AKA_mark("lis===1648###sois===65321###eois===65333###lif===2###soif===90###eoif===102###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress()");Image image;
  AKA_mark("lis===1649###sois===65337###eois===65381###lif===3###soif===106###eoif===150###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress()");generateTestImage(image, 5, 5, LCT_RGBA, 8);

  AKA_mark("lis===1651###sois===65387###eois===65422###lif===5###soif===156###eoif===191###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress()");std::vector<unsigned char> encoded;
  AKA_mark("lis===1652###sois===65426###eois===65448###lif===6###soif===195###eoif===217###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress()");int customcontext = 5;

  AKA_mark("lis===1654###sois===65454###eois===65859###lif===8###soif===223###eoif===628###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress()");struct TestFun {
    static unsigned custom_zlib(unsigned char**, size_t*,
                          const unsigned char*, size_t,
                          const LodePNGCompressSettings* settings) {
      ASSERT_EQUALS(5, *(int*)(settings->custom_context));
      custom_proof = 1;
      return 5555; // return a custom error code, which will be converted to an error known to lodepng.
    }
  };

  AKA_mark("lis===1664###sois===65865###eois===65886###lif===18###soif===634###eoif===655###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress()");lodepng::State state;
  AKA_mark("lis===1665###sois===65890###eois===65952###lif===19###soif===659###eoif===721###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress()");state.encoder.zlibsettings.custom_zlib = TestFun::custom_zlib;
  AKA_mark("lis===1666###sois===65956###eois===66015###lif===20###soif===725###eoif===784###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress()");state.encoder.zlibsettings.custom_context = &customcontext;

  AKA_mark("lis===1668###sois===66021###eois===66038###lif===22###soif===790###eoif===807###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress()");custom_proof = 0;
  AKA_mark("lis===1669###sois===66042###eois===66130###lif===23###soif===811###eoif===899###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress()");unsigned error = lodepng::encode(encoded, image.data, image.width, image.height, state);
  AKA_mark("lis===1670###sois===66134###eois===66164###lif===24###soif===903###eoif===933###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress()");ASSERT_EQUALS(1, custom_proof); // check that the custom zlib was called

  AKA_mark("lis===1672###sois===66212###eois===66237###lif===26###soif===981###eoif===1006###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress()");ASSERT_EQUALS(111, error); // expect a known lodepng error, not the custom 5555
}

/** Instrumented function testCustomZlibCompress2() */
void testCustomZlibCompress2() /* << Aka begin of function void testCustomZlibCompress2() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress2()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testCustomZlibCompress2.66303.stub"

  AKA_mark("lis===1676###sois===66334###eois===66386###lif===1###soif===36###eoif===88###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress2()");std::cout << "testCustomZlibCompress2" << std::endl;
  AKA_mark("lis===1677###sois===66390###eois===66402###lif===2###soif===92###eoif===104###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress2()");Image image;
  AKA_mark("lis===1678###sois===66406###eois===66450###lif===3###soif===108###eoif===152###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress2()");generateTestImage(image, 5, 5, LCT_RGBA, 8);

  AKA_mark("lis===1680###sois===66456###eois===66491###lif===5###soif===158###eoif===193###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress2()");std::vector<unsigned char> encoded;

  AKA_mark("lis===1682###sois===66497###eois===66518###lif===7###soif===199###eoif===220###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress2()");lodepng::State state;
  AKA_mark("lis===1683###sois===66522###eois===66585###lif===8###soif===224###eoif===287###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress2()");state.encoder.zlibsettings.custom_zlib = lodepng_zlib_compress;

  AKA_mark("lis===1685###sois===66591###eois===66715###lif===10###soif===293###eoif===417###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress2()");unsigned error = lodepng::encode(encoded, image.data, image.width, image.height,
                                   state);
  AKA_mark("lis===1687###sois===66719###eois===66746###lif===12###soif===421###eoif===448###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress2()");ASSERT_NO_PNG_ERROR(error);

  AKA_mark("lis===1689###sois===66752###eois===66787###lif===14###soif===454###eoif===489###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress2()");std::vector<unsigned char> decoded;
  AKA_mark("lis===1690###sois===66791###eois===66805###lif===15###soif===493###eoif===507###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress2()");unsigned w, h;
  AKA_mark("lis===1691###sois===66809###eois===66855###lif===16###soif===511###eoif===557###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress2()");state.decoder.zlibsettings.ignore_adler32 = 0;
  AKA_mark("lis===1692###sois===66859###eois===66888###lif===17###soif===561###eoif===590###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress2()");state.decoder.ignore_crc = 0;
  AKA_mark("lis===1693###sois===66892###eois===66947###lif===18###soif===594###eoif===649###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress2()");error = lodepng::decode(decoded, w, h, state, encoded);
  AKA_mark("lis===1694###sois===66951###eois===66978###lif===19###soif===653###eoif===680###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress2()");ASSERT_NO_PNG_ERROR(error);
  AKA_mark("lis===1695###sois===66982###eois===67001###lif===20###soif===684###eoif===703###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress2()");ASSERT_EQUALS(5, w);
  AKA_mark("lis===1696###sois===67006###eois===67025###lif===21###soif===708###eoif===727###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibCompress2()");ASSERT_EQUALS(5, h);
}

/** Instrumented function testCustomDeflate() */
void testCustomDeflate() /* << Aka begin of function void testCustomDeflate() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomDeflate()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testCustomDeflate.67038.stub"

  AKA_mark("lis===1700###sois===67063###eois===67109###lif===1###soif===30###eoif===76###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomDeflate()");std::cout << "testCustomDeflate" << std::endl;
  AKA_mark("lis===1701###sois===67113###eois===67125###lif===2###soif===80###eoif===92###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomDeflate()");Image image;
  AKA_mark("lis===1702###sois===67129###eois===67173###lif===3###soif===96###eoif===140###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomDeflate()");generateTestImage(image, 5, 5, LCT_RGBA, 8);

  AKA_mark("lis===1704###sois===67179###eois===67214###lif===5###soif===146###eoif===181###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomDeflate()");std::vector<unsigned char> encoded;
  AKA_mark("lis===1705###sois===67218###eois===67240###lif===6###soif===185###eoif===207###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomDeflate()");int customcontext = 5;

  AKA_mark("lis===1707###sois===67246###eois===67672###lif===8###soif===213###eoif===639###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomDeflate()");struct TestFun {
    static unsigned custom_deflate(unsigned char**, size_t*,
                                   const unsigned char*, size_t,
                                   const LodePNGCompressSettings* settings) {
      ASSERT_EQUALS(5, *(int*)(settings->custom_context));
      custom_proof = 1;
      return 5555; // return a custom error code, which will be converted to an error known to lodepng.
    }
  };

  AKA_mark("lis===1717###sois===67678###eois===67699###lif===18###soif===645###eoif===666###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomDeflate()");lodepng::State state;
  AKA_mark("lis===1718###sois===67703###eois===67771###lif===19###soif===670###eoif===738###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomDeflate()");state.encoder.zlibsettings.custom_deflate = TestFun::custom_deflate;
  AKA_mark("lis===1719###sois===67775###eois===67834###lif===20###soif===742###eoif===801###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomDeflate()");state.encoder.zlibsettings.custom_context = &customcontext;

  AKA_mark("lis===1721###sois===67840###eois===67857###lif===22###soif===807###eoif===824###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomDeflate()");custom_proof = 0;
  AKA_mark("lis===1722###sois===67861###eois===67949###lif===23###soif===828###eoif===916###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomDeflate()");unsigned error = lodepng::encode(encoded, image.data, image.width, image.height, state);
  AKA_mark("lis===1723###sois===67953###eois===67983###lif===24###soif===920###eoif===950###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomDeflate()");ASSERT_EQUALS(1, custom_proof); // check that the custom deflate was called

  AKA_mark("lis===1725###sois===68034###eois===68059###lif===26###soif===1001###eoif===1026###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomDeflate()");ASSERT_EQUALS(111, error); // expect a known lodepng error, not the custom 5555
}

/** Instrumented function testCustomZlibDecompress() */
void testCustomZlibDecompress() /* << Aka begin of function void testCustomZlibDecompress() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibDecompress()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testCustomZlibDecompress.68125.stub"

  AKA_mark("lis===1729###sois===68157###eois===68210###lif===1###soif===37###eoif===90###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibDecompress()");std::cout << "testCustomZlibDecompress" << std::endl;
  AKA_mark("lis===1730###sois===68214###eois===68226###lif===2###soif===94###eoif===106###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibDecompress()");Image image;
  AKA_mark("lis===1731###sois===68230###eois===68274###lif===3###soif===110###eoif===154###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibDecompress()");generateTestImage(image, 5, 5, LCT_RGBA, 8);

  AKA_mark("lis===1733###sois===68280###eois===68315###lif===5###soif===160###eoif===195###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibDecompress()");std::vector<unsigned char> encoded;

  AKA_mark("lis===1735###sois===68321###eois===68475###lif===7###soif===201###eoif===355###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibDecompress()");unsigned error_enc = lodepng::encode(encoded, image.data, image.width, image.height,
                                   image.colorType, image.bitDepth);
  AKA_mark("lis===1737###sois===68479###eois===68544###lif===9###soif===359###eoif===424###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibDecompress()");ASSERT_NO_PNG_ERROR_MSG(error_enc, "encoder error not expected");


  AKA_mark("lis===1740###sois===68552###eois===68587###lif===12###soif===432###eoif===467###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibDecompress()");std::vector<unsigned char> decoded;
  AKA_mark("lis===1741###sois===68591###eois===68605###lif===13###soif===471###eoif===485###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibDecompress()");unsigned w, h;
  AKA_mark("lis===1742###sois===68609###eois===68631###lif===14###soif===489###eoif===511###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibDecompress()");int customcontext = 5;

  AKA_mark("lis===1744###sois===68637###eois===69044###lif===16###soif===517###eoif===924###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibDecompress()");struct TestFun {
    static unsigned custom_zlib(unsigned char**, size_t*,
                          const unsigned char*, size_t,
                          const LodePNGDecompressSettings* settings) {
      ASSERT_EQUALS(5, *(int*)(settings->custom_context));
      custom_proof = 1;
      return 5555; // return a custom error code, which will be converted to an error known to lodepng.
    }
  };

  AKA_mark("lis===1754###sois===69050###eois===69071###lif===26###soif===930###eoif===951###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibDecompress()");lodepng::State state;
  AKA_mark("lis===1755###sois===69075###eois===69137###lif===27###soif===955###eoif===1017###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibDecompress()");state.decoder.zlibsettings.custom_zlib = TestFun::custom_zlib;
  AKA_mark("lis===1756###sois===69141###eois===69200###lif===28###soif===1021###eoif===1080###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibDecompress()");state.decoder.zlibsettings.custom_context = &customcontext;
  AKA_mark("lis===1757###sois===69204###eois===69250###lif===29###soif===1084###eoif===1130###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibDecompress()");state.decoder.zlibsettings.ignore_adler32 = 0;
  AKA_mark("lis===1758###sois===69254###eois===69283###lif===30###soif===1134###eoif===1163###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibDecompress()");state.decoder.ignore_crc = 0;
  AKA_mark("lis===1759###sois===69287###eois===69304###lif===31###soif===1167###eoif===1184###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibDecompress()");custom_proof = 0;
  AKA_mark("lis===1760###sois===69308###eois===69372###lif===32###soif===1188###eoif===1252###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibDecompress()");unsigned error = lodepng::decode(decoded, w, h, state, encoded);
  AKA_mark("lis===1761###sois===69376###eois===69406###lif===33###soif===1256###eoif===1286###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibDecompress()");ASSERT_EQUALS(1, custom_proof); // check that the custom zlib was called

  AKA_mark("lis===1763###sois===69454###eois===69479###lif===35###soif===1334###eoif===1359###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomZlibDecompress()");ASSERT_EQUALS(110, error);
}

/** Instrumented function testCustomInflate() */
void testCustomInflate() /* << Aka begin of function void testCustomInflate() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomInflate()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testCustomInflate.69492.stub"

  AKA_mark("lis===1767###sois===69517###eois===69563###lif===1###soif===30###eoif===76###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomInflate()");std::cout << "testCustomInflate" << std::endl;
  AKA_mark("lis===1768###sois===69567###eois===69579###lif===2###soif===80###eoif===92###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomInflate()");Image image;
  AKA_mark("lis===1769###sois===69583###eois===69627###lif===3###soif===96###eoif===140###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomInflate()");generateTestImage(image, 5, 5, LCT_RGBA, 8);

  AKA_mark("lis===1771###sois===69633###eois===69668###lif===5###soif===146###eoif===181###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomInflate()");std::vector<unsigned char> encoded;

  AKA_mark("lis===1773###sois===69674###eois===69828###lif===7###soif===187###eoif===341###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomInflate()");unsigned error_enc = lodepng::encode(encoded, image.data, image.width, image.height,
                                   image.colorType, image.bitDepth);
  AKA_mark("lis===1775###sois===69832###eois===69897###lif===9###soif===345###eoif===410###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomInflate()");ASSERT_NO_PNG_ERROR_MSG(error_enc, "encoder error not expected");


  AKA_mark("lis===1778###sois===69905###eois===69940###lif===12###soif===418###eoif===453###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomInflate()");std::vector<unsigned char> decoded;
  AKA_mark("lis===1779###sois===69944###eois===69958###lif===13###soif===457###eoif===471###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomInflate()");unsigned w, h;
  AKA_mark("lis===1780###sois===69962###eois===69984###lif===14###soif===475###eoif===497###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomInflate()");int customcontext = 5;

  AKA_mark("lis===1782###sois===69990###eois===70418###lif===16###soif===503###eoif===931###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomInflate()");struct TestFun {
    static unsigned custom_inflate(unsigned char**, size_t*,
                                   const unsigned char*, size_t,
                                   const LodePNGDecompressSettings* settings) {
      ASSERT_EQUALS(5, *(int*)(settings->custom_context));
      custom_proof = 1;
      return 5555; // return a custom error code, which will be converted to an error known to lodepng.
    }
  };

  AKA_mark("lis===1792###sois===70424###eois===70445###lif===26###soif===937###eoif===958###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomInflate()");lodepng::State state;
  AKA_mark("lis===1793###sois===70449###eois===70517###lif===27###soif===962###eoif===1030###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomInflate()");state.decoder.zlibsettings.custom_inflate = TestFun::custom_inflate;
  AKA_mark("lis===1794###sois===70521###eois===70580###lif===28###soif===1034###eoif===1093###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomInflate()");state.decoder.zlibsettings.custom_context = &customcontext;
  AKA_mark("lis===1795###sois===70584###eois===70630###lif===29###soif===1097###eoif===1143###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomInflate()");state.decoder.zlibsettings.ignore_adler32 = 0;
  AKA_mark("lis===1796###sois===70634###eois===70663###lif===30###soif===1147###eoif===1176###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomInflate()");state.decoder.ignore_crc = 0;
  AKA_mark("lis===1797###sois===70667###eois===70684###lif===31###soif===1180###eoif===1197###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomInflate()");custom_proof = 0;
  AKA_mark("lis===1798###sois===70688###eois===70752###lif===32###soif===1201###eoif===1265###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomInflate()");unsigned error = lodepng::decode(decoded, w, h, state, encoded);
  AKA_mark("lis===1799###sois===70756###eois===70786###lif===33###soif===1269###eoif===1299###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomInflate()");ASSERT_EQUALS(1, custom_proof); // check that the custom zlib was called

  AKA_mark("lis===1801###sois===70834###eois===70859###lif===35###soif===1347###eoif===1372###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testCustomInflate()");ASSERT_EQUALS(110, error);
}


/** Instrumented function testChunkUtil() */
void testChunkUtil() /* << Aka begin of function void testChunkUtil() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChunkUtil()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testChunkUtil.70874.stub"

  AKA_mark("lis===1806###sois===70895###eois===70937###lif===1###soif===26###eoif===68###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChunkUtil()");std::cout << "testChunkUtil" << std::endl;
  AKA_mark("lis===1807###sois===70941###eois===70972###lif===2###soif===72###eoif===103###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChunkUtil()");std::vector<unsigned char> png;
  AKA_mark("lis===1808###sois===70976###eois===70998###lif===3###soif===107###eoif===129###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChunkUtil()");createComplexPNG(png);

  AKA_mark("lis===1810###sois===71004###eois===71038###lif===5###soif===135###eoif===169###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChunkUtil()");std::vector<std::string> names[3];
  AKA_mark("lis===1811###sois===71042###eois===71093###lif===6###soif===173###eoif===224###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChunkUtil()");std::vector<std::vector<unsigned char> > chunks[3];

  AKA_mark("lis===1813###sois===71099###eois===71153###lif===8###soif===230###eoif===284###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChunkUtil()");assertNoError(lodepng::getChunks(names, chunks, png));

  AKA_mark("lis===1815###sois===71159###eois===71211###lif===10###soif===290###eoif===342###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChunkUtil()");std::vector<std::vector<unsigned char> > chunks2[3];
  AKA_mark("lis===1816###sois===71215###eois===71250###lif===11###soif===346###eoif===381###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChunkUtil()");chunks2[0].push_back(chunks[2][2]); //zTXt
  AKA_mark("lis===1817###sois===71261###eois===71296###lif===12###soif===392###eoif===427###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChunkUtil()");chunks2[1].push_back(chunks[2][3]); //tEXt
  AKA_mark("lis===1818###sois===71307###eois===71342###lif===13###soif===438###eoif===473###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChunkUtil()");chunks2[2].push_back(chunks[2][4]); //iTXt

  AKA_mark("lis===1820###sois===71355###eois===71406###lif===15###soif===486###eoif===537###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChunkUtil()");assertNoError(lodepng::insertChunks(png, chunks2));

  AKA_mark("lis===1822###sois===71412###eois===71460###lif===17###soif===543###eoif===591###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChunkUtil()");std::string chunknames = extractChunkNames(png);
  //                                        chunks2[0]                    chunks2[1]                                   chunks2[2]
  //                                             v                             v                                            v
  AKA_mark("lis===1825###sois===71722###eois===71853###lif===20###soif===853###eoif===984###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChunkUtil()");std::string expectednames = " IHDR uNKa uNKa zTXt PLTE tRNS bKGD pHYs uNKb tEXt IDAT tIME zTXt zTXt tEXt iTXt iTXt uNKc iTXt IEND";
  AKA_mark("lis===1826###sois===71857###eois===71897###lif===21###soif===988###eoif===1028###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChunkUtil()");ASSERT_EQUALS(expectednames, chunknames);

  AKA_mark("lis===1828###sois===71904###eois===71937###lif===23###soif===1035###eoif===1068###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChunkUtil()");std::vector<unsigned char> image;
  AKA_mark("lis===1829###sois===71941###eois===71955###lif===24###soif===1072###eoif===1086###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChunkUtil()");unsigned w, h;
  AKA_mark("lis===1830###sois===71959###eois===72014###lif===25###soif===1090###eoif===1145###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChunkUtil()");ASSERT_NO_PNG_ERROR(lodepng::decode(image, w, h, png));
}

//Test that when decoding to 16-bit per channel, it always uses big endian consistently.
//It should always output big endian, the convention used inside of PNG, even though x86 CPU's are little endian.
/** Instrumented function test16bitColorEndianness() */
void test16bitColorEndianness() /* << Aka begin of function void test16bitColorEndianness() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.test16bitColorEndianness.72231.stub"

  AKA_mark("lis===1836###sois===72263###eois===72316###lif===1###soif===37###eoif===90###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");std::cout << "test16bitColorEndianness" << std::endl;

  //basn0g16.png from the PNG test suite
  AKA_mark("lis===1839###sois===72364###eois===72666###lif===4###soif===138###eoif===440###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");std::string base64 = "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAAAAAAGgflrAAAABGdBTUEAAYagMeiWXwAAAF5JREFU"
                       "eJzV0jEKwDAMQ1E5W+9/xtygk8AoezLVKgSj2Y8/OICnuFcTE2OgOoJgHQiZAN2C9kDKBOgW3AZC"
                       "JkC3oD2QMgG6BbeBkAnQLWgPpExgP28H7E/0GTjPfwAW2EvYX64rn9cAAAAASUVORK5CYII=";
  AKA_mark("lis===1842###sois===72670###eois===72701###lif===7###soif===444###eoif===475###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");std::vector<unsigned char> png;
  AKA_mark("lis===1843###sois===72705###eois===72729###lif===8###soif===479###eoif===503###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");fromBase64(png, base64);
  AKA_mark("lis===1844###sois===72733###eois===72747###lif===9###soif===507###eoif===521###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");unsigned w, h;
  AKA_mark("lis===1845###sois===72751###eois===72784###lif===10###soif===525###eoif===558###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");std::vector<unsigned char> image;
  AKA_mark("lis===1846###sois===72788###eois===72809###lif===11###soif===562###eoif===583###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");lodepng::State state;

  // Decode from 16-bit gray image to 16-bit per channel RGBA
  AKA_mark("lis===1849###sois===72878###eois===72907###lif===14###soif===652###eoif===681###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");state.info_raw.bitdepth = 16;
  AKA_mark("lis===1850###sois===72911###eois===72973###lif===15###soif===685###eoif===747###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");ASSERT_NO_PNG_ERROR(lodepng::decode(image, w, h, state, png));
  AKA_mark("lis===1851###sois===72977###eois===73006###lif===16###soif===751###eoif===780###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");ASSERT_EQUALS(0x09, image[8]);
  AKA_mark("lis===1852###sois===73011###eois===73040###lif===17###soif===785###eoif===814###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");ASSERT_EQUALS(0x00, image[9]);

  // Decode from 16-bit gray image to 16-bit gray raw image (no conversion)
  AKA_mark("lis===1855###sois===73124###eois===73138###lif===20###soif===898###eoif===912###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");image.clear();
  AKA_mark("lis===1856###sois===73142###eois===73167###lif===21###soif===916###eoif===941###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");state = lodepng::State();
  AKA_mark("lis===1857###sois===73171###eois===73207###lif===22###soif===945###eoif===981###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");state.decoder.color_convert = false;
  AKA_mark("lis===1858###sois===73211###eois===73273###lif===23###soif===985###eoif===1047###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");ASSERT_NO_PNG_ERROR(lodepng::decode(image, w, h, state, png));
  AKA_mark("lis===1859###sois===73277###eois===73306###lif===24###soif===1051###eoif===1080###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");ASSERT_EQUALS(0x09, image[2]);
  AKA_mark("lis===1860###sois===73311###eois===73340###lif===25###soif===1085###eoif===1114###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");ASSERT_EQUALS(0x00, image[3]);

  // Decode from 16-bit per channel RGB image to 16-bit per channel RGBA
  AKA_mark("lis===1863###sois===73421###eois===73766###lif===28###soif===1195###eoif===1540###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");base64 = "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAIAAACsiDHgAAAABGdBTUEAAYagMeiWXwAAAANzQklU"
           "DQ0N0DeNwQAAAH5JREFUeJztl8ENxEAIAwcJ6cpI+q8qKeNepAgelq2dCjz4AdQM1jRcf3WIDQ13"
           "qUNsiBBQZ1gR0cARUFIz3pug3586wo5+rOcfIaBOsCSggSOgpcB8D4D3R9DgfUyECIhDbAhp4Ajo"
           "KPD+CBq8P4IG72MiQkCdYUVEA0dAyQcwUyZpXH92ZwAAAABJRU5ErkJggg=="; //cs3n2c16.png
  AKA_mark("lis===1867###sois===73785###eois===73797###lif===32###soif===1559###eoif===1571###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");png.clear();
  AKA_mark("lis===1868###sois===73801###eois===73825###lif===33###soif===1575###eoif===1599###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");fromBase64(png, base64);
  AKA_mark("lis===1869###sois===73829###eois===73843###lif===34###soif===1603###eoif===1617###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");image.clear();
  AKA_mark("lis===1870###sois===73847###eois===73872###lif===35###soif===1621###eoif===1646###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");state = lodepng::State();
  AKA_mark("lis===1871###sois===73876###eois===73905###lif===36###soif===1650###eoif===1679###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");state.info_raw.bitdepth = 16;
  AKA_mark("lis===1872###sois===73909###eois===73971###lif===37###soif===1683###eoif===1745###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");ASSERT_NO_PNG_ERROR(lodepng::decode(image, w, h, state, png));
  AKA_mark("lis===1873###sois===73975###eois===74006###lif===38###soif===1749###eoif===1780###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");ASSERT_EQUALS(0x1f, image[258]);
  AKA_mark("lis===1874###sois===74011###eois===74042###lif===39###soif===1785###eoif===1816###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");ASSERT_EQUALS(0xf9, image[259]);

  // Decode from 16-bit per channel RGB image to 16-bit per channel RGBA raw image (no conversion)
  AKA_mark("lis===1877###sois===74149###eois===74163###lif===42###soif===1923###eoif===1937###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");image.clear();
  AKA_mark("lis===1878###sois===74167###eois===74192###lif===43###soif===1941###eoif===1966###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");state = lodepng::State();
  AKA_mark("lis===1879###sois===74196###eois===74232###lif===44###soif===1970###eoif===2006###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");state.decoder.color_convert = false;
  AKA_mark("lis===1880###sois===74236###eois===74298###lif===45###soif===2010###eoif===2072###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");ASSERT_NO_PNG_ERROR(lodepng::decode(image, w, h, state, png));

  AKA_mark("lis===1882###sois===74304###eois===74335###lif===47###soif===2078###eoif===2109###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");ASSERT_EQUALS(0x1f, image[194]);
  AKA_mark("lis===1883###sois===74340###eois===74371###lif===48###soif===2114###eoif===2145###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");ASSERT_EQUALS(0xf9, image[195]);

  AKA_mark("lis===1885###sois===74378###eois===74392###lif===50###soif===2152###eoif===2166###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");image.clear();
  AKA_mark("lis===1886###sois===74396###eois===74421###lif===51###soif===2170###eoif===2195###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");state = lodepng::State();

  // Decode from palette image to 16-bit per channel RGBA
  AKA_mark("lis===1889###sois===74486###eois===74712###lif===54###soif===2260###eoif===2486###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");base64 = "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHAgMAAAC5PL9AAAAABGdBTUEAAYagMeiWXwAAAANzQklU"
           "BAQEd/i1owAAAAxQTFRF/wB3AP93//8AAAD/G0OznAAAABpJREFUeJxj+P+H4WoMw605DDfmgEgg"
           "+/8fAHF5CrkeXW0HAAAAAElFTkSuQmCC"; //s07n3p02.png
  AKA_mark("lis===1892###sois===74731###eois===74743###lif===57###soif===2505###eoif===2517###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");png.clear();
  AKA_mark("lis===1893###sois===74747###eois===74771###lif===58###soif===2521###eoif===2545###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");fromBase64(png, base64);
  AKA_mark("lis===1894###sois===74775###eois===74789###lif===59###soif===2549###eoif===2563###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");image.clear();
  AKA_mark("lis===1895###sois===74793###eois===74818###lif===60###soif===2567###eoif===2592###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");state = lodepng::State();
  AKA_mark("lis===1896###sois===74822###eois===74851###lif===61###soif===2596###eoif===2625###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");state.info_raw.bitdepth = 16;
  AKA_mark("lis===1897###sois===74855###eois===74917###lif===62###soif===2629###eoif===2691###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");ASSERT_NO_PNG_ERROR(lodepng::decode(image, w, h, state, png));
  AKA_mark("lis===1898###sois===74921###eois===74951###lif===63###soif===2695###eoif===2725###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");ASSERT_EQUALS(0x77, image[84]);
  AKA_mark("lis===1899###sois===74956###eois===74986###lif===64###soif===2730###eoif===2760###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\test16bitColorEndianness()");ASSERT_EQUALS(0x77, image[85]);
}

/** Instrumented function testPredefinedFilters() */
void testPredefinedFilters() /* << Aka begin of function void testPredefinedFilters() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testPredefinedFilters.74999.stub"

  AKA_mark("lis===1903###sois===75028###eois===75050###lif===1###soif===34###eoif===56###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()");size_t w = 32, h = 32;
  AKA_mark("lis===1904###sois===75054###eois===75104###lif===2###soif===60###eoif===110###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()");std::cout << "testPredefinedFilters" << std::endl;
  AKA_mark("lis===1905###sois===75108###eois===75120###lif===3###soif===114###eoif===126###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()");Image image;
  AKA_mark("lis===1906###sois===75124###eois===75168###lif===4###soif===130###eoif===174###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()");generateTestImage(image, w, h, LCT_RGBA, 8);

  // everything to filter type '3'
  AKA_mark("lis===1909###sois===75210###eois===75254###lif===7###soif===216###eoif===260###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()");std::vector<unsigned char> predefined(h, 3);
  AKA_mark("lis===1910###sois===75258###eois===75279###lif===8###soif===264###eoif===285###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()");lodepng::State state;
  AKA_mark("lis===1911###sois===75283###eois===75330###lif===9###soif===289###eoif===336###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()");state.encoder.filter_strategy = LFS_PREDEFINED;
  AKA_mark("lis===1912###sois===75334###eois===75372###lif===10###soif===340###eoif===378###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()");state.encoder.filter_palette_zero = 0;
  AKA_mark("lis===1913###sois===75376###eois===75426###lif===11###soif===382###eoif===432###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()");state.encoder.predefined_filters = &predefined[0];

  AKA_mark("lis===1915###sois===75432###eois===75463###lif===13###soif===438###eoif===469###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()");std::vector<unsigned char> png;
  AKA_mark("lis===1916###sois===75467###eois===75534###lif===14###soif===473###eoif===540###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()");unsigned error = lodepng::encode(png, &image.data[0], w, h, state);
  AKA_mark("lis===1917###sois===75538###eois===75559###lif===15###soif===544###eoif===565###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()");assertNoError(error);

  AKA_mark("lis===1919###sois===75565###eois===75603###lif===17###soif===571###eoif===609###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()");std::vector<unsigned char> outfilters;
  AKA_mark("lis===1920###sois===75607###eois===75656###lif===18###soif===613###eoif===662###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()");error = lodepng::getFilterTypes(outfilters, png);
  AKA_mark("lis===1921###sois===75660###eois===75681###lif===19###soif===666###eoif===687###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()");assertNoError(error);

  AKA_mark("lis===1923###sois===75687###eois===75722###lif===21###soif===693###eoif===728###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()");ASSERT_EQUALS(outfilters.size(), h);
  int AKA_BLOCK_LOOP_75727 = 0;
    AKA_mark("lis===1924###sois===75731###eois===75744###lif===22###soif===737###eoif===750###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()");
for(size_t i = 0; AKA_mark("lis===1924###sois===75745###eois===75750###lif===22###soif===751###eoif===756###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()") && (AKA_mark("lis===1924###sois===75745###eois===75750###lif===22###soif===751###eoif===756###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()") && (i < h)); ({AKA_mark("lis===1924###sois===75752###eois===75755###lif===22###soif===758###eoif===761###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()");i++;})) {
        AKA_BLOCK_LOOP_75727++;
        if (AKA_BLOCK_LOOP_75727 > 1000) {
            //break;
        }AKA_mark("lis===1924###sois===75757###eois===75788###lif===22###soif===763###eoif===794###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPredefinedFilters()");ASSERT_EQUALS(3, outfilters[i])};
}

/** Instrumented function testEncoderErrors() */
void testEncoderErrors() /* << Aka begin of function void testEncoderErrors() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testEncoderErrors.75801.stub"

  AKA_mark("lis===1928###sois===75826###eois===75872###lif===1###soif===30###eoif===76###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");std::cout << "testEncoderErrors" << std::endl;

  AKA_mark("lis===1930###sois===75878###eois===75909###lif===3###soif===82###eoif===113###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");std::vector<unsigned char> png;
  AKA_mark("lis===1931###sois===75913###eois===75937###lif===4###soif===117###eoif===141###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");unsigned w = 32, h = 32;
  AKA_mark("lis===1932###sois===75941###eois===75953###lif===5###soif===145###eoif===157###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");Image image;
  AKA_mark("lis===1933###sois===75957###eois===75988###lif===6###soif===161###eoif===192###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");generateTestImage(image, w, h);

  AKA_mark("lis===1935###sois===75994###eois===76013###lif===8###soif===198###eoif===217###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");lodepng::State def;

  AKA_mark("lis===1937###sois===76019###eois===76040###lif===10###soif===223###eoif===244###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");lodepng::State state;

  AKA_mark("lis===1939###sois===76046###eois===76113###lif===12###soif===250###eoif===317###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");ASSERT_EQUALS(0, lodepng::encode(png, &image.data[0], w, h, state));

  // test window sizes
  AKA_mark("lis===1942###sois===76144###eois===76186###lif===15###soif===348###eoif===390###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");state.encoder.zlibsettings.windowsize = 0;
  AKA_mark("lis===1943###sois===76190###eois===76258###lif===16###soif===394###eoif===462###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");ASSERT_EQUALS(60, lodepng::encode(png, &image.data[0], w, h, state));
  AKA_mark("lis===1944###sois===76263###eois===76309###lif===17###soif===467###eoif===513###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");state.encoder.zlibsettings.windowsize = 65536;
  AKA_mark("lis===1945###sois===76313###eois===76381###lif===18###soif===517###eoif===585###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");ASSERT_EQUALS(60, lodepng::encode(png, &image.data[0], w, h, state));
  AKA_mark("lis===1946###sois===76386###eois===76431###lif===19###soif===590###eoif===635###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");state.encoder.zlibsettings.windowsize = 1000; // not power of two
  AKA_mark("lis===1947###sois===76455###eois===76523###lif===20###soif===659###eoif===727###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");ASSERT_EQUALS(90, lodepng::encode(png, &image.data[0], w, h, state));
  AKA_mark("lis===1948###sois===76528###eois===76572###lif===21###soif===732###eoif===776###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");state.encoder.zlibsettings.windowsize = 256;
  AKA_mark("lis===1949###sois===76576###eois===76643###lif===22###soif===780###eoif===847###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");ASSERT_EQUALS(0, lodepng::encode(png, &image.data[0], w, h, state));

  AKA_mark("lis===1951###sois===76650###eois===76662###lif===24###soif===854###eoif===866###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");state = def;
  AKA_mark("lis===1952###sois===76666###eois===76700###lif===25###soif===870###eoif===904###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");state.info_png.color.bitdepth = 3;
  AKA_mark("lis===1953###sois===76704###eois===76772###lif===26###soif===908###eoif===976###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");ASSERT_EQUALS(37, lodepng::encode(png, &image.data[0], w, h, state));

  AKA_mark("lis===1955###sois===76779###eois===76791###lif===28###soif===983###eoif===995###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");state = def;
  AKA_mark("lis===1956###sois===76795###eois===76848###lif===29###soif===999###eoif===1052###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");state.info_png.color.colortype = (LodePNGColorType)5;
  AKA_mark("lis===1957###sois===76852###eois===76920###lif===30###soif===1056###eoif===1124###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");ASSERT_EQUALS(31, lodepng::encode(png, &image.data[0], w, h, state));

  AKA_mark("lis===1959###sois===76927###eois===76939###lif===32###soif===1131###eoif===1143###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");state = def;
  AKA_mark("lis===1960###sois===76943###eois===76988###lif===33###soif===1147###eoif===1192###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");state.info_png.color.colortype = LCT_PALETTE;
  AKA_mark("lis===1961###sois===76992###eois===77060###lif===34###soif===1196###eoif===1264###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");ASSERT_EQUALS(68, lodepng::encode(png, &image.data[0], w, h, state));

  AKA_mark("lis===1963###sois===77067###eois===77079###lif===36###soif===1271###eoif===1283###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");state = def;
  AKA_mark("lis===1964###sois===77083###eois===77119###lif===37###soif===1287###eoif===1323###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");state.info_png.interlace_method = 0;
  AKA_mark("lis===1965###sois===77123###eois===77190###lif===38###soif===1327###eoif===1394###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");ASSERT_EQUALS(0, lodepng::encode(png, &image.data[0], w, h, state));
  AKA_mark("lis===1966###sois===77195###eois===77231###lif===39###soif===1399###eoif===1435###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");state.info_png.interlace_method = 1;
  AKA_mark("lis===1967###sois===77235###eois===77302###lif===40###soif===1439###eoif===1506###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");ASSERT_EQUALS(0, lodepng::encode(png, &image.data[0], w, h, state));
  AKA_mark("lis===1968###sois===77307###eois===77343###lif===41###soif===1511###eoif===1547###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");state.info_png.interlace_method = 2;
  AKA_mark("lis===1969###sois===77347###eois===77415###lif===42###soif===1551###eoif===1619###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");ASSERT_EQUALS(71, lodepng::encode(png, &image.data[0], w, h, state));

  AKA_mark("lis===1971###sois===77422###eois===77434###lif===44###soif===1626###eoif===1638###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");state = def;
  AKA_mark("lis===1972###sois===77438###eois===77475###lif===45###soif===1642###eoif===1679###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");state.encoder.zlibsettings.btype = 0;
  AKA_mark("lis===1973###sois===77479###eois===77546###lif===46###soif===1683###eoif===1750###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");ASSERT_EQUALS(0, lodepng::encode(png, &image.data[0], w, h, state));
  AKA_mark("lis===1974###sois===77551###eois===77588###lif===47###soif===1755###eoif===1792###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");state.encoder.zlibsettings.btype = 1;
  AKA_mark("lis===1975###sois===77592###eois===77659###lif===48###soif===1796###eoif===1863###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");ASSERT_EQUALS(0, lodepng::encode(png, &image.data[0], w, h, state));
  AKA_mark("lis===1976###sois===77664###eois===77701###lif===49###soif===1868###eoif===1905###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");state.encoder.zlibsettings.btype = 2;
  AKA_mark("lis===1977###sois===77705###eois===77772###lif===50###soif===1909###eoif===1976###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");ASSERT_EQUALS(0, lodepng::encode(png, &image.data[0], w, h, state));
  AKA_mark("lis===1978###sois===77777###eois===77814###lif===51###soif===1981###eoif===2018###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");state.encoder.zlibsettings.btype = 3;
  AKA_mark("lis===1979###sois===77818###eois===77886###lif===52###soif===2022###eoif===2090###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testEncoderErrors()");ASSERT_EQUALS(61, lodepng::encode(png, &image.data[0], w, h, state));
}

/** Instrumented function addColor(std::vector<unsigned char>&,unsigned char,unsigned char,unsigned char,unsigned char) */
void addColor(std::vector<unsigned char>& colors, unsigned char r, unsigned char g, unsigned char b, unsigned char a) /* << Aka begin of function void addColor(std::vector<unsigned char>& colors, unsigned char r, unsigned char g, unsigned char b, unsigned char a) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\addColor(std::vector<unsigned char>&,unsigned char,unsigned char,unsigned char,unsigned char)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.addColor.77899.stub"

  AKA_mark("lis===1983###sois===78017###eois===78037###lif===1###soif===123###eoif===143###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\addColor(std::vector<unsigned char>&,unsigned char,unsigned char,unsigned char,unsigned char)");colors.push_back(r);
  AKA_mark("lis===1984###sois===78041###eois===78061###lif===2###soif===147###eoif===167###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\addColor(std::vector<unsigned char>&,unsigned char,unsigned char,unsigned char,unsigned char)");colors.push_back(g);
  AKA_mark("lis===1985###sois===78065###eois===78085###lif===3###soif===171###eoif===191###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\addColor(std::vector<unsigned char>&,unsigned char,unsigned char,unsigned char,unsigned char)");colors.push_back(b);
  AKA_mark("lis===1986###sois===78089###eois===78109###lif===4###soif===195###eoif===215###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\addColor(std::vector<unsigned char>&,unsigned char,unsigned char,unsigned char,unsigned char)");colors.push_back(a);
}

/** Instrumented function addColor16(std::vector<unsigned char>&,unsigned short,unsigned short,unsigned short,unsigned short) */
void addColor16(std::vector<unsigned char>& colors, unsigned short r, unsigned short g, unsigned short b, unsigned short a) /* << Aka begin of function void addColor16(std::vector<unsigned char>& colors, unsigned short r, unsigned short g, unsigned short b, unsigned short a) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\addColor16(std::vector<unsigned char>&,unsigned short,unsigned short,unsigned short,unsigned short)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.addColor16.78121.stub"

  AKA_mark("lis===1990###sois===78245###eois===78271###lif===1###soif===129###eoif===155###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\addColor16(std::vector<unsigned char>&,unsigned short,unsigned short,unsigned short,unsigned short)");colors.push_back(r & 255);
  AKA_mark("lis===1991###sois===78275###eois===78308###lif===2###soif===159###eoif===192###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\addColor16(std::vector<unsigned char>&,unsigned short,unsigned short,unsigned short,unsigned short)");colors.push_back((r >> 8) & 255);
  AKA_mark("lis===1992###sois===78312###eois===78338###lif===3###soif===196###eoif===222###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\addColor16(std::vector<unsigned char>&,unsigned short,unsigned short,unsigned short,unsigned short)");colors.push_back(g & 255);
  AKA_mark("lis===1993###sois===78342###eois===78375###lif===4###soif===226###eoif===259###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\addColor16(std::vector<unsigned char>&,unsigned short,unsigned short,unsigned short,unsigned short)");colors.push_back((g >> 8) & 255);
  AKA_mark("lis===1994###sois===78379###eois===78405###lif===5###soif===263###eoif===289###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\addColor16(std::vector<unsigned char>&,unsigned short,unsigned short,unsigned short,unsigned short)");colors.push_back(b & 255);
  AKA_mark("lis===1995###sois===78409###eois===78442###lif===6###soif===293###eoif===326###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\addColor16(std::vector<unsigned char>&,unsigned short,unsigned short,unsigned short,unsigned short)");colors.push_back((b >> 8) & 255);
  AKA_mark("lis===1996###sois===78446###eois===78472###lif===7###soif===330###eoif===356###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\addColor16(std::vector<unsigned char>&,unsigned short,unsigned short,unsigned short,unsigned short)");colors.push_back(a & 255);
  AKA_mark("lis===1997###sois===78476###eois===78509###lif===8###soif===360###eoif===393###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\addColor16(std::vector<unsigned char>&,unsigned short,unsigned short,unsigned short,unsigned short)");colors.push_back((a >> 8) & 255);
}

// Tests auto_convert
// colors is in RGBA, inbitdepth must be 8 or 16, the amount of bits per channel.
// colortype and bitdepth are the expected values. insize is amount of pixels. So the amount of bytes is insize * 4 * (inbitdepth / 8)
/** Instrumented function testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool) */
void testAutoColorModel(const std::vector<unsigned char>& colors, unsigned inbitdepth, LodePNGColorType colortype, unsigned bitdepth, bool key) /* << Aka begin of function void testAutoColorModel(const std::vector<unsigned char>& colors, unsigned inbitdepth, LodePNGColorType colortype, unsigned bitdepth, bool key) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testAutoColorModel.78763.stub"

  AKA_mark("lis===2004###sois===78907###eois===79022###lif===1###soif===149###eoif===264###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");std::cout << "testAutoColorModel " << inbitdepth << " " << colortype << " " << bitdepth << " " << key << std::endl;
  AKA_mark("lis===2005###sois===79026###eois===79076###lif===2###soif===268###eoif===318###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");size_t innum = colors.size() / 4 * inbitdepth / 8;
  AKA_mark("lis===2006###sois===79080###eois===79123###lif===3###soif===322###eoif===365###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");size_t num = innum < 65536 ? 65536 : innum; // Make image bigger so the convert doesn't avoid palette due to small image.
  AKA_mark("lis===2007###sois===79205###eois===79268###lif===4###soif===447###eoif===510###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");std::vector<unsigned char> colors2(num * 4 * (inbitdepth / 8));
  int AKA_BLOCK_LOOP_79272 = 0;
    AKA_mark("lis===2008###sois===79276###eois===79289###lif===5###soif===518###eoif===531###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");
for(size_t i = 0; AKA_mark("lis===2008###sois===79290###eois===79308###lif===5###soif===532###eoif===550###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)") && (AKA_mark("lis===2008###sois===79290###eois===79308###lif===5###soif===532###eoif===550###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)") && (i < colors2.size())); ({AKA_mark("lis===2008###sois===79310###eois===79313###lif===5###soif===552###eoif===555###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");i++;})) {
AKA_mark("lis===2008###sois===79315###eois===79354###lif===5###soif===557###eoif===596###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");colors2[i] = colors[i % colors.size()];
}


  AKA_mark("lis===2010###sois===79360###eois===79391###lif===7###soif===602###eoif===633###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");std::vector<unsigned char> png;
  AKA_mark("lis===2011###sois===79395###eois===79455###lif===8###soif===637###eoif===697###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");lodepng::encode(png, colors2, num, 1, LCT_RGBA, inbitdepth);

  // now extract the color type it chose
  AKA_mark("lis===2014###sois===79503###eois===79517###lif===11###soif===745###eoif===759###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");unsigned w, h;
  AKA_mark("lis===2015###sois===79521###eois===79542###lif===12###soif===763###eoif===784###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");lodepng::State state;
  AKA_mark("lis===2016###sois===79546###eois===79581###lif===13###soif===788###eoif===823###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");std::vector<unsigned char> decoded;
  AKA_mark("lis===2017###sois===79585###eois===79628###lif===14###soif===827###eoif===870###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");lodepng::decode(decoded, w, h, state, png);
  AKA_mark("lis===2018###sois===79632###eois===79653###lif===15###soif===874###eoif===895###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");ASSERT_EQUALS(num, w);
  AKA_mark("lis===2019###sois===79658###eois===79677###lif===16###soif===900###eoif===919###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");ASSERT_EQUALS(1, h);
  AKA_mark("lis===2020###sois===79682###eois===79738###lif===17###soif===924###eoif===980###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");ASSERT_EQUALS(colortype, state.info_png.color.colortype);
  AKA_mark("lis===2021###sois===79743###eois===79797###lif===18###soif===985###eoif===1039###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");ASSERT_EQUALS(bitdepth, state.info_png.color.bitdepth);
  AKA_mark("lis===2022###sois===79802###eois===79854###lif===19###soif===1044###eoif===1096###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");ASSERT_EQUALS(key, state.info_png.color.key_defined);
  // also check that the PNG decoded correctly and has same colors as input
  if(AKA_mark("lis===2024###sois===79939###eois===79954###lif===21###soif===1181###eoif===1196###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)") && (AKA_mark("lis===2024###sois===79939###eois===79954###lif===21###soif===1181###eoif===1196###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)") && (inbitdepth == 8))) { int AKA_BLOCK_LOOP_79958 = 0;
    AKA_mark("lis===2024###sois===79962###eois===79975###lif===21###soif===1204###eoif===1217###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");
for(size_t i = 0; AKA_mark("lis===2024###sois===79976###eois===79993###lif===21###soif===1218###eoif===1235###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)") && (AKA_mark("lis===2024###sois===79976###eois===79993###lif===21###soif===1218###eoif===1235###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)") && (i < colors.size())); ({AKA_mark("lis===2024###sois===79995###eois===79998###lif===21###soif===1237###eoif===1240###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");i++;})) {
        AKA_BLOCK_LOOP_79958++;
        if (AKA_BLOCK_LOOP_79958 > 1000) {
            //break;
        }AKA_mark("lis===2024###sois===80000###eois===80036###lif===21###soif===1242###eoif===1278###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");ASSERT_EQUALS(colors[i], decoded[i])}; }
  else { int AKA_BLOCK_LOOP_80050 = 0;
    AKA_mark("lis===2025###sois===80054###eois===80067###lif===22###soif===1296###eoif===1309###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");
for(size_t i = 0; AKA_mark("lis===2025###sois===80068###eois===80089###lif===22###soif===1310###eoif===1331###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)") && (AKA_mark("lis===2025###sois===80068###eois===80089###lif===22###soif===1310###eoif===1331###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)") && (i < colors.size() / 2)); ({AKA_mark("lis===2025###sois===80091###eois===80094###lif===22###soif===1333###eoif===1336###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");i++;})) {
        AKA_BLOCK_LOOP_80050++;
        if (AKA_BLOCK_LOOP_80050 > 1000) {
            //break;
        }AKA_mark("lis===2025###sois===80096###eois===80136###lif===22###soif===1338###eoif===1378###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModel(std::vector<unsigned char>const&,unsigned,LodePNGColorType,unsigned,bool)");ASSERT_EQUALS(colors[i * 2], decoded[i])}; }
}

/** Instrumented function testAutoColorModels() */
void testAutoColorModels() /* << Aka begin of function void testAutoColorModels() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testAutoColorModels.80151.stub"

  // 1-bit gray
  AKA_mark("lis===2030###sois===80195###eois===80228###lif===2###soif===49###eoif===82###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> gray1;
  int AKA_BLOCK_LOOP_80232 = 0;
    AKA_mark("lis===2031###sois===80236###eois===80249###lif===3###soif===90###eoif===103###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");
for(size_t i = 0; AKA_mark("lis===2031###sois===80250###eois===80255###lif===3###soif===104###eoif===109###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (AKA_mark("lis===2031###sois===80250###eois===80255###lif===3###soif===104###eoif===109###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (i < 2)); ({AKA_mark("lis===2031###sois===80257###eois===80260###lif===3###soif===111###eoif===114###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");i++;})) {
AKA_mark("lis===2031###sois===80262###eois===80310###lif===3###soif===116###eoif===164###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(gray1, i * 255, i * 255, i * 255, 255);
}

  AKA_mark("lis===2032###sois===80314###eois===80363###lif===4###soif===168###eoif===217###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(gray1, 8, LCT_GREY, 1, false);

  // 2-bit gray
  AKA_mark("lis===2035###sois===80386###eois===80419###lif===7###soif===240###eoif===273###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> gray2;
  int AKA_BLOCK_LOOP_80423 = 0;
    AKA_mark("lis===2036###sois===80427###eois===80440###lif===8###soif===281###eoif===294###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");
for(size_t i = 0; AKA_mark("lis===2036###sois===80441###eois===80446###lif===8###soif===295###eoif===300###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (AKA_mark("lis===2036###sois===80441###eois===80446###lif===8###soif===295###eoif===300###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (i < 4)); ({AKA_mark("lis===2036###sois===80448###eois===80451###lif===8###soif===302###eoif===305###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");i++;})) {
AKA_mark("lis===2036###sois===80453###eois===80498###lif===8###soif===307###eoif===352###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(gray2, i * 85, i * 85, i * 85, 255);
}

  AKA_mark("lis===2037###sois===80502###eois===80551###lif===9###soif===356###eoif===405###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(gray2, 8, LCT_GREY, 2, false);

  // 4-bit gray
  AKA_mark("lis===2040###sois===80574###eois===80607###lif===12###soif===428###eoif===461###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> gray4;
  int AKA_BLOCK_LOOP_80611 = 0;
    AKA_mark("lis===2041###sois===80615###eois===80628###lif===13###soif===469###eoif===482###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");
for(size_t i = 0; AKA_mark("lis===2041###sois===80629###eois===80635###lif===13###soif===483###eoif===489###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (AKA_mark("lis===2041###sois===80629###eois===80635###lif===13###soif===483###eoif===489###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (i < 16)); ({AKA_mark("lis===2041###sois===80637###eois===80640###lif===13###soif===491###eoif===494###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");i++;})) {
AKA_mark("lis===2041###sois===80642###eois===80687###lif===13###soif===496###eoif===541###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(gray4, i * 17, i * 17, i * 17, 255);
}

  AKA_mark("lis===2042###sois===80691###eois===80740###lif===14###soif===545###eoif===594###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(gray4, 8, LCT_GREY, 4, false);

  // 8-bit gray
  AKA_mark("lis===2045###sois===80763###eois===80796###lif===17###soif===617###eoif===650###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> gray8;
  int AKA_BLOCK_LOOP_80800 = 0;
    AKA_mark("lis===2046###sois===80804###eois===80817###lif===18###soif===658###eoif===671###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");
for(size_t i = 0; AKA_mark("lis===2046###sois===80818###eois===80825###lif===18###soif===672###eoif===679###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (AKA_mark("lis===2046###sois===80818###eois===80825###lif===18###soif===672###eoif===679###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (i < 256)); ({AKA_mark("lis===2046###sois===80827###eois===80830###lif===18###soif===681###eoif===684###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");i++;})) {
AKA_mark("lis===2046###sois===80832###eois===80862###lif===18###soif===686###eoif===716###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(gray8, i, i, i, 255);
}

  AKA_mark("lis===2047###sois===80866###eois===80915###lif===19###soif===720###eoif===769###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(gray8, 8, LCT_GREY, 8, false);

  // 16-bit gray
  AKA_mark("lis===2050###sois===80939###eois===80973###lif===22###soif===793###eoif===827###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> gray16;
  int AKA_BLOCK_LOOP_80977 = 0;
    AKA_mark("lis===2051###sois===80981###eois===80994###lif===23###soif===835###eoif===848###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");
for(size_t i = 0; AKA_mark("lis===2051###sois===80995###eois===81002###lif===23###soif===849###eoif===856###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (AKA_mark("lis===2051###sois===80995###eois===81002###lif===23###soif===849###eoif===856###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (i < 257)); ({AKA_mark("lis===2051###sois===81004###eois===81007###lif===23###soif===858###eoif===861###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");i++;})) {
AKA_mark("lis===2051###sois===81009###eois===81044###lif===23###soif===863###eoif===898###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor16(gray16, i, i, i, 65535);
}

  AKA_mark("lis===2052###sois===81048###eois===81100###lif===24###soif===902###eoif===954###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(gray16, 16, LCT_GREY, 16, false);

  // 8-bit gray+alpha
  AKA_mark("lis===2055###sois===81129###eois===81163###lif===27###soif===983###eoif===1017###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> gray8a;
  int AKA_BLOCK_LOOP_81167 = 0;
    AKA_mark("lis===2056###sois===81171###eois===81184###lif===28###soif===1025###eoif===1038###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");
for(size_t i = 0; AKA_mark("lis===2056###sois===81185###eois===81191###lif===28###soif===1039###eoif===1045###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (AKA_mark("lis===2056###sois===81185###eois===81191###lif===28###soif===1039###eoif===1045###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (i < 17)); ({AKA_mark("lis===2056###sois===81193###eois===81196###lif===28###soif===1047###eoif===1050###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");i++;})) {
AKA_mark("lis===2056###sois===81198###eois===81227###lif===28###soif===1052###eoif===1081###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(gray8a, i, i, i, i);
}

  AKA_mark("lis===2057###sois===81231###eois===81284###lif===29###soif===1085###eoif===1138###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(gray8a, 8, LCT_PALETTE, 8, false);
  // palette not possible, becomes gray alpha
  int AKA_BLOCK_LOOP_81335 = 0;
    AKA_mark("lis===2059###sois===81339###eois===81352###lif===31###soif===1193###eoif===1206###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");
for(size_t i = 0; AKA_mark("lis===2059###sois===81353###eois===81360###lif===31###soif===1207###eoif===1214###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (AKA_mark("lis===2059###sois===81353###eois===81360###lif===31###soif===1207###eoif===1214###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (i < 256)); ({AKA_mark("lis===2059###sois===81362###eois===81365###lif===31###soif===1216###eoif===1219###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");i++;})) {
AKA_mark("lis===2059###sois===81367###eois===81400###lif===31###soif===1221###eoif===1254###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(gray8a, i, i, i, i ^ 1);
}

  AKA_mark("lis===2060###sois===81404###eois===81460###lif===32###soif===1258###eoif===1314###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(gray8a, 8, LCT_GREY_ALPHA, 8, false);

  // 16-bit gray+alpha
  AKA_mark("lis===2063###sois===81490###eois===81525###lif===35###soif===1344###eoif===1379###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> gray16a;
  int AKA_BLOCK_LOOP_81529 = 0;
    AKA_mark("lis===2064###sois===81533###eois===81546###lif===36###soif===1387###eoif===1400###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");
for(size_t i = 0; AKA_mark("lis===2064###sois===81547###eois===81554###lif===36###soif===1401###eoif===1408###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (AKA_mark("lis===2064###sois===81547###eois===81554###lif===36###soif===1401###eoif===1408###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (i < 257)); ({AKA_mark("lis===2064###sois===81556###eois===81559###lif===36###soif===1410###eoif===1413###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");i++;})) {
AKA_mark("lis===2064###sois===81561###eois===81593###lif===36###soif===1415###eoif===1447###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor16(gray16a, i, i, i, i);
}

  AKA_mark("lis===2065###sois===81597###eois===81656###lif===37###soif===1451###eoif===1510###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(gray16a, 16, LCT_GREY_ALPHA, 16, false);


  // various palette tests
  AKA_mark("lis===2069###sois===81692###eois===81727###lif===41###soif===1546###eoif===1581###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> palette;
  AKA_mark("lis===2070###sois===81731###eois===81763###lif===42###soif===1585###eoif===1617###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(palette, 0, 0, 1, 255);
  AKA_mark("lis===2071###sois===81767###eois===81821###lif===43###soif===1621###eoif===1675###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(palette, 8, LCT_PALETTE, 1, false);
  AKA_mark("lis===2072###sois===81825###eois===81857###lif===44###soif===1679###eoif===1711###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(palette, 0, 0, 2, 255);
  AKA_mark("lis===2073###sois===81861###eois===81915###lif===45###soif===1715###eoif===1769###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(palette, 8, LCT_PALETTE, 1, false);
  int AKA_BLOCK_LOOP_81919 = 0;
    AKA_mark("lis===2074###sois===81923###eois===81933###lif===46###soif===1777###eoif===1787###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");
for(int i = 3; AKA_mark("lis===2074###sois===81934###eois===81940###lif===46###soif===1788###eoif===1794###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (AKA_mark("lis===2074###sois===81934###eois===81940###lif===46###soif===1788###eoif===1794###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (i <= 4)); ({AKA_mark("lis===2074###sois===81942###eois===81945###lif===46###soif===1796###eoif===1799###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");i++;})) {
AKA_mark("lis===2074###sois===81947###eois===81979###lif===46###soif===1801###eoif===1833###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(palette, 0, 0, i, 255);
}

  AKA_mark("lis===2075###sois===81983###eois===82037###lif===47###soif===1837###eoif===1891###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(palette, 8, LCT_PALETTE, 2, false);
  int AKA_BLOCK_LOOP_82041 = 0;
    AKA_mark("lis===2076###sois===82045###eois===82055###lif===48###soif===1899###eoif===1909###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");
for(int i = 5; AKA_mark("lis===2076###sois===82056###eois===82062###lif===48###soif===1910###eoif===1916###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (AKA_mark("lis===2076###sois===82056###eois===82062###lif===48###soif===1910###eoif===1916###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (i <= 7)); ({AKA_mark("lis===2076###sois===82064###eois===82067###lif===48###soif===1918###eoif===1921###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");i++;})) {
AKA_mark("lis===2076###sois===82069###eois===82101###lif===48###soif===1923###eoif===1955###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(palette, 0, 0, i, 255);
}

  AKA_mark("lis===2077###sois===82105###eois===82159###lif===49###soif===1959###eoif===2013###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(palette, 8, LCT_PALETTE, 4, false);
  int AKA_BLOCK_LOOP_82163 = 0;
    AKA_mark("lis===2078###sois===82167###eois===82177###lif===50###soif===2021###eoif===2031###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");
for(int i = 8; AKA_mark("lis===2078###sois===82178###eois===82185###lif===50###soif===2032###eoif===2039###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (AKA_mark("lis===2078###sois===82178###eois===82185###lif===50###soif===2032###eoif===2039###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (i <= 17)); ({AKA_mark("lis===2078###sois===82187###eois===82190###lif===50###soif===2041###eoif===2044###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");i++;})) {
AKA_mark("lis===2078###sois===82192###eois===82224###lif===50###soif===2046###eoif===2078###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(palette, 0, 0, i, 255);
}

  AKA_mark("lis===2079###sois===82228###eois===82282###lif===51###soif===2082###eoif===2136###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(palette, 8, LCT_PALETTE, 8, false);
  AKA_mark("lis===2080###sois===82286###eois===82317###lif===52###soif===2140###eoif===2171###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(palette, 0, 0, 18, 0); // transparent
  AKA_mark("lis===2081###sois===82336###eois===82390###lif===53###soif===2190###eoif===2244###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(palette, 8, LCT_PALETTE, 8, false);
  AKA_mark("lis===2082###sois===82394###eois===82425###lif===54###soif===2248###eoif===2279###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(palette, 0, 0, 18, 1); // translucent
  AKA_mark("lis===2083###sois===82444###eois===82498###lif===55###soif===2298###eoif===2352###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(palette, 8, LCT_PALETTE, 8, false);

  // 1-bit gray + alpha not possible, becomes palette
  AKA_mark("lis===2086###sois===82559###eois===82593###lif===58###soif===2413###eoif===2447###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> gray1a;
  int AKA_BLOCK_LOOP_82597 = 0;
    AKA_mark("lis===2087###sois===82601###eois===82614###lif===59###soif===2455###eoif===2468###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");
for(size_t i = 0; AKA_mark("lis===2087###sois===82615###eois===82620###lif===59###soif===2469###eoif===2474###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (AKA_mark("lis===2087###sois===82615###eois===82620###lif===59###soif===2469###eoif===2474###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (i < 2)); ({AKA_mark("lis===2087###sois===82622###eois===82625###lif===59###soif===2476###eoif===2479###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");i++;})) {
AKA_mark("lis===2087###sois===82627###eois===82658###lif===59###soif===2481###eoif===2512###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(gray1a, i, i, i, 128);
}

  AKA_mark("lis===2088###sois===82662###eois===82715###lif===60###soif===2516###eoif===2569###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(gray1a, 8, LCT_PALETTE, 1, false);

  // 2-bit gray + alpha not possible, becomes palette
  AKA_mark("lis===2091###sois===82776###eois===82810###lif===63###soif===2630###eoif===2664###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> gray2a;
  int AKA_BLOCK_LOOP_82814 = 0;
    AKA_mark("lis===2092###sois===82818###eois===82831###lif===64###soif===2672###eoif===2685###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");
for(size_t i = 0; AKA_mark("lis===2092###sois===82832###eois===82837###lif===64###soif===2686###eoif===2691###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (AKA_mark("lis===2092###sois===82832###eois===82837###lif===64###soif===2686###eoif===2691###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (i < 4)); ({AKA_mark("lis===2092###sois===82839###eois===82842###lif===64###soif===2693###eoif===2696###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");i++;})) {
AKA_mark("lis===2092###sois===82844###eois===82875###lif===64###soif===2698###eoif===2729###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(gray2a, i, i, i, 128);
}

  AKA_mark("lis===2093###sois===82879###eois===82932###lif===65###soif===2733###eoif===2786###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(gray2a, 8, LCT_PALETTE, 2, false);

  // 4-bit gray + alpha not possible, becomes palette
  AKA_mark("lis===2096###sois===82993###eois===83027###lif===68###soif===2847###eoif===2881###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> gray4a;
  int AKA_BLOCK_LOOP_83031 = 0;
    AKA_mark("lis===2097###sois===83035###eois===83048###lif===69###soif===2889###eoif===2902###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");
for(size_t i = 0; AKA_mark("lis===2097###sois===83049###eois===83055###lif===69###soif===2903###eoif===2909###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (AKA_mark("lis===2097###sois===83049###eois===83055###lif===69###soif===2903###eoif===2909###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()") && (i < 16)); ({AKA_mark("lis===2097###sois===83057###eois===83060###lif===69###soif===2911###eoif===2914###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");i++;})) {
AKA_mark("lis===2097###sois===83062###eois===83093###lif===69###soif===2916###eoif===2947###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(gray4a, i, i, i, 128);
}

  AKA_mark("lis===2098###sois===83097###eois===83150###lif===70###soif===2951###eoif===3004###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(gray4a, 8, LCT_PALETTE, 4, false);

  // 8-bit rgb
  AKA_mark("lis===2101###sois===83172###eois===83211###lif===73###soif===3026###eoif===3065###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> rgb = gray8;
  AKA_mark("lis===2102###sois===83215###eois===83245###lif===74###soif===3069###eoif===3099###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(rgb, 255, 0, 0, 255);
  AKA_mark("lis===2103###sois===83249###eois===83295###lif===75###soif===3103###eoif===3149###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(rgb, 8, LCT_RGB, 8, false);

  // 8-bit rgb + key
  AKA_mark("lis===2106###sois===83323###eois===83364###lif===78###soif===3177###eoif===3218###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> rgb_key = rgb;
  AKA_mark("lis===2107###sois===83368###eois===83400###lif===79###soif===3222###eoif===3254###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(rgb_key, 128, 0, 0, 0);
  AKA_mark("lis===2108###sois===83404###eois===83453###lif===80###soif===3258###eoif===3307###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(rgb_key, 8, LCT_RGB, 8, true);

  // 8-bit rgb, not key due to edge case: single key color, but opaque color has same RGB value
  AKA_mark("lis===2111###sois===83556###eois===83602###lif===83###soif===3410###eoif===3456###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> rgb_key2 = rgb_key;
  AKA_mark("lis===2112###sois===83606###eois===83641###lif===84###soif===3460###eoif===3495###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(rgb_key2, 128, 0, 0, 255); // same color but opaque ==> no more key
  AKA_mark("lis===2113###sois===83686###eois===83738###lif===85###soif===3540###eoif===3592###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(rgb_key2, 8, LCT_RGBA, 8, false);

  // 8-bit rgb, not key due to semi translucent
  AKA_mark("lis===2116###sois===83793###eois===83839###lif===88###soif===3647###eoif===3693###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> rgb_key3 = rgb_key;
  AKA_mark("lis===2117###sois===83843###eois===83878###lif===89###soif===3697###eoif===3732###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(rgb_key3, 128, 0, 0, 255); // semi-translucent ==> no more key
  AKA_mark("lis===2118###sois===83918###eois===83970###lif===90###soif===3772###eoif===3824###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(rgb_key3, 8, LCT_RGBA, 8, false);

  // 8-bit rgb, not key due to multiple transparent colors
  AKA_mark("lis===2121###sois===84036###eois===84082###lif===93###soif===3890###eoif===3936###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> rgb_key4 = rgb_key;
  AKA_mark("lis===2122###sois===84086###eois===84121###lif===94###soif===3940###eoif===3975###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(rgb_key4, 128, 0, 0, 255);
  AKA_mark("lis===2123###sois===84125###eois===84160###lif===95###soif===3979###eoif===4014###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(rgb_key4, 129, 0, 0, 255); // two different transparent colors ==> no more key
  AKA_mark("lis===2124###sois===84216###eois===84268###lif===96###soif===4070###eoif===4122###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(rgb_key4, 8, LCT_RGBA, 8, false);

  // 1-bit gray with key
  AKA_mark("lis===2127###sois===84300###eois===84345###lif===99###soif===4154###eoif===4199###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> gray1_key = gray1;
  AKA_mark("lis===2128###sois===84349###eois===84366###lif===100###soif===4203###eoif===4220###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");gray1_key[7] = 0;
  AKA_mark("lis===2129###sois===84370###eois===84422###lif===101###soif===4224###eoif===4276###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(gray1_key, 8, LCT_GREY, 1, true);

  // 2-bit gray with key
  AKA_mark("lis===2132###sois===84454###eois===84499###lif===104###soif===4308###eoif===4353###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> gray2_key = gray2;
  AKA_mark("lis===2133###sois===84503###eois===84520###lif===105###soif===4357###eoif===4374###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");gray2_key[7] = 0;
  AKA_mark("lis===2134###sois===84524###eois===84576###lif===106###soif===4378###eoif===4430###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(gray2_key, 8, LCT_GREY, 2, true);

  // 4-bit gray with key
  AKA_mark("lis===2137###sois===84608###eois===84653###lif===109###soif===4462###eoif===4507###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> gray4_key = gray4;
  AKA_mark("lis===2138###sois===84657###eois===84674###lif===110###soif===4511###eoif===4528###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");gray4_key[7] = 0;
  AKA_mark("lis===2139###sois===84678###eois===84730###lif===111###soif===4532###eoif===4584###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(gray4_key, 8, LCT_GREY, 4, true);

  // 8-bit gray with key
  AKA_mark("lis===2142###sois===84762###eois===84807###lif===114###soif===4616###eoif===4661###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> gray8_key = gray8;
  AKA_mark("lis===2143###sois===84811###eois===84828###lif===115###soif===4665###eoif===4682###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");gray8_key[7] = 0;
  AKA_mark("lis===2144###sois===84832###eois===84884###lif===116###soif===4686###eoif===4738###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(gray8_key, 8, LCT_GREY, 8, true);

  // 16-bit gray with key
  AKA_mark("lis===2147###sois===84917###eois===84964###lif===119###soif===4771###eoif===4818###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> gray16_key = gray16;
  AKA_mark("lis===2148###sois===84968###eois===85004###lif===120###soif===4822###eoif===4858###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");gray16_key[14] = gray16_key[15] = 0;
  AKA_mark("lis===2149###sois===85008###eois===85063###lif===121###soif===4862###eoif===4917###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(gray16_key, 16, LCT_GREY, 16, true);

  // a single 16-bit color, can't become palette due to being 16-bit
  AKA_mark("lis===2152###sois===85139###eois===85174###lif===124###soif===4993###eoif===5028###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> small16;
  AKA_mark("lis===2153###sois===85178###eois===85214###lif===125###soif===5032###eoif===5068###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor16(small16, 1, 0, 0, 65535);
  AKA_mark("lis===2154###sois===85218###eois===85270###lif===126###soif===5072###eoif===5124###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(small16, 16, LCT_RGB, 16, false);

  AKA_mark("lis===2156###sois===85276###eois===85312###lif===128###soif===5130###eoif===5166###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> small16a;
  AKA_mark("lis===2157###sois===85316###eois===85349###lif===129###soif===5170###eoif===5203###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor16(small16a, 1, 0, 0, 1);
  AKA_mark("lis===2158###sois===85353###eois===85407###lif===130###soif===5207###eoif===5261###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(small16a, 16, LCT_RGBA, 16, false);

  // what we provide as 16-bit is actually representable as 8-bit, so 8-bit palette expected for single color
  AKA_mark("lis===2161###sois===85524###eois===85557###lif===133###soif===5378###eoif===5411###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> not16;
  AKA_mark("lis===2162###sois===85561###eois===85597###lif===134###soif===5415###eoif===5451###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor16(not16, 257, 257, 257, 0);
  AKA_mark("lis===2163###sois===85601###eois===85654###lif===135###soif===5455###eoif===5508###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(not16, 16, LCT_PALETTE, 1, false);

  // the rgb color is representable as 8-bit, but the alpha channel only as 16-bit, so ensure it uses 16-bit and not palette for this single color
  AKA_mark("lis===2166###sois===85808###eois===85843###lif===138###soif===5662###eoif===5697###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> alpha16;
  AKA_mark("lis===2167###sois===85847###eois===85885###lif===139###soif===5701###eoif===5739###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor16(alpha16, 257, 0, 0, 10000);
  AKA_mark("lis===2168###sois===85889###eois===85942###lif===140###soif===5743###eoif===5796###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(alpha16, 16, LCT_RGBA, 16, false);

  // 1-bit gray, with attempt to get color key but can't do it due to opaque color with same value
  AKA_mark("lis===2171###sois===86048###eois===86082###lif===143###soif===5902###eoif===5936###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");std::vector<unsigned char> gray1k;
  AKA_mark("lis===2172###sois===86086###eois===86117###lif===144###soif===5940###eoif===5971###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(gray1k, 0, 0, 0, 255);
  AKA_mark("lis===2173###sois===86121###eois===86158###lif===145###soif===5975###eoif===6012###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(gray1k, 255, 255, 255, 255);
  AKA_mark("lis===2174###sois===86162###eois===86197###lif===146###soif===6016###eoif===6051###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");addColor(gray1k, 255, 255, 255, 0);
  AKA_mark("lis===2175###sois===86201###eois===86254###lif===147###soif===6055###eoif===6108###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testAutoColorModels()");testAutoColorModel(gray1k, 8, LCT_PALETTE, 2, false);
}

/** Instrumented function testPaletteToPaletteDecode() */
void testPaletteToPaletteDecode() /* << Aka begin of function void testPaletteToPaletteDecode() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testPaletteToPaletteDecode.86266.stub"

  AKA_mark("lis===2179###sois===86300###eois===86355###lif===1###soif===39###eoif===94###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode()");std::cout << "testPaletteToPaletteDecode" << std::endl;
  // It's a bit big for a 2x2 image... but this tests needs one with 256 palette entries in it.
  AKA_mark("lis===2181###sois===86456###eois===88560###lif===3###soif===195###eoif===2299###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode()");std::string base64 = "iVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAMAAABFaP0WAAAAA3NCSVQICAjb4U/gAAADAFBMVEUA"
                       "AAAAADMAAGYAAJkAAMwAAP8AMwAAMzMAM2YAM5kAM8wAM/8AZgAAZjMAZmYAZpkAZswAZv8AmQAA"
                       "mTMAmWYAmZkAmcwAmf8AzAAAzDMAzGYAzJkAzMwAzP8A/wAA/zMA/2YA/5kA/8wA//8zAAAzADMz"
                       "AGYzAJkzAMwzAP8zMwAzMzMzM2YzM5kzM8wzM/8zZgAzZjMzZmYzZpkzZswzZv8zmQAzmTMzmWYz"
                       "mZkzmcwzmf8zzAAzzDMzzGYzzJkzzMwzzP8z/wAz/zMz/2Yz/5kz/8wz//9mAABmADNmAGZmAJlm"
                       "AMxmAP9mMwBmMzNmM2ZmM5lmM8xmM/9mZgBmZjNmZmZmZplmZsxmZv9mmQBmmTNmmWZmmZlmmcxm"
                       "mf9mzABmzDNmzGZmzJlmzMxmzP9m/wBm/zNm/2Zm/5lm/8xm//+ZAACZADOZAGaZAJmZAMyZAP+Z"
                       "MwCZMzOZM2aZM5mZM8yZM/+ZZgCZZjOZZmaZZpmZZsyZZv+ZmQCZmTOZmWaZmZmZmcyZmf+ZzACZ"
                       "zDOZzGaZzJmZzMyZzP+Z/wCZ/zOZ/2aZ/5mZ/8yZ///MAADMADPMAGbMAJnMAMzMAP/MMwDMMzPM"
                       "M2bMM5nMM8zMM//MZgDMZjPMZmbMZpnMZszMZv/MmQDMmTPMmWbMmZnMmczMmf/MzADMzDPMzGbM"
                       "zJnMzMzMzP/M/wDM/zPM/2bM/5nM/8zM////AAD/ADP/AGb/AJn/AMz/AP//MwD/MzP/M2b/M5n/"
                       "M8z/M///ZgD/ZjP/Zmb/Zpn/Zsz/Zv//mQD/mTP/mWb/mZn/mcz/mf//zAD/zDP/zGb/zJn/zMz/"
                       "zP///wD//zP//2b//5n//8z///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABlenwdAAABAHRSTlP/////////////////////////"
                       "////////////////////////////////////////////////////////////////////////////"
                       "////////////////////////////////////////////////////////////////////////////"
                       "////////////////////////////////////////////////////////////////////////////"
                       "//////////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                       "AAAAAAAAAAAAG8mZagAAAAlwSFlzAAAOTQAADpwB3vacVwAAAA5JREFUCJlj2CLHwHodAATjAa+k"
                       "lTE5AAAAAElFTkSuQmCC";
  AKA_mark("lis===2202###sois===88564###eois===88595###lif===24###soif===2303###eoif===2334###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode()");std::vector<unsigned char> png;
  AKA_mark("lis===2203###sois===88599###eois===88623###lif===25###soif===2338###eoif===2362###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode()");fromBase64(png, base64);

  AKA_mark("lis===2205###sois===88629###eois===88662###lif===27###soif===2368###eoif===2401###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode()");std::vector<unsigned char> image;
  AKA_mark("lis===2206###sois===88666###eois===88689###lif===28###soif===2405###eoif===2428###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode()");unsigned width, height;
  AKA_mark("lis===2207###sois===88693###eois===88769###lif===29###soif===2432###eoif===2508###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode()");unsigned error = lodepng::decode(image, width, height, png, LCT_PALETTE, 8);
  AKA_mark("lis===2208###sois===88773###eois===88796###lif===30###soif===2512###eoif===2535###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode()");ASSERT_EQUALS(0, error);
  AKA_mark("lis===2209###sois===88801###eois===88824###lif===31###soif===2540###eoif===2563###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode()");ASSERT_EQUALS(2, width);
  AKA_mark("lis===2210###sois===88829###eois===88853###lif===32###soif===2568###eoif===2592###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode()");ASSERT_EQUALS(2, height);
  AKA_mark("lis===2211###sois===88858###eois===88886###lif===33###soif===2597###eoif===2625###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode()");ASSERT_EQUALS(180, image[0]);
  AKA_mark("lis===2212###sois===88891###eois===88918###lif===34###soif===2630###eoif===2657###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode()");ASSERT_EQUALS(30, image[1]);
  AKA_mark("lis===2213###sois===88923###eois===88949###lif===35###soif===2662###eoif===2688###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode()");ASSERT_EQUALS(5, image[2]);
  AKA_mark("lis===2214###sois===88954###eois===88982###lif===36###soif===2693###eoif===2721###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode()");ASSERT_EQUALS(215, image[3]);
}

//2-bit palette
/** Instrumented function testPaletteToPaletteDecode2() */
void testPaletteToPaletteDecode2() /* << Aka begin of function void testPaletteToPaletteDecode2() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testPaletteToPaletteDecode2.89012.stub"

  AKA_mark("lis===2219###sois===89047###eois===89103###lif===1###soif===40###eoif===96###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");std::cout << "testPaletteToPaletteDecode2" << std::endl;
  AKA_mark("lis===2220###sois===89107###eois===89267###lif===2###soif===100###eoif===260###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");std::string base64 = "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEX/AAAA/wAAAP/////7AGD2AAAAE0lEQVR4AWMQhAKG3VCALDIqAgDl2WYBCQHY9gAAAABJRU5ErkJggg==";
  AKA_mark("lis===2221###sois===89271###eois===89302###lif===3###soif===264###eoif===295###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");std::vector<unsigned char> png;
  AKA_mark("lis===2222###sois===89306###eois===89330###lif===4###soif===299###eoif===323###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");fromBase64(png, base64);

  AKA_mark("lis===2224###sois===89336###eois===89369###lif===6###soif===329###eoif===362###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");std::vector<unsigned char> image;
  AKA_mark("lis===2225###sois===89373###eois===89396###lif===7###soif===366###eoif===389###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");unsigned width, height;
  AKA_mark("lis===2226###sois===89400###eois===89476###lif===8###soif===393###eoif===469###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");unsigned error = lodepng::decode(image, width, height, png, LCT_PALETTE, 8);
  AKA_mark("lis===2227###sois===89480###eois===89503###lif===9###soif===473###eoif===496###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");ASSERT_EQUALS(0, error);
  AKA_mark("lis===2228###sois===89508###eois===89532###lif===10###soif===501###eoif===525###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");ASSERT_EQUALS(32, width);
  AKA_mark("lis===2229###sois===89537###eois===89562###lif===11###soif===530###eoif===555###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");ASSERT_EQUALS(32, height);
  AKA_mark("lis===2230###sois===89567###eois===89593###lif===12###soif===560###eoif===586###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");ASSERT_EQUALS(0, image[0]);
  AKA_mark("lis===2231###sois===89598###eois===89624###lif===13###soif===591###eoif===617###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");ASSERT_EQUALS(1, image[1]);

  //Now add a user-specified output palette, that differs from the input palette. That should give error 82.
  AKA_mark("lis===2234###sois===89741###eois===89760###lif===16###soif===734###eoif===753###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");LodePNGState state;
  AKA_mark("lis===2235###sois===89764###eois===89791###lif===17###soif===757###eoif===784###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");lodepng_state_init(&state);
  AKA_mark("lis===2236###sois===89795###eois===89834###lif===18###soif===788###eoif===827###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");state.info_raw.colortype = LCT_PALETTE;
  AKA_mark("lis===2237###sois===89838###eois===89866###lif===19###soif===831###eoif===859###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");state.info_raw.bitdepth = 8;
  AKA_mark("lis===2238###sois===89870###eois===89921###lif===20###soif===863###eoif===914###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");lodepng_palette_add(&state.info_raw, 0, 0, 0, 255);
  AKA_mark("lis===2239###sois===89925###eois===89976###lif===21###soif===918###eoif===969###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");lodepng_palette_add(&state.info_raw, 1, 1, 1, 255);
  AKA_mark("lis===2240###sois===89980###eois===90031###lif===22###soif===973###eoif===1024###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");lodepng_palette_add(&state.info_raw, 2, 2, 2, 255);
  AKA_mark("lis===2241###sois===90035###eois===90086###lif===23###soif===1028###eoif===1079###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");lodepng_palette_add(&state.info_raw, 3, 3, 3, 255);
  AKA_mark("lis===2242###sois===90090###eois===90116###lif===24###soif===1083###eoif===1109###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");unsigned char* image2 = 0;
  AKA_mark("lis===2243###sois===90120###eois===90208###lif===25###soif===1113###eoif===1201###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");unsigned error2 = lodepng_decode(&image2, &width, &height, &state, &png[0], png.size());
  AKA_mark("lis===2244###sois===90212###eois===90242###lif===26###soif===1205###eoif===1235###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");lodepng_state_cleanup(&state);
  AKA_mark("lis===2245###sois===90246###eois===90271###lif===27###soif===1239###eoif===1264###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");ASSERT_EQUALS(82, error2);
  AKA_mark("lis===2246###sois===90276###eois===90289###lif===28###soif===1269###eoif===1282###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPaletteToPaletteDecode2()");free(image2);
}

/** Instrumented function assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&) */
void assertColorProfileDataEqual(const lodepng::State& a, const lodepng::State& b) /* << Aka begin of function void assertColorProfileDataEqual(const lodepng::State& a, const lodepng::State& b) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.assertColorProfileDataEqual.90301.stub"

  AKA_mark("lis===2250###sois===90384###eois===90447###lif===1###soif===88###eoif===151###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.gama_defined, b.info_png.gama_defined);
  if(AKA_mark("lis===2251###sois===90455###eois===90478###lif===2###soif===159###eoif===182###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)") && (AKA_mark("lis===2251###sois===90455###eois===90478###lif===2###soif===159###eoif===182###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)") && (a.info_png.gama_defined))) {
    AKA_mark("lis===2252###sois===90487###eois===90546###lif===3###soif===191###eoif===250###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.gama_gamma, b.info_png.gama_gamma);
  }
else {
AKA_mark("lis===-2251-###sois===-90455-###eois===-9045523-###lif===-2-###soif===-###eoif===-182-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");
}

  AKA_mark("lis===2255###sois===90558###eois===90621###lif===6###soif===262###eoif===325###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.chrm_defined, b.info_png.chrm_defined);
  if(AKA_mark("lis===2256###sois===90629###eois===90652###lif===7###soif===333###eoif===356###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)") && (AKA_mark("lis===2256###sois===90629###eois===90652###lif===7###soif===333###eoif===356###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)") && (a.info_png.chrm_defined))) {
    AKA_mark("lis===2257###sois===90661###eois===90724###lif===8###soif===365###eoif===428###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.chrm_white_x, b.info_png.chrm_white_x);
    AKA_mark("lis===2258###sois===90731###eois===90794###lif===9###soif===435###eoif===498###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.chrm_white_y, b.info_png.chrm_white_y);
    AKA_mark("lis===2259###sois===90801###eois===90860###lif===10###soif===505###eoif===564###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.chrm_red_x, b.info_png.chrm_red_x);
    AKA_mark("lis===2260###sois===90867###eois===90926###lif===11###soif===571###eoif===630###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.chrm_red_y, b.info_png.chrm_red_y);
    AKA_mark("lis===2261###sois===90933###eois===90996###lif===12###soif===637###eoif===700###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.chrm_green_x, b.info_png.chrm_green_x);
    AKA_mark("lis===2262###sois===91003###eois===91066###lif===13###soif===707###eoif===770###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.chrm_green_y, b.info_png.chrm_green_y);
    AKA_mark("lis===2263###sois===91073###eois===91134###lif===14###soif===777###eoif===838###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.chrm_blue_x, b.info_png.chrm_blue_x);
    AKA_mark("lis===2264###sois===91141###eois===91202###lif===15###soif===845###eoif===906###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.chrm_blue_y, b.info_png.chrm_blue_y);
  }
else {
AKA_mark("lis===-2256-###sois===-90629-###eois===-9062923-###lif===-7-###soif===-###eoif===-356-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");
}

  AKA_mark("lis===2267###sois===91214###eois===91277###lif===18###soif===918###eoif===981###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.srgb_defined, b.info_png.srgb_defined);
  if(AKA_mark("lis===2268###sois===91285###eois===91308###lif===19###soif===989###eoif===1012###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)") && (AKA_mark("lis===2268###sois===91285###eois===91308###lif===19###soif===989###eoif===1012###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)") && (a.info_png.srgb_defined))) {
    AKA_mark("lis===2269###sois===91317###eois===91378###lif===20###soif===1021###eoif===1082###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.srgb_intent, b.info_png.srgb_intent);
  }
else {
AKA_mark("lis===-2268-###sois===-91285-###eois===-9128523-###lif===-19-###soif===-###eoif===-1012-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");
}

  AKA_mark("lis===2272###sois===91390###eois===91453###lif===23###soif===1094###eoif===1157###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.cicp_defined, b.info_png.cicp_defined);
  if(AKA_mark("lis===2273###sois===91461###eois===91484###lif===24###soif===1165###eoif===1188###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)") && (AKA_mark("lis===2273###sois===91461###eois===91484###lif===24###soif===1165###eoif===1188###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)") && (a.info_png.cicp_defined))) {
    AKA_mark("lis===2274###sois===91493###eois===91572###lif===25###soif===1197###eoif===1276###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.cicp_color_primaries, b.info_png.cicp_color_primaries);
    AKA_mark("lis===2275###sois===91579###eois===91662###lif===26###soif===1283###eoif===1366###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.cicp_transfer_function, b.info_png.cicp_transfer_function);
    AKA_mark("lis===2276###sois===91669###eois===91756###lif===27###soif===1373###eoif===1460###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.cicp_matrix_coefficients, b.info_png.cicp_matrix_coefficients);
    AKA_mark("lis===2277###sois===91763###eois===91854###lif===28###soif===1467###eoif===1558###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.cicp_video_full_range_flag, b.info_png.cicp_video_full_range_flag);
  }
else {
AKA_mark("lis===-2273-###sois===-91461-###eois===-9146123-###lif===-24-###soif===-###eoif===-1188-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");
}

  AKA_mark("lis===2280###sois===91866###eois===91929###lif===31###soif===1570###eoif===1633###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.mdcv_defined, b.info_png.mdcv_defined);
  if(AKA_mark("lis===2281###sois===91937###eois===91960###lif===32###soif===1641###eoif===1664###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)") && (AKA_mark("lis===2281###sois===91937###eois===91960###lif===32###soif===1641###eoif===1664###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)") && (a.info_png.mdcv_defined))) {
    AKA_mark("lis===2282###sois===91969###eois===92028###lif===33###soif===1673###eoif===1732###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.mdcv_red_x, b.info_png.mdcv_red_x);
    AKA_mark("lis===2283###sois===92035###eois===92094###lif===34###soif===1739###eoif===1798###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.mdcv_red_y, b.info_png.mdcv_red_y);
    AKA_mark("lis===2284###sois===92101###eois===92164###lif===35###soif===1805###eoif===1868###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.mdcv_green_x, b.info_png.mdcv_green_x);
    AKA_mark("lis===2285###sois===92171###eois===92234###lif===36###soif===1875###eoif===1938###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.mdcv_green_y, b.info_png.mdcv_green_y);
    AKA_mark("lis===2286###sois===92241###eois===92302###lif===37###soif===1945###eoif===2006###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.mdcv_blue_x, b.info_png.mdcv_blue_x);
    AKA_mark("lis===2287###sois===92309###eois===92370###lif===38###soif===2013###eoif===2074###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.mdcv_blue_y, b.info_png.mdcv_blue_y);
    AKA_mark("lis===2288###sois===92377###eois===92440###lif===39###soif===2081###eoif===2144###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.mdcv_white_x, b.info_png.mdcv_white_x);
    AKA_mark("lis===2289###sois===92447###eois===92510###lif===40###soif===2151###eoif===2214###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.mdcv_white_y, b.info_png.mdcv_white_y);
    AKA_mark("lis===2290###sois===92517###eois===92592###lif===41###soif===2221###eoif===2296###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.mdcv_max_luminance, b.info_png.mdcv_max_luminance);
    AKA_mark("lis===2291###sois===92599###eois===92674###lif===42###soif===2303###eoif===2378###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.mdcv_min_luminance, b.info_png.mdcv_min_luminance);
  }
else {
AKA_mark("lis===-2281-###sois===-91937-###eois===-9193723-###lif===-32-###soif===-###eoif===-1664-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");
}

  AKA_mark("lis===2294###sois===92686###eois===92749###lif===45###soif===2390###eoif===2453###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.clli_defined, b.info_png.clli_defined);
  if(AKA_mark("lis===2295###sois===92757###eois===92780###lif===46###soif===2461###eoif===2484###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)") && (AKA_mark("lis===2295###sois===92757###eois===92780###lif===46###soif===2461###eoif===2484###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)") && (a.info_png.clli_defined))) {
    AKA_mark("lis===2296###sois===92789###eois===92852###lif===47###soif===2493###eoif===2556###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.clli_max_cll, b.info_png.clli_max_cll);
    AKA_mark("lis===2297###sois===92859###eois===92924###lif===48###soif===2563###eoif===2628###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.clli_max_fall, b.info_png.clli_max_fall);
  }
else {
AKA_mark("lis===-2295-###sois===-92757-###eois===-9275723-###lif===-46-###soif===-###eoif===-2484-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");
}

  AKA_mark("lis===2300###sois===92936###eois===92999###lif===51###soif===2640###eoif===2703###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.iccp_defined, b.info_png.iccp_defined);
  if(AKA_mark("lis===2301###sois===93007###eois===93030###lif===52###soif===2711###eoif===2734###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)") && (AKA_mark("lis===2301###sois===93007###eois===93030###lif===52###soif===2711###eoif===2734###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)") && (a.info_png.iccp_defined))) {
    //ASSERT_EQUALS(std::string(a.info_png.iccp_name), std::string(b.info_png.iccp_name));
    AKA_mark("lis===2303###sois===93131###eois===93204###lif===54###soif===2835###eoif===2908###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.iccp_profile_size, b.info_png.iccp_profile_size);
    int AKA_BLOCK_LOOP_93211 = 0;
    AKA_mark("lis===2304###sois===93215###eois===93228###lif===55###soif===2919###eoif===2932###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");
for(size_t i = 0; AKA_mark("lis===2304###sois===93229###eois===93261###lif===55###soif===2933###eoif===2965###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)") && (AKA_mark("lis===2304###sois===93229###eois===93261###lif===55###soif===2933###eoif===2965###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)") && (i < a.info_png.iccp_profile_size)); ({AKA_mark("lis===2304###sois===93263###eois===93266###lif===55###soif===2967###eoif===2970###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");++i;})) {
        AKA_BLOCK_LOOP_93211++;
        if (AKA_BLOCK_LOOP_93211 > 1000) {
            //break;
        }
      AKA_mark("lis===2305###sois===93277###eois===93346###lif===56###soif===2981###eoif===3050###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.iccp_profile[i], b.info_png.iccp_profile[i]);
    }
  }
else {
AKA_mark("lis===-2301-###sois===-93007-###eois===-9300723-###lif===-52-###soif===-###eoif===-2734-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertColorProfileDataEqual(lodepng::State const&,lodepng::State const&)");
}
}

// Tests the gAMA, cHRM, sRGB, iCCP chunks
/** Instrumented function testColorProfile() */
void testColorProfile() /* << Aka begin of function void testColorProfile() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testColorProfile.93415.stub"

  AKA_mark("lis===2312###sois===93439###eois===93484###lif===1###soif===29###eoif===74###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::cout << "testColorProfile" << std::endl;
  {
    AKA_mark("lis===2314###sois===93495###eois===93510###lif===3###soif===85###eoif===100###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");unsigned error;
    AKA_mark("lis===2315###sois===93516###eois===93540###lif===4###soif===106###eoif===130###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");unsigned w = 32, h = 32;
    AKA_mark("lis===2316###sois===93546###eois===93590###lif===5###soif===136###eoif===180###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> image(w * h * 4);
    int AKA_BLOCK_LOOP_93596 = 0;
    AKA_mark("lis===2317###sois===93600###eois===93613###lif===6###soif===190###eoif===203###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");
for(size_t i = 0; AKA_mark("lis===2317###sois===93614###eois===93630###lif===6###soif===204###eoif===220###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (AKA_mark("lis===2317###sois===93614###eois===93630###lif===6###soif===204###eoif===220###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (i < image.size())); ({AKA_mark("lis===2317###sois===93632###eois===93635###lif===6###soif===222###eoif===225###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");i++;})) {
AKA_mark("lis===2317###sois===93637###eois===93656###lif===6###soif===227###eoif===246###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");image[i] = i & 255;
}

    AKA_mark("lis===2318###sois===93662###eois===93693###lif===7###soif===252###eoif===283###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> png;
    AKA_mark("lis===2319###sois===93699###eois===93720###lif===8###soif===289###eoif===310###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng::State state;
    AKA_mark("lis===2320###sois===93726###eois===93758###lif===9###soif===316###eoif===348###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.gama_defined = 1;
    AKA_mark("lis===2321###sois===93764###eois===93798###lif===10###soif===354###eoif===388###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.gama_gamma = 12345;
    AKA_mark("lis===2322###sois===93804###eois===93836###lif===11###soif===394###eoif===426###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.chrm_defined = 1;
    AKA_mark("lis===2323###sois===93842###eois===93875###lif===12###soif===432###eoif===465###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.chrm_white_x = 10;
    AKA_mark("lis===2324###sois===93881###eois===93914###lif===13###soif===471###eoif===504###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.chrm_white_y = 20;
    AKA_mark("lis===2325###sois===93920###eois===93951###lif===14###soif===510###eoif===541###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.chrm_red_x = 30;
    AKA_mark("lis===2326###sois===93957###eois===93988###lif===15###soif===547###eoif===578###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.chrm_red_y = 40;
    AKA_mark("lis===2327###sois===93994###eois===94031###lif===16###soif===584###eoif===621###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.chrm_green_x = 100000;
    AKA_mark("lis===2328###sois===94037###eois===94074###lif===17###soif===627###eoif===664###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.chrm_green_y = 200000;
    AKA_mark("lis===2329###sois===94080###eois===94116###lif===18###soif===670###eoif===706###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.chrm_blue_x = 300000;
    AKA_mark("lis===2330###sois===94122###eois===94158###lif===19###soif===712###eoif===748###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.chrm_blue_y = 400000;
    AKA_mark("lis===2331###sois===94164###eois===94217###lif===20###soif===754###eoif===807###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");error = lodepng::encode(png, &image[0], w, h, state);
    AKA_mark("lis===2332###sois===94223###eois===94250###lif===21###soif===813###eoif===840###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NO_PNG_ERROR(error);

    AKA_mark("lis===2334###sois===94258###eois===94280###lif===23###soif===848###eoif===870###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng::State state2;
    AKA_mark("lis===2335###sois===94286###eois===94320###lif===24###soif===876###eoif===910###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> image2;
    AKA_mark("lis===2336###sois===94326###eois===94377###lif===25###soif===916###eoif===967###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");error = lodepng::decode(image2, w, h, state2, png);
    AKA_mark("lis===2337###sois===94383###eois===94410###lif===26###soif===973###eoif===1000###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NO_PNG_ERROR(error);
    AKA_mark("lis===2338###sois===94416###eois===94459###lif===27###soif===1006###eoif===1049###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");assertColorProfileDataEqual(state, state2);
    AKA_mark("lis===2339###sois===94465###eois===94485###lif===28###soif===1055###eoif===1075###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(32, w);
    AKA_mark("lis===2340###sois===94492###eois===94512###lif===29###soif===1082###eoif===1102###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(32, h);
    AKA_mark("lis===2341###sois===94519###eois===94561###lif===30###soif===1109###eoif===1151###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(image.size(), image2.size());
    int AKA_BLOCK_LOOP_94568 = 0;
    AKA_mark("lis===2342###sois===94572###eois===94585###lif===31###soif===1162###eoif===1175###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");
for(size_t i = 0; AKA_mark("lis===2342###sois===94586###eois===94602###lif===31###soif===1176###eoif===1192###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (AKA_mark("lis===2342###sois===94586###eois===94602###lif===31###soif===1176###eoif===1192###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (i < image.size())); ({AKA_mark("lis===2342###sois===94604###eois===94607###lif===31###soif===1194###eoif===1197###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");i++;})) {
        AKA_BLOCK_LOOP_94568++;
        if (AKA_BLOCK_LOOP_94568 > 1000) {
            //break;
        }AKA_mark("lis===2342###sois===94609###eois===94643###lif===31###soif===1199###eoif===1233###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(image[i], image2[i])};
  }
  {
    AKA_mark("lis===2345###sois===94660###eois===94675###lif===34###soif===1250###eoif===1265###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");unsigned error;
    AKA_mark("lis===2346###sois===94681###eois===94705###lif===35###soif===1271###eoif===1295###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");unsigned w = 32, h = 32;
    AKA_mark("lis===2347###sois===94711###eois===94755###lif===36###soif===1301###eoif===1345###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> image(w * h * 4);
    int AKA_BLOCK_LOOP_94761 = 0;
    AKA_mark("lis===2348###sois===94765###eois===94778###lif===37###soif===1355###eoif===1368###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");
for(size_t i = 0; AKA_mark("lis===2348###sois===94779###eois===94795###lif===37###soif===1369###eoif===1385###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (AKA_mark("lis===2348###sois===94779###eois===94795###lif===37###soif===1369###eoif===1385###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (i < image.size())); ({AKA_mark("lis===2348###sois===94797###eois===94800###lif===37###soif===1387###eoif===1390###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");i++;})) {
AKA_mark("lis===2348###sois===94802###eois===94821###lif===37###soif===1392###eoif===1411###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");image[i] = i & 255;
}

    AKA_mark("lis===2349###sois===94827###eois===94858###lif===38###soif===1417###eoif===1448###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> png;
    AKA_mark("lis===2350###sois===94864###eois===94885###lif===39###soif===1454###eoif===1475###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng::State state;
    AKA_mark("lis===2351###sois===94891###eois===94923###lif===40###soif===1481###eoif===1513###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.srgb_defined = 1;
    AKA_mark("lis===2352###sois===94929###eois===94960###lif===41###soif===1519###eoif===1550###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.srgb_intent = 2;
    AKA_mark("lis===2353###sois===94966###eois===95019###lif===42###soif===1556###eoif===1609###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");error = lodepng::encode(png, &image[0], w, h, state);
    AKA_mark("lis===2354###sois===95025###eois===95052###lif===43###soif===1615###eoif===1642###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NO_PNG_ERROR(error);

    AKA_mark("lis===2356###sois===95060###eois===95082###lif===45###soif===1650###eoif===1672###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng::State state2;
    AKA_mark("lis===2357###sois===95088###eois===95122###lif===46###soif===1678###eoif===1712###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> image2;
    AKA_mark("lis===2358###sois===95128###eois===95179###lif===47###soif===1718###eoif===1769###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");error = lodepng::decode(image2, w, h, state2, png);
    AKA_mark("lis===2359###sois===95185###eois===95212###lif===48###soif===1775###eoif===1802###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NO_PNG_ERROR(error);
    AKA_mark("lis===2360###sois===95218###eois===95261###lif===49###soif===1808###eoif===1851###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");assertColorProfileDataEqual(state, state2);
    AKA_mark("lis===2361###sois===95267###eois===95287###lif===50###soif===1857###eoif===1877###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(32, w);
    AKA_mark("lis===2362###sois===95294###eois===95314###lif===51###soif===1884###eoif===1904###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(32, h);
    AKA_mark("lis===2363###sois===95321###eois===95363###lif===52###soif===1911###eoif===1953###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(image.size(), image2.size());
    int AKA_BLOCK_LOOP_95370 = 0;
    AKA_mark("lis===2364###sois===95374###eois===95387###lif===53###soif===1964###eoif===1977###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");
for(size_t i = 0; AKA_mark("lis===2364###sois===95388###eois===95404###lif===53###soif===1978###eoif===1994###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (AKA_mark("lis===2364###sois===95388###eois===95404###lif===53###soif===1978###eoif===1994###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (i < image.size())); ({AKA_mark("lis===2364###sois===95406###eois===95409###lif===53###soif===1996###eoif===1999###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");i++;})) {
        AKA_BLOCK_LOOP_95370++;
        if (AKA_BLOCK_LOOP_95370 > 1000) {
            //break;
        }AKA_mark("lis===2364###sois===95411###eois===95445###lif===53###soif===2001###eoif===2035###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(image[i], image2[i])};
  }
  {
    AKA_mark("lis===2367###sois===95462###eois===95477###lif===56###soif===2052###eoif===2067###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");unsigned error;
    AKA_mark("lis===2368###sois===95483###eois===95507###lif===57###soif===2073###eoif===2097###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");unsigned w = 32, h = 32;
    AKA_mark("lis===2369###sois===95513###eois===95557###lif===58###soif===2103###eoif===2147###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> image(w * h * 4);
    int AKA_BLOCK_LOOP_95563 = 0;
    AKA_mark("lis===2370###sois===95567###eois===95580###lif===59###soif===2157###eoif===2170###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");
for(size_t i = 0; AKA_mark("lis===2370###sois===95581###eois===95597###lif===59###soif===2171###eoif===2187###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (AKA_mark("lis===2370###sois===95581###eois===95597###lif===59###soif===2171###eoif===2187###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (i < image.size())); ({AKA_mark("lis===2370###sois===95599###eois===95602###lif===59###soif===2189###eoif===2192###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");i++;})) {
AKA_mark("lis===2370###sois===95604###eois===95623###lif===59###soif===2194###eoif===2213###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");image[i] = i & 255;
}

    AKA_mark("lis===2371###sois===95629###eois===95660###lif===60###soif===2219###eoif===2250###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> png;
    AKA_mark("lis===2372###sois===95666###eois===95687###lif===61###soif===2256###eoif===2277###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng::State state;
    AKA_mark("lis===2373###sois===95693###eois===95725###lif===62###soif===2283###eoif===2315###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.cicp_defined = 1;
    AKA_mark("lis===2374###sois===95731###eois===95771###lif===63###soif===2321###eoif===2361###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.cicp_color_primaries = 4;
    AKA_mark("lis===2375###sois===95777###eois===95819###lif===64###soif===2367###eoif===2409###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.cicp_transfer_function = 3;
    AKA_mark("lis===2376###sois===95825###eois===95869###lif===65###soif===2415###eoif===2459###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.cicp_matrix_coefficients = 2;
    AKA_mark("lis===2377###sois===95875###eois===95921###lif===66###soif===2465###eoif===2511###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.cicp_video_full_range_flag = 1;
    AKA_mark("lis===2378###sois===95927###eois===95980###lif===67###soif===2517###eoif===2570###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");error = lodepng::encode(png, &image[0], w, h, state);
    AKA_mark("lis===2379###sois===95986###eois===96013###lif===68###soif===2576###eoif===2603###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NO_PNG_ERROR(error);

    AKA_mark("lis===2381###sois===96021###eois===96043###lif===70###soif===2611###eoif===2633###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng::State state2;
    AKA_mark("lis===2382###sois===96049###eois===96083###lif===71###soif===2639###eoif===2673###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> image2;
    AKA_mark("lis===2383###sois===96089###eois===96140###lif===72###soif===2679###eoif===2730###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");error = lodepng::decode(image2, w, h, state2, png);
    AKA_mark("lis===2384###sois===96146###eois===96173###lif===73###soif===2736###eoif===2763###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NO_PNG_ERROR(error);
    AKA_mark("lis===2385###sois===96179###eois===96222###lif===74###soif===2769###eoif===2812###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");assertColorProfileDataEqual(state, state2);
    AKA_mark("lis===2386###sois===96228###eois===96248###lif===75###soif===2818###eoif===2838###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(32, w);
    AKA_mark("lis===2387###sois===96255###eois===96275###lif===76###soif===2845###eoif===2865###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(32, h);
    AKA_mark("lis===2388###sois===96282###eois===96324###lif===77###soif===2872###eoif===2914###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(image.size(), image2.size());
    int AKA_BLOCK_LOOP_96331 = 0;
    AKA_mark("lis===2389###sois===96335###eois===96348###lif===78###soif===2925###eoif===2938###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");
for(size_t i = 0; AKA_mark("lis===2389###sois===96349###eois===96365###lif===78###soif===2939###eoif===2955###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (AKA_mark("lis===2389###sois===96349###eois===96365###lif===78###soif===2939###eoif===2955###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (i < image.size())); ({AKA_mark("lis===2389###sois===96367###eois===96370###lif===78###soif===2957###eoif===2960###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");i++;})) {
        AKA_BLOCK_LOOP_96331++;
        if (AKA_BLOCK_LOOP_96331 > 1000) {
            //break;
        }AKA_mark("lis===2389###sois===96372###eois===96406###lif===78###soif===2962###eoif===2996###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(image[i], image2[i])};
  }
  {
    AKA_mark("lis===2392###sois===96423###eois===96438###lif===81###soif===3013###eoif===3028###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");unsigned error;
    AKA_mark("lis===2393###sois===96444###eois===96468###lif===82###soif===3034###eoif===3058###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");unsigned w = 32, h = 32;
    AKA_mark("lis===2394###sois===96474###eois===96518###lif===83###soif===3064###eoif===3108###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> image(w * h * 4);
    int AKA_BLOCK_LOOP_96524 = 0;
    AKA_mark("lis===2395###sois===96528###eois===96541###lif===84###soif===3118###eoif===3131###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");
for(size_t i = 0; AKA_mark("lis===2395###sois===96542###eois===96558###lif===84###soif===3132###eoif===3148###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (AKA_mark("lis===2395###sois===96542###eois===96558###lif===84###soif===3132###eoif===3148###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (i < image.size())); ({AKA_mark("lis===2395###sois===96560###eois===96563###lif===84###soif===3150###eoif===3153###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");i++;})) {
AKA_mark("lis===2395###sois===96565###eois===96584###lif===84###soif===3155###eoif===3174###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");image[i] = i & 255;
}

    AKA_mark("lis===2396###sois===96590###eois===96621###lif===85###soif===3180###eoif===3211###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> png;
    AKA_mark("lis===2397###sois===96627###eois===96648###lif===86###soif===3217###eoif===3238###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng::State state;
    AKA_mark("lis===2398###sois===96654###eois===96686###lif===87###soif===3244###eoif===3276###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.mdcv_defined = 1;
    AKA_mark("lis===2399###sois===96692###eois===96722###lif===88###soif===3282###eoif===3312###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.mdcv_red_x = 2;
    AKA_mark("lis===2400###sois===96728###eois===96758###lif===89###soif===3318###eoif===3348###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.mdcv_red_y = 3;
    AKA_mark("lis===2401###sois===96764###eois===96796###lif===90###soif===3354###eoif===3386###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.mdcv_green_x = 4;
    AKA_mark("lis===2402###sois===96802###eois===96834###lif===91###soif===3392###eoif===3424###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.mdcv_green_y = 5;
    AKA_mark("lis===2403###sois===96840###eois===96871###lif===92###soif===3430###eoif===3461###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.mdcv_blue_x = 6;
    AKA_mark("lis===2404###sois===96877###eois===96908###lif===93###soif===3467###eoif===3498###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.mdcv_blue_y = 7;
    AKA_mark("lis===2405###sois===96914###eois===96946###lif===94###soif===3504###eoif===3536###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.mdcv_white_x = 8;
    AKA_mark("lis===2406###sois===96952###eois===96984###lif===95###soif===3542###eoif===3574###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.mdcv_white_y = 9;
    AKA_mark("lis===2407###sois===96990###eois===97029###lif===96###soif===3580###eoif===3619###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.mdcv_max_luminance = 10;
    AKA_mark("lis===2408###sois===97035###eois===97074###lif===97###soif===3625###eoif===3664###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.mdcv_min_luminance = 11;
    AKA_mark("lis===2409###sois===97080###eois===97133###lif===98###soif===3670###eoif===3723###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");error = lodepng::encode(png, &image[0], w, h, state);
    AKA_mark("lis===2410###sois===97139###eois===97166###lif===99###soif===3729###eoif===3756###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NO_PNG_ERROR(error);

    AKA_mark("lis===2412###sois===97174###eois===97196###lif===101###soif===3764###eoif===3786###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng::State state2;
    AKA_mark("lis===2413###sois===97202###eois===97236###lif===102###soif===3792###eoif===3826###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> image2;
    AKA_mark("lis===2414###sois===97242###eois===97293###lif===103###soif===3832###eoif===3883###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");error = lodepng::decode(image2, w, h, state2, png);
    AKA_mark("lis===2415###sois===97299###eois===97326###lif===104###soif===3889###eoif===3916###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NO_PNG_ERROR(error);
    AKA_mark("lis===2416###sois===97332###eois===97375###lif===105###soif===3922###eoif===3965###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");assertColorProfileDataEqual(state, state2);
    AKA_mark("lis===2417###sois===97381###eois===97401###lif===106###soif===3971###eoif===3991###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(32, w);
    AKA_mark("lis===2418###sois===97408###eois===97428###lif===107###soif===3998###eoif===4018###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(32, h);
    AKA_mark("lis===2419###sois===97435###eois===97477###lif===108###soif===4025###eoif===4067###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(image.size(), image2.size());
    int AKA_BLOCK_LOOP_97484 = 0;
    AKA_mark("lis===2420###sois===97488###eois===97501###lif===109###soif===4078###eoif===4091###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");
for(size_t i = 0; AKA_mark("lis===2420###sois===97502###eois===97518###lif===109###soif===4092###eoif===4108###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (AKA_mark("lis===2420###sois===97502###eois===97518###lif===109###soif===4092###eoif===4108###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (i < image.size())); ({AKA_mark("lis===2420###sois===97520###eois===97523###lif===109###soif===4110###eoif===4113###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");i++;})) {
        AKA_BLOCK_LOOP_97484++;
        if (AKA_BLOCK_LOOP_97484 > 1000) {
            //break;
        }AKA_mark("lis===2420###sois===97525###eois===97559###lif===109###soif===4115###eoif===4149###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(image[i], image2[i])};
  }
  {
    AKA_mark("lis===2423###sois===97576###eois===97591###lif===112###soif===4166###eoif===4181###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");unsigned error;
    AKA_mark("lis===2424###sois===97597###eois===97621###lif===113###soif===4187###eoif===4211###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");unsigned w = 32, h = 32;
    AKA_mark("lis===2425###sois===97627###eois===97671###lif===114###soif===4217###eoif===4261###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> image(w * h * 4);
    int AKA_BLOCK_LOOP_97677 = 0;
    AKA_mark("lis===2426###sois===97681###eois===97694###lif===115###soif===4271###eoif===4284###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");
for(size_t i = 0; AKA_mark("lis===2426###sois===97695###eois===97711###lif===115###soif===4285###eoif===4301###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (AKA_mark("lis===2426###sois===97695###eois===97711###lif===115###soif===4285###eoif===4301###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (i < image.size())); ({AKA_mark("lis===2426###sois===97713###eois===97716###lif===115###soif===4303###eoif===4306###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");i++;})) {
AKA_mark("lis===2426###sois===97718###eois===97737###lif===115###soif===4308###eoif===4327###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");image[i] = i & 255;
}

    AKA_mark("lis===2427###sois===97743###eois===97774###lif===116###soif===4333###eoif===4364###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> png;
    AKA_mark("lis===2428###sois===97780###eois===97801###lif===117###soif===4370###eoif===4391###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng::State state;
    AKA_mark("lis===2429###sois===97807###eois===97839###lif===118###soif===4397###eoif===4429###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.clli_defined = 1;
    AKA_mark("lis===2430###sois===97845###eois===97877###lif===119###soif===4435###eoif===4467###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.clli_max_cll = 2;
    AKA_mark("lis===2431###sois===97883###eois===97916###lif===120###soif===4473###eoif===4506###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");state.info_png.clli_max_fall = 3;
    AKA_mark("lis===2432###sois===97922###eois===97975###lif===121###soif===4512###eoif===4565###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");error = lodepng::encode(png, &image[0], w, h, state);
    AKA_mark("lis===2433###sois===97981###eois===98008###lif===122###soif===4571###eoif===4598###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NO_PNG_ERROR(error);

    AKA_mark("lis===2435###sois===98016###eois===98038###lif===124###soif===4606###eoif===4628###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng::State state2;
    AKA_mark("lis===2436###sois===98044###eois===98078###lif===125###soif===4634###eoif===4668###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> image2;
    AKA_mark("lis===2437###sois===98084###eois===98135###lif===126###soif===4674###eoif===4725###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");error = lodepng::decode(image2, w, h, state2, png);
    AKA_mark("lis===2438###sois===98141###eois===98168###lif===127###soif===4731###eoif===4758###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NO_PNG_ERROR(error);
    AKA_mark("lis===2439###sois===98174###eois===98217###lif===128###soif===4764###eoif===4807###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");assertColorProfileDataEqual(state, state2);
    AKA_mark("lis===2440###sois===98223###eois===98243###lif===129###soif===4813###eoif===4833###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(32, w);
    AKA_mark("lis===2441###sois===98250###eois===98270###lif===130###soif===4840###eoif===4860###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(32, h);
    AKA_mark("lis===2442###sois===98277###eois===98319###lif===131###soif===4867###eoif===4909###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(image.size(), image2.size());
    int AKA_BLOCK_LOOP_98326 = 0;
    AKA_mark("lis===2443###sois===98330###eois===98343###lif===132###soif===4920###eoif===4933###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");
for(size_t i = 0; AKA_mark("lis===2443###sois===98344###eois===98360###lif===132###soif===4934###eoif===4950###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (AKA_mark("lis===2443###sois===98344###eois===98360###lif===132###soif===4934###eoif===4950###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (i < image.size())); ({AKA_mark("lis===2443###sois===98362###eois===98365###lif===132###soif===4952###eoif===4955###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");i++;})) {
        AKA_BLOCK_LOOP_98326++;
        if (AKA_BLOCK_LOOP_98326 > 1000) {
            //break;
        }AKA_mark("lis===2443###sois===98367###eois===98401###lif===132###soif===4957###eoif===4991###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(image[i], image2[i])};
  }
  {
    AKA_mark("lis===2446###sois===98418###eois===98433###lif===135###soif===5008###eoif===5023###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");unsigned error;
    AKA_mark("lis===2447###sois===98439###eois===98463###lif===136###soif===5029###eoif===5053###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");unsigned w = 32, h = 32;
    AKA_mark("lis===2448###sois===98469###eois===98513###lif===137###soif===5059###eoif===5103###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> image(w * h * 4);
    int AKA_BLOCK_LOOP_98519 = 0;
    AKA_mark("lis===2449###sois===98523###eois===98536###lif===138###soif===5113###eoif===5126###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");
for(size_t i = 0; AKA_mark("lis===2449###sois===98537###eois===98553###lif===138###soif===5127###eoif===5143###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (AKA_mark("lis===2449###sois===98537###eois===98553###lif===138###soif===5127###eoif===5143###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (i < image.size())); ({AKA_mark("lis===2449###sois===98555###eois===98558###lif===138###soif===5145###eoif===5148###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");i++;})) {
AKA_mark("lis===2449###sois===98560###eois===98579###lif===138###soif===5150###eoif===5169###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");image[i] = i & 255;
}

    AKA_mark("lis===2450###sois===98585###eois===98616###lif===139###soif===5175###eoif===5206###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> png;
    AKA_mark("lis===2451###sois===98622###eois===98643###lif===140###soif===5212###eoif===5233###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng::State state;
    AKA_mark("lis===2452###sois===98649###eois===98727###lif===141###soif===5239###eoif===5317###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::string testprofile = "0123456789abcdefRGB fake iccp profile for testing";
    AKA_mark("lis===2453###sois===98733###eois===98769###lif===142###soif===5323###eoif===5359###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");testprofile[0] = testprofile[1] = 0;
    AKA_mark("lis===2454###sois===98775###eois===98879###lif===143###soif===5365###eoif===5469###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng_set_icc(&state.info_png, "test", (const unsigned char*)testprofile.c_str(), testprofile.size());
    AKA_mark("lis===2455###sois===98885###eois===98938###lif===144###soif===5475###eoif===5528###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");error = lodepng::encode(png, &image[0], w, h, state);
    AKA_mark("lis===2456###sois===98944###eois===98971###lif===145###soif===5534###eoif===5561###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NO_PNG_ERROR(error);

    AKA_mark("lis===2458###sois===98979###eois===99001###lif===147###soif===5569###eoif===5591###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng::State state2;
    AKA_mark("lis===2459###sois===99007###eois===99041###lif===148###soif===5597###eoif===5631###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> image2;
    AKA_mark("lis===2460###sois===99047###eois===99098###lif===149###soif===5637###eoif===5688###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");error = lodepng::decode(image2, w, h, state2, png);
    AKA_mark("lis===2461###sois===99104###eois===99131###lif===150###soif===5694###eoif===5721###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NO_PNG_ERROR(error);
    AKA_mark("lis===2462###sois===99137###eois===99180###lif===151###soif===5727###eoif===5770###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");assertColorProfileDataEqual(state, state2);
    AKA_mark("lis===2463###sois===99186###eois===99206###lif===152###soif===5776###eoif===5796###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(32, w);
    AKA_mark("lis===2464###sois===99213###eois===99233###lif===153###soif===5803###eoif===5823###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(32, h);
    AKA_mark("lis===2465###sois===99240###eois===99282###lif===154###soif===5830###eoif===5872###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(image.size(), image2.size());
    int AKA_BLOCK_LOOP_99289 = 0;
    AKA_mark("lis===2466###sois===99293###eois===99306###lif===155###soif===5883###eoif===5896###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");
for(size_t i = 0; AKA_mark("lis===2466###sois===99307###eois===99323###lif===155###soif===5897###eoif===5913###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (AKA_mark("lis===2466###sois===99307###eois===99323###lif===155###soif===5897###eoif===5913###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (i < image.size())); ({AKA_mark("lis===2466###sois===99325###eois===99328###lif===155###soif===5915###eoif===5918###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");i++;})) {
        AKA_BLOCK_LOOP_99289++;
        if (AKA_BLOCK_LOOP_99289 > 1000) {
            //break;
        }AKA_mark("lis===2466###sois===99330###eois===99364###lif===155###soif===5920###eoif===5954###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(image[i], image2[i])};
  }

  // grayscale ICC profile
  {
    AKA_mark("lis===2471###sois===99411###eois===99426###lif===160###soif===6001###eoif===6016###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");unsigned error;
    AKA_mark("lis===2472###sois===99432###eois===99456###lif===161###soif===6022###eoif===6046###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");unsigned w = 32, h = 32;
    AKA_mark("lis===2473###sois===99462###eois===99506###lif===162###soif===6052###eoif===6096###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> image(w * h * 4);
    int AKA_BLOCK_LOOP_99512 = 0;
    AKA_mark("lis===2474###sois===99516###eois===99529###lif===163###soif===6106###eoif===6119###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");
for(size_t i = 0; AKA_mark("lis===2474###sois===99530###eois===99551###lif===163###soif===6120###eoif===6141###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (AKA_mark("lis===2474###sois===99530###eois===99551###lif===163###soif===6120###eoif===6141###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (i + 4 <= image.size())); ({AKA_mark("lis===2474###sois===99553###eois===99559###lif===163###soif===6143###eoif===6149###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");i += 4;})) {
        AKA_BLOCK_LOOP_99512++;
        if (AKA_BLOCK_LOOP_99512 > 1000) {
            //break;
        }
      AKA_mark("lis===2475###sois===99570###eois===99628###lif===164###soif===6160###eoif===6218###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");image[i] = image[i + 1] = image[i + 2] = image[i + 3] = i;
    }
    AKA_mark("lis===2477###sois===99641###eois===99672###lif===166###soif===6231###eoif===6262###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> png;
    AKA_mark("lis===2478###sois===99678###eois===99699###lif===167###soif===6268###eoif===6289###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng::State state;
    AKA_mark("lis===2479###sois===99705###eois===99783###lif===168###soif===6295###eoif===6373###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::string testprofile = "0123456789abcdefGRAYfake iccp profile for testing";
    AKA_mark("lis===2480###sois===99789###eois===99825###lif===169###soif===6379###eoif===6415###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");testprofile[0] = testprofile[1] = 0;
    AKA_mark("lis===2481###sois===99831###eois===99935###lif===170###soif===6421###eoif===6525###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng_set_icc(&state.info_png, "test", (const unsigned char*)testprofile.c_str(), testprofile.size());
    AKA_mark("lis===2482###sois===99941###eois===99994###lif===171###soif===6531###eoif===6584###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");error = lodepng::encode(png, &image[0], w, h, state);
    AKA_mark("lis===2483###sois===100000###eois===100027###lif===172###soif===6590###eoif===6617###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NO_PNG_ERROR(error);

    AKA_mark("lis===2485###sois===100035###eois===100057###lif===174###soif===6625###eoif===6647###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng::State state2;
    AKA_mark("lis===2486###sois===100063###eois===100097###lif===175###soif===6653###eoif===6687###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> image2;
    AKA_mark("lis===2487###sois===100103###eois===100154###lif===176###soif===6693###eoif===6744###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");error = lodepng::decode(image2, w, h, state2, png);
    AKA_mark("lis===2488###sois===100160###eois===100187###lif===177###soif===6750###eoif===6777###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NO_PNG_ERROR(error);
    AKA_mark("lis===2489###sois===100193###eois===100236###lif===178###soif===6783###eoif===6826###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");assertColorProfileDataEqual(state, state2);
    AKA_mark("lis===2490###sois===100242###eois===100262###lif===179###soif===6832###eoif===6852###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(32, w);
    AKA_mark("lis===2491###sois===100269###eois===100289###lif===180###soif===6859###eoif===6879###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(32, h);
    AKA_mark("lis===2492###sois===100296###eois===100338###lif===181###soif===6886###eoif===6928###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(image.size(), image2.size());
    int AKA_BLOCK_LOOP_100345 = 0;
    AKA_mark("lis===2493###sois===100349###eois===100362###lif===182###soif===6939###eoif===6952###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");
for(size_t i = 0; AKA_mark("lis===2493###sois===100363###eois===100379###lif===182###soif===6953###eoif===6969###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (AKA_mark("lis===2493###sois===100363###eois===100379###lif===182###soif===6953###eoif===6969###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (i < image.size())); ({AKA_mark("lis===2493###sois===100381###eois===100384###lif===182###soif===6971###eoif===6974###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");i++;})) {
        AKA_BLOCK_LOOP_100345++;
        if (AKA_BLOCK_LOOP_100345 > 1000) {
            //break;
        }AKA_mark("lis===2493###sois===100386###eois===100420###lif===182###soif===6976###eoif===7010###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_EQUALS(image[i], image2[i])};
  }

  // grayscale ICC profile, using an input image with grayscale colors but that
  // would normally benefit from a palette (which auto_convert would normally
  // choose). But the PNG spec does not allow combining palette with GRAY ICC
  // profile, so the encoder should not choose to use palette after all.
  {
    AKA_mark("lis===2501###sois===100752###eois===100767###lif===190###soif===7342###eoif===7357###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");unsigned error;
    AKA_mark("lis===2502###sois===100773###eois===100797###lif===191###soif===7363###eoif===7387###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");unsigned w = 32, h = 32;
    AKA_mark("lis===2503###sois===100803###eois===100847###lif===192###soif===7393###eoif===7437###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> image(w * h * 4);
    AKA_mark("lis===2504###sois===100853###eois===100881###lif===193###soif===7443###eoif===7471###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");int colors[3] = {0, 3, 133};
    int AKA_BLOCK_LOOP_100887 = 0;
    AKA_mark("lis===2505###sois===100891###eois===100904###lif===194###soif===7481###eoif===7494###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");
for(size_t i = 0; AKA_mark("lis===2505###sois===100905###eois===100926###lif===194###soif===7495###eoif===7516###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (AKA_mark("lis===2505###sois===100905###eois===100926###lif===194###soif===7495###eoif===7516###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (i + 4 <= image.size())); ({AKA_mark("lis===2505###sois===100928###eois===100934###lif===194###soif===7518###eoif===7524###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");i += 4;})) {
        AKA_BLOCK_LOOP_100887++;
        if (AKA_BLOCK_LOOP_100887 > 1000) {
            //break;
        }
      AKA_mark("lis===2506###sois===100945###eois===101021###lif===195###soif===7535###eoif===7611###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");image[i] = image[i + 1] = image[i + 2] = image[i + 3] = colors[(i / 4) % 3];
    }
    AKA_mark("lis===2508###sois===101034###eois===101065###lif===197###soif===7624###eoif===7655###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> png;
    AKA_mark("lis===2509###sois===101071###eois===101092###lif===198###soif===7661###eoif===7682###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng::State state;
    AKA_mark("lis===2510###sois===101098###eois===101176###lif===199###soif===7688###eoif===7766###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::string testprofile = "0123456789abcdefGRAYfake iccp profile for testing";
    AKA_mark("lis===2511###sois===101182###eois===101218###lif===200###soif===7772###eoif===7808###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");testprofile[0] = testprofile[1] = 0;
    AKA_mark("lis===2512###sois===101224###eois===101328###lif===201###soif===7814###eoif===7918###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng_set_icc(&state.info_png, "test", (const unsigned char*)testprofile.c_str(), testprofile.size());
    AKA_mark("lis===2513###sois===101334###eois===101387###lif===202###soif===7924###eoif===7977###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");error = lodepng::encode(png, &image[0], w, h, state);
    AKA_mark("lis===2514###sois===101393###eois===101420###lif===203###soif===7983###eoif===8010###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NO_PNG_ERROR(error);

    AKA_mark("lis===2516###sois===101428###eois===101450###lif===205###soif===8018###eoif===8040###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng::State state2;
    AKA_mark("lis===2517###sois===101456###eois===101490###lif===206###soif===8046###eoif===8080###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> image2;
    AKA_mark("lis===2518###sois===101496###eois===101547###lif===207###soif===8086###eoif===8137###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");error = lodepng::decode(image2, w, h, state2, png);
    AKA_mark("lis===2519###sois===101553###eois===101580###lif===208###soif===8143###eoif===8170###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NO_PNG_ERROR(error);
    AKA_mark("lis===2520###sois===101586###eois===101629###lif===209###soif===8176###eoif===8219###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");assertColorProfileDataEqual(state, state2);
    AKA_mark("lis===2521###sois===101635###eois===101698###lif===210###soif===8225###eoif===8288###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NOT_EQUALS(LCT_PALETTE, state2.info_png.color.colortype);
  }

  // RGB ICC profile, using an input image with grayscale colors: the encoder
  // is forced to choose an RGB color type anyway with auto_convert
  {
    AKA_mark("lis===2527###sois===101865###eois===101880###lif===216###soif===8455###eoif===8470###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");unsigned error;
    AKA_mark("lis===2528###sois===101886###eois===101910###lif===217###soif===8476###eoif===8500###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");unsigned w = 32, h = 32;
    AKA_mark("lis===2529###sois===101916###eois===101960###lif===218###soif===8506###eoif===8550###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> image(w * h * 4);
    int AKA_BLOCK_LOOP_101966 = 0;
    AKA_mark("lis===2530###sois===101970###eois===101983###lif===219###soif===8560###eoif===8573###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");
for(size_t i = 0; AKA_mark("lis===2530###sois===101984###eois===102005###lif===219###soif===8574###eoif===8595###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (AKA_mark("lis===2530###sois===101984###eois===102005###lif===219###soif===8574###eoif===8595###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (i + 4 <= image.size())); ({AKA_mark("lis===2530###sois===102007###eois===102013###lif===219###soif===8597###eoif===8603###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");i += 4;})) {
        AKA_BLOCK_LOOP_101966++;
        if (AKA_BLOCK_LOOP_101966 > 1000) {
            //break;
        }
      AKA_mark("lis===2531###sois===102024###eois===102079###lif===220###soif===8614###eoif===8669###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");image[i] = image[i + 1] = image[i + 2] = (i / 4) & 255;
      AKA_mark("lis===2532###sois===102087###eois===102106###lif===221###soif===8677###eoif===8696###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");image[i + 3] = 255;
    }
    AKA_mark("lis===2534###sois===102119###eois===102150###lif===223###soif===8709###eoif===8740###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> png;
    AKA_mark("lis===2535###sois===102156###eois===102177###lif===224###soif===8746###eoif===8767###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng::State state;
    AKA_mark("lis===2536###sois===102183###eois===102261###lif===225###soif===8773###eoif===8851###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::string testprofile = "0123456789abcdefRGB fake iccp profile for testing";
    AKA_mark("lis===2537###sois===102267###eois===102303###lif===226###soif===8857###eoif===8893###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");testprofile[0] = testprofile[1] = 0;
    AKA_mark("lis===2538###sois===102309###eois===102413###lif===227###soif===8899###eoif===9003###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng_set_icc(&state.info_png, "test", (const unsigned char*)testprofile.c_str(), testprofile.size());
    AKA_mark("lis===2539###sois===102419###eois===102472###lif===228###soif===9009###eoif===9062###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");error = lodepng::encode(png, &image[0], w, h, state);
    AKA_mark("lis===2540###sois===102478###eois===102505###lif===229###soif===9068###eoif===9095###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NO_PNG_ERROR(error);

    AKA_mark("lis===2542###sois===102513###eois===102535###lif===231###soif===9103###eoif===9125###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng::State state2;
    AKA_mark("lis===2543###sois===102541###eois===102575###lif===232###soif===9131###eoif===9165###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> image2;
    AKA_mark("lis===2544###sois===102581###eois===102632###lif===233###soif===9171###eoif===9222###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");error = lodepng::decode(image2, w, h, state2, png);
    AKA_mark("lis===2545###sois===102638###eois===102665###lif===234###soif===9228###eoif===9255###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NO_PNG_ERROR(error);
    AKA_mark("lis===2546###sois===102671###eois===102714###lif===235###soif===9261###eoif===9304###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");assertColorProfileDataEqual(state, state2);
    // LCT_RGB or LCT_PALETTE are both ok, gray is not (it likely chooses palette in practice)
    AKA_mark("lis===2548###sois===102816###eois===102876###lif===237###soif===9406###eoif===9466###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NOT_EQUALS(LCT_GREY, state2.info_png.color.colortype);
    AKA_mark("lis===2549###sois===102883###eois===102949###lif===238###soif===9473###eoif===9539###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NOT_EQUALS(LCT_GREY_ALPHA, state2.info_png.color.colortype);
  }

  // Encoder must give error when forcing invalid combination of color/gray
  // PNG with gray/color ICC Profile
  {
    AKA_mark("lis===2555###sois===103083###eois===103098###lif===244###soif===9673###eoif===9688###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");unsigned error;
    AKA_mark("lis===2556###sois===103104###eois===103128###lif===245###soif===9694###eoif===9718###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");unsigned w = 32, h = 32;
    AKA_mark("lis===2557###sois===103134###eois===103178###lif===246###soif===9724###eoif===9768###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> image(w * h * 4);
    AKA_mark("lis===2558###sois===103184###eois===103211###lif===247###soif===9774###eoif===9801###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");int colors[3] = {0, 5, 33};
    int AKA_BLOCK_LOOP_103217 = 0;
    AKA_mark("lis===2559###sois===103221###eois===103234###lif===248###soif===9811###eoif===9824###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");
for(size_t i = 0; AKA_mark("lis===2559###sois===103235###eois===103256###lif===248###soif===9825###eoif===9846###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (AKA_mark("lis===2559###sois===103235###eois===103256###lif===248###soif===9825###eoif===9846###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()") && (i + 4 <= image.size())); ({AKA_mark("lis===2559###sois===103258###eois===103264###lif===248###soif===9848###eoif===9854###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");i += 4;})) {
        AKA_BLOCK_LOOP_103217++;
        if (AKA_BLOCK_LOOP_103217 > 1000) {
            //break;
        }
      AKA_mark("lis===2560###sois===103275###eois===103290###lif===249###soif===9865###eoif===9880###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");image[i] = 255;
      AKA_mark("lis===2561###sois===103298###eois===103363###lif===250###soif===9888###eoif===9953###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");image[i + 1] = image[i + 2] = image[i + 3] = colors[(i / 4) % 3];
    }
    AKA_mark("lis===2563###sois===103376###eois===103407###lif===252###soif===9966###eoif===9997###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::vector<unsigned char> png;
    AKA_mark("lis===2564###sois===103413###eois===103434###lif===253###soif===10003###eoif===10024###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng::State state;
    AKA_mark("lis===2565###sois===103440###eois===103518###lif===254###soif===10030###eoif===10108###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");std::string testprofile = "0123456789abcdefGRAYfake iccp profile for testing";
    AKA_mark("lis===2566###sois===103524###eois===103560###lif===255###soif===10114###eoif===10150###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");testprofile[0] = testprofile[1] = 0;
    AKA_mark("lis===2567###sois===103566###eois===103670###lif===256###soif===10156###eoif===10260###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");lodepng_set_icc(&state.info_png, "test", (const unsigned char*)testprofile.c_str(), testprofile.size());
    AKA_mark("lis===2568###sois===103676###eois===103729###lif===257###soif===10266###eoif===10319###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");error = lodepng::encode(png, &image[0], w, h, state);
    AKA_mark("lis===2569###sois===103735###eois===103762###lif===258###soif===10325###eoif===10352###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testColorProfile()");ASSERT_NOT_EQUALS(0, error);  // must give error due to color image input with gray profile
  }
}

/** Instrumented function assertExifDataEqual(lodepng::State const&,lodepng::State const&) */
void assertExifDataEqual(const lodepng::State& a, const lodepng::State& b) /* << Aka begin of function void assertExifDataEqual(const lodepng::State& a, const lodepng::State& b) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertExifDataEqual(lodepng::State const&,lodepng::State const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.assertExifDataEqual.103843.stub"

  AKA_mark("lis===2574###sois===103918###eois===103981###lif===1###soif===80###eoif===143###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertExifDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.exif_defined, b.info_png.exif_defined);
  if(AKA_mark("lis===2575###sois===103989###eois===104013###lif===2###soif===151###eoif===175###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertExifDataEqual(lodepng::State const&,lodepng::State const&)") && (AKA_mark("lis===2575###sois===103989###eois===104013###lif===2###soif===151###eoif===175###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertExifDataEqual(lodepng::State const&,lodepng::State const&)") && (!a.info_png.exif_defined))) {
AKA_mark("lis===2575###sois===104015###eois===104022###lif===2###soif===177###eoif===184###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertExifDataEqual(lodepng::State const&,lodepng::State const&)");return;
}

else {
AKA_mark("lis===-2575-###sois===-103989-###eois===-10398924-###lif===-2-###soif===-###eoif===-175-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertExifDataEqual(lodepng::State const&,lodepng::State const&)");
}

  AKA_mark("lis===2577###sois===104028###eois===104085###lif===4###soif===190###eoif===247###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertExifDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.exif_size, b.info_png.exif_size);
  int AKA_BLOCK_LOOP_104090 = 0;
    AKA_mark("lis===2578###sois===104094###eois===104107###lif===5###soif===256###eoif===269###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertExifDataEqual(lodepng::State const&,lodepng::State const&)");
for(size_t i = 0; AKA_mark("lis===2578###sois===104108###eois===104132###lif===5###soif===270###eoif===294###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertExifDataEqual(lodepng::State const&,lodepng::State const&)") && (AKA_mark("lis===2578###sois===104108###eois===104132###lif===5###soif===270###eoif===294###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertExifDataEqual(lodepng::State const&,lodepng::State const&)") && (i < a.info_png.exif_size)); ({AKA_mark("lis===2578###sois===104134###eois===104137###lif===5###soif===296###eoif===299###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertExifDataEqual(lodepng::State const&,lodepng::State const&)");i++;})) {
        AKA_BLOCK_LOOP_104090++;
        if (AKA_BLOCK_LOOP_104090 > 1000) {
            //break;
        }
    AKA_mark("lis===2579###sois===104146###eois===104199###lif===6###soif===308###eoif===361###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\assertExifDataEqual(lodepng::State const&,lodepng::State const&)");ASSERT_EQUALS(a.info_png.exif[i], b.info_png.exif[i]);
  }
}

/** Instrumented function testExif() */
void testExif() /* << Aka begin of function void testExif() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testExif.104217.stub"

  AKA_mark("lis===2584###sois===104233###eois===104270###lif===1###soif===21###eoif===58###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");std::cout << "testExif" << std::endl;

  {
    AKA_mark("lis===2587###sois===104283###eois===104298###lif===4###soif===71###eoif===86###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");unsigned error;
    AKA_mark("lis===2588###sois===104304###eois===104328###lif===5###soif===92###eoif===116###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");unsigned w = 32, h = 32;
    AKA_mark("lis===2589###sois===104334###eois===104378###lif===6###soif===122###eoif===166###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");std::vector<unsigned char> image(w * h * 4);
    int AKA_BLOCK_LOOP_104384 = 0;
    AKA_mark("lis===2590###sois===104388###eois===104401###lif===7###soif===176###eoif===189###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");
for(size_t i = 0; AKA_mark("lis===2590###sois===104402###eois===104423###lif===7###soif===190###eoif===211###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()") && (AKA_mark("lis===2590###sois===104402###eois===104423###lif===7###soif===190###eoif===211###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()") && (i + 4 <= image.size())); ({AKA_mark("lis===2590###sois===104425###eois===104431###lif===7###soif===213###eoif===219###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");i += 4;})) {
        AKA_BLOCK_LOOP_104384++;
        if (AKA_BLOCK_LOOP_104384 > 1000) {
            //break;
        }
      AKA_mark("lis===2591###sois===104442###eois===104500###lif===8###soif===230###eoif===288###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");image[i] = image[i + 1] = image[i + 2] = image[i + 3] = i;
    }
    AKA_mark("lis===2593###sois===104513###eois===104544###lif===10###soif===301###eoif===332###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");std::vector<unsigned char> png;
    AKA_mark("lis===2594###sois===104550###eois===104571###lif===11###soif===338###eoif===359###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");lodepng::State state;
    AKA_mark("lis===2595###sois===104577###eois===104617###lif===12###soif===365###eoif===405###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");std::string testexif = "MM  0123456789";
    AKA_mark("lis===2596###sois===104623###eois===104714###lif===13###soif===411###eoif===502###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");lodepng_set_exif(&state.info_png, (const unsigned char*)testexif.c_str(), testexif.size());
    AKA_mark("lis===2597###sois===104720###eois===104773###lif===14###soif===508###eoif===561###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");error = lodepng::encode(png, &image[0], w, h, state);
    AKA_mark("lis===2598###sois===104779###eois===104806###lif===15###soif===567###eoif===594###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");ASSERT_NO_PNG_ERROR(error);

    AKA_mark("lis===2600###sois===104814###eois===104836###lif===17###soif===602###eoif===624###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");lodepng::State state2;
    AKA_mark("lis===2601###sois===104842###eois===104876###lif===18###soif===630###eoif===664###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");std::vector<unsigned char> image2;
    AKA_mark("lis===2602###sois===104882###eois===104933###lif===19###soif===670###eoif===721###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");error = lodepng::decode(image2, w, h, state2, png);
    AKA_mark("lis===2603###sois===104939###eois===104966###lif===20###soif===727###eoif===754###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");ASSERT_NO_PNG_ERROR(error);
    AKA_mark("lis===2604###sois===104972###eois===105007###lif===21###soif===760###eoif===795###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");assertExifDataEqual(state, state2);
    AKA_mark("lis===2605###sois===105013###eois===105033###lif===22###soif===801###eoif===821###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");ASSERT_EQUALS(32, w);
    AKA_mark("lis===2606###sois===105040###eois===105060###lif===23###soif===828###eoif===848###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");ASSERT_EQUALS(32, h);
    AKA_mark("lis===2607###sois===105067###eois===105109###lif===24###soif===855###eoif===897###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");ASSERT_EQUALS(image.size(), image2.size());
  }

  {
    // exif2c08.png PngSuite image
    AKA_mark("lis===2612###sois===105164###eois===107572###lif===29###soif===952###eoif===3360###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");std::string base64 = "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";
    AKA_mark("lis===2613###sois===107578###eois===107609###lif===30###soif===3366###eoif===3397###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");std::vector<unsigned char> png;
    AKA_mark("lis===2614###sois===107615###eois===107639###lif===31###soif===3403###eoif===3427###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");fromBase64(png, base64);
    AKA_mark("lis===2615###sois===107645###eois===107666###lif===32###soif===3433###eoif===3454###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");lodepng::State state;
    AKA_mark("lis===2616###sois===107672###eois===107705###lif===33###soif===3460###eoif===3493###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");std::vector<unsigned char> image;
    AKA_mark("lis===2617###sois===107711###eois===107725###lif===34###soif===3499###eoif===3513###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");unsigned w, h;
    AKA_mark("lis===2618###sois===107731###eois===107789###lif===35###soif===3519###eoif===3577###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");unsigned error = lodepng::decode(image, w, h, state, png);
    AKA_mark("lis===2619###sois===107795###eois===107822###lif===36###soif===3583###eoif===3610###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");ASSERT_NO_PNG_ERROR(error);
    AKA_mark("lis===2620###sois===107828###eois===107872###lif===37###soif===3616###eoif===3660###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");ASSERT_EQUALS(978, state.info_png.exif_size);
    AKA_mark("lis===2621###sois===107879###eois===107983###lif===38###soif===3667###eoif===3771###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testExif()");ASSERT_EQUALS("072f0ad39affebf437689f935fab270c", md5sum(state.info_png.exif, state.info_png.exif_size));
  }
}

// r, g, b is input background color to encoder, given in png color model
// r2, g2, b2 is expected decoded background color, in color model it auto chose if auto_convert is on
// pixels must be given in mode_raw color format
/** Instrumented function testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false) */
void testBkgdChunk(unsigned r, unsigned g, unsigned b,
                   unsigned r2, unsigned g2, unsigned b2,
                   const std::vector<unsigned char>& pixels,
                   unsigned w, unsigned h,
                   const LodePNGColorMode& mode_raw,
                   const LodePNGColorMode& mode_png,
                   bool auto_convert, bool expect_encoder_error = false) /* << Aka begin of function void testBkgdChunk(unsigned r, unsigned g, unsigned b,
                   unsigned r2, unsigned g2, unsigned b2,
                   const std::vector<unsigned char>& pixels,
                   unsigned w, unsigned h,
                   const LodePNGColorMode& mode_raw,
                   const LodePNGColorMode& mode_png,
                   bool auto_convert, bool expect_encoder_error = false) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testBkgdChunk.108230.stub"

  AKA_mark("lis===2635###sois===108632###eois===108647###lif===7###soif===407###eoif===422###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");unsigned error;

  AKA_mark("lis===2637###sois===108653###eois===108674###lif===9###soif===428###eoif===449###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");lodepng::State state;
  AKA_mark("lis===2638###sois===108678###eois===108713###lif===10###soif===453###eoif===488###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");LodePNGInfo& info = state.info_png;
  AKA_mark("lis===2639###sois===108717###eois===108765###lif===11###soif===492###eoif===540###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");lodepng_color_mode_copy(&info.color, &mode_png);
  AKA_mark("lis===2640###sois===108769###eois===108821###lif===12###soif===544###eoif===596###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");lodepng_color_mode_copy(&state.info_raw, &mode_raw);
  AKA_mark("lis===2641###sois===108825###eois===108867###lif===13###soif===600###eoif===642###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");state.encoder.auto_convert = auto_convert;

  AKA_mark("lis===2643###sois===108873###eois===108901###lif===15###soif===648###eoif===676###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");info.background_defined = 1;
  AKA_mark("lis===2644###sois===108905###eois===108927###lif===16###soif===680###eoif===702###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");info.background_r = r;
  AKA_mark("lis===2645###sois===108931###eois===108953###lif===17###soif===706###eoif===728###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");info.background_g = g;
  AKA_mark("lis===2646###sois===108957###eois===108979###lif===18###soif===732###eoif===754###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");info.background_b = b;

  AKA_mark("lis===2648###sois===108985###eois===109016###lif===20###soif===760###eoif===791###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");std::vector<unsigned char> png;
  AKA_mark("lis===2649###sois===109020###eois===109070###lif===21###soif===795###eoif===845###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");error = lodepng::encode(png, pixels, w, h, state);
  if(AKA_mark("lis===2650###sois===109077###eois===109097###lif===22###soif===852###eoif===872###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)") && (AKA_mark("lis===2650###sois===109077###eois===109097###lif===22###soif===852###eoif===872###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)") && (expect_encoder_error))) {
    AKA_mark("lis===2651###sois===109106###eois===109133###lif===23###soif===881###eoif===908###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_NOT_EQUALS(0, error);
    AKA_mark("lis===2652###sois===109140###eois===109147###lif===24###soif===915###eoif===922###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");return;
  }
else {
AKA_mark("lis===-2650-###sois===-109077-###eois===-10907720-###lif===-22-###soif===-###eoif===-872-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");
}
  AKA_mark("lis===2654###sois===109156###eois===109183###lif===26###soif===931###eoif===958###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_NO_PNG_ERROR(error);

  AKA_mark("lis===2656###sois===109189###eois===109211###lif===28###soif===964###eoif===986###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");lodepng::State state2;
  AKA_mark("lis===2657###sois===109215###eois===109252###lif===29###soif===990###eoif===1027###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");LodePNGInfo& info2 = state2.info_png;
  AKA_mark("lis===2658###sois===109256###eois===109293###lif===30###soif===1031###eoif===1068###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");state2.info_raw.colortype = LCT_RGBA;
  AKA_mark("lis===2659###sois===109297###eois===109327###lif===31###soif===1072###eoif===1102###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");state2.info_raw.bitdepth = 16;
  AKA_mark("lis===2660###sois===109331###eois===109347###lif===32###soif===1106###eoif===1122###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");unsigned w2, h2;
  AKA_mark("lis===2661###sois===109351###eois===109385###lif===33###soif===1126###eoif===1160###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");std::vector<unsigned char> image2;
  AKA_mark("lis===2662###sois===109389###eois===109458###lif===34###soif===1164###eoif===1233###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");error = lodepng::decode(image2, w2, h2, state2, &png[0], png.size());
  AKA_mark("lis===2663###sois===109462###eois===109489###lif===35###soif===1237###eoif===1264###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_NO_PNG_ERROR(error);

  AKA_mark("lis===2665###sois===109495###eois===109515###lif===37###soif===1270###eoif===1290###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_EQUALS(w, w2);
  AKA_mark("lis===2666###sois===109520###eois===109540###lif===38###soif===1295###eoif===1315###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_EQUALS(h, h2);
  AKA_mark("lis===2667###sois===109545###eois===109587###lif===39###soif===1320###eoif===1362###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_EQUALS(1, info2.background_defined);
  AKA_mark("lis===2668###sois===109592###eois===109629###lif===40###soif===1367###eoif===1404###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_EQUALS(r2, info2.background_r);
  AKA_mark("lis===2669###sois===109634###eois===109671###lif===41###soif===1409###eoif===1446###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_EQUALS(g2, info2.background_g);
  AKA_mark("lis===2670###sois===109676###eois===109713###lif===42###soif===1451###eoif===1488###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_EQUALS(b2, info2.background_b);

  // compare pixels in the "raw" color model
  AKA_mark("lis===2673###sois===109766###eois===109796###lif===45###soif===1541###eoif===1571###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");LodePNGColorMode mode_decoded; AKA_mark("lis===2673###sois===109797###eois===109836###lif===45###soif===1572###eoif===1611###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");lodepng_color_mode_init(&mode_decoded); AKA_mark("lis===2673###sois===109837###eois===109864###lif===45###soif===1612###eoif===1639###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");mode_decoded.bitdepth = 16; AKA_mark("lis===2673###sois===109865###eois===109899###lif===45###soif===1640###eoif===1674###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");mode_decoded.colortype = LCT_RGBA;
  AKA_mark("lis===2674###sois===109903###eois===109983###lif===46###soif===1678###eoif===1758###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");std::vector<unsigned char> image3((w * h * lodepng_get_bpp(&mode_raw) + 7) / 8);
  AKA_mark("lis===2675###sois===109987###eois===110073###lif===47###soif===1762###eoif===1848###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");error = lodepng_convert(image3.data(), image2.data(), &mode_raw, &mode_decoded, w, h);
  AKA_mark("lis===2676###sois===110077###eois===110104###lif===48###soif===1852###eoif===1879###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_NO_PNG_ERROR(error);
  AKA_mark("lis===2677###sois===110108###eois===110151###lif===49###soif===1883###eoif===1926###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_EQUALS(pixels.size(), image3.size());
  int AKA_BLOCK_LOOP_110156 = 0;
    AKA_mark("lis===2678###sois===110160###eois===110173###lif===50###soif===1935###eoif===1948###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");
for(size_t i = 0; AKA_mark("lis===2678###sois===110174###eois===110191###lif===50###soif===1949###eoif===1966###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)") && (AKA_mark("lis===2678###sois===110174###eois===110191###lif===50###soif===1949###eoif===1966###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)") && (i < image3.size())); ({AKA_mark("lis===2678###sois===110193###eois===110196###lif===50###soif===1968###eoif===1971###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");i++;})) {
        AKA_BLOCK_LOOP_110156++;
        if (AKA_BLOCK_LOOP_110156 > 1000) {
            //break;
        }
    AKA_mark("lis===2679###sois===110205###eois===110250###lif===51###soif===1980###eoif===2025###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_EQUALS((int)image3[i], (int)pixels[i]);
  }
}

// r, g, b is input background color to encoder, given in png color model
// r2, g2, b2 is expected decoded background color, in color model it auto chose if auto_convert is on
/** Instrumented function testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false) */
void testBkgdChunk(unsigned r, unsigned g, unsigned b,
                   unsigned r2, unsigned g2, unsigned b2,
                   LodePNGColorType type_pixels, unsigned bitdepth_pixels,
                   LodePNGColorType type_raw, unsigned bitdepth_raw,
                   LodePNGColorType type_png, unsigned bitdepth_png,
                   bool auto_convert, bool expect_encoder_error = false) /* << Aka begin of function void testBkgdChunk(unsigned r, unsigned g, unsigned b,
                   unsigned r2, unsigned g2, unsigned b2,
                   LodePNGColorType type_pixels, unsigned bitdepth_pixels,
                   LodePNGColorType type_raw, unsigned bitdepth_raw,
                   LodePNGColorType type_png, unsigned bitdepth_png,
                   bool auto_convert, bool expect_encoder_error = false) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testBkgdChunk.110447.stub"

  AKA_mark("lis===2691###sois===110851###eois===110866###lif===6###soif===409###eoif===424###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");unsigned error;
  AKA_mark("lis===2692###sois===110870###eois===110882###lif===7###soif===428###eoif===440###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");Image image;
  AKA_mark("lis===2693###sois===110886###eois===110968###lif===8###soif===444###eoif===526###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");generateTestImageRequiringColorType16(image, type_pixels, bitdepth_pixels, false);

  AKA_mark("lis===2695###sois===110974###eois===111000###lif===10###soif===532###eoif===558###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");LodePNGColorMode mode_raw; AKA_mark("lis===2695###sois===111001###eois===111036###lif===10###soif===559###eoif===594###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");lodepng_color_mode_init(&mode_raw); AKA_mark("lis===2695###sois===111037###eois===111070###lif===10###soif===595###eoif===628###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");mode_raw.bitdepth = bitdepth_raw; AKA_mark("lis===2695###sois===111071###eois===111101###lif===10###soif===629###eoif===659###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");mode_raw.colortype = type_raw;
  AKA_mark("lis===2696###sois===111105###eois===111132###lif===11###soif===663###eoif===690###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");LodePNGColorMode mode_test; AKA_mark("lis===2696###sois===111133###eois===111169###lif===11###soif===691###eoif===727###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");lodepng_color_mode_init(&mode_test); AKA_mark("lis===2696###sois===111170###eois===111194###lif===11###soif===728###eoif===752###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");mode_test.bitdepth = 16; AKA_mark("lis===2696###sois===111195###eois===111226###lif===11###soif===753###eoif===784###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");mode_test.colortype = LCT_RGBA;
  AKA_mark("lis===2697###sois===111230###eois===111256###lif===12###soif===788###eoif===814###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");LodePNGColorMode mode_png; AKA_mark("lis===2697###sois===111257###eois===111292###lif===12###soif===815###eoif===850###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");lodepng_color_mode_init(&mode_png); AKA_mark("lis===2697###sois===111293###eois===111326###lif===12###soif===851###eoif===884###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");mode_png.bitdepth = bitdepth_png; AKA_mark("lis===2697###sois===111327###eois===111357###lif===12###soif===885###eoif===915###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");mode_png.colortype = type_png;
  AKA_mark("lis===2698###sois===111361###eois===111460###lif===13###soif===919###eoif===1018###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");std::vector<unsigned char> temp((image.width * image.height * lodepng_get_bpp(&mode_raw) + 7) / 8);
  AKA_mark("lis===2699###sois===111464###eois===111570###lif===14###soif===1022###eoif===1128###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");error = lodepng_convert(temp.data(), image.data.data(), &mode_raw, &mode_test, image.width, image.height);
  AKA_mark("lis===2700###sois===111574###eois===111601###lif===15###soif===1132###eoif===1159###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");ASSERT_NO_PNG_ERROR(error);
  AKA_mark("lis===2701###sois===111605###eois===111623###lif===16###soif===1163###eoif===1181###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");image.data = temp;

  AKA_mark("lis===2703###sois===111629###eois===111793###lif===18###soif===1187###eoif===1351###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,bool,bool= false)");testBkgdChunk(r, g, b, r2, g2, b2,
                image.data, image.width, image.height,
                mode_raw, mode_png, auto_convert, expect_encoder_error);
}

/** Instrumented function testBkgdChunk() */
void testBkgdChunk() /* << Aka begin of function void testBkgdChunk() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testBkgdChunk.111805.stub"

  AKA_mark("lis===2709###sois===111826###eois===111868###lif===1###soif===26###eoif===68###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");std::cout << "testBkgdChunk" << std::endl;
  // color param order is: generated, raw, png ( == bKGD)
  // here generated means: what color values the pixels will get, so what auto_convert will make it choose
  AKA_mark("lis===2712###sois===112039###eois===112120###lif===4###soif===239###eoif===320###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");testBkgdChunk(255, 0, 0, 255, 0, 0, LCT_RGBA, 8, LCT_RGBA, 8, LCT_RGBA, 8, true);
  AKA_mark("lis===2713###sois===112124###eois===112203###lif===5###soif===324###eoif===403###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");testBkgdChunk(255, 0, 0, 255, 0, 0, LCT_RGBA, 8, LCT_RGB, 8, LCT_RGB, 8, true);
  AKA_mark("lis===2714###sois===112207###eois===112285###lif===6###soif===407###eoif===485###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");testBkgdChunk(255, 0, 0, 255, 0, 0, LCT_RGB, 8, LCT_RGB, 8, LCT_RGB, 8, true);
  AKA_mark("lis===2715###sois===112289###eois===112370###lif===7###soif===489###eoif===570###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");testBkgdChunk(255, 255, 255, 1, 1, 1, LCT_GREY, 1, LCT_RGB, 8, LCT_RGB, 8, true);
  AKA_mark("lis===2716###sois===112374###eois===112455###lif===8###soif===574###eoif===655###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");testBkgdChunk(255, 255, 255, 3, 3, 3, LCT_GREY, 2, LCT_RGB, 8, LCT_RGB, 8, true);
  AKA_mark("lis===2717###sois===112459###eois===112543###lif===9###soif===659###eoif===743###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");testBkgdChunk(255, 255, 255, 15, 15, 15, LCT_GREY, 4, LCT_RGB, 8, LCT_RGB, 8, true);
  AKA_mark("lis===2718###sois===112547###eois===112634###lif===10###soif===747###eoif===834###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");testBkgdChunk(255, 255, 255, 255, 255, 255, LCT_GREY, 8, LCT_RGB, 8, LCT_RGB, 8, true);
  AKA_mark("lis===2719###sois===112638###eois===112733###lif===11###soif===838###eoif===933###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");testBkgdChunk(255, 255, 255, 65535, 65535, 65535, LCT_GREY, 16, LCT_RGB, 16, LCT_RGB, 8, true);
  AKA_mark("lis===2720###sois===112737###eois===112816###lif===12###soif===937###eoif===1016###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");testBkgdChunk(123, 0, 0, 123, 0, 0, LCT_GREY, 1, LCT_RGB, 8, LCT_RGB, 8, true);
  AKA_mark("lis===2721###sois===112820###eois===112901###lif===13###soif===1020###eoif===1101###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");testBkgdChunk(170, 170, 170, 2, 2, 2, LCT_GREY, 1, LCT_RGB, 8, LCT_RGB, 8, true); // 170 = value 2 in 2-bit

  // without auto_convert. Note that it will still convert if different colortype is given for raw and png, it's just
  // not automatic in that case.
  AKA_mark("lis===2725###sois===113086###eois===113168###lif===17###soif===1286###eoif===1368###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");testBkgdChunk(255, 0, 0, 255, 0, 0, LCT_RGBA, 8, LCT_RGBA, 8, LCT_RGBA, 8, false);
  AKA_mark("lis===2726###sois===113172###eois===113259###lif===18###soif===1372###eoif===1459###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");testBkgdChunk(60000, 0, 0, 60000, 0, 0, LCT_RGBA, 8, LCT_RGBA, 8, LCT_RGBA, 16, false);
  AKA_mark("lis===2727###sois===113263###eois===113353###lif===19###soif===1463###eoif===1553###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");testBkgdChunk(128, 128, 128, 128, 128, 128, LCT_GREY, 8, LCT_RGBA, 8, LCT_GREY, 8, false);
 {
    AKA_mark("lis===2729###sois===113363###eois===113384###lif===21###soif===1563###eoif===1584###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");LodePNGColorMode pal;
    AKA_mark("lis===2730###sois===113390###eois===113420###lif===22###soif===1590###eoif===1620###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");lodepng_color_mode_init(&pal);
    int AKA_BLOCK_LOOP_113426 = 0;
    AKA_mark("lis===2731###sois===113430###eois===113440###lif===23###soif===1630###eoif===1640###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");
for(int i = 0; AKA_mark("lis===2731###sois===113441###eois===113448###lif===23###soif===1641###eoif===1648###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()") && (AKA_mark("lis===2731###sois===113441###eois===113448###lif===23###soif===1641###eoif===1648###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()") && (i < 200)); ({AKA_mark("lis===2731###sois===113450###eois===113453###lif===23###soif===1650###eoif===1653###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");i++;})) {
AKA_mark("lis===2731###sois===113455###eois===113499###lif===23###soif===1655###eoif===1699###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");lodepng_palette_add(&pal, i, i / 2, 0, 255);
}

    AKA_mark("lis===2732###sois===113505###eois===113533###lif===24###soif===1705###eoif===1733###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");pal.colortype = LCT_PALETTE;
    AKA_mark("lis===2733###sois===113539###eois===113556###lif===25###soif===1739###eoif===1756###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");pal.bitdepth = 8;
    AKA_mark("lis===2734###sois===113562###eois===113579###lif===26###soif===1762###eoif===1779###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");unsigned w = 200;
    AKA_mark("lis===2735###sois===113585###eois===113602###lif===27###soif===1785###eoif===1802###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");unsigned h = 200;
    AKA_mark("lis===2736###sois===113608###eois===113646###lif===28###soif===1808###eoif===1846###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");std::vector<unsigned char> img(w * h);
    int AKA_BLOCK_LOOP_113652 = 0;
    AKA_mark("lis===2737###sois===113656###eois===113671###lif===29###soif===1856###eoif===1871###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");
for(unsigned y = 0; AKA_mark("lis===2737###sois===113672###eois===113677###lif===29###soif===1872###eoif===1877###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()") && (AKA_mark("lis===2737###sois===113672###eois===113677###lif===29###soif===1872###eoif===1877###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()") && (y < h)); ({AKA_mark("lis===2737###sois===113679###eois===113682###lif===29###soif===1879###eoif===1882###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");y++;}))
    {
int AKA_BLOCK_LOOP_113689 = 0;
    AKA_mark("lis===2738###sois===113693###eois===113708###lif===30###soif===1893###eoif===1908###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");
for(unsigned x = 0; AKA_mark("lis===2738###sois===113709###eois===113714###lif===30###soif===1909###eoif===1914###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()") && (AKA_mark("lis===2738###sois===113709###eois===113714###lif===30###soif===1909###eoif===1914###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()") && (x < w)); ({AKA_mark("lis===2738###sois===113716###eois===113719###lif===30###soif===1916###eoif===1919###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");x++;})) {
        AKA_BLOCK_LOOP_113689++;
        if (AKA_BLOCK_LOOP_113689 > 1000) {
            //break;
        }
      AKA_mark("lis===2739###sois===113730###eois===113749###lif===31###soif===1930###eoif===1949###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");img[y * w + x] = x;
    }
}


    AKA_mark("lis===2742###sois===113764###eois===113838###lif===34###soif===1964###eoif===2038###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");testBkgdChunk(100, 0, 0, 100, 100, 100, img, w, h, pal, pal, true, false);
    AKA_mark("lis===2743###sois===113844###eois===113919###lif===35###soif===2044###eoif===2119###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");testBkgdChunk(100, 0, 0, 100, 100, 100, img, w, h, pal, pal, false, false);
    AKA_mark("lis===2744###sois===113925###eois===113998###lif===36###soif===2125###eoif===2198###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");testBkgdChunk(250, 0, 0, 250, 250, 250, img, w, h, pal, pal, true, true);

    AKA_mark("lis===2746###sois===114006###eois===114050###lif===38###soif===2206###eoif===2250###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");std::vector<unsigned char> fourcolor(w * h);
    int AKA_BLOCK_LOOP_114056 = 0;
    AKA_mark("lis===2747###sois===114060###eois===114075###lif===39###soif===2260###eoif===2275###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");
for(unsigned y = 0; AKA_mark("lis===2747###sois===114076###eois===114081###lif===39###soif===2276###eoif===2281###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()") && (AKA_mark("lis===2747###sois===114076###eois===114081###lif===39###soif===2276###eoif===2281###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()") && (y < h)); ({AKA_mark("lis===2747###sois===114083###eois===114086###lif===39###soif===2283###eoif===2286###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");y++;}))
    {
int AKA_BLOCK_LOOP_114093 = 0;
    AKA_mark("lis===2748###sois===114097###eois===114112###lif===40###soif===2297###eoif===2312###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");
for(unsigned x = 0; AKA_mark("lis===2748###sois===114113###eois===114118###lif===40###soif===2313###eoif===2318###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()") && (AKA_mark("lis===2748###sois===114113###eois===114118###lif===40###soif===2313###eoif===2318###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()") && (x < w)); ({AKA_mark("lis===2748###sois===114120###eois===114123###lif===40###soif===2320###eoif===2323###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");x++;})) {
        AKA_BLOCK_LOOP_114093++;
        if (AKA_BLOCK_LOOP_114093 > 1000) {
            //break;
        }
      AKA_mark("lis===2749###sois===114134###eois===114163###lif===41###soif===2334###eoif===2363###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");fourcolor[y * w + x] = x & 3;
    }
}

    // palette index 4 expected for output bKGD: auto_convert should turn the 200-sized
    // palette in one of size 5, 4 values for the fourcolor image above, and then a 5th for
    // the bkgd index. The other two 4's actually shouldn't matter, it's not defined what
    // they should be though currently lodepng sets them also to the palette index...
    AKA_mark("lis===2755###sois===114536###eois===114610###lif===47###soif===2736###eoif===2810###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");testBkgdChunk(100, 0, 0, 4, 4, 4, fourcolor, w, h, pal, pal, true, false);


    AKA_mark("lis===2758###sois===114620###eois===114655###lif===50###soif===2820###eoif===2855###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");std::vector<unsigned char> mini(4);
    AKA_mark("lis===2759###sois===114661###eois===114673###lif===51###soif===2861###eoif===2873###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");mini[0] = 1; AKA_mark("lis===2759###sois===114674###eois===114686###lif===51###soif===2874###eoif===2886###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");mini[1] = 2; AKA_mark("lis===2759###sois===114687###eois===114699###lif===51###soif===2887###eoif===2899###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");mini[2] = 3; AKA_mark("lis===2759###sois===114700###eois===114712###lif===51###soif===2900###eoif===2912###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");mini[3] = 4;
    // here we expect RGB color from the output image, since the image is tiny so it chooses to not add PLTE
    AKA_mark("lis===2761###sois===114828###eois===114900###lif===53###soif===3028###eoif===3100###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");testBkgdChunk(100, 0, 0, 100, 50, 0, mini, 2, 2, pal, pal, true, false);

    AKA_mark("lis===2763###sois===114908###eois===114941###lif===55###soif===3108###eoif===3141###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk()");lodepng_color_mode_cleanup(&pal);
  }
}

/** Instrumented function testBkgdChunk2() */
void testBkgdChunk2() /* << Aka begin of function void testBkgdChunk2() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testBkgdChunk2.114958.stub"

  AKA_mark("lis===2768###sois===114980###eois===115023###lif===1###soif===27###eoif===70###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");std::cout << "testBkgdChunk2" << std::endl;
  AKA_mark("lis===2769###sois===115027###eois===115039###lif===2###soif===74###eoif===86###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");Image image;
  AKA_mark("lis===2770###sois===115043###eois===115107###lif===3###soif===90###eoif===154###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");generateTestImageRequiringColorType8(image, LCT_GREY, 2, false);

  // without background, it should choose 2-bit gray for this PNG
  AKA_mark("lis===2773###sois===115180###eois===115212###lif===6###soif===227###eoif===259###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");std::vector<unsigned char> png0;
  AKA_mark("lis===2774###sois===115216###eois===115298###lif===7###soif===263###eoif===345###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");ASSERT_NO_PNG_ERROR(lodepng::encode(png0, image.data, image.width, image.height));
  AKA_mark("lis===2775###sois===115302###eois===115324###lif===8###soif===349###eoif===371###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");lodepng::State state0;
  AKA_mark("lis===2776###sois===115328###eois===115344###lif===9###soif===375###eoif===391###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");unsigned w0, h0;
  AKA_mark("lis===2777###sois===115348###eois===115409###lif===10###soif===395###eoif===456###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");lodepng_inspect(&w0, &h0, &state0, png0.data(), png0.size());
  AKA_mark("lis===2778###sois===115413###eois===115461###lif===11###soif===460###eoif===508###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");ASSERT_EQUALS(2, state0.info_png.color.bitdepth);
  AKA_mark("lis===2779###sois===115466###eois===115522###lif===12###soif===513###eoif===569###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");ASSERT_EQUALS(LCT_GREY, state0.info_png.color.colortype);

  // red background, with auto_convert, it is forced to choose RGB
  AKA_mark("lis===2782###sois===115597###eois===115618###lif===15###soif===644###eoif===665###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");lodepng::State state;
  AKA_mark("lis===2783###sois===115622###eois===115657###lif===16###soif===669###eoif===704###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");LodePNGInfo& info = state.info_png;
  AKA_mark("lis===2784###sois===115661###eois===115689###lif===17###soif===708###eoif===736###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");info.background_defined = 1;
  AKA_mark("lis===2785###sois===115693###eois===115717###lif===18###soif===740###eoif===764###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");info.background_r = 255;
  AKA_mark("lis===2786###sois===115721###eois===115743###lif===19###soif===768###eoif===790###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");info.background_g = 0;
  AKA_mark("lis===2787###sois===115747###eois===115769###lif===20###soif===794###eoif===816###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");info.background_b = 0;
  AKA_mark("lis===2788###sois===115773###eois===115805###lif===21###soif===820###eoif===852###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");std::vector<unsigned char> png1;
  AKA_mark("lis===2789###sois===115809###eois===115898###lif===22###soif===856###eoif===945###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");ASSERT_NO_PNG_ERROR(lodepng::encode(png1, image.data, image.width, image.height, state));
  AKA_mark("lis===2790###sois===115902###eois===115924###lif===23###soif===949###eoif===971###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");lodepng::State state1;
  AKA_mark("lis===2791###sois===115928###eois===115944###lif===24###soif===975###eoif===991###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");unsigned w1, h1;
  AKA_mark("lis===2792###sois===115948###eois===116009###lif===25###soif===995###eoif===1056###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");lodepng_inspect(&w1, &h1, &state1, png1.data(), png1.size());
  AKA_mark("lis===2793###sois===116013###eois===116061###lif===26###soif===1060###eoif===1108###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");ASSERT_EQUALS(8, state1.info_png.color.bitdepth);
  AKA_mark("lis===2794###sois===116066###eois===116121###lif===27###soif===1113###eoif===1168###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");ASSERT_EQUALS(LCT_RGB, state1.info_png.color.colortype);

  // gray output required, background color also interpreted as gray
  AKA_mark("lis===2797###sois===116198###eois===116233###lif===30###soif===1245###eoif===1280###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");state.info_raw.colortype = LCT_RGB;
  AKA_mark("lis===2798###sois===116237###eois===116279###lif===31###soif===1284###eoif===1326###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");state.info_png.color.colortype = LCT_GREY;
  AKA_mark("lis===2799###sois===116283###eois===116317###lif===32###soif===1330###eoif===1364###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");state.info_png.color.bitdepth = 1;
  AKA_mark("lis===2800###sois===116321###eois===116352###lif===33###soif===1368###eoif===1399###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");state.encoder.auto_convert = 0;
  AKA_mark("lis===2801###sois===116356###eois===116384###lif===34###soif===1403###eoif===1431###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");info.background_defined = 1;
  AKA_mark("lis===2802###sois===116388###eois===116410###lif===35###soif===1435###eoif===1457###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");info.background_r = 1;
  AKA_mark("lis===2803###sois===116414###eois===116436###lif===36###soif===1461###eoif===1483###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");info.background_g = 1;
  AKA_mark("lis===2804###sois===116440###eois===116462###lif===37###soif===1487###eoif===1509###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");info.background_b = 1;
  AKA_mark("lis===2805###sois===116466###eois===116498###lif===38###soif===1513###eoif===1545###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");std::vector<unsigned char> png2;
  AKA_mark("lis===2806###sois===116502###eois===116591###lif===39###soif===1549###eoif===1638###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");ASSERT_NO_PNG_ERROR(lodepng::encode(png2, image.data, image.width, image.height, state));
  AKA_mark("lis===2807###sois===116595###eois===116617###lif===40###soif===1642###eoif===1664###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");lodepng::State state2;
  AKA_mark("lis===2808###sois===116621###eois===116637###lif===41###soif===1668###eoif===1684###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");unsigned w2, h2;
  AKA_mark("lis===2809###sois===116641###eois===116702###lif===42###soif===1688###eoif===1749###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");lodepng_inspect(&w2, &h2, &state2, png2.data(), png2.size());
  AKA_mark("lis===2810###sois===116706###eois===116754###lif===43###soif===1753###eoif===1801###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");ASSERT_EQUALS(1, state2.info_png.color.bitdepth);
  AKA_mark("lis===2811###sois===116759###eois===116815###lif===44###soif===1806###eoif===1862###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBkgdChunk2()");ASSERT_EQUALS(LCT_GREY, state2.info_png.color.colortype);
}

// r, g, b, a are the bit depths to store
/** Instrumented function testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false) */
void testSbitChunk(unsigned r, unsigned g, unsigned b, unsigned a,
                   const std::vector<unsigned char>& pixels,
                   unsigned w, unsigned h,
                   const LodePNGColorMode& mode_raw,
                   const LodePNGColorMode& mode_png,
                   bool auto_convert,
                   bool expect_encoder_error = false) /* << Aka begin of function void testSbitChunk(unsigned r, unsigned g, unsigned b, unsigned a,
                   const std::vector<unsigned char>& pixels,
                   unsigned w, unsigned h,
                   const LodePNGColorMode& mode_raw,
                   const LodePNGColorMode& mode_png,
                   bool auto_convert,
                   bool expect_encoder_error = false) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testSbitChunk.116871.stub"

  AKA_mark("lis===2822###sois===117246###eois===117261###lif===7###soif===380###eoif===395###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");unsigned error;

  AKA_mark("lis===2824###sois===117267###eois===117288###lif===9###soif===401###eoif===422###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");lodepng::State state;
  AKA_mark("lis===2825###sois===117292###eois===117327###lif===10###soif===426###eoif===461###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");LodePNGInfo& info = state.info_png;
  AKA_mark("lis===2826###sois===117331###eois===117379###lif===11###soif===465###eoif===513###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");lodepng_color_mode_copy(&info.color, &mode_png);
  AKA_mark("lis===2827###sois===117383###eois===117435###lif===12###soif===517###eoif===569###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");lodepng_color_mode_copy(&state.info_raw, &mode_raw);
  AKA_mark("lis===2828###sois===117439###eois===117481###lif===13###soif===573###eoif===615###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");state.encoder.auto_convert = auto_convert;
  if(AKA_mark("lis===2829###sois===117488###eois===117521###lif===14###soif===622###eoif===655###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)") && (AKA_mark("lis===2829###sois===117488###eois===117521###lif===14###soif===622###eoif===655###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)") && (mode_raw.colortype == LCT_PALETTE))) {
    int AKA_BLOCK_LOOP_117530 = 0;
    AKA_mark("lis===2830###sois===117534###eois===117547###lif===15###soif===668###eoif===681###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");
for(size_t i = 0; AKA_mark("lis===2830###sois===117548###eois===117555###lif===15###soif===682###eoif===689###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)") && (AKA_mark("lis===2830###sois===117548###eois===117555###lif===15###soif===682###eoif===689###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)") && (i < 256)); ({AKA_mark("lis===2830###sois===117557###eois===117560###lif===15###soif===691###eoif===694###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");i++;})) {
        AKA_BLOCK_LOOP_117530++;
        if (AKA_BLOCK_LOOP_117530 > 1000) {
            //break;
        }
      // TODO: consider allowing to set only 1 of these palettes in lodepng in the case
      // where both info_raw and info_png have the palette color type
      AKA_mark("lis===2833###sois===117731###eois===117782###lif===18###soif===865###eoif===916###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");lodepng_palette_add(&state.info_raw, i, i, i, 255);
      AKA_mark("lis===2834###sois===117790###eois===117837###lif===19###soif===924###eoif===971###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");lodepng_palette_add(&info.color, i, i, i, 255);
    }
  }
else {
AKA_mark("lis===-2829-###sois===-117488-###eois===-11748833-###lif===-14-###soif===-###eoif===-655-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");
}

  AKA_mark("lis===2838###sois===117855###eois===117877###lif===23###soif===989###eoif===1011###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");info.sbit_defined = 1;
  AKA_mark("lis===2839###sois===117881###eois===117897###lif===24###soif===1015###eoif===1031###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");info.sbit_r = r;
  AKA_mark("lis===2840###sois===117901###eois===117917###lif===25###soif===1035###eoif===1051###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");info.sbit_g = g;
  AKA_mark("lis===2841###sois===117921###eois===117937###lif===26###soif===1055###eoif===1071###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");info.sbit_b = b;
  AKA_mark("lis===2842###sois===117941###eois===117957###lif===27###soif===1075###eoif===1091###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");info.sbit_a = a;

  AKA_mark("lis===2844###sois===117963###eois===117994###lif===29###soif===1097###eoif===1128###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");std::vector<unsigned char> png;
  AKA_mark("lis===2845###sois===117998###eois===118048###lif===30###soif===1132###eoif===1182###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");error = lodepng::encode(png, pixels, w, h, state);
  if(AKA_mark("lis===2846###sois===118055###eois===118075###lif===31###soif===1189###eoif===1209###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)") && (AKA_mark("lis===2846###sois===118055###eois===118075###lif===31###soif===1189###eoif===1209###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)") && (expect_encoder_error))) {
    AKA_mark("lis===2847###sois===118084###eois===118111###lif===32###soif===1218###eoif===1245###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_NOT_EQUALS(0, error);
    AKA_mark("lis===2848###sois===118118###eois===118125###lif===33###soif===1252###eoif===1259###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");return;
  }
else {
AKA_mark("lis===-2846-###sois===-118055-###eois===-11805520-###lif===-31-###soif===-###eoif===-1209-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");
}
  AKA_mark("lis===2850###sois===118134###eois===118161###lif===35###soif===1268###eoif===1295###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_NO_PNG_ERROR(error);

  AKA_mark("lis===2852###sois===118167###eois===118189###lif===37###soif===1301###eoif===1323###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");lodepng::State state2;
  AKA_mark("lis===2853###sois===118193###eois===118230###lif===38###soif===1327###eoif===1364###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");LodePNGInfo& info2 = state2.info_png;
  AKA_mark("lis===2854###sois===118234###eois===118250###lif===39###soif===1368###eoif===1384###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");unsigned w2, h2;
  AKA_mark("lis===2855###sois===118254###eois===118288###lif===40###soif===1388###eoif===1422###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");std::vector<unsigned char> image2;
  AKA_mark("lis===2856###sois===118292###eois===118361###lif===41###soif===1426###eoif===1495###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");error = lodepng::decode(image2, w2, h2, state2, &png[0], png.size());
  AKA_mark("lis===2857###sois===118365###eois===118392###lif===42###soif===1499###eoif===1526###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_NO_PNG_ERROR(error);

  AKA_mark("lis===2859###sois===118398###eois===118441###lif===44###soif===1532###eoif===1575###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");LodePNGColorType type = mode_png.colortype;

  AKA_mark("lis===2861###sois===118447###eois===118467###lif===46###soif===1581###eoif===1601###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_EQUALS(w, w2);
  AKA_mark("lis===2862###sois===118472###eois===118492###lif===47###soif===1606###eoif===1626###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_EQUALS(h, h2);
  AKA_mark("lis===2863###sois===118497###eois===118533###lif===48###soif===1631###eoif===1667###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_EQUALS(1, info2.sbit_defined);
  AKA_mark("lis===2864###sois===118538###eois===118568###lif===49###soif===1672###eoif===1702###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_EQUALS(r, info2.sbit_r);
  if(AKA_mark("lis===2865###sois===118576###eois===118634###lif===50###soif===1710###eoif===1768###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)") && (((AKA_mark("lis===2865###sois===118576###eois===118591###lif===50###soif===1710###eoif===1725###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)") && (type == LCT_RGB)) || (AKA_mark("lis===2865###sois===118595###eois===118611###lif===50###soif===1729###eoif===1745###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)") && (type == LCT_RGBA))) || (AKA_mark("lis===2865###sois===118615###eois===118634###lif===50###soif===1749###eoif===1768###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)") && (type == LCT_PALETTE)))) {
    AKA_mark("lis===2866###sois===118643###eois===118673###lif===51###soif===1777###eoif===1807###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_EQUALS(g, info2.sbit_g);
    AKA_mark("lis===2867###sois===118680###eois===118710###lif===52###soif===1814###eoif===1844###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_EQUALS(b, info2.sbit_b);
  }
else {
AKA_mark("lis===-2865-###sois===-118576-###eois===-11857658-###lif===-50-###soif===-###eoif===-1768-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");
}
  if(AKA_mark("lis===2869###sois===118723###eois===118765###lif===54###soif===1857###eoif===1899###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)") && ((AKA_mark("lis===2869###sois===118723###eois===118745###lif===54###soif===1857###eoif===1879###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)") && (type == LCT_GREY_ALPHA)) || (AKA_mark("lis===2869###sois===118749###eois===118765###lif===54###soif===1883###eoif===1899###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)") && (type == LCT_RGBA)))) {
    AKA_mark("lis===2870###sois===118774###eois===118804###lif===55###soif===1908###eoif===1938###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_EQUALS(a, info2.sbit_a);
  }
else {
AKA_mark("lis===-2869-###sois===-118723-###eois===-11872342-###lif===-54-###soif===-###eoif===-1899-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");
}

  // compare pixels in a 16-bit color model
  AKA_mark("lis===2874###sois===118861###eois===118891###lif===59###soif===1995###eoif===2025###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");LodePNGColorMode mode_compare; AKA_mark("lis===2874###sois===118892###eois===118931###lif===59###soif===2026###eoif===2065###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");lodepng_color_mode_init(&mode_compare); AKA_mark("lis===2874###sois===118932###eois===118959###lif===59###soif===2066###eoif===2093###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");mode_compare.bitdepth = 16; AKA_mark("lis===2874###sois===118960###eois===118994###lif===59###soif===2094###eoif===2128###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");mode_compare.colortype = LCT_RGBA;
  AKA_mark("lis===2875###sois===118998###eois===119028###lif===60###soif===2132###eoif===2162###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");LodePNGColorMode mode_decoded; AKA_mark("lis===2875###sois===119029###eois===119068###lif===60###soif===2163###eoif===2202###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");lodepng_color_mode_init(&mode_decoded); AKA_mark("lis===2875###sois===119069###eois===119095###lif===60###soif===2203###eoif===2229###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");mode_decoded.bitdepth = 8; AKA_mark("lis===2875###sois===119096###eois===119130###lif===60###soif===2230###eoif===2264###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");mode_decoded.colortype = LCT_RGBA;
  AKA_mark("lis===2876###sois===119134###eois===119179###lif===61###soif===2268###eoif===2313###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");std::vector<unsigned char> image3(w * h * 8);
  AKA_mark("lis===2877###sois===119183###eois===119273###lif===62###soif===2317###eoif===2407###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");error = lodepng_convert(image3.data(), image2.data(), &mode_compare, &mode_decoded, w, h);
  AKA_mark("lis===2878###sois===119277###eois===119322###lif===63###soif===2411###eoif===2456###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");std::vector<unsigned char> image4(w * h * 8);
  AKA_mark("lis===2879###sois===119326###eois===119418###lif===64###soif===2460###eoif===2552###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");error = lodepng_convert(image4.data(), pixels.data(), &mode_compare, &state.info_raw, w, h);
  AKA_mark("lis===2880###sois===119422###eois===119449###lif===65###soif===2556###eoif===2583###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_NO_PNG_ERROR(error);
  AKA_mark("lis===2881###sois===119453###eois===119496###lif===66###soif===2587###eoif===2630###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_EQUALS(image4.size(), image3.size());
  int AKA_BLOCK_LOOP_119501 = 0;
    AKA_mark("lis===2882###sois===119505###eois===119518###lif===67###soif===2639###eoif===2652###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");
for(size_t i = 0; AKA_mark("lis===2882###sois===119519###eois===119536###lif===67###soif===2653###eoif===2670###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)") && (AKA_mark("lis===2882###sois===119519###eois===119536###lif===67###soif===2653###eoif===2670###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)") && (i < image3.size())); ({AKA_mark("lis===2882###sois===119538###eois===119541###lif===67###soif===2672###eoif===2675###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");i++;})) {
        AKA_BLOCK_LOOP_119501++;
        if (AKA_BLOCK_LOOP_119501 > 1000) {
            //break;
        }
    AKA_mark("lis===2883###sois===119550###eois===119595###lif===68###soif===2684###eoif===2729###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorMode const&,LodePNGColorMode const&,bool,bool= false)");ASSERT_EQUALS((int)image4[i], (int)image3[i]);
  }
}


/** Instrumented function testSbitChunk(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,bool= false) */
void testSbitChunk(unsigned r, unsigned g, unsigned b, unsigned a,
                   LodePNGColorType type, unsigned bitdepth,
                   bool expect_encoder_error = false) /* << Aka begin of function void testSbitChunk(unsigned r, unsigned g, unsigned b, unsigned a,
                   LodePNGColorType type, unsigned bitdepth,
                   bool expect_encoder_error = false) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,bool= false)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testSbitChunk.119615.stub"

  AKA_mark("lis===2891###sois===119799###eois===119825###lif===3###soif===189###eoif===215###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,bool= false)");LodePNGColorMode mode_raw;
  AKA_mark("lis===2892###sois===119829###eois===119864###lif===4###soif===219###eoif===254###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,bool= false)");lodepng_color_mode_init(&mode_raw);
  AKA_mark("lis===2893###sois===119868###eois===119897###lif===5###soif===258###eoif===287###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,bool= false)");mode_raw.bitdepth = bitdepth;
  AKA_mark("lis===2894###sois===119901###eois===119927###lif===6###soif===291###eoif===317###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,bool= false)");mode_raw.colortype = type;
  AKA_mark("lis===2895###sois===119931###eois===119957###lif===7###soif===321###eoif===347###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,bool= false)");LodePNGColorMode mode_png;
  AKA_mark("lis===2896###sois===119961###eois===119996###lif===8###soif===351###eoif===386###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,bool= false)");lodepng_color_mode_init(&mode_png);
  AKA_mark("lis===2897###sois===120000###eois===120029###lif===9###soif===390###eoif===419###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,bool= false)");mode_png.bitdepth = bitdepth;
  AKA_mark("lis===2898###sois===120033###eois===120059###lif===10###soif===423###eoif===449###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,bool= false)");mode_png.colortype = type;

  AKA_mark("lis===2900###sois===120065###eois===120107###lif===12###soif===455###eoif===497###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,bool= false)");std::vector<unsigned char> pixels(8, 255); // force all pixels to be white, so encoder tries to use auto_convert as much as possible

  AKA_mark("lis===2902###sois===120203###eois===120292###lif===14###soif===593###eoif===682###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,bool= false)");testSbitChunk(r, g, b, a, pixels, 1, 1, mode_raw, mode_png, false, expect_encoder_error);
  AKA_mark("lis===2903###sois===120296###eois===120384###lif===15###soif===686###eoif===774###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,bool= false)");testSbitChunk(r, g, b, a, pixels, 1, 1, mode_raw, mode_png, true, expect_encoder_error);
}

// type_pixels = what the pixels should require at least for auto_convert
// type_raw = actual raw pixel type to give to the encoder
// type_png = PNG type to request from the encoder (if not auto_convert)
// auto_convert: 0 = no, 1 = yes, 2 = try both
/** Instrumented function testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false) */
void testSbitChunk2(unsigned r, unsigned g, unsigned b, unsigned a,
                   LodePNGColorType type_pixels, unsigned bitdepth_pixels,
                   LodePNGColorType type_raw, unsigned bitdepth_raw,
                   LodePNGColorType type_png, unsigned bitdepth_png,
                   int auto_convert,
                   bool expect_encoder_error = false) /* << Aka begin of function void testSbitChunk2(unsigned r, unsigned g, unsigned b, unsigned a,
                   LodePNGColorType type_pixels, unsigned bitdepth_pixels,
                   LodePNGColorType type_raw, unsigned bitdepth_raw,
                   LodePNGColorType type_png, unsigned bitdepth_png,
                   int auto_convert,
                   bool expect_encoder_error = false) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testSbitChunk2.120653.stub"


  AKA_mark("lis===2917###sois===121032###eois===121047###lif===7###soif===384###eoif===399###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");unsigned error;
  AKA_mark("lis===2918###sois===121051###eois===121063###lif===8###soif===403###eoif===415###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");Image image;
  AKA_mark("lis===2919###sois===121067###eois===121149###lif===9###soif===419###eoif===501###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");generateTestImageRequiringColorType16(image, type_pixels, bitdepth_pixels, false);

  AKA_mark("lis===2921###sois===121155###eois===121181###lif===11###soif===507###eoif===533###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");LodePNGColorMode mode_raw; AKA_mark("lis===2921###sois===121182###eois===121217###lif===11###soif===534###eoif===569###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");lodepng_color_mode_init(&mode_raw); AKA_mark("lis===2921###sois===121218###eois===121251###lif===11###soif===570###eoif===603###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");mode_raw.bitdepth = bitdepth_raw; AKA_mark("lis===2921###sois===121252###eois===121282###lif===11###soif===604###eoif===634###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");mode_raw.colortype = type_raw;
  AKA_mark("lis===2922###sois===121286###eois===121313###lif===12###soif===638###eoif===665###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");LodePNGColorMode mode_test; AKA_mark("lis===2922###sois===121314###eois===121350###lif===12###soif===666###eoif===702###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");lodepng_color_mode_init(&mode_test); AKA_mark("lis===2922###sois===121351###eois===121375###lif===12###soif===703###eoif===727###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");mode_test.bitdepth = 16; AKA_mark("lis===2922###sois===121376###eois===121407###lif===12###soif===728###eoif===759###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");mode_test.colortype = LCT_RGBA;
  AKA_mark("lis===2923###sois===121411###eois===121437###lif===13###soif===763###eoif===789###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");LodePNGColorMode mode_png; AKA_mark("lis===2923###sois===121438###eois===121473###lif===13###soif===790###eoif===825###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");lodepng_color_mode_init(&mode_png); AKA_mark("lis===2923###sois===121474###eois===121507###lif===13###soif===826###eoif===859###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");mode_png.bitdepth = bitdepth_png; AKA_mark("lis===2923###sois===121508###eois===121538###lif===13###soif===860###eoif===890###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");mode_png.colortype = type_png;
  AKA_mark("lis===2924###sois===121542###eois===121641###lif===14###soif===894###eoif===993###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");std::vector<unsigned char> temp((image.width * image.height * lodepng_get_bpp(&mode_raw) + 7) / 8);
  AKA_mark("lis===2925###sois===121645###eois===121751###lif===15###soif===997###eoif===1103###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");error = lodepng_convert(temp.data(), image.data.data(), &mode_raw, &mode_test, image.width, image.height);
  AKA_mark("lis===2926###sois===121755###eois===121782###lif===16###soif===1107###eoif===1134###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");ASSERT_NO_PNG_ERROR(error);
  AKA_mark("lis===2927###sois===121786###eois===121804###lif===17###soif===1138###eoif===1156###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");image.data = temp;

  if(AKA_mark("lis===2929###sois===121813###eois===121851###lif===19###soif===1165###eoif===1203###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)") && ((AKA_mark("lis===2929###sois===121813###eois===121830###lif===19###soif===1165###eoif===1182###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)") && (auto_convert == 0)) || (AKA_mark("lis===2929###sois===121834###eois===121851###lif===19###soif===1186###eoif===1203###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)") && (auto_convert == 2)))) {
AKA_mark("lis===2929###sois===121853###eois===121967###lif===19###soif===1205###eoif===1319###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");testSbitChunk(r, g, b, a, image.data, image.width, image.height, mode_raw, mode_png, false, expect_encoder_error);
}

else {
AKA_mark("lis===-2929-###sois===-121813-###eois===-12181338-###lif===-19-###soif===-###eoif===-1203-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");
}
  if(AKA_mark("lis===2930###sois===121974###eois===122012###lif===20###soif===1326###eoif===1364###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)") && ((AKA_mark("lis===2930###sois===121974###eois===121991###lif===20###soif===1326###eoif===1343###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)") && (auto_convert == 1)) || (AKA_mark("lis===2930###sois===121995###eois===122012###lif===20###soif===1347###eoif===1364###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)") && (auto_convert == 2)))) {
AKA_mark("lis===2930###sois===122014###eois===122127###lif===20###soif===1366###eoif===1479###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");testSbitChunk(r, g, b, a, image.data, image.width, image.height, mode_raw, mode_png, true, expect_encoder_error);
}

else {
AKA_mark("lis===-2930-###sois===-121974-###eois===-12197438-###lif===-20-###soif===-###eoif===-1364-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk2(unsigned,unsigned,unsigned,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,LodePNGColorType,unsigned,int,bool= false)");
}
}

// Test the sBIT chunk for all color types, and for possible combinations of pixel colors where auto_convert conversions occur (only conversions that
// still allow storing all the sBIT information within the PNG specification limitations may occur)
/** Instrumented function testSbitChunk() */
void testSbitChunk() /* << Aka begin of function void testSbitChunk() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testSbitChunk.122391.stub"

  AKA_mark("lis===2936###sois===122412###eois===122454###lif===1###soif===26###eoif===68###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");std::cout << "testSbitChunk" << std::endl;
  AKA_mark("lis===2937###sois===122458###eois===122503###lif===2###soif===72###eoif===117###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(8, 8, 8, 0, LCT_RGB, 8, false);
  AKA_mark("lis===2938###sois===122507###eois===122552###lif===3###soif===121###eoif===166###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(1, 2, 3, 0, LCT_RGB, 8, false);
  AKA_mark("lis===2939###sois===122556###eois===122600###lif===4###soif===170###eoif===214###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(0, 2, 3, 0, LCT_RGB, 8, true);
  AKA_mark("lis===2940###sois===122604###eois===122648###lif===5###soif===218###eoif===262###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(9, 2, 3, 0, LCT_RGB, 8, true);

  AKA_mark("lis===2942###sois===122654###eois===122700###lif===7###soif===268###eoif===314###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(8, 8, 8, 8, LCT_RGBA, 8, false);
  AKA_mark("lis===2943###sois===122704###eois===122750###lif===8###soif===318###eoif===364###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(1, 2, 3, 4, LCT_RGBA, 8, false);
  AKA_mark("lis===2944###sois===122754###eois===122799###lif===9###soif===368###eoif===413###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(0, 2, 3, 4, LCT_RGBA, 8, true);
  AKA_mark("lis===2945###sois===122803###eois===122848###lif===10###soif===417###eoif===462###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(9, 2, 3, 4, LCT_RGBA, 8, true);

  AKA_mark("lis===2947###sois===122854###eois===122900###lif===12###soif===468###eoif===514###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(1, 2, 3, 0, LCT_RGB, 16, false);
  AKA_mark("lis===2948###sois===122904###eois===122949###lif===13###soif===518###eoif===563###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(0, 2, 3, 0, LCT_RGB, 16, true);
  AKA_mark("lis===2949###sois===122953###eois===122999###lif===14###soif===567###eoif===613###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(9, 2, 3, 0, LCT_RGB, 16, false);
  AKA_mark("lis===2950###sois===123003###eois===123049###lif===15###soif===617###eoif===663###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(17, 2, 3, 0, LCT_RGB, 16, true);

  AKA_mark("lis===2952###sois===123055###eois===123102###lif===17###soif===669###eoif===716###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(1, 2, 3, 4, LCT_RGBA, 16, false);
  AKA_mark("lis===2953###sois===123106###eois===123152###lif===18###soif===720###eoif===766###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(0, 2, 3, 4, LCT_RGBA, 16, true);
  AKA_mark("lis===2954###sois===123156###eois===123203###lif===19###soif===770###eoif===817###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(9, 2, 3, 4, LCT_RGBA, 16, false);
  AKA_mark("lis===2955###sois===123207###eois===123254###lif===20###soif===821###eoif===868###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(17, 2, 3, 4, LCT_RGBA, 16, true);

  AKA_mark("lis===2957###sois===123260###eois===123309###lif===22###soif===874###eoif===923###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(8, 2, 3, 0, LCT_PALETTE, 8, false);
  AKA_mark("lis===2958###sois===123313###eois===123362###lif===23###soif===927###eoif===976###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(8, 2, 3, 0, LCT_PALETTE, 4, false); // 4-bit palette still treats the RGB as 8-bit
  AKA_mark("lis===2959###sois===123413###eois===123461###lif===24###soif===1027###eoif===1075###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(9, 2, 3, 0, LCT_PALETTE, 8, true);

  AKA_mark("lis===2961###sois===123467###eois===123513###lif===26###soif===1081###eoif===1127###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(8, 0, 0, 0, LCT_GREY, 8, false);
  AKA_mark("lis===2962###sois===123517###eois===123562###lif===27###soif===1131###eoif===1176###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(8, 0, 0, 0, LCT_GREY, 4, true);
  AKA_mark("lis===2963###sois===123566###eois===123612###lif===28###soif===1180###eoif===1226###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(5, 0, 0, 0, LCT_GREY, 8, false);
  AKA_mark("lis===2964###sois===123616###eois===123662###lif===29###soif===1230###eoif===1276###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(1, 0, 0, 0, LCT_GREY, 1, false);
  AKA_mark("lis===2965###sois===123666###eois===123711###lif===30###soif===1280###eoif===1325###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(3, 0, 0, 0, LCT_GREY, 1, true);
  AKA_mark("lis===2966###sois===123715###eois===123760###lif===31###soif===1329###eoif===1374###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(0, 0, 0, 0, LCT_GREY, 1, true);

  AKA_mark("lis===2968###sois===123766###eois===123814###lif===33###soif===1380###eoif===1428###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(16, 0, 0, 0, LCT_GREY, 16, false);
  AKA_mark("lis===2969###sois===123818###eois===123865###lif===34###soif===1432###eoif===1479###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(17, 0, 0, 0, LCT_GREY, 16, true);
  AKA_mark("lis===2970###sois===123869###eois===123916###lif===35###soif===1483###eoif===1530###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(8, 0, 0, 0, LCT_GREY, 16, false);
  AKA_mark("lis===2971###sois===123920###eois===123967###lif===36###soif===1534###eoif===1581###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(5, 0, 0, 0, LCT_GREY, 16, false);

  AKA_mark("lis===2973###sois===123973###eois===124025###lif===38###soif===1587###eoif===1639###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(8, 0, 0, 8, LCT_GREY_ALPHA, 8, false);
  AKA_mark("lis===2974###sois===124029###eois===124080###lif===39###soif===1643###eoif===1694###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(8, 0, 0, 0, LCT_GREY_ALPHA, 8, true);
  AKA_mark("lis===2975###sois===124084###eois===124135###lif===40###soif===1698###eoif===1749###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(8, 0, 0, 9, LCT_GREY_ALPHA, 8, true);
  AKA_mark("lis===2976###sois===124139###eois===124191###lif===41###soif===1753###eoif===1805###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(5, 0, 0, 5, LCT_GREY_ALPHA, 8, false);
  AKA_mark("lis===2977###sois===124195###eois===124247###lif===42###soif===1809###eoif===1861###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(5, 0, 0, 8, LCT_GREY_ALPHA, 8, false);

  AKA_mark("lis===2979###sois===124253###eois===124308###lif===44###soif===1867###eoif===1922###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(16, 0, 0, 16, LCT_GREY_ALPHA, 16, false);
  AKA_mark("lis===2980###sois===124312###eois===124366###lif===45###soif===1926###eoif===1980###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(16, 0, 0, 8, LCT_GREY_ALPHA, 16, false);
  AKA_mark("lis===2981###sois===124370###eois===124423###lif===46###soif===1984###eoif===2037###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(8, 0, 0, 8, LCT_GREY_ALPHA, 16, false);
  AKA_mark("lis===2982###sois===124427###eois===124480###lif===47###soif===2041###eoif===2094###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(16, 0, 0, 0, LCT_GREY_ALPHA, 16, true);
  AKA_mark("lis===2983###sois===124484###eois===124538###lif===48###soif===2098###eoif===2152###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(16, 0, 0, 17, LCT_GREY_ALPHA, 16, true);
  AKA_mark("lis===2984###sois===124542###eois===124595###lif===49###soif===2156###eoif===2209###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(5, 0, 0, 5, LCT_GREY_ALPHA, 16, false);
  AKA_mark("lis===2985###sois===124599###eois===124652###lif===50###soif===2213###eoif===2266###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk(5, 0, 0, 8, LCT_GREY_ALPHA, 16, false);

  AKA_mark("lis===2987###sois===124658###eois===124731###lif===52###soif===2272###eoif===2345###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk2(8, 8, 8, 0, LCT_RGB, 8, LCT_RGB, 8, LCT_RGB, 8, 2, false);
  AKA_mark("lis===2988###sois===124735###eois===124809###lif===53###soif===2349###eoif===2423###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk2(8, 8, 8, 0, LCT_GREY, 8, LCT_RGB, 8, LCT_RGB, 8, 2, false);
  AKA_mark("lis===2989###sois===124813###eois===124892###lif===54###soif===2427###eoif===2506###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk2(12, 12, 12, 0, LCT_GREY, 8, LCT_RGB, 16, LCT_RGB, 16, 2, false);
  AKA_mark("lis===2990###sois===124896###eois===124977###lif===55###soif===2510###eoif===2591###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk2(12, 12, 12, 8, LCT_GREY, 8, LCT_RGBA, 16, LCT_RGBA, 16, 2, false);
  AKA_mark("lis===2991###sois===124981###eois===125057###lif===56###soif===2595###eoif===2671###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk2(8, 8, 8, 0, LCT_GREY, 8, LCT_RGB, 16, LCT_RGB, 16, 2, false);
  AKA_mark("lis===2992###sois===125061###eois===125137###lif===57###soif===2675###eoif===2751###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk2(8, 7, 8, 0, LCT_GREY, 8, LCT_RGB, 16, LCT_RGB, 16, 2, false);
  AKA_mark("lis===2993###sois===125141###eois===125217###lif===58###soif===2755###eoif===2831###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk2(8, 8, 7, 0, LCT_GREY, 8, LCT_RGB, 16, LCT_RGB, 16, 2, false);
  AKA_mark("lis===2994###sois===125221###eois===125295###lif===59###soif===2835###eoif===2909###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk2(8, 7, 8, 0, LCT_GREY, 8, LCT_RGB, 8, LCT_RGB, 8, 2, false);
  AKA_mark("lis===2995###sois===125299###eois===125373###lif===60###soif===2913###eoif===2987###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk2(8, 8, 7, 0, LCT_GREY, 8, LCT_RGB, 8, LCT_RGB, 8, 2, false);
  AKA_mark("lis===2996###sois===125377###eois===125458###lif===61###soif===2991###eoif===3072###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk2(8, 8, 8, 0, LCT_GREY, 8, LCT_RGB, 8, LCT_GREY_ALPHA, 8, 1, false);
  AKA_mark("lis===2997###sois===125462###eois===125543###lif===62###soif===3076###eoif===3157###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");testSbitChunk2(8, 8, 8, 8, LCT_GREY, 8, LCT_RGB, 8, LCT_GREY_ALPHA, 8, 0, false);


  // test png-suite image cs3n3p08.png, which has an sBIT chunk with RGB values set to 3 bits
  {
    AKA_mark("lis===3002###sois===125653###eois===125693###lif===67###soif===3267###eoif===3307###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");std::vector<unsigned char> png, decoded;
    AKA_mark("lis===3003###sois===125699###eois===126080###lif===68###soif===3313###eoif===3694###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");fromBase64(png, std::string("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAAYagMeiWXwAAAANzQklUAwMDo5KgQgAAAFRQTFRFkv8AAP+SAP//AP8AANv/AP9t/7YAAG3/tv8A/5IA2/8AAEn//yQA/wAAJP8ASf8AAP/bAP9JAP+2//8AAP8kALb//9sAAJL//20AACT//0kAbf8A33ArFwAAAEtJREFUeJyFyscBggAAALGzYldUsO2/pyMk73SGGE7QF3pDe2gLzdADHA7QDqIfdIUu0AocntAIbaAFdIdu0BIc1tAEvaABOkIf+AMiQDPhd/SuJgAAAABJRU5ErkJggg=="));
    AKA_mark("lis===3004###sois===126086###eois===126107###lif===69###soif===3700###eoif===3721###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");lodepng::State state;
    AKA_mark("lis===3005###sois===126113###eois===126127###lif===70###soif===3727###eoif===3741###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");unsigned w, h;

    AKA_mark("lis===3007###sois===126135###eois===126195###lif===72###soif===3749###eoif===3809###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");unsigned error = lodepng::decode(decoded, w, h, state, png);
    AKA_mark("lis===3008###sois===126201###eois===126222###lif===73###soif===3815###eoif===3836###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");assertNoError(error);
    AKA_mark("lis===3009###sois===126228###eois===126273###lif===74###soif===3842###eoif===3887###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");ASSERT_EQUALS(1, state.info_png.sbit_defined);
    AKA_mark("lis===3010###sois===126280###eois===126319###lif===75###soif===3894###eoif===3933###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");ASSERT_EQUALS(3, state.info_png.sbit_r);
    AKA_mark("lis===3011###sois===126326###eois===126365###lif===76###soif===3940###eoif===3979###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");ASSERT_EQUALS(3, state.info_png.sbit_g);
    AKA_mark("lis===3012###sois===126372###eois===126411###lif===77###soif===3986###eoif===4025###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");ASSERT_EQUALS(3, state.info_png.sbit_b);
  }

  // test png-suite image basn0g02.png, which is known to not have an sBIT chunk
  {
    AKA_mark("lis===3017###sois===126512###eois===126552###lif===82###soif===4126###eoif===4166###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");std::vector<unsigned char> png, decoded;
    AKA_mark("lis===3018###sois===126558###eois===126731###lif===83###soif===4172###eoif===4345###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");fromBase64(png, std::string("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgAAAAAcoT2JAAAABGdBTUEAAYagMeiWXwAAAB9JREFUeJxjYAhd9R+M8TCIUMIAU4aPATMJH2OQuQcAvUl/gYsJiakAAAAASUVORK5CYII="));
    AKA_mark("lis===3019###sois===126737###eois===126758###lif===84###soif===4351###eoif===4372###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");lodepng::State state;
    AKA_mark("lis===3020###sois===126764###eois===126778###lif===85###soif===4378###eoif===4392###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");unsigned w, h;

    AKA_mark("lis===3022###sois===126786###eois===126846###lif===87###soif===4400###eoif===4460###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");unsigned error = lodepng::decode(decoded, w, h, state, png);
    AKA_mark("lis===3023###sois===126852###eois===126873###lif===88###soif===4466###eoif===4487###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");assertNoError(error);
    AKA_mark("lis===3024###sois===126879###eois===126924###lif===89###soif===4493###eoif===4538###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testSbitChunk()");ASSERT_EQUALS(0, state.info_png.sbit_defined);
  }
}

// Test particular cHRM+gAMA conversion to srgb
// gamma = gamma given 100000x multiplied form of PNG, or 0 to set none at all
// wx..by = whitepoint and chromaticities, given in the 100000x multiplied form of PNG
// r, g, b: r, g, b values to encode in the PNG's data
// er, eg, eb: expected r, g, b values after decoding and converting to sRGB
/** Instrumented function testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0) */
void testChrmToSrgb(unsigned gamma, unsigned wx, unsigned wy, unsigned rx, unsigned ry, unsigned gx, unsigned gy, unsigned bx, unsigned by,
                    unsigned char r, unsigned char g, unsigned char b, unsigned char er, unsigned char eg, unsigned char eb,
                    int max_dist = 0) /* << Aka begin of function void testChrmToSrgb(unsigned gamma, unsigned wx, unsigned wy, unsigned rx, unsigned ry, unsigned gx, unsigned gy, unsigned bx, unsigned by,
                    unsigned char r, unsigned char g, unsigned char b, unsigned char er, unsigned char eg, unsigned char eb,
                    int max_dist = 0) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testChrmToSrgb.127293.stub"

  AKA_mark("lis===3036###sois===127598###eois===127634###lif===3###soif===310###eoif===346###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");std::vector<unsigned char> image(4);
  AKA_mark("lis===3037###sois===127638###eois===127651###lif===4###soif===350###eoif===363###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");image[0] = r;
  AKA_mark("lis===3038###sois===127655###eois===127668###lif===5###soif===367###eoif===380###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");image[1] = g;
  AKA_mark("lis===3039###sois===127672###eois===127685###lif===6###soif===384###eoif===397###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");image[2] = b;
  AKA_mark("lis===3040###sois===127689###eois===127704###lif===7###soif===401###eoif===416###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");image[3] = 255;
  AKA_mark("lis===3041###sois===127708###eois===127729###lif===8###soif===420###eoif===441###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");lodepng::State state;
  if(AKA_mark("lis===3042###sois===127736###eois===127741###lif===9###soif===448###eoif===453###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)") && (AKA_mark("lis===3042###sois===127736###eois===127741###lif===9###soif===448###eoif===453###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)") && (gamma))) {
    AKA_mark("lis===3043###sois===127750###eois===127782###lif===10###soif===462###eoif===494###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");state.info_png.gama_defined = 1;
    AKA_mark("lis===3044###sois===127788###eois===127822###lif===11###soif===500###eoif===534###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");state.info_png.gama_gamma = gamma;
  }
else {
AKA_mark("lis===-3042-###sois===-127736-###eois===-1277365-###lif===-9-###soif===-###eoif===-453-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");
}
  AKA_mark("lis===3046###sois===127831###eois===127863###lif===13###soif===543###eoif===575###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");state.info_png.chrm_defined = 1;
  AKA_mark("lis===3047###sois===127867###eois===127900###lif===14###soif===579###eoif===612###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");state.info_png.chrm_white_x = wx;
  AKA_mark("lis===3048###sois===127904###eois===127937###lif===15###soif===616###eoif===649###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");state.info_png.chrm_white_y = wy;
  AKA_mark("lis===3049###sois===127941###eois===127972###lif===16###soif===653###eoif===684###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");state.info_png.chrm_red_x = rx;
  AKA_mark("lis===3050###sois===127976###eois===128007###lif===17###soif===688###eoif===719###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");state.info_png.chrm_red_y = ry;
  AKA_mark("lis===3051###sois===128011###eois===128044###lif===18###soif===723###eoif===756###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");state.info_png.chrm_green_x = gx;
  AKA_mark("lis===3052###sois===128048###eois===128081###lif===19###soif===760###eoif===793###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");state.info_png.chrm_green_y = gy;
  AKA_mark("lis===3053###sois===128085###eois===128117###lif===20###soif===797###eoif===829###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");state.info_png.chrm_blue_x = bx;
  AKA_mark("lis===3054###sois===128121###eois===128153###lif===21###soif===833###eoif===865###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");state.info_png.chrm_blue_y = by;

  AKA_mark("lis===3056###sois===128159###eois===128196###lif===23###soif===871###eoif===908###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");std::vector<unsigned char> image2(4);
  AKA_mark("lis===3057###sois===128200###eois===128257###lif===24###soif===912###eoif===969###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");convertToSrgb(image2.data(), image.data(), 1, 1, &state);

  if(AKA_mark("lis===3059###sois===128266###eois===128279###lif===26###soif===978###eoif===991###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)") && (AKA_mark("lis===3059###sois===128266###eois===128279###lif===26###soif===978###eoif===991###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)") && (max_dist == 0))) {
    AKA_mark("lis===3060###sois===128288###eois===128316###lif===27###soif===1000###eoif===1028###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");ASSERT_EQUALS(er, image2[0]);
    AKA_mark("lis===3061###sois===128323###eois===128351###lif===28###soif===1035###eoif===1063###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");ASSERT_EQUALS(eg, image2[1]);
    AKA_mark("lis===3062###sois===128358###eois===128386###lif===29###soif===1070###eoif===1098###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");ASSERT_EQUALS(eb, image2[2]);
  } else {
    AKA_mark("lis===3064###sois===128405###eois===128441###lif===31###soif===1117###eoif===1153###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");ASSERT_NEAR(er, image2[0], max_dist);
    AKA_mark("lis===3065###sois===128448###eois===128484###lif===32###soif===1160###eoif===1196###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");ASSERT_NEAR(eg, image2[1], max_dist);
    AKA_mark("lis===3066###sois===128491###eois===128527###lif===33###soif===1203###eoif===1239###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");ASSERT_NEAR(eb, image2[2], max_dist);
  }

  // Also test the opposite direction

  AKA_mark("lis===3071###sois===128580###eois===128617###lif===38###soif===1292###eoif===1329###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");std::vector<unsigned char> image3(4);
  AKA_mark("lis===3072###sois===128621###eois===128681###lif===39###soif===1333###eoif===1393###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");convertFromSrgb(image3.data(), image2.data(), 1, 1, &state);

  if(AKA_mark("lis===3074###sois===128690###eois===128703###lif===41###soif===1402###eoif===1415###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)") && (AKA_mark("lis===3074###sois===128690###eois===128703###lif===41###soif===1402###eoif===1415###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)") && (max_dist == 0))) {
    AKA_mark("lis===3075###sois===128712###eois===128739###lif===42###soif===1424###eoif===1451###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");ASSERT_EQUALS(r, image3[0]);
    AKA_mark("lis===3076###sois===128746###eois===128773###lif===43###soif===1458###eoif===1485###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");ASSERT_EQUALS(g, image3[1]);
    AKA_mark("lis===3077###sois===128780###eois===128807###lif===44###soif===1492###eoif===1519###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");ASSERT_EQUALS(b, image3[2]);
  } else {
    AKA_mark("lis===3079###sois===128826###eois===128861###lif===46###soif===1538###eoif===1573###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");ASSERT_NEAR(r, image3[0], max_dist);
    AKA_mark("lis===3080###sois===128868###eois===128903###lif===47###soif===1580###eoif===1615###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");ASSERT_NEAR(g, image3[1], max_dist);
    AKA_mark("lis===3081###sois===128910###eois===128945###lif===48###soif===1622###eoif===1657###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb(unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,int= 0)");ASSERT_NEAR(b, image3[2], max_dist);
  }
}

/** Instrumented function testChrmToSrgb() */
void testChrmToSrgb() /* << Aka begin of function void testChrmToSrgb() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testChrmToSrgb.128963.stub"

  AKA_mark("lis===3086###sois===128985###eois===129028###lif===1###soif===27###eoif===70###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");std::cout << "testChrmToSrgb" << std::endl;
  // srgb gamma approximation and chromaticities defined as standard by png (multiplied by 100000)
  AKA_mark("lis===3088###sois===129132###eois===129152###lif===3###soif===174###eoif===194###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");unsigned sg = 45455; // srgb gamma approximation
  AKA_mark("lis===3089###sois===129184###eois===129205###lif===4###soif===226###eoif===247###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");unsigned swx = 31270;
  AKA_mark("lis===3090###sois===129209###eois===129230###lif===5###soif===251###eoif===272###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");unsigned swy = 32900;
  AKA_mark("lis===3091###sois===129234###eois===129255###lif===6###soif===276###eoif===297###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");unsigned srx = 64000;
  AKA_mark("lis===3092###sois===129259###eois===129280###lif===7###soif===301###eoif===322###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");unsigned sry = 33000;
  AKA_mark("lis===3093###sois===129284###eois===129305###lif===8###soif===326###eoif===347###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");unsigned sgx = 30000;
  AKA_mark("lis===3094###sois===129309###eois===129330###lif===9###soif===351###eoif===372###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");unsigned sgy = 60000;
  AKA_mark("lis===3095###sois===129334###eois===129355###lif===10###soif===376###eoif===397###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");unsigned sbx = 15000;
  AKA_mark("lis===3096###sois===129359###eois===129379###lif===11###soif===401###eoif===421###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");unsigned sby = 6000;

  AKA_mark("lis===3098###sois===129385###eois===129462###lif===13###soif===427###eoif===504###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");testChrmToSrgb(sg, swx, swy, srx, sry, sgx, sgy, sbx, sby, 0, 0, 0, 0, 0, 0);
  AKA_mark("lis===3099###sois===129466###eois===129555###lif===14###soif===508###eoif===597###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");testChrmToSrgb(sg, swx, swy, srx, sry, sgx, sgy, sbx, sby, 255, 255, 255, 255, 255, 255);

  AKA_mark("lis===3101###sois===129561###eois===129643###lif===16###soif===603###eoif===685###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");testChrmToSrgb(0, swx, swy, srx, sry, sgx, sgy, sbx, sby, 50, 50, 50, 50, 50, 50);
  AKA_mark("lis===3102###sois===129647###eois===129735###lif===17###soif===689###eoif===777###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");testChrmToSrgb(0, swx, swy, srx, sry, sgx, sgy, sbx, sby, 128, 128, 128, 128, 128, 128);
  AKA_mark("lis===3103###sois===129739###eois===129827###lif===18###soif===781###eoif===869###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");testChrmToSrgb(0, swx, swy, srx, sry, sgx, sgy, sbx, sby, 200, 200, 200, 200, 200, 200);

  AKA_mark("lis===3105###sois===129833###eois===129913###lif===20###soif===875###eoif===955###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");testChrmToSrgb(0, swx, swy, srx, sry, sgx, sgy, sbx, sby, 255, 0, 0, 255, 0, 0);
  AKA_mark("lis===3106###sois===129917###eois===129997###lif===21###soif===959###eoif===1039###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");testChrmToSrgb(0, swx, swy, srx, sry, sgx, sgy, sbx, sby, 0, 255, 0, 0, 255, 0);
  AKA_mark("lis===3107###sois===130001###eois===130081###lif===22###soif===1043###eoif===1123###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");testChrmToSrgb(0, swx, swy, srx, sry, sgx, sgy, sbx, sby, 0, 0, 255, 0, 0, 255);

  // swap red and green chromaticities
  AKA_mark("lis===3110###sois===130127###eois===130207###lif===25###soif===1169###eoif===1249###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");testChrmToSrgb(0, swx, swy, sgx, sgy, srx, sry, sbx, sby, 255, 0, 0, 0, 255, 0);
  AKA_mark("lis===3111###sois===130211###eois===130291###lif===26###soif===1253###eoif===1333###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");testChrmToSrgb(0, swx, swy, sgx, sgy, srx, sry, sbx, sby, 0, 255, 0, 255, 0, 0);
  AKA_mark("lis===3112###sois===130295###eois===130375###lif===27###soif===1337###eoif===1417###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");testChrmToSrgb(0, swx, swy, sgx, sgy, srx, sry, sbx, sby, 0, 0, 255, 0, 0, 255);

  // swap red/green/blue chromaticities
  AKA_mark("lis===3115###sois===130422###eois===130502###lif===30###soif===1464###eoif===1544###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");testChrmToSrgb(0, swx, swy, sgx, sgy, sbx, sby, srx, sry, 255, 0, 0, 0, 255, 0);
  AKA_mark("lis===3116###sois===130506###eois===130586###lif===31###soif===1548###eoif===1628###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");testChrmToSrgb(0, swx, swy, sgx, sgy, sbx, sby, srx, sry, 0, 255, 0, 0, 0, 255);
  AKA_mark("lis===3117###sois===130590###eois===130670###lif===32###soif===1632###eoif===1712###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");testChrmToSrgb(0, swx, swy, sgx, sgy, sbx, sby, srx, sry, 0, 0, 255, 255, 0, 0);

  // different whitepoint does not affect white or gray, due to the relative rendering intent (adaptation)
  AKA_mark("lis===3120###sois===130784###eois===130864###lif===35###soif===1826###eoif===1906###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");testChrmToSrgb(0, 35000, 25000, srx, sry, sgx, sgy, sbx, sby, 0, 0, 0, 0, 0, 0);
  AKA_mark("lis===3121###sois===130868###eois===130954###lif===36###soif===1910###eoif===1996###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");testChrmToSrgb(0, 35000, 25000, srx, sry, sgx, sgy, sbx, sby, 50, 50, 50, 50, 50, 50);
  AKA_mark("lis===3122###sois===130958###eois===131050###lif===37###soif===2000###eoif===2092###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");testChrmToSrgb(0, 35000, 25000, srx, sry, sgx, sgy, sbx, sby, 128, 128, 128, 128, 128, 128);
  AKA_mark("lis===3123###sois===131054###eois===131146###lif===38###soif===2096###eoif===2188###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");testChrmToSrgb(0, 35000, 25000, srx, sry, sgx, sgy, sbx, sby, 200, 200, 200, 200, 200, 200);
  AKA_mark("lis===3124###sois===131150###eois===131242###lif===39###soif===2192###eoif===2284###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testChrmToSrgb()");testChrmToSrgb(0, 35000, 25000, srx, sry, sgx, sgy, sbx, sby, 255, 255, 255, 255, 255, 255);
}



/** Instrumented function testXYZ() */
void testXYZ() /* << Aka begin of function void testXYZ() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testXYZ.131258.stub"

  AKA_mark("lis===3130###sois===131273###eois===131309###lif===1###soif===20###eoif===56###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");std::cout << "testXYZ" << std::endl;
  AKA_mark("lis===3131###sois===131313###eois===131339###lif===2###soif===60###eoif===86###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");unsigned w = 512, h = 512;
  AKA_mark("lis===3132###sois===131343###eois===131387###lif===3###soif===90###eoif===134###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");std::vector<unsigned char> v(w * h * 4 * 2);
  int AKA_BLOCK_LOOP_131391 = 0;
    AKA_mark("lis===3133###sois===131395###eois===131408###lif===4###soif===142###eoif===155###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");
for(size_t i = 0; AKA_mark("lis===3133###sois===131409###eois===131421###lif===4###soif===156###eoif===168###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()") && (AKA_mark("lis===3133###sois===131409###eois===131421###lif===4###soif===156###eoif===168###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()") && (i < v.size())); ({AKA_mark("lis===3133###sois===131423###eois===131426###lif===4###soif===170###eoif===173###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");i++;})) {
        AKA_BLOCK_LOOP_131391++;
        if (AKA_BLOCK_LOOP_131391 > 1000) {
            //break;
        }
    AKA_mark("lis===3134###sois===131435###eois===131460###lif===5###soif===182###eoif===207###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");v[i] = getRandom() & 255;
  }

  // Test sRGB -> XYZ -> sRGB roundtrip

  AKA_mark("lis===3139###sois===131514###eois===131544###lif===10###soif===261###eoif===291###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");unsigned rendering_intent = 3; // test with absolute for now

  // 8-bit
  {
    // Default state, the conversions use 8-bit sRGB
    AKA_mark("lis===3144###sois===131653###eois===131674###lif===15###soif===400###eoif===421###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");lodepng::State state;
    AKA_mark("lis===3145###sois===131680###eois===131712###lif===16###soif===427###eoif===459###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");std::vector<float> f(w * h * 4);
    AKA_mark("lis===3146###sois===131718###eois===131738###lif===17###soif===465###eoif===485###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");float whitepoint[3];
    AKA_mark("lis===3147###sois===131744###eois===131827###lif===18###soif===491###eoif===574###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");assertNoError(lodepng::convertToXYZ(f.data(), whitepoint, v.data(), w, h, &state));

    AKA_mark("lis===3149###sois===131835###eois===131876###lif===20###soif===582###eoif===623###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");std::vector<unsigned char> v2(w * h * 4);
    AKA_mark("lis===3150###sois===131882###eois===131986###lif===21###soif===629###eoif===733###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");assertNoError(lodepng::convertFromXYZ(v2.data(), f.data(), w, h, &state, whitepoint, rendering_intent));

    int AKA_BLOCK_LOOP_131994 = 0;
    AKA_mark("lis===3152###sois===131998###eois===132011###lif===23###soif===745###eoif===758###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");
for(size_t i = 0; AKA_mark("lis===3152###sois===132012###eois===132025###lif===23###soif===759###eoif===772###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()") && (AKA_mark("lis===3152###sois===132012###eois===132025###lif===23###soif===759###eoif===772###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()") && (i < v2.size())); ({AKA_mark("lis===3152###sois===132027###eois===132030###lif===23###soif===774###eoif===777###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");i++;})) {
        AKA_BLOCK_LOOP_131994++;
        if (AKA_BLOCK_LOOP_131994 > 1000) {
            //break;
        }
      AKA_mark("lis===3153###sois===132041###eois===132067###lif===24###soif===788###eoif===814###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");ASSERT_EQUALS(v[i], v2[i]);
    }
  }

  // 16-bit
  {
    // Default state but with 16-bit, the conversions use 16-bit sRGB
    AKA_mark("lis===3160###sois===132177###eois===132198###lif===31###soif===924###eoif===945###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");lodepng::State state;
    AKA_mark("lis===3161###sois===132204###eois===132233###lif===32###soif===951###eoif===980###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");state.info_raw.bitdepth = 16;
    AKA_mark("lis===3162###sois===132239###eois===132271###lif===33###soif===986###eoif===1018###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");std::vector<float> f(w * h * 4);
    AKA_mark("lis===3163###sois===132277###eois===132297###lif===34###soif===1024###eoif===1044###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");float whitepoint[3];
    AKA_mark("lis===3164###sois===132303###eois===132386###lif===35###soif===1050###eoif===1133###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");assertNoError(lodepng::convertToXYZ(f.data(), whitepoint, v.data(), w, h, &state));

    AKA_mark("lis===3166###sois===132394###eois===132435###lif===37###soif===1141###eoif===1182###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");std::vector<unsigned char> v2(w * h * 8);
    AKA_mark("lis===3167###sois===132441###eois===132545###lif===38###soif===1188###eoif===1292###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");assertNoError(lodepng::convertFromXYZ(v2.data(), f.data(), w, h, &state, whitepoint, rendering_intent));

    int AKA_BLOCK_LOOP_132553 = 0;
    AKA_mark("lis===3169###sois===132557###eois===132570###lif===40###soif===1304###eoif===1317###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");
for(size_t i = 0; AKA_mark("lis===3169###sois===132571###eois===132584###lif===40###soif===1318###eoif===1331###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()") && (AKA_mark("lis===3169###sois===132571###eois===132584###lif===40###soif===1318###eoif===1331###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()") && (i < v2.size())); ({AKA_mark("lis===3169###sois===132586###eois===132589###lif===40###soif===1333###eoif===1336###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");i++;})) {
        AKA_BLOCK_LOOP_132553++;
        if (AKA_BLOCK_LOOP_132553 > 1000) {
            //break;
        }
      AKA_mark("lis===3170###sois===132600###eois===132626###lif===41###soif===1347###eoif===1373###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");ASSERT_EQUALS(v[i], v2[i]);
    }
  }

  // Test custom RGB+gamma -> XYZ -> custom RGB+gamma roundtrip

  AKA_mark("lis===3176###sois===132712###eois===132736###lif===47###soif===1459###eoif===1483###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");LodePNGInfo info_custom;
  AKA_mark("lis===3177###sois===132740###eois===132772###lif===48###soif===1487###eoif===1519###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");lodepng_info_init(&info_custom);
  AKA_mark("lis===3178###sois===132776###eois===132805###lif===49###soif===1523###eoif===1552###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");info_custom.gama_defined = 1;
  AKA_mark("lis===3179###sois===132809###eois===132842###lif===50###soif===1556###eoif===1589###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");info_custom.gama_gamma =   30000; // default 45455
  AKA_mark("lis===3180###sois===132863###eois===132892###lif===51###soif===1610###eoif===1639###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");info_custom.chrm_defined = 1;
  AKA_mark("lis===3181###sois===132896###eois===132929###lif===52###soif===1643###eoif===1676###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");info_custom.chrm_white_x = 10000; // default 31270
  AKA_mark("lis===3182###sois===132950###eois===132983###lif===53###soif===1697###eoif===1730###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");info_custom.chrm_white_y = 20000; // default 32900
  AKA_mark("lis===3183###sois===133004###eois===133037###lif===54###soif===1751###eoif===1784###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");info_custom.chrm_red_x =   30000; // default 64000
  AKA_mark("lis===3184###sois===133058###eois===133091###lif===55###soif===1805###eoif===1838###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");info_custom.chrm_red_y =   50000; // default 33000
  AKA_mark("lis===3185###sois===133112###eois===133145###lif===56###soif===1859###eoif===1892###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");info_custom.chrm_green_x = 70000; // default 30000
  AKA_mark("lis===3186###sois===133166###eois===133199###lif===57###soif===1913###eoif===1946###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");info_custom.chrm_green_y = 11000; // default 60000
  AKA_mark("lis===3187###sois===133220###eois===133253###lif===58###soif===1967###eoif===2000###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");info_custom.chrm_blue_x =  13000; // default 15000
  AKA_mark("lis===3188###sois===133274###eois===133307###lif===59###soif===2021###eoif===2054###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");info_custom.chrm_blue_y =  17000; // default 6000

  // 8-bit
  {
    AKA_mark("lis===3192###sois===133348###eois===133369###lif===63###soif===2095###eoif===2116###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");lodepng::State state;
    AKA_mark("lis===3193###sois===133375###eois===133424###lif===64###soif===2122###eoif===2171###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");lodepng_info_copy(&state.info_png, &info_custom);
    AKA_mark("lis===3194###sois===133430###eois===133462###lif===65###soif===2177###eoif===2209###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");std::vector<float> f(w * h * 4);
    AKA_mark("lis===3195###sois===133468###eois===133488###lif===66###soif===2215###eoif===2235###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");float whitepoint[3];
    AKA_mark("lis===3196###sois===133494###eois===133577###lif===67###soif===2241###eoif===2324###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");assertNoError(lodepng::convertToXYZ(f.data(), whitepoint, v.data(), w, h, &state));

    AKA_mark("lis===3198###sois===133585###eois===133626###lif===69###soif===2332###eoif===2373###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");std::vector<unsigned char> v2(w * h * 4);
    AKA_mark("lis===3199###sois===133632###eois===133736###lif===70###soif===2379###eoif===2483###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");assertNoError(lodepng::convertFromXYZ(v2.data(), f.data(), w, h, &state, whitepoint, rendering_intent));

    int AKA_BLOCK_LOOP_133744 = 0;
    AKA_mark("lis===3201###sois===133748###eois===133761###lif===72###soif===2495###eoif===2508###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");
for(size_t i = 0; AKA_mark("lis===3201###sois===133762###eois===133775###lif===72###soif===2509###eoif===2522###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()") && (AKA_mark("lis===3201###sois===133762###eois===133775###lif===72###soif===2509###eoif===2522###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()") && (i < v2.size())); ({AKA_mark("lis===3201###sois===133777###eois===133780###lif===72###soif===2524###eoif===2527###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");i++;})) {
        AKA_BLOCK_LOOP_133744++;
        if (AKA_BLOCK_LOOP_133744 > 1000) {
            //break;
        }
      // Allow near instead of exact due to numerical issues with low values,
      // see description at the 16-bit test below.
      AKA_mark("lis===3204###sois===133922###eois===133943###lif===75###soif===2669###eoif===2690###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");unsigned maxdist = 0;
      if(AKA_mark("lis===3205###sois===133954###eois===133963###lif===76###soif===2701###eoif===2710###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()") && (AKA_mark("lis===3205###sois===133954###eois===133963###lif===76###soif===2701###eoif===2710###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()") && (v[i] <= 2))) {
AKA_mark("lis===3205###sois===133965###eois===133977###lif===76###soif===2712###eoif===2724###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");maxdist = 3;
}

      else {
if(AKA_mark("lis===3206###sois===133993###eois===134002###lif===77###soif===2740###eoif===2749###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()") && (AKA_mark("lis===3206###sois===133993###eois===134002###lif===77###soif===2740###eoif===2749###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()") && (v[i] <= 4))) {
AKA_mark("lis===3206###sois===134004###eois===134016###lif===77###soif===2751###eoif===2763###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");maxdist = 2;
}

      else {
AKA_mark("lis===3207###sois===134029###eois===134041###lif===78###soif===2776###eoif===2788###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");maxdist = 0;
}

}

      AKA_mark("lis===3208###sois===134049###eois===134082###lif===79###soif===2796###eoif===2829###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");ASSERT_NEAR(v[i], v2[i], maxdist);
    }
  }

  // 16-bit
  {
    AKA_mark("lis===3214###sois===134121###eois===134142###lif===85###soif===2868###eoif===2889###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");lodepng::State state;
    AKA_mark("lis===3215###sois===134148###eois===134197###lif===86###soif===2895###eoif===2944###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");lodepng_info_copy(&state.info_png, &info_custom);
    AKA_mark("lis===3216###sois===134203###eois===134232###lif===87###soif===2950###eoif===2979###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");state.info_raw.bitdepth = 16;
    AKA_mark("lis===3217###sois===134238###eois===134270###lif===88###soif===2985###eoif===3017###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");std::vector<float> f(w * h * 4);
    AKA_mark("lis===3218###sois===134276###eois===134296###lif===89###soif===3023###eoif===3043###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");float whitepoint[3];
    AKA_mark("lis===3219###sois===134302###eois===134385###lif===90###soif===3049###eoif===3132###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");assertNoError(lodepng::convertToXYZ(f.data(), whitepoint, v.data(), w, h, &state));

    AKA_mark("lis===3221###sois===134393###eois===134434###lif===92###soif===3140###eoif===3181###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");std::vector<unsigned char> v2(w * h * 8);
    AKA_mark("lis===3222###sois===134440###eois===134544###lif===93###soif===3187###eoif===3291###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");assertNoError(lodepng::convertFromXYZ(v2.data(), f.data(), w, h, &state, whitepoint, rendering_intent));

    int AKA_BLOCK_LOOP_134552 = 0;
    AKA_mark("lis===3224###sois===134556###eois===134569###lif===95###soif===3303###eoif===3316###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");
for(size_t i = 0; AKA_mark("lis===3224###sois===134570###eois===134583###lif===95###soif===3317###eoif===3330###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()") && (AKA_mark("lis===3224###sois===134570###eois===134583###lif===95###soif===3317###eoif===3330###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()") && (i < v2.size())); ({AKA_mark("lis===3224###sois===134585###eois===134591###lif===95###soif===3332###eoif===3338###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");i += 2;})) {
        AKA_BLOCK_LOOP_134552++;
        if (AKA_BLOCK_LOOP_134552 > 1000) {
            //break;
        }
      AKA_mark("lis===3225###sois===134602###eois===134642###lif===96###soif===3349###eoif===3389###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");unsigned a = v[i + 0] * 256u + v[i + 1];
      AKA_mark("lis===3226###sois===134650###eois===134693###lif===97###soif===3397###eoif===3440###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");unsigned a2 = v2[i + 0] * 256u + v2[i + 1];
      // There are numerical issues with low values due to the precision of float,
      // so allow some distance for low values (low compared to 65535).
      // The issue seems to be: the combination of how the gamma correction affects
      // low values and the color conversion matrix operating on single precision
      // floating point. With the sRGB's gamma the problem seems not to happen, maybe
      // because that linear part near 0 behaves better than power.
      // TODO: check if it can be fixed without using double for the image and without slow double precision pow.
      AKA_mark("lis===3234###sois===135297###eois===135318###lif===105###soif===4044###eoif===4065###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");unsigned maxdist = 0;
      if(AKA_mark("lis===3235###sois===135329###eois===135337###lif===106###soif===4076###eoif===4084###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()") && (AKA_mark("lis===3235###sois===135329###eois===135337###lif===106###soif===4076###eoif===4084###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()") && (a < 2048))) {
AKA_mark("lis===3235###sois===135339###eois===135353###lif===106###soif===4086###eoif===4100###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");maxdist = 768;
}

      else {
if(AKA_mark("lis===3236###sois===135369###eois===135377###lif===107###soif===4116###eoif===4124###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()") && (AKA_mark("lis===3236###sois===135369###eois===135377###lif===107###soif===4116###eoif===4124###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()") && (a < 4096))) {
AKA_mark("lis===3236###sois===135379###eois===135392###lif===107###soif===4126###eoif===4139###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");maxdist = 24;
}

      else {
if(AKA_mark("lis===3237###sois===135408###eois===135417###lif===108###soif===4155###eoif===4164###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()") && (AKA_mark("lis===3237###sois===135408###eois===135417###lif===108###soif===4155###eoif===4164###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()") && (a < 16384))) {
AKA_mark("lis===3237###sois===135419###eois===135431###lif===108###soif===4166###eoif===4178###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");maxdist = 4;
}

      else {
AKA_mark("lis===3238###sois===135444###eois===135456###lif===109###soif===4191###eoif===4203###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");maxdist = 2;
}

}

}

      AKA_mark("lis===3239###sois===135464###eois===135491###lif===110###soif===4211###eoif===4238###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");ASSERT_NEAR(a, a2, maxdist);
    }
  }

  AKA_mark("lis===3243###sois===135510###eois===135545###lif===114###soif===4257###eoif===4292###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testXYZ()");lodepng_info_cleanup(&info_custom);
}


/** Instrumented function testICC() */
void testICC() /* << Aka begin of function void testICC() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testICC.135559.stub"

  AKA_mark("lis===3248###sois===135574###eois===135610###lif===1###soif===20###eoif===56###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");std::cout << "testICC" << std::endl;
  // approximate srgb (gamma function not exact)
  AKA_mark("lis===3250###sois===135664###eois===136379###lif===3###soif===110###eoif===825###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");std::string icc_near_srgb_base64 =
      "AAABwHRlc3QCQAAAbW50clJHQiBYWVogB+MAAQABAAAAAAAAYWNzcFNHSSAAAAABAAAAAAAAAAAA"
      "AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y10ZXN0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      "AAAAAAAAAAAAAAAAAAAAAAAJY3BydAAAAPAAAAANZGVzYwAAAQAAAABfd3RwdAAAAWAAAAAUclhZ"
      "WgAAAXQAAAAUZ1hZWgAAAYgAAAAUYlhZWgAAAZwAAAAUclRSQwAAAbAAAAAOZ1RSQwAAAbAAAAAO"
      "YlRSQwAAAbAAAAAOdGV4dAAAAABDQzAgAAAAAGRlc2MAAAAAAAAABXRlc3QAZW5VUwAAAAAAAAAA"
      "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      "AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAG+gAAA49AAAA5BYWVogAAAA"
      "AAAAYpYAALeHAAAY2VhZWiAAAAAAAAAkngAAD4QAALbCY3VydgAAAAAAAAABAjMAAA==";
  AKA_mark("lis===3259###sois===136383###eois===136424###lif===12###soif===829###eoif===870###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");std::vector<unsigned char> icc_near_srgb;
  AKA_mark("lis===3260###sois===136428###eois===136476###lif===13###soif===874###eoif===922###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");fromBase64(icc_near_srgb, icc_near_srgb_base64);
  AKA_mark("lis===3261###sois===136480###eois===136511###lif===14###soif===926###eoif===957###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");lodepng::State state_near_srgb;
  AKA_mark("lis===3262###sois===136515###eois===136615###lif===15###soif===961###eoif===1061###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");lodepng_set_icc(&state_near_srgb.info_png, "near_srgb", icc_near_srgb.data(), icc_near_srgb.size());

  // a made up RGB model.
  // it causes (when converting from this to srgb) green to become softer green, blue to become softer blue, red to become orange.
  // this model intersects sRGB, but some parts are outside of sRGB, some parts of sRGB are outside of this one.
  // so when converting between this and sRGB and clipping the values to 8-bit, and then converting back, the values will not be the same due to this clipping
  AKA_mark("lis===3268###sois===137054###eois===137766###lif===21###soif===1500###eoif===2212###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");std::string icc_orange_base64 =
      "AAABwHRlc3QCQAAAbW50clJHQiBYWVogB+MAAQABAAAAAAAAYWNzcFNHSSAAAAABAAAAAAAAAAAA"
      "AAAAAAAAAAAAAAMAAPbWAAEAAAAA0y10ZXN0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      "AAAAAAAAAAAAAAAAAAAAAAAJY3BydAAAAPAAAAANZGVzYwAAAQAAAABfd3RwdAAAAWAAAAAUclhZ"
      "WgAAAXQAAAAUZ1hZWgAAAYgAAAAUYlhZWgAAAZwAAAAUclRSQwAAAbAAAAAOZ1RSQwAAAbAAAAAO"
      "YlRSQwAAAbAAAAAOdGV4dAAAAABDQzAgAAAAAGRlc2MAAAAAAAAABXRlc3QAZW5VUwAAAAAAAAAA"
      "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      "AAAAAAAAAAAAAFhZWiAAAAAAAAE7uwABAAAAARmZWFlaIAAAAAAAANAHAACTTAAACrRYWVogAAAA"
      "AAAABOMAAFd4AAAFzVhZWiAAAAAAAAAh6gAAFTsAAMKqY3VydgAAAAAAAAABAoAAAA==";
  AKA_mark("lis===3277###sois===137770###eois===137808###lif===30###soif===2216###eoif===2254###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");std::vector<unsigned char> icc_orange;
  AKA_mark("lis===3278###sois===137812###eois===137854###lif===31###soif===2258###eoif===2300###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");fromBase64(icc_orange, icc_orange_base64);
  AKA_mark("lis===3279###sois===137858###eois===137886###lif===32###soif===2304###eoif===2332###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");lodepng::State state_orange;
  AKA_mark("lis===3280###sois===137890###eois===137978###lif===33###soif===2336###eoif===2424###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");lodepng_set_icc(&state_orange.info_png, "orange", icc_orange.data(), icc_orange.size());

  // A made up RGB model which is a superset of sRGB, and has R/G/B shifted around (so it greatly alters colors)
  // Since this is a superset of sRGB, converting from sRGB to this model, and then back, should be lossless, but the opposite not necessarily.
  AKA_mark("lis===3284###sois===138243###eois===138954###lif===37###soif===2689###eoif===3400###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");std::string icc_super_base64 =
      "AAABwHRlc3QCQAAAbW50clJHQiBYWVogB+MAAQABAAAAAAAAYWNzcFNHSSAAAAABAAAAAAAAAAAA"
      "AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y10ZXN0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      "AAAAAAAAAAAAAAAAAAAAAAAJY3BydAAAAPAAAAANZGVzYwAAAQAAAABfd3RwdAAAAWAAAAAUclhZ"
      "WgAAAXQAAAAUZ1hZWgAAAYgAAAAUYlhZWgAAAZwAAAAUclRSQwAAAbAAAAAOZ1RSQwAAAbAAAAAO"
      "YlRSQwAAAbAAAAAOdGV4dAAAAABDQzAgAAAAAGRlc2MAAAAAAAAABXRlc3QAZW5VUwAAAAAAAAAA"
      "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      "AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAFW+AADL3f//70ZYWVogAAAA"
      "AAAAJqD////UAADsUFhZWiAAAAAAAAB6dgAANE////eXY3VydgAAAAAAAAABAjMAAA==";
  AKA_mark("lis===3293###sois===138958###eois===138995###lif===46###soif===3404###eoif===3441###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");std::vector<unsigned char> icc_super;
  AKA_mark("lis===3294###sois===138999###eois===139039###lif===47###soif===3445###eoif===3485###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");fromBase64(icc_super, icc_super_base64);
  AKA_mark("lis===3295###sois===139043###eois===139070###lif===48###soif===3489###eoif===3516###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");lodepng::State state_super;
  AKA_mark("lis===3296###sois===139074###eois===139158###lif===49###soif===3520###eoif===3604###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");lodepng_set_icc(&state_super.info_png, "super", icc_super.data(), icc_super.size());

  // A made up RGB model which is a subset of sRGB, and has R/G/B shifted around (so it greatly alters colors)
  // Since this is a subset of sRGB, converting to sRGB from this model, and then back, should be lossless, but the opposite not necessarily.
  AKA_mark("lis===3300###sois===139419###eois===140128###lif===53###soif===3865###eoif===4574###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");std::string icc_sub_base64 =
      "AAABwHRlc3QCQAAAbW50clJHQiBYWVogB+MAAQABAAAAAAAAYWNzcFNHSSAAAAABAAAAAAAAAAAA"
      "AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y10ZXN0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      "AAAAAAAAAAAAAAAAAAAAAAAJY3BydAAAAPAAAAANZGVzYwAAAQAAAABfd3RwdAAAAWAAAAAUclhZ"
      "WgAAAXQAAAAUZ1hZWgAAAYgAAAAUYlhZWgAAAZwAAAAUclRSQwAAAbAAAAAOZ1RSQwAAAbAAAAAO"
      "YlRSQwAAAbAAAAAOdGV4dAAAAABDQzAgAAAAAGRlc2MAAAAAAAAABXRlc3QAZW5VUwAAAAAAAAAA"
      "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      "AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAHEEAABy1AAAr8ZYWVogAAAA"
      "AAAAV5kAAEPkAAAMs1hZWiAAAAAAAAAuNwAASUcAABazY3VydgAAAAAAAAABAjMAAA==";

  AKA_mark("lis===3310###sois===140134###eois===140169###lif===63###soif===4580###eoif===4615###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");std::vector<unsigned char> icc_sub;
  AKA_mark("lis===3311###sois===140173###eois===140209###lif===64###soif===4619###eoif===4655###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");fromBase64(icc_sub, icc_sub_base64);
  AKA_mark("lis===3312###sois===140213###eois===140238###lif===65###soif===4659###eoif===4684###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");lodepng::State state_sub;
  AKA_mark("lis===3313###sois===140242###eois===140318###lif===66###soif===4688###eoif===4764###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");lodepng_set_icc(&state_sub.info_png, "sub", icc_sub.data(), icc_sub.size());

  // make 8-pixel image with following colors: white, gray, red, darkred, green, darkgreen, blue, darkblue
  AKA_mark("lis===3316###sois===140432###eois===140454###lif===69###soif===4878###eoif===4900###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");unsigned w = 4, h = 2;
  AKA_mark("lis===3317###sois===140458###eois===140504###lif===70###soif===4904###eoif===4950###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");std::vector<unsigned char> im(w * h * 4, 255);
  AKA_mark("lis===3318###sois===140508###eois===140528###lif===71###soif===4954###eoif===4974###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[0 * 4 + 0] = 255; AKA_mark("lis===3318###sois===140529###eois===140549###lif===71###soif===4975###eoif===4995###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[0 * 4 + 1] = 255; AKA_mark("lis===3318###sois===140550###eois===140570###lif===71###soif===4996###eoif===5016###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[0 * 4 + 2] = 255;
  AKA_mark("lis===3319###sois===140574###eois===140594###lif===72###soif===5020###eoif===5040###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[1 * 4 + 0] = 128; AKA_mark("lis===3319###sois===140595###eois===140615###lif===72###soif===5041###eoif===5061###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[1 * 4 + 1] = 128; AKA_mark("lis===3319###sois===140616###eois===140636###lif===72###soif===5062###eoif===5082###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[1 * 4 + 2] = 128;
  AKA_mark("lis===3320###sois===140640###eois===140660###lif===73###soif===5086###eoif===5106###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[2 * 4 + 0] = 255; AKA_mark("lis===3320###sois===140661###eois===140681###lif===73###soif===5107###eoif===5127###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[2 * 4 + 1] =   0; AKA_mark("lis===3320###sois===140682###eois===140702###lif===73###soif===5128###eoif===5148###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[2 * 4 + 2] =   0;
  AKA_mark("lis===3321###sois===140706###eois===140726###lif===74###soif===5152###eoif===5172###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[3 * 4 + 0] = 128; AKA_mark("lis===3321###sois===140727###eois===140747###lif===74###soif===5173###eoif===5193###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[3 * 4 + 1] =   0; AKA_mark("lis===3321###sois===140748###eois===140768###lif===74###soif===5194###eoif===5214###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[3 * 4 + 2] =   0;
  AKA_mark("lis===3322###sois===140772###eois===140792###lif===75###soif===5218###eoif===5238###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[4 * 4 + 0] =   0; AKA_mark("lis===3322###sois===140793###eois===140813###lif===75###soif===5239###eoif===5259###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[4 * 4 + 1] = 255; AKA_mark("lis===3322###sois===140814###eois===140834###lif===75###soif===5260###eoif===5280###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[4 * 4 + 2] =   0;
  AKA_mark("lis===3323###sois===140838###eois===140858###lif===76###soif===5284###eoif===5304###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[5 * 4 + 0] =   0; AKA_mark("lis===3323###sois===140859###eois===140879###lif===76###soif===5305###eoif===5325###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[5 * 4 + 1] = 128; AKA_mark("lis===3323###sois===140880###eois===140900###lif===76###soif===5326###eoif===5346###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[5 * 4 + 2] =   0;
  AKA_mark("lis===3324###sois===140904###eois===140924###lif===77###soif===5350###eoif===5370###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[6 * 4 + 0] =   0; AKA_mark("lis===3324###sois===140925###eois===140945###lif===77###soif===5371###eoif===5391###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[6 * 4 + 1] =   0; AKA_mark("lis===3324###sois===140946###eois===140966###lif===77###soif===5392###eoif===5412###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[6 * 4 + 2] = 255;
  AKA_mark("lis===3325###sois===140970###eois===140990###lif===78###soif===5416###eoif===5436###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[7 * 4 + 0] =   0; AKA_mark("lis===3325###sois===140991###eois===141011###lif===78###soif===5437###eoif===5457###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[7 * 4 + 1] =   0; AKA_mark("lis===3325###sois===141012###eois===141032###lif===78###soif===5458###eoif===5478###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");im[7 * 4 + 2] = 128;


  {
    AKA_mark("lis===3329###sois===141047###eois===141094###lif===82###soif===5493###eoif===5540###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");std::vector<unsigned char> im2(w * h * 4, 255);
    AKA_mark("lis===3330###sois===141100###eois===141173###lif===83###soif===5546###eoif===5619###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");assertNoError(convertToSrgb(im2.data(), im.data(), w, h, &state_orange));

    AKA_mark("lis===3332###sois===141181###eois===141216###lif===85###soif===5627###eoif===5662###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(255, im2[0 * 4 + 0], 1); AKA_mark("lis===3332###sois===141218###eois===141253###lif===85###soif===5664###eoif===5699###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(255, im2[0 * 4 + 1], 1); AKA_mark("lis===3332###sois===141255###eois===141290###lif===85###soif===5701###eoif===5736###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(255, im2[0 * 4 + 2], 1);
    AKA_mark("lis===3333###sois===141297###eois===141332###lif===86###soif===5743###eoif===5778###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(117, im2[1 * 4 + 0], 1); AKA_mark("lis===3333###sois===141334###eois===141369###lif===86###soif===5780###eoif===5815###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(117, im2[1 * 4 + 1], 1); AKA_mark("lis===3333###sois===141371###eois===141406###lif===86###soif===5817###eoif===5852###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(117, im2[1 * 4 + 2], 1);
    AKA_mark("lis===3334###sois===141413###eois===141448###lif===87###soif===5859###eoif===5894###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(255, im2[2 * 4 + 0], 1); AKA_mark("lis===3334###sois===141450###eois===141485###lif===87###soif===5896###eoif===5931###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(151, im2[2 * 4 + 1], 1); AKA_mark("lis===3334###sois===141487###eois===141522###lif===87###soif===5933###eoif===5968###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(  0, im2[2 * 4 + 2], 1);
    AKA_mark("lis===3335###sois===141529###eois===141564###lif===88###soif===5975###eoif===6010###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(145, im2[3 * 4 + 0], 1); AKA_mark("lis===3335###sois===141566###eois===141601###lif===88###soif===6012###eoif===6047###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR( 66, im2[3 * 4 + 1], 1); AKA_mark("lis===3335###sois===141603###eois===141638###lif===88###soif===6049###eoif===6084###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(  0, im2[3 * 4 + 2], 1);
    AKA_mark("lis===3336###sois===141645###eois===141680###lif===89###soif===6091###eoif===6126###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(  0, im2[4 * 4 + 0], 1); AKA_mark("lis===3336###sois===141682###eois===141717###lif===89###soif===6128###eoif===6163###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(209, im2[4 * 4 + 1], 1); AKA_mark("lis===3336###sois===141719###eois===141754###lif===89###soif===6165###eoif===6200###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(  0, im2[4 * 4 + 2], 1);
    AKA_mark("lis===3337###sois===141761###eois===141796###lif===90###soif===6207###eoif===6242###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(  0, im2[5 * 4 + 0], 1); AKA_mark("lis===3337###sois===141798###eois===141833###lif===90###soif===6244###eoif===6279###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR( 95, im2[5 * 4 + 1], 1); AKA_mark("lis===3337###sois===141835###eois===141870###lif===90###soif===6281###eoif===6316###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(  0, im2[5 * 4 + 2], 1);
    AKA_mark("lis===3338###sois===141877###eois===141912###lif===91###soif===6323###eoif===6358###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(  0, im2[6 * 4 + 0], 1); AKA_mark("lis===3338###sois===141914###eois===141949###lif===91###soif===6360###eoif===6395###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR( 66, im2[6 * 4 + 1], 1); AKA_mark("lis===3338###sois===141951###eois===141986###lif===91###soif===6397###eoif===6432###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(255, im2[6 * 4 + 2], 1);
    AKA_mark("lis===3339###sois===141993###eois===142028###lif===92###soif===6439###eoif===6474###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(  0, im2[7 * 4 + 0], 1); AKA_mark("lis===3339###sois===142030###eois===142065###lif===92###soif===6476###eoif===6511###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR( 25, im2[7 * 4 + 1], 1); AKA_mark("lis===3339###sois===142067###eois===142102###lif===92###soif===6513###eoif===6548###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(120, im2[7 * 4 + 2], 1);

    // Cannot test the inverse direction to see if same as original, because the color model here has values
    // outside of sRGB so several values were clipped.
  }

  {
    AKA_mark("lis===3346###sois===142289###eois===142336###lif===99###soif===6735###eoif===6782###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");std::vector<unsigned char> im2(w * h * 4, 255);
    // convert between the two in one and then the other direction
    AKA_mark("lis===3348###sois===142410###eois===142503###lif===101###soif===6856###eoif===6949###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");assertNoError(convertRGBModel(im2.data(), im.data(), w, h, &state_near_srgb, &state_sub, 3));
    AKA_mark("lis===3349###sois===142509###eois===142556###lif===102###soif===6955###eoif===7002###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");std::vector<unsigned char> im3(w * h * 4, 255);
    AKA_mark("lis===3350###sois===142562###eois===142656###lif===103###soif===7008###eoif===7102###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");assertNoError(convertRGBModel(im3.data(), im2.data(), w, h, &state_sub, &state_near_srgb, 3));
    // im3 should be same as im (allow some numerical errors), because we converted from a subset of sRGB to sRGB
    // and then back.
    // If state_super was used here instead (with a superset RGB color model), the test below would faill due to
    // the clipping of the values in the 8-bit chars (due to the superset being out of range for sRGB)
    int AKA_BLOCK_LOOP_143018 = 0;
    AKA_mark("lis===3355###sois===143022###eois===143035###lif===108###soif===7468###eoif===7481###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");
for(size_t i = 0; AKA_mark("lis===3355###sois===143036###eois===143049###lif===108###soif===7482###eoif===7495###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()") && (AKA_mark("lis===3355###sois===143036###eois===143049###lif===108###soif===7482###eoif===7495###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()") && (i < im.size())); ({AKA_mark("lis===3355###sois===143051###eois===143054###lif===108###soif===7497###eoif===7500###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");i++;})) {
        AKA_BLOCK_LOOP_143018++;
        if (AKA_BLOCK_LOOP_143018 > 1000) {
            //break;
        }
      // due to the gamma (trc), small values are very imprecise (due to the 8-bit char step in between), so allow more distance there
      AKA_mark("lis===3357###sois===143201###eois===143237###lif===110###soif===7647###eoif===7683###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");int tolerance = im[i] < 32 ? 16 : 1;
      AKA_mark("lis===3358###sois===143245###eois===143282###lif===111###soif===7691###eoif===7728###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(im[i], im3[i], tolerance);
    }
  }

  {
    AKA_mark("lis===3363###sois===143308###eois===143355###lif===116###soif===7754###eoif===7801###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");std::vector<unsigned char> im2(w * h * 4, 255);
    AKA_mark("lis===3364###sois===143361###eois===143435###lif===117###soif===7807###eoif===7881###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");assertNoError(convertFromSrgb(im2.data(), im.data(), w, h, &state_super));
    AKA_mark("lis===3365###sois===143441###eois===143488###lif===118###soif===7887###eoif===7934###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");std::vector<unsigned char> im3(w * h * 4, 255);
    AKA_mark("lis===3366###sois===143494###eois===143567###lif===119###soif===7940###eoif===8013###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");assertNoError(convertToSrgb(im3.data(), im2.data(), w, h, &state_super));
    int AKA_BLOCK_LOOP_143573 = 0;
    AKA_mark("lis===3367###sois===143577###eois===143590###lif===120###soif===8023###eoif===8036###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");
for(size_t i = 0; AKA_mark("lis===3367###sois===143591###eois===143604###lif===120###soif===8037###eoif===8050###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()") && (AKA_mark("lis===3367###sois===143591###eois===143604###lif===120###soif===8037###eoif===8050###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()") && (i < im.size())); ({AKA_mark("lis===3367###sois===143606###eois===143609###lif===120###soif===8052###eoif===8055###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");i++;})) {
        AKA_BLOCK_LOOP_143573++;
        if (AKA_BLOCK_LOOP_143573 > 1000) {
            //break;
        }
      AKA_mark("lis===3368###sois===143620###eois===143656###lif===121###soif===8066###eoif===8102###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");int tolerance = im[i] < 32 ? 16 : 1;
      AKA_mark("lis===3369###sois===143664###eois===143701###lif===122###soif===8110###eoif===8147###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICC()");ASSERT_NEAR(im[i], im3[i], tolerance);
    }
  }
}


/** Instrumented function testICCGray() */
void testICCGray() /* << Aka begin of function void testICCGray() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testICCGray.143728.stub"

  AKA_mark("lis===3376###sois===143747###eois===143787###lif===1###soif===24###eoif===64###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");std::cout << "testICCGray" << std::endl;
  // Grayscale, Gamma 2.2, sRGB whitepoint
  AKA_mark("lis===3378###sois===143835###eois===144362###lif===3###soif===112###eoif===639###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");std::string icc22_base64 =
      "AAABSHRlc3QCQAAAbW50ckdSQVlYWVogB+MAAQABAAAAAAAAYWNzcFNHSSAAAAABAAAAAAAAAAAA"
      "AAAAAAAAAAAAAAMAAPbWAAEAAAAA0y10ZXN0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      "AAAAAAAAAAAAAAAAAAAAAAAEY3BydAAAALQAAAANZGVzYwAAAMQAAABfd3RwdAAAASQAAAAUa1RS"
      "QwAAATgAAAAOdGV4dAAAAABDQzAgAAAAAGRlc2MAAAAAAAAABXRlc3QAZW5VUwAAAAAAAAAAAAAA"
      "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      "AAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMY3VydgAAAAAAAAABAjMAAA==";
  AKA_mark("lis===3385###sois===144366###eois===144399###lif===10###soif===643###eoif===676###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");std::vector<unsigned char> icc22;
  AKA_mark("lis===3386###sois===144403###eois===144435###lif===11###soif===680###eoif===712###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");fromBase64(icc22, icc22_base64);
  AKA_mark("lis===3387###sois===144439###eois===144462###lif===12###soif===716###eoif===739###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");lodepng::State state22;
  AKA_mark("lis===3388###sois===144466###eois===144504###lif===13###soif===743###eoif===781###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");state22.info_raw.colortype = LCT_GREY;
  AKA_mark("lis===3389###sois===144508###eois===144581###lif===14###soif===785###eoif===858###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");lodepng_set_icc(&state22.info_png, "gray22", icc22.data(), icc22.size());

  // Grayscale, Gamma 2.9, custom whitepoint
  AKA_mark("lis===3392###sois===144633###eois===145160###lif===17###soif===910###eoif===1437###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");std::string icc29_base64 =
      "AAABSHRlc3QCQAAAbW50ckdSQVlYWVogB+MAAQABAAAAAAAAYWNzcFNHSSAAAAABAAAAAAAAAAAA"
      "AAAAAAAAAAAAAAMAAPbWAAEAAAAA0y10ZXN0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      "AAAAAAAAAAAAAAAAAAAAAAAEY3BydAAAALQAAAANZGVzYwAAAMQAAABfd3RwdAAAASQAAAAUa1RS"
      "QwAAATgAAAAOdGV4dAAAAABDQzAgAAAAAGRlc2MAAAAAAAAABXRlc3QAZW5VUwAAAAAAAAAAAAAA"
      "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      "AAAAAAAAAFhZWiAAAAAAAAE7uwABAAAAARmZY3VydgAAAAAAAAABAuYAAA==";
  AKA_mark("lis===3399###sois===145164###eois===145197###lif===24###soif===1441###eoif===1474###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");std::vector<unsigned char> icc29;
  AKA_mark("lis===3400###sois===145201###eois===145233###lif===25###soif===1478###eoif===1510###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");fromBase64(icc29, icc29_base64);
  AKA_mark("lis===3401###sois===145237###eois===145260###lif===26###soif===1514###eoif===1537###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");lodepng::State state29;
  AKA_mark("lis===3402###sois===145264###eois===145302###lif===27###soif===1541###eoif===1579###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");state29.info_raw.colortype = LCT_GREY;
  AKA_mark("lis===3403###sois===145306###eois===145379###lif===28###soif===1583###eoif===1656###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");lodepng_set_icc(&state29.info_png, "gray29", icc29.data(), icc29.size());

  // Grayscale, Gamma 1.5, custom whitepoint
  AKA_mark("lis===3406###sois===145431###eois===145958###lif===31###soif===1708###eoif===2235###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");std::string icc15_base64 =
      "AAABSHRlc3QCQAAAbW50ckdSQVlYWVogB+MAAQABAAAAAAAAYWNzcFNHSSAAAAABAAAAAAAAAAAA"
      "AAAAAAAAAAAAAAMAAPbWAAEAAAAA0y10ZXN0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      "AAAAAAAAAAAAAAAAAAAAAAAEY3BydAAAALQAAAANZGVzYwAAAMQAAABfd3RwdAAAASQAAAAUa1RS"
      "QwAAATgAAAAOdGV4dAAAAABDQzAgAAAAAGRlc2MAAAAAAAAABXRlc3QAZW5VUwAAAAAAAAAAAAAA"
      "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      "AAAAAAAAAFhZWiAAAAAAAAE7uwABAAAAARmZY3VydgAAAAAAAAABAYAAAA==";
  AKA_mark("lis===3413###sois===145962###eois===145995###lif===38###soif===2239###eoif===2272###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");std::vector<unsigned char> icc15;
  AKA_mark("lis===3414###sois===145999###eois===146031###lif===39###soif===2276###eoif===2308###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");fromBase64(icc15, icc15_base64);
  AKA_mark("lis===3415###sois===146035###eois===146058###lif===40###soif===2312###eoif===2335###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");lodepng::State state15;
  AKA_mark("lis===3416###sois===146062###eois===146100###lif===41###soif===2339###eoif===2377###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");state15.info_raw.colortype = LCT_GREY;
  AKA_mark("lis===3417###sois===146104###eois===146177###lif===42###soif===2381###eoif===2454###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");lodepng_set_icc(&state15.info_png, "gray15", icc15.data(), icc15.size());


  // make 8-pixel grayscale image with different shades of gray
  AKA_mark("lis===3421###sois===146250###eois===146272###lif===46###soif===2527###eoif===2549###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");unsigned w = 4, h = 2;
  AKA_mark("lis===3422###sois===146276###eois===146318###lif===47###soif===2553###eoif===2595###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");std::vector<unsigned char> im(w * h, 255);
  AKA_mark("lis===3423###sois===146322###eois===146332###lif===48###soif===2599###eoif===2609###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");im[0] = 0;
  AKA_mark("lis===3424###sois===146336###eois===146347###lif===49###soif===2613###eoif===2624###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");im[1] = 40;
  AKA_mark("lis===3425###sois===146351###eois===146362###lif===50###soif===2628###eoif===2639###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");im[2] = 80;
  AKA_mark("lis===3426###sois===146366###eois===146378###lif===51###soif===2643###eoif===2655###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");im[3] = 120;
  AKA_mark("lis===3427###sois===146382###eois===146394###lif===52###soif===2659###eoif===2671###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");im[4] = 160;
  AKA_mark("lis===3428###sois===146398###eois===146410###lif===53###soif===2675###eoif===2687###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");im[5] = 200;
  AKA_mark("lis===3429###sois===146414###eois===146426###lif===54###soif===2691###eoif===2703###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");im[6] = 240;
  AKA_mark("lis===3430###sois===146430###eois===146442###lif===55###soif===2707###eoif===2719###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");im[7] = 255;

  {
    AKA_mark("lis===3433###sois===146455###eois===146498###lif===58###soif===2732###eoif===2775###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");std::vector<unsigned char> im2(w * h, 255);
    AKA_mark("lis===3434###sois===146504###eois===146572###lif===59###soif===2781###eoif===2849###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");assertNoError(convertToSrgb(im2.data(), im.data(), w, h, &state29));

    AKA_mark("lis===3436###sois===146580###eois===146605###lif===61###soif===2857###eoif===2882###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");ASSERT_NEAR(0, im2[0], 1);
    AKA_mark("lis===3437###sois===146612###eois===146638###lif===62###soif===2889###eoif===2915###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");ASSERT_NEAR(15, im2[1], 1);
    AKA_mark("lis===3438###sois===146645###eois===146671###lif===63###soif===2922###eoif===2948###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");ASSERT_NEAR(52, im2[2], 1);
    AKA_mark("lis===3439###sois===146678###eois===146704###lif===64###soif===2955###eoif===2981###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");ASSERT_NEAR(94, im2[3], 1);
    AKA_mark("lis===3440###sois===146711###eois===146738###lif===65###soif===2988###eoif===3015###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");ASSERT_NEAR(139, im2[4], 1);
    AKA_mark("lis===3441###sois===146745###eois===146772###lif===66###soif===3022###eoif===3049###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");ASSERT_NEAR(187, im2[5], 1);
    AKA_mark("lis===3442###sois===146779###eois===146806###lif===67###soif===3056###eoif===3083###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");ASSERT_NEAR(236, im2[6], 1);
    AKA_mark("lis===3443###sois===146813###eois===146840###lif===68###soif===3090###eoif===3117###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");ASSERT_NEAR(255, im2[7], 1);

    AKA_mark("lis===3445###sois===146849###eois===146892###lif===70###soif===3126###eoif===3169###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");std::vector<unsigned char> im3(w * h, 255);
    AKA_mark("lis===3446###sois===146898###eois===146969###lif===71###soif===3175###eoif===3246###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");assertNoError(convertFromSrgb(im3.data(), im2.data(), w, h, &state29));

    int AKA_BLOCK_LOOP_146977 = 0;
    AKA_mark("lis===3448###sois===146981###eois===146994###lif===73###soif===3258###eoif===3271###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");
for(size_t i = 0; AKA_mark("lis===3448###sois===146995###eois===147000###lif===73###soif===3272###eoif===3277###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()") && (AKA_mark("lis===3448###sois===146995###eois===147000###lif===73###soif===3272###eoif===3277###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()") && (i < 8)); ({AKA_mark("lis===3448###sois===147002###eois===147005###lif===73###soif===3279###eoif===3282###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");i++;})) {
        AKA_BLOCK_LOOP_146977++;
        if (AKA_BLOCK_LOOP_146977 > 1000) {
            //break;
        }
      AKA_mark("lis===3449###sois===147016###eois===147045###lif===74###soif===3293###eoif===3322###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");ASSERT_NEAR(im[i], im3[i], 1);
    }
  }

  {
    AKA_mark("lis===3454###sois===147071###eois===147115###lif===79###soif===3348###eoif===3392###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");std::vector<unsigned char> im2(w * h , 255);
    AKA_mark("lis===3455###sois===147121###eois===147204###lif===80###soif===3398###eoif===3481###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");assertNoError(convertRGBModel(im2.data(), im.data(), w, h, &state22, &state15, 3));
    AKA_mark("lis===3456###sois===147210###eois===147253###lif===81###soif===3487###eoif===3530###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");std::vector<unsigned char> im3(w * h, 255);
    AKA_mark("lis===3457###sois===147259###eois===147343###lif===82###soif===3536###eoif===3620###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");assertNoError(convertRGBModel(im3.data(), im2.data(), w, h, &state15, &state22, 3));
    int AKA_BLOCK_LOOP_147349 = 0;
    AKA_mark("lis===3458###sois===147353###eois===147366###lif===83###soif===3630###eoif===3643###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");
for(size_t i = 0; AKA_mark("lis===3458###sois===147367###eois===147380###lif===83###soif===3644###eoif===3657###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()") && (AKA_mark("lis===3458###sois===147367###eois===147380###lif===83###soif===3644###eoif===3657###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()") && (i < im.size())); ({AKA_mark("lis===3458###sois===147382###eois===147385###lif===83###soif===3659###eoif===3662###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");i++;})) {
        AKA_BLOCK_LOOP_147349++;
        if (AKA_BLOCK_LOOP_147349 > 1000) {
            //break;
        }
      AKA_mark("lis===3459###sois===147396###eois===147431###lif===84###soif===3673###eoif===3708###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");int tolerance = im[i] < 16 ? 8 : 1;
      AKA_mark("lis===3460###sois===147439###eois===147476###lif===85###soif===3716###eoif===3753###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testICCGray()");ASSERT_NEAR(im[i], im3[i], tolerance);
    }
  }
}

// input is base64-encoded png image and base64-encoded RGBA pixels (8 bit per channel)
/** Instrumented function testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&) */
void testBase64Image(const std::string& png64, bool expect_error, unsigned expect_w, unsigned expect_h, const std::string& expect_md5) /* << Aka begin of function void testBase64Image(const std::string& png64, bool expect_error, unsigned expect_w, unsigned expect_h, const std::string& expect_md5) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testBase64Image.147590.stub"

  AKA_mark("lis===3467###sois===147725###eois===147764###lif===1###soif===140###eoif===179###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");std::vector<unsigned char> png, pixels;
  AKA_mark("lis===3468###sois===147768###eois===147791###lif===2###soif===183###eoif===206###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");fromBase64(png, png64);

  AKA_mark("lis===3470###sois===147797###eois===147832###lif===4###soif===212###eoif===247###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");std::vector<unsigned char> decoded;
  AKA_mark("lis===3471###sois===147836###eois===147850###lif===5###soif===251###eoif===265###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");unsigned w, h;
  AKA_mark("lis===3472###sois===147854###eois===147907###lif===6###soif===269###eoif===322###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");unsigned error = lodepng::decode(decoded, w, h, png);
  if(AKA_mark("lis===3473###sois===147914###eois===147926###lif===7###soif===329###eoif===341###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)") && (AKA_mark("lis===3473###sois===147914###eois===147926###lif===7###soif===329###eoif===341###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)") && (expect_error))) {
    AKA_mark("lis===3474###sois===147935###eois===147966###lif===8###soif===350###eoif===381###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");ASSERT_EQUALS(true, error != 0);
    AKA_mark("lis===3475###sois===147973###eois===147980###lif===9###soif===388###eoif===395###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");return;
  }
else {
AKA_mark("lis===-3473-###sois===-147914-###eois===-14791412-###lif===-7-###soif===-###eoif===-341-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");
}
  AKA_mark("lis===3477###sois===147989###eois===148010###lif===11###soif===404###eoif===425###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");assertNoError(error);
  AKA_mark("lis===3478###sois===148014###eois===148040###lif===12###soif===429###eoif===455###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");ASSERT_EQUALS(expect_w, w);
  AKA_mark("lis===3479###sois===148045###eois===148071###lif===13###soif===460###eoif===486###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");ASSERT_EQUALS(expect_h, h);
  AKA_mark("lis===3480###sois===148076###eois===148118###lif===14###soif===491###eoif===533###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");ASSERT_EQUALS(expect_md5, md5sum(decoded));

  // test decoding without alpha channel
  {
    AKA_mark("lis===3484###sois===148174###eois===148199###lif===18###soif===589###eoif===614###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");size_t numpixels = w * h;
    AKA_mark("lis===3485###sois===148205###eois===148260###lif===19###soif===620###eoif===675###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");std::vector<unsigned char> expected_rgb(numpixels * 3);
    int AKA_BLOCK_LOOP_148266 = 0;
    AKA_mark("lis===3486###sois===148270###eois===148283###lif===20###soif===685###eoif===698###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");
for(size_t i = 0; AKA_mark("lis===3486###sois===148284###eois===148297###lif===20###soif===699###eoif===712###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)") && (AKA_mark("lis===3486###sois===148284###eois===148297###lif===20###soif===699###eoif===712###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)") && (i < numpixels)); ({AKA_mark("lis===3486###sois===148299###eois===148302###lif===20###soif===714###eoif===717###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");i++;})) {
        AKA_BLOCK_LOOP_148266++;
        if (AKA_BLOCK_LOOP_148266 > 1000) {
            //break;
        }
      AKA_mark("lis===3487###sois===148313###eois===148358###lif===21###soif===728###eoif===773###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");expected_rgb[i * 3 + 0] = decoded[i * 4 + 0];
      AKA_mark("lis===3488###sois===148366###eois===148411###lif===22###soif===781###eoif===826###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");expected_rgb[i * 3 + 1] = decoded[i * 4 + 1];
      AKA_mark("lis===3489###sois===148419###eois===148464###lif===23###soif===834###eoif===879###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");expected_rgb[i * 3 + 2] = decoded[i * 4 + 2];
    }
    AKA_mark("lis===3491###sois===148477###eois===148508###lif===25###soif===892###eoif===923###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");std::vector<unsigned char> rgb;
    AKA_mark("lis===3492###sois===148514###eois===148576###lif===26###soif===929###eoif===991###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");ASSERT_NO_PNG_ERROR(lodepng::decode(rgb, w, h, png, LCT_RGB));
    AKA_mark("lis===3493###sois===148582###eois===148608###lif===27###soif===997###eoif===1023###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");ASSERT_EQUALS(expect_w, w);
    AKA_mark("lis===3494###sois===148615###eois===148641###lif===28###soif===1030###eoif===1056###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");ASSERT_EQUALS(expect_h, h);
    AKA_mark("lis===3495###sois===148648###eois===148680###lif===29###soif===1063###eoif===1095###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");ASSERT_EQUALS(expected_rgb, rgb);
  }

  // test decoding 16-bit RGBA
  // TODO: get an additional md5sum for 16-bit pixels instead to compare with
  {
    AKA_mark("lis===3501###sois===148810###eois===148835###lif===35###soif===1225###eoif===1250###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");size_t numpixels = w * h;
    AKA_mark("lis===3502###sois===148841###eois===148875###lif===36###soif===1256###eoif===1290###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");std::vector<unsigned char> rgba16;
    AKA_mark("lis===3503###sois===148881###eois===148951###lif===37###soif===1296###eoif===1366###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");ASSERT_NO_PNG_ERROR(lodepng::decode(rgba16, w, h, png, LCT_RGBA, 16));
    AKA_mark("lis===3504###sois===148957###eois===148983###lif===38###soif===1372###eoif===1398###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");ASSERT_EQUALS(expect_w, w);
    AKA_mark("lis===3505###sois===148990###eois===149016###lif===39###soif===1405###eoif===1431###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");ASSERT_EQUALS(expect_h, h);
    AKA_mark("lis===3506###sois===149023###eois===149071###lif===40###soif===1438###eoif===1486###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");std::vector<unsigned char> rgba8(numpixels * 4);
    int AKA_BLOCK_LOOP_149077 = 0;
    AKA_mark("lis===3507###sois===149081###eois===149094###lif===41###soif===1496###eoif===1509###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");
for(size_t i = 0; AKA_mark("lis===3507###sois===149095###eois===149108###lif===41###soif===1510###eoif===1523###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)") && (AKA_mark("lis===3507###sois===149095###eois===149108###lif===41###soif===1510###eoif===1523###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)") && (i < numpixels)); ({AKA_mark("lis===3507###sois===149110###eois===149113###lif===41###soif===1525###eoif===1528###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");i++;})) {
        AKA_BLOCK_LOOP_149077++;
        if (AKA_BLOCK_LOOP_149077 > 1000) {
            //break;
        }
      AKA_mark("lis===3508###sois===149124###eois===149161###lif===42###soif===1539###eoif===1576###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");rgba8[i * 4 + 0] = rgba16[i * 8 + 0];
      AKA_mark("lis===3509###sois===149169###eois===149206###lif===43###soif===1584###eoif===1621###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");rgba8[i * 4 + 1] = rgba16[i * 8 + 2];
      AKA_mark("lis===3510###sois===149214###eois===149251###lif===44###soif===1629###eoif===1666###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");rgba8[i * 4 + 2] = rgba16[i * 8 + 4];
      AKA_mark("lis===3511###sois===149259###eois===149296###lif===45###soif===1674###eoif===1711###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");rgba8[i * 4 + 3] = rgba16[i * 8 + 6];
    }
    AKA_mark("lis===3513###sois===149309###eois===149338###lif===47###soif===1724###eoif===1753###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");ASSERT_EQUALS(decoded, rgba8);
  }

  // test decoding 16-bit RGB
  {
    AKA_mark("lis===3518###sois===149388###eois===149413###lif===52###soif===1803###eoif===1828###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");size_t numpixels = w * h;
    AKA_mark("lis===3519###sois===149419###eois===149474###lif===53###soif===1834###eoif===1889###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");std::vector<unsigned char> expected_rgb(numpixels * 3);
    int AKA_BLOCK_LOOP_149480 = 0;
    AKA_mark("lis===3520###sois===149484###eois===149497###lif===54###soif===1899###eoif===1912###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");
for(size_t i = 0; AKA_mark("lis===3520###sois===149498###eois===149511###lif===54###soif===1913###eoif===1926###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)") && (AKA_mark("lis===3520###sois===149498###eois===149511###lif===54###soif===1913###eoif===1926###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)") && (i < numpixels)); ({AKA_mark("lis===3520###sois===149513###eois===149516###lif===54###soif===1928###eoif===1931###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");i++;})) {
        AKA_BLOCK_LOOP_149480++;
        if (AKA_BLOCK_LOOP_149480 > 1000) {
            //break;
        }
      AKA_mark("lis===3521###sois===149527###eois===149572###lif===55###soif===1942###eoif===1987###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");expected_rgb[i * 3 + 0] = decoded[i * 4 + 0];
      AKA_mark("lis===3522###sois===149580###eois===149625###lif===56###soif===1995###eoif===2040###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");expected_rgb[i * 3 + 1] = decoded[i * 4 + 1];
      AKA_mark("lis===3523###sois===149633###eois===149678###lif===57###soif===2048###eoif===2093###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");expected_rgb[i * 3 + 2] = decoded[i * 4 + 2];
    }
    AKA_mark("lis===3525###sois===149691###eois===149724###lif===59###soif===2106###eoif===2139###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");std::vector<unsigned char> rgb16;
    AKA_mark("lis===3526###sois===149730###eois===149798###lif===60###soif===2145###eoif===2213###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");ASSERT_NO_PNG_ERROR(lodepng::decode(rgb16, w, h, png, LCT_RGB, 16));
    AKA_mark("lis===3527###sois===149804###eois===149830###lif===61###soif===2219###eoif===2245###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");ASSERT_EQUALS(expect_w, w);
    AKA_mark("lis===3528###sois===149837###eois===149863###lif===62###soif===2252###eoif===2278###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");ASSERT_EQUALS(expect_h, h);
    AKA_mark("lis===3529###sois===149870###eois===149917###lif===63###soif===2285###eoif===2332###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");std::vector<unsigned char> rgb8(numpixels * 3);
    int AKA_BLOCK_LOOP_149923 = 0;
    AKA_mark("lis===3530###sois===149927###eois===149940###lif===64###soif===2342###eoif===2355###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");
for(size_t i = 0; AKA_mark("lis===3530###sois===149941###eois===149954###lif===64###soif===2356###eoif===2369###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)") && (AKA_mark("lis===3530###sois===149941###eois===149954###lif===64###soif===2356###eoif===2369###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)") && (i < numpixels)); ({AKA_mark("lis===3530###sois===149956###eois===149959###lif===64###soif===2371###eoif===2374###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");i++;})) {
        AKA_BLOCK_LOOP_149923++;
        if (AKA_BLOCK_LOOP_149923 > 1000) {
            //break;
        }
      AKA_mark("lis===3531###sois===149970###eois===150005###lif===65###soif===2385###eoif===2420###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");rgb8[i * 3 + 0] = rgb16[i * 6 + 0];
      AKA_mark("lis===3532###sois===150013###eois===150048###lif===66###soif===2428###eoif===2463###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");rgb8[i * 3 + 1] = rgb16[i * 6 + 2];
      AKA_mark("lis===3533###sois===150056###eois===150091###lif===67###soif===2471###eoif===2506###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");rgb8[i * 3 + 2] = rgb16[i * 6 + 4];
    }
    AKA_mark("lis===3535###sois===150104###eois===150137###lif===69###soif===2519###eoif===2552###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");ASSERT_EQUALS(expected_rgb, rgb8);
  }

  // test encode/decode
  // TODO: also test state, for text chunks, ...
  {
    AKA_mark("lis===3541###sois===150231###eois===150265###lif===75###soif===2646###eoif===2680###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");std::vector<unsigned char> rgba16;
    AKA_mark("lis===3542###sois===150271###eois===150341###lif===76###soif===2686###eoif===2756###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");ASSERT_NO_PNG_ERROR(lodepng::decode(rgba16, w, h, png, LCT_RGBA, 16));

    AKA_mark("lis===3544###sois===150349###eois===150382###lif===78###soif===2764###eoif===2797###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");std::vector<unsigned char> png_b;
    AKA_mark("lis===3545###sois===150388###eois===150460###lif===79###soif===2803###eoif===2875###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");ASSERT_NO_PNG_ERROR(lodepng::encode(png_b, rgba16, w, h, LCT_RGBA, 16));

    AKA_mark("lis===3547###sois===150468###eois===150504###lif===81###soif===2883###eoif===2919###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");std::vector<unsigned char> rgba16_b;
    AKA_mark("lis===3548###sois===150510###eois===150584###lif===82###soif===2925###eoif===2999###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");ASSERT_NO_PNG_ERROR(lodepng::decode(rgba16_b, w, h, png_b, LCT_RGBA, 16));
    AKA_mark("lis===3549###sois===150590###eois===150621###lif===83###soif===3005###eoif===3036###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testBase64Image(std::string const&,bool,unsigned,unsigned,std::string const&)");ASSERT_EQUALS(rgba16, rgba16_b);
  }
}
// input is base64-encoded png image and base64-encoded RGBA pixels (8 bit per channel)
/** Instrumented function testPngSuiteImage(std::string const&,std::string const&,bool,unsigned,unsigned,std::string const&) */
void testPngSuiteImage(const std::string& png64, const std::string& name, bool expect_error, unsigned expect_w, unsigned expect_h, const std::string& expect_md5) /* << Aka begin of function void testPngSuiteImage(const std::string& png64, const std::string& name, bool expect_error, unsigned expect_w, unsigned expect_h, const std::string& expect_md5) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuiteImage(std::string const&,std::string const&,bool,unsigned,unsigned,std::string const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testPngSuiteImage.150726.stub"

  AKA_mark("lis===3554###sois===150888###eois===150944###lif===1###soif===167###eoif===223###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuiteImage(std::string const&,std::string const&,bool,unsigned,unsigned,std::string const&)");std::cout << "testPngSuiteImage: " << name << std::endl;

  AKA_mark("lis===3556###sois===150950###eois===151019###lif===3###soif===229###eoif===298###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuiteImage(std::string const&,std::string const&,bool,unsigned,unsigned,std::string const&)");testBase64Image(png64, expect_error, expect_w, expect_h, expect_md5);
}


// Tests base64-encoded PngSuite images' pixels against expected md5 sum of their pixels
/** Instrumented function testPngSuite() */
void testPngSuite() /* << Aka begin of function void testPngSuite() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testPngSuite.151123.stub"

  AKA_mark("lis===3562###sois===151143###eois===151184###lif===1###soif===25###eoif===66###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");std::cout << "testPngSuite" << std::endl;
  /*
  LICENSE of the PngSuite images:

  PngSuite
  --------

  Permission to use, copy, modify and distribute these images for any
  purpose and without fee is hereby granted.


  (c) Willem van Schaik, 1996, 2011
  */

  AKA_mark("lis===3576###sois===151423###eois===151811###lif===15###soif===305###eoif===693###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQAAAAEsBnfPAAAABGdBTUEAAYagMeiWXwAAAJBJREFUeJwtjTEOwjAMRd/GgsQVGHoApC4Zergeg7En4AxWOQATY6WA2FgsZckQNXxLeLC/v99PcBaMGeesuXCj8tHe2Wlc5b9ZY9/ZKq9Mn9kn6kSeZIffW5w255m5G98IK01L1AFP5AFLAat6F67mlNKNMootY4N6cEUeFkhwLZqf9KEdL3pRqiHloYx//QCU41EdZhgi8gAAAABJRU5ErkJggg==",
      "basi0g01.png", false, 32, 32, "4336909be7bff35103266c9b215ab516");
  AKA_mark("lis===3578###sois===151815###eois===152119###lif===17###soif===697###eoif===1001###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgAAAAFrpg0fAAAABGdBTUEAAYagMeiWXwAAAFFJREFUeJxjUGLoYADhcoa7YJyTw3DsGJSUlgYxNm5EZ7OuZ13PEPUh6gMDkMHKAGRE4RZDSCBkEUpIUscQuuo/GMMZGAIMMEEEA6YKwaCSOQCcUoBNhbbZfQAAAABJRU5ErkJggg==",
      "basi0g02.png", false, 32, 32, "b16bee35e71dce6c08c2447a62ccedea");
  AKA_mark("lis===3580###sois===152123###eois===152551###lif===19###soif===1005###eoif===1433###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAAAAAHk5vi/AAAABGdBTUEAAYagMeiWXwAAAK5JREFUeJxljlERwjAQRBccFBwUHAQchDoodRDqINRBwEHBQcFBwEGRECRUA5lJmM7Nftzs7bub28OywrZFdUX7xLrBvkNzR/fGanc8I9YNsV6I9cViczilQWwuaRqbR1qJzSftoSiVro39q0PWHlkHZPXIOiJrQNZpvsMH+TJHcBaHcjq/Mf+DoihLpbSua2OsZSCtcwyk7XsG0g4DA2m9ZyDtODKQNgQG0k4TgR8ngeup000HFgAAAABJRU5ErkJggg==",
      "basi0g04.png", false, 32, 32, "0b40ec7e4231183b51e1c23f818a955f");
  AKA_mark("lis===3582###sois===152555###eois===152991###lif===21###soif===1437###eoif===1873###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAAAAAEhFhW+AAAABGdBTUEAAYagMeiWXwAAALVJREFUeJy1kF0KwjAQhJ26yBxCxHv4Q88lPoh4sKoXEQ8hS9ymviQPXSGllM7T5JvNMiwWJBFVFRVJmKpCSCKoKlYkoaqKiyTFj5mZmQgTCYmgSgDXbCwJ52zyGtyyCTk6ZVNXfaFxQKLFnnDsv6OI3/HwO4L7gr0H8F98sT+AuwetL9YMARw8WI7v8fTgO77HzoMtypJ66gBeQxtiV5Y0UwewGchF5r/Du5h2nYT577AupsAPm7n/RegfnygAAAAASUVORK5CYII=",
      "basi0g08.png", false, 32, 32, "f6470f9f6296c5109e2bd730fe203773");
  AKA_mark("lis===3584###sois===152995###eois===153491###lif===23###soif===1877###eoif===2373###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAAAAAFxhsn9AAAABGdBTUEAAYagMeiWXwAAAOJJREFUeJy1kTsOwjAQRMdJCqj4XYHD5DAcj1Okyg2okCyBRLOSC0BDERKCI7xJVmgaa/X8PFo7oESJEtkaTeLDjdjjgCMe7eTE96FGd3AL7HvZsdNEaJMVo0GNGm775bgwW6Afj/SAjAY+JsYNXIHtz2xYxTXiUoOek4AbFcCnDYEK4NMGsgXcMrGHJytkBX5HIP8FAhVANIMVIBVANMPfgUAFEM3wAVyG5cxcecY5/dup3LVFa1HXmA61LY59f6Ygp1Eg1gZGQaBRILYGdxoFYmtAGgXx9YmCfPD+RMHwuuAFVpjuiRT///4AAAAASUVORK5CYII=",
      "basi0g16.png", false, 32, 32, "a14e204bbf905586d3763f3cc5dcb2f3");
  AKA_mark("lis===3586###sois===153495###eois===154011###lif===25###soif===2377###eoif===2893###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAGLH901AAAABGdBTUEAAYagMeiWXwAAAPJJREFUeJzVk0GqBCEMRKvAe3gTPVnTczO9iddoaLVm0Qz0Z1r4WWQxoRZifFaIkZKA4xIlfdagpM8aAQCO4xKl88acN+b8w/R+Z3agf4va9bQP7tLTPgJeL/T+LUpj4aFtkRgLc22LxFhUxW2VGGP0p+C2bc8JqQDz/6KUjUCR5TyobASKZDkPZitQSpmWYM7ZBhgrmgGovgClZASm7eGCsSI7QCXjLE3jQwRjRXaAyTqtpsmbc4Zaqy/AlJINkBogP13f4ZcNKEVngybP+6/v/NMGVPRtEZvkeT+Cc4f8DRidW8TWmjwj1Fp/24AxRleDN99NCjEh/D0zAAAAAElFTkSuQmCC",
      "basi2c08.png", false, 32, 32, "512c3874e30061e623739e2f9adc4eba");
  AKA_mark("lis===3588###sois===154015###eois===154907###lif===27###soif===2897###eoif===3789###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAIAAAHbjwF2AAAABGdBTUEAAYagMeiWXwAAAgpJREFUeJzVliFz4zAQhT/PGDjMYaGBgYWlPlZ4f6E/oTCFLjtYeLSwsDCBuX9wMAcLU+awV6CokSu7kWO58Qns7LxZvX3PK0VJJAnWbwDrHdg8tUl9ZUVq644QQJE7OywEUEyTbdWpx+LG67G48XpY6NBD2lbwbw+fYuUhe2ujobdvbJ6Z6GlqKnLixPseTUUukuyWUrgHSG0Stmab4A2zjZEUsMGWHjdUYaVfdmgqhcNnrW9oL/U6nCo1MZF2S3i7B9jdw8l8GVDzkWdFx7mFLHPC8hJgWkZqUCcFyDOAaci56E76uUHrOTqX1Mn9YxSDFCCfHB00NOhH6tY4DeKR1vJqJcHrtQR/XyTYXEnw8izB00KCxycJyrkEd78luJ1J8PNRgiKX4OqXBPNMgryUACRI7eUYZuVlau9dfGo4XLTYDmpTjOugTm3ySA6aqE3e20E7tcl7ODhFbfLU/sLHpwaYPnR00IX66CCoQXdqgwc4OJc6wEE/6i8dxKBucRCP2nMQm9rkiVStYL+Geqw85Ex8FYmnEc+Kgd+bIZZ52W0c7D2Lu+qiASYm34x4Au2iAbLS4CObQJhoFx/BBLqLdvELTaCfaBf/xgnEE+3iZ/0furRogMkPgOzPABMYXrSLR7oD3yvare8xgcuJdvGOExiHaBcPmMD4RLt4ywTGLdrFnQn8P6Jd/B2kFN6z3xNE9wAAAABJRU5ErkJggg==",
      "basi2c16.png", false, 32, 32, "a3774d09367dd147a3539d2d2f6ca133");
  AKA_mark("lis===3590###sois===154911###eois===155183###lif===29###soif===3793###eoif===4065###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAAE+s9ghAAAABGdBTUEAAYagMeiWXwAAAAZQTFRF7v8iImb/bBrSJgAAAClJREFUeJxjYICCD1C4CgpD0bCxMcOZM9hJCININj8QQIgPQAAhKBADAAm6Qi12qcOeAAAAAElFTkSuQmCC",
      "basi3p01.png", false, 32, 32, "1ba59f527ff2cfdc68bb0c3487862e91");
  AKA_mark("lis===3592###sois===155187###eois===155543###lif===31###soif===4069###eoif===4425###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAF5E6LxAAAABGdBTUEAAYagMeiWXwAAAANzQklUAQEBfC53ggAAAAxQTFRFAP8A/wAA//8AAAD/ZT8rugAAAFFJREFUeJxjeMewmwGEXRgEwdjMjCE5GUreuAFi9Pais78u+LqAgT+KP4oByPjKAGTw4xZDSCBkEUpIUvc/dBUYIxiYQqugLAQDKvEfwaCSOQC0Wn3pH3XhAwAAAABJRU5ErkJggg==",
      "basi3p02.png", false, 32, 32, "0528e9ac365252a8c0e2d9ced8a2cc6b");
  AKA_mark("lis===3594###sois===155547###eois===156079###lif===33###soif===4429###eoif===4961###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAAH2U1dRAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAC1QTFRFIgD/AP//iAD/Iv8AAJn//2YA3QD/d/8A/wAAAP+Z3f8A/wC7/7sAAET/AP9E0rBJvQAAALZJREFUeJxj6KljOP6QoU6W4eElhihLhsVTGCwdGKawMcQst5vIAMS+DEDMxADE2Qytp4pfQiSADBGILJBxAaIEyFCDqOsIPbOq3PjdTAYoLcgApV0YoPRdBhjNAKWVGKB0GgOU3o0wB9NATJMxrcC0C9NSTNsxnYFwT0do6Jkzq1aVlxsbv3s3cyamACpXUBBTAJXr4oIpgMq9exdTAI3LgCmAylVSwhRA5aalYQqgcnfvxhAAALN26mgMdNBfAAAAAElFTkSuQmCC",
      "basi3p04.png", false, 32, 32, "a339593b0d82103e30ed7b00afd68816");
  AKA_mark("lis===3596###sois===156083###eois===158215###lif===35###soif===4965###eoif===7097###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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",
      "basi3p08.png", false, 32, 32, "d36bdbefc126ef50bd57d51eb38f2ac4");
  AKA_mark("lis===3598###sois===158219###eois===158603###lif===37###soif===7101###eoif===7485###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAQAAAGudILpAAAABGdBTUEAAYagMeiWXwAAAI1JREFUeJztj80KgzAMx3+BHvTWvUH7KPbB9yhzT7Dt5LUeHBWiEkFWhpgQGtL/RyIZOhLJ3Zli2UgOJAvzgECcs/ygoZsDyb7wA5Hoek2pMpAXeDw3VaVbMHTUADx/biG5Wbt+Lve2LD4W4FKoZnFYQQZovtmqd8+kNR2sMG8wBU6wwQlOuDb4hw2OCozsTz0JHVlVXQAAAABJRU5ErkJggg==",
      "basi4a08.png", false, 32, 32, "e2212ec5fa026a41826136e983bf92b2");
  AKA_mark("lis===3600###sois===158607###eois===162511###lif===39###soif===7489###eoif===11393###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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",
      "basi4a16.png", false, 32, 32, "f1423ebc08979252299ca238656ab0ba");
  AKA_mark("lis===3602###sois===162515###eois===163095###lif===41###soif===11397###eoif===11977###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAAEEfUpiAAAABGdBTUEAAYagMeiWXwAAASBJREFUeJzFlUFOwzAQRZ+lQbi7smZBuAabhh6LTRLBwRLBRSpxCipl2EDVlJBB/EgeyYrifH8/jSfj5GSAR2AP7A0fOQ+74mM6MeKTieTk6nv9vz2aa4AKuJ8b1rVTz8uwZ56WBWPXLgqSk7cze5+YjMZ/Xw4YbSDoCAQvHJcFThMJ2kDQLX4n+S4DbL/GTfD8MRemIQobatGgDfIcGrzyoBlExxAbDLVooAGQnJz545nPPY2dRmCodUBdmmDQALBeLeVeJXgLelJo4GIhGOI5mqsGOoFYCEYvGrhokPwuA+SLsQne19Js5L9ZDbkbrABQdH/sUBXOgNoOVwAoG+Uz8M5tWQC1m8sA6m0gAxTPgB+qsgDqdSgDqNepDFA6A5+CSlP0aU5zQgAAAABJRU5ErkJggg==",
      "basi6a08.png", false, 32, 32, "e80a60aecf13ebd863b61167ba95960b");
  AKA_mark("lis===3604###sois===163099###eois===168771###lif===43###soif===11981###eoif===17653###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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",
      "basi6a16.png", false, 32, 32, "4d9d6473bb7403d7f85e3e7537c34e9d");
  AKA_mark("lis===3606###sois===168775###eois===169091###lif===45###soif===17657###eoif===17973###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQAAAABbAUdZAAAABGdBTUEAAYagMeiWXwAAAFtJREFUeJwtzLEJAzAMBdHr0gSySiALejRvkBU8gsGNCmFFB1Hx4IovqurSpIRszqklUwbnUzRXEuIRsiG/SyY9G0JzJSVei9qynm9qyjBpLp0pYW7pbzBl8L8fEIdJL9AvFMkAAAAASUVORK5CYII=",
      "basn0g01.png", false, 32, 32, "4336909be7bff35103266c9b215ab516");
  AKA_mark("lis===3608###sois===169095###eois===169331###lif===47###soif===17977###eoif===18213###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgAAAAAcoT2JAAAABGdBTUEAAYagMeiWXwAAAB9JREFUeJxjYAhd9R+M8TCIUMIAU4aPATMJH2OQuQcAvUl/gYsJiakAAAAASUVORK5CYII=",
      "basn0g02.png", false, 32, 32, "b16bee35e71dce6c08c2447a62ccedea");
  AKA_mark("lis===3610###sois===169335###eois===169627###lif===49###soif===18217###eoif===18509###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAAAAACT4cgpAAAABGdBTUEAAYagMeiWXwAAAEhJREFUeJxjYGAQFFRSMjZ2cQkNTUsrL2cgQwCV29FBjgAqd+ZMcgRQuatWkSOAyt29mxwBVO6ZM+QIoHLv3iVHAJX77h0ZAgAfFO4B6v9B+gAAAABJRU5ErkJggg==",
      "basn0g04.png", false, 32, 32, "0b40ec7e4231183b51e1c23f818a955f");
  AKA_mark("lis===3612###sois===169631###eois===169911###lif===51###soif===18513###eoif===18793###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAAAAABWESUoAAAABGdBTUEAAYagMeiWXwAAAEFJREFUeJxjZGAkABQIyLMMBQWMDwgp+PcfP2B5MBwUMMoRkGdkonlcDAYFjI/wyv7/z/iH5nExGBQwyuCVZWQEAFDl/nE14thZAAAAAElFTkSuQmCC",
      "basn0g08.png", false, 32, 32, "f6470f9f6296c5109e2bd730fe203773");
  AKA_mark("lis===3614###sois===169915###eois===170235###lif===53###soif===18797###eoif===19117###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAAAAAAGgflrAAAABGdBTUEAAYagMeiWXwAAAF5JREFUeJzV0jEKwDAMQ1E5W+9/xtygk8AoezLVKgSj2Y8/OICnuFcTE2OgOoJgHQiZAN2C9kDKBOgW3AZCJkC3oD2QMgG6BbeBkAnQLWgPpExgP28H7E/0GTjPfwAW2EvYX64rn9cAAAAASUVORK5CYII=",
      "basn0g16.png", false, 32, 32, "a14e204bbf905586d3763f3cc5dcb2f3");
  AKA_mark("lis===3616###sois===170239###eois===170531###lif===55###soif===19121###eoif===19413###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAABGdBTUEAAYagMeiWXwAAAEhJREFUeJzt1cEJADAMAkCF7JH9t3ITO0Qr9KH4zuErtA0EO4AKFPgcoO3kfUx4QIECD0qHH8KEBxQo8KB0OCOpQIG7cHejwAGCsfleD0DPSwAAAABJRU5ErkJggg==",
      "basn2c08.png", false, 32, 32, "512c3874e30061e623739e2f9adc4eba");
  AKA_mark("lis===3618###sois===170535###eois===171035###lif===57###soif===19417###eoif===19917###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAIAAACsiDHgAAAABGdBTUEAAYagMeiWXwAAAOVJREFUeJzVlsEKgzAQRKfgQX/Lfrf9rfaWHgYDkoYmZpPMehiGReQ91qCPEEIAPi/gmu9kcnN+GD0nM1/O4vNad7cC6850KHCiM5fz7fJwXdEBYPOygV/o7PICeXSmsMA/dKbkGShD51xsAzXo7DIC9ehMAYG76MypZ6ANnfNJG7BAZx8uYIfOHChgjR4F+MfuDx0AtmfnDfREZ+8m0B+9m8Ao9Chg9x0Yi877jTYwA529WWAeerPAbPQoUH8GNNA5r9yAEjp7sYAeerGAKnoUyJ8BbXTOMxvwgM6eCPhBTwS8oTO/5kL+Xge7xOwAAAAASUVORK5CYII=",
      "basn2c16.png", false, 32, 32, "a3774d09367dd147a3539d2d2f6ca133");
  AKA_mark("lis===3620###sois===171039###eois===171287###lif===59###soif===19921###eoif===20169###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABGdBTUEAAYagMeiWXwAAAAZQTFRF7v8iImb/bBrSJgAAABVJREFUeJxj4AcCBjTiAxCgEwOkDgC7Hz/Bk4JmWQAAAABJRU5ErkJggg==",
      "basn3p01.png", false, 32, 32, "1ba59f527ff2cfdc68bb0c3487862e91");
  AKA_mark("lis===3622###sois===171291###eois===171583###lif===61###soif===20173###eoif===20465###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAABGdBTUEAAYagMeiWXwAAAANzQklUAQEBfC53ggAAAAxQTFRFAP8A/wAA//8AAAD/ZT8rugAAACJJREFUeJxj+B+6igGEGfAw8MnBGKugLHwMqNL/+BiDzD0AvUl/geqJjhsAAAAASUVORK5CYII=",
      "basn3p02.png", false, 32, 32, "0528e9ac365252a8c0e2d9ced8a2cc6b");
  AKA_mark("lis===3624###sois===171587###eois===171971###lif===63###soif===20469###eoif===20853###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAC1QTFRFIgD/AP//iAD/Iv8AAJn//2YA3QD/d/8A/wAAAP+Z3f8A/wC7/7sAAET/AP9E0rBJvQAAAEdJREFUeJxj6OgIDT1zZtWq8nJj43fvZs5kIEMAlSsoSI4AKtfFhRwBVO7du+QIoHEZyBFA5SopkSOAyk1LI0cAlbt7NxkCAODE6tEPggV9AAAAAElFTkSuQmCC",
      "basn3p04.png", false, 32, 32, "a339593b0d82103e30ed7b00afd68816");
  AKA_mark("lis===3626###sois===171975###eois===173787###lif===65###soif===20857###eoif===22669###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAAYagMeiWXwAAAwBQTFRFIkQA9f/td/93y///EQoAOncAIiL//xH/EQAAIiIA/6xVZv9m/2Zm/wH/IhIA3P//zP+ZRET/AFVVIgAAy8v/REQAVf9Vy8sAMxoA/+zc7f//5P/L/9zcRP9EZmb/MwAARCIA7e3/ZmYA/6RE//+q7e0AAMvL/v///f/+//8BM/8zVSoAAQH/iIj/AKqqAQEARAAAiIgA/+TLulsAIv8iZjIA//+Zqqr/VQAAqqoAy2MAEf8R1P+qdzoA/0RE3GsAZgAAAf8BiEIA7P/ca9wA/9y6ADMzAO0A7XMA//+ImUoAEf//dwAA/4MB/7q6/nsA//7/AMsA/5mZIv//iAAA//93AIiI/9z/GjMAAACqM///AJkAmQAAAAABMmYA/7r/RP///6r/AHcAAP7+qgAASpkA//9m/yIiAACZi/8RVf///wEB/4j/AFUAABER///+//3+pP9EZv///2b/ADMA//9V/3d3AACI/0T/ABEAd///AGZm///tAAEA//XtERH///9E/yL//+3tEREAiP//AAB3k/8iANzcMzP//gD+urr/mf//MzMAY8sAuroArP9V///c//8ze/4A7QDtVVX/qv//3Nz/VVUAAABm3NwA3ADcg/8Bd3f//v7////L/1VVd3cA/v4AywDLAAD+AQIAAQAAEiIA//8iAEREm/8z/9SqAABVmZn/mZkAugC6KlUA/8vLtP9m/5sz//+6qgCqQogAU6oA/6qqAADtALq6//8RAP4AAABEAJmZmQCZ/8yZugAAiACIANwA/5MiAADc/v/+qlMAdwB3AgEAywAAAAAz/+3/ALoA/zMz7f/t/8SIvP93AKoAZgBmACIi3AAA/8v/3P/c/4sRAADLAAEBVQBVAIgAAAAiAf//y//L7QAA/4iIRABEW7oA/7x3/5n/AGYAuv+6AHd3c+0A/gAAMwAzAAC6/3f/AEQAqv+q//7+AAARIgAixP+IAO3tmf+Z/1X/ACIA/7RmEQARChEA/xER3P+6uv//iP+IAQAB/zP/uY7TYgAAAbFJREFUeJwNwQcACAQQAMBHqIxIZCs7Mwlla1hlZ+8VitCw9yoqNGiYDatsyt6jjIadlVkysve+u5jC9xTmV/qyl6bcJR7kAQZzg568xXmuE2lIyUNM5So7OMAFIhvp+YgGvEtFNnOKeJonSEvwP9NZzhHiOfLzBXPoxKP8yD6iPMXITjP+oTdfsp14lTJMJjGtOMFQfiFe4wWK8BP7qUd31hBNqMos2tKYFbRnJdGGjTzPz2yjEA1ZSKymKCM5ylaWcJrZxCZK8jgfU4vc/MW3xE7K8RUvsZb3Wc/XxCEqk4v/qMQlFvMZcZIafMOnLKM13zGceJNqPMU4KnCQAqQgbrKHpXSgFK/Qn6REO9YxjWE8Sx2SMJD4jfl8wgzy0YgPuEeUJQcD6EoWWpCaHsQkHuY9RpGON/icK0RyrvE680jG22TlHaIbx6jLnySkF+M5QxzmD6pwkTsMoSAdidqsojipuMyHzOQ4sYgfyElpzjKGErQkqvMyC7jFv9xmBM2JuTzDRDLxN4l4jF1EZjIwmhfZzSOMpT4xiH70IQG/k5En2UKcowudycsG8jCBmtwHgRv+EIeWyOAAAAAASUVORK5CYII=",
      "basn3p08.png", false, 32, 32, "d36bdbefc126ef50bd57d51eb38f2ac4");
  AKA_mark("lis===3628###sois===173791###eois===174055###lif===67###soif===22673###eoif===22937###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAQAAADZc7J/AAAABGdBTUEAAYagMeiWXwAAADVJREFUeJxj/M/AwAGFnGg0MSKcLN8ZKAMsP4a+AaNhMBoGVDFgNBBHw4AqBowG4mgYUMMAAN8qIH3E64XIAAAAAElFTkSuQmCC",
      "basn4a08.png", false, 32, 32, "e2212ec5fa026a41826136e983bf92b2");
  AKA_mark("lis===3630###sois===174059###eois===177099###lif===69###soif===22941###eoif===25981###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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",
      "basn4a16.png", false, 32, 32, "f1423ebc08979252299ca238656ab0ba");
  AKA_mark("lis===3632###sois===177103###eois===177447###lif===71###soif===25985###eoif===26329###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABGdBTUEAAYagMeiWXwAAAG9JREFUeJzt1jEKgDAMRuEnZGhPofc/VQSPIcTdxUV4HVLoUCj8H00o2YoBMF57fpz/ujODHXUFRwPKBqj5DVigB041HiJ9gFyCVOMbsEIPXNwuAHkgiJL/4qABNqB7QAeUPBAE2QAZUDZAfwEb8ABSIBqcFg+4TAAAAABJRU5ErkJggg==",
      "basn6a08.png", false, 32, 32, "e80a60aecf13ebd863b61167ba95960b");
  AKA_mark("lis===3634###sois===177451###eois===182127###lif===73###soif===26333###eoif===31009###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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",
      "basn6a16.png", false, 32, 32, "4d9d6473bb7403d7f85e3e7537c34e9d");
  AKA_mark("lis===3636###sois===182131###eois===182515###lif===75###soif===31013###eoif===31397###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAQAAAGudILpAAAABGdBTUEAAYagMeiWXwAAAI1JREFUeJztj80KgzAMx3+BHvTWvUH7KPbB9yhzT7Dt5LUeHBWiEkFWhpgQGtL/RyIZOhLJ3Zli2UgOJAvzgECcs/ygoZsDyb7wA5Hoek2pMpAXeDw3VaVbMHTUADx/biG5Wbt+Lve2LD4W4FKoZnFYQQZovtmqd8+kNR2sMG8wBU6wwQlOuDb4hw2OCozsTz0JHVlVXQAAAABJRU5ErkJggg==",
      "bgai4a08.png", false, 32, 32, "e2212ec5fa026a41826136e983bf92b2");
  AKA_mark("lis===3638###sois===182519###eois===186423###lif===77###soif===31401###eoif===35305###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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",
      "bgai4a16.png", false, 32, 32, "f1423ebc08979252299ca238656ab0ba");
  AKA_mark("lis===3640###sois===186427###eois===186771###lif===79###soif===35309###eoif===35653###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABGdBTUEAAYagMeiWXwAAAG9JREFUeJzt1jEKgDAMRuEnZGhPofc/VQSPIcTdxUV4HVLoUCj8H00o2YoBMF57fpz/ujODHXUFRwPKBqj5DVigB041HiJ9gFyCVOMbsEIPXNwuAHkgiJL/4qABNqB7QAeUPBAE2QAZUDZAfwEb8ABSIBqcFg+4TAAAAABJRU5ErkJggg==",
      "bgan6a08.png", false, 32, 32, "e80a60aecf13ebd863b61167ba95960b");
  AKA_mark("lis===3642###sois===186775###eois===191451###lif===81###soif===35657###eoif===40333###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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",
      "bgan6a16.png", false, 32, 32, "4d9d6473bb7403d7f85e3e7537c34e9d");
  AKA_mark("lis===3644###sois===191455###eois===191739###lif===83###soif===40337###eoif===40621###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAQAAADZc7J/AAAABGdBTUEAAYagMeiWXwAAAAJiS0dEAACqjSMyAAAANUlEQVR4nGP8z8DAAYWcaDQxIpws3xkoAyw/hr4Bo2EwGgZUMWA0EEfDgCoGjAbiaBhQwwAA3yogfcTrhcgAAAAASUVORK5CYII=",
      "bgbn4a08.png", false, 32, 32, "e2212ec5fa026a41826136e983bf92b2");
  AKA_mark("lis===3646###sois===191743###eois===194799###lif===85###soif===40625###eoif===43681###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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",
      "bggn4a16.png", false, 32, 32, "f1423ebc08979252299ca238656ab0ba");
  AKA_mark("lis===3648###sois===194803###eois===195171###lif===87###soif===43685###eoif===44053###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABGdBTUEAAYagMeiWXwAAAAZiS0dEAP8A/wD/oL2nkwAAAG9JREFUeJzt1jEKgDAMRuEnZGhPofc/VQSPIcTdxUV4HVLoUCj8H00o2YoBMF57fpz/ujODHXUFRwPKBqj5DVigB041HiJ9gFyCVOMbsEIPXNwuAHkgiJL/4qABNqB7QAeUPBAE2QAZUDZAfwEb8ABSIBqcFg+4TAAAAABJRU5ErkJggg==",
      "bgwn6a08.png", false, 32, 32, "e80a60aecf13ebd863b61167ba95960b");
  AKA_mark("lis===3650###sois===195175###eois===199875###lif===89###soif===44057###eoif===48757###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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",
      "bgyn6a16.png", false, 32, 32, "4d9d6473bb7403d7f85e3e7537c34e9d");
  AKA_mark("lis===3652###sois===199879###eois===201995###lif===91###soif===48761###eoif===50877###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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",
      "ccwn2c08.png", false, 32, 32, "5189ed8d023b977fa90833e90e4a830a");
  AKA_mark("lis===3654###sois===201999###eois===204167###lif===93###soif===50881###eoif===53049###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAAYagMeiWXwAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAC4lBMVEX2sN6J/3Xk/8UN/2vq/4w1/63/McCMSZeA/9b+JjT/sTTgMv4ciP//DnRR/yPFA9PIAWz/zi3/XqX+PmJP/3cz/1j+C5T/LmMk/4h//8Rz/8z/p42D/4k9/7v/0eYb/5aW/8r/Ox1Zif+9GMf/H1x6PP/7+/zk/w4e/5yB/7VI4v5BKP//qNwt/4P/nhxJE75g/6gl/9ER/3uS/0tS/9l+AJkdb//gFf33/B244P+1/97qfJzE//D8/GT84OJxav/BgNrd3fX6YO4e/6Wm/9LJ/+Qr/1/2A3C0Nf8f/+jG/81d/4P/Z60r3P7/Ez1k4v4O/etF/77/Y0M9/4vIzu3K/xTC/0v/JqAa/5D8gs7/MIzS/zMXN/+jAGOO/73+//qb4P//GSwP/7AJ/38Q/0cU0v42/x3Hq87/77z/4Wb/yNrX+vGZ/+L7//r9+/zjAln/gUyL/xQfm/8P/5/g/v3U/9D/cUz9F9mOyf//wB2e/4Dg/0oT/3tBwf/6+/w88f32u97/cMOx/yx+/x4h/2Gi/zGz/4QM/8oY/1gU8/0J/11l/65H/43+Cj713u3/TK87AVv6/axA/52Y7/5d/35U/7TK/430/TyR/+MWp/9l/8g5A8ZPpf/s8P7/KWb9Cbeq++uc/7L/y52i/w/2NKm69/7/ha7jBOaj/2b/lpD/bxni/1j/44yW/+5B/2U9/zYm/9xe/xv+P9Up/6Bn/9D/4eL6/urnS1Qhuf/Saf/91sK//4tryf+v/7r/8PJL/6D/x3v98XxT/+r/6B7///9p/0P/qC//G4b/NV5l/PX/kMT/TXX/QH9+/3L/cw7/Pqr/jhtv/6Ljo92b/z9A/68z/7Yn8/0a/zB8/93/e9H/TyU///B89v7/e1Mg/zmQAMT/1k//Vabv//Wvwf//Gq0+/9svV/+Apv8U/+3/kkxi/9r/tnqO5P/n4uPsAaT+Clkr/7S5uMPa/43S/+//nNC6/yvAE0qqAAACr0lEQVR4nGM4QgAwEK3Ay9ttyt5c3Ao0u7pSUq6v98KlII6ZuaUj5fr1tCrsClyTa2pa3NzuXU/baJyLTcEkoxpd3XVuouv5Nm68vA1TgVVyhIRusMg60fUbm5sLm7ZhKGCNiAgO7ukRWXf0aHPh4sXR8WgKXIvlN0/av9/be8rRo5dbm0JDV8ejKphVrLF5/36DixennDW+3Po1VF3dFkXBoyTnzVemdndrXpRhXLEiLDrawuLwQWQFOUnOV4EKNDXjZKpWhIVVT7c4XFm5BknBlqQPsoGzpCTjFi5sa5u2evX0w4KVenqLEAoMwQokFVxc9u6e9snW9sEDwWN6F87tgin43G5oCDSAQ8HFymvaJ5aDmZkPuI5duHBu1S6ogrXthk9NXt3gyLFyLWWaOHHNgQOvX768sGrVrVu7IApOBmwAKZixwOZzNlPGxEUHXr9+WVAWdEtRUdEOrOD2C8/bh07eWLvAJvvRtoxdixZJr7x7NyiIkzMxkXMrSMGLF9eACu6sXWpTUrdva1bWqWUrrU+fFhY+4efXe2LfEYaSzs5r9Sfv3Jm8dOncPrmshi9fTi1bJiQEVCKu4tcrvI9hKVBey9//TYJliCODzpdTkY0+Qg/PnDkzb56Kyvve03IMk1N9fbX891RUPL50SefmzUaf/v7zUVHHeXnfv1exBrqS4U1qam3tnj0Vzx127nRy2rSJbUl4OFDaPf/0lzywN9/s2FFbO+f5c3uo/JMnYmLu+QIgzZCASpg5s2iOkpK9hwc3N3d5+fz57wRit6fnIWLTsoiHR+mZqqqHh7n58nKgbKz1W5QkZ8ljZvZMGyzPrxwby56uhpaq68zMYrS1Ve/fv286YQL72yPogOHI45iY2bP1JwBlP6phSIPTQ52jY8jHjx8xNcMTLV4AAPEBazSls8MzAAAAAElFTkSuQmCC",
      "ccwn3p08.png", false, 32, 32, "1a63f18f17006d850d1c041e49a7721f");
  AKA_mark("lis===3656###sois===204171###eois===204806###lif===95###soif===53053###eoif===53688###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAAAgAAAAgCAIAAACgkq6HAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAAlwSFlzAAAAAQAAAAQAMlIwkwAAASdJREFUeJxV0mFx7DAMBOCvmRAQBVMIhVAIhaNwFPogvFI4CA2FQGggVBDcH3acNpMZja1daVfWWwWClWRvZ3OPGwGSA6YOjw5QepxgcX+lg2ZYKc7BXNip1G9f1bP6X9WqvqtMregBTk691NTCcbUYCXX19d0qbuqyVvVTDZNwdjWFJS+/c/PEw/5QZNnTGa1HIsNHeAUlEc0gztheyguRLlWN8XRs2Vv0Hm12xRGt5j2rS/qY753w6+oPI+OefuPNA/KyHuISZZYCJf+VyKVrlINR8nyw3I95MRy2XeCMwSiwK0FGSwxGODk4yyV8lgpP0o612UlTU3EtjXL5nNozrQTLr8RbxZMix9Z9cDQfxz1B2kK0WY0dabc5EtlRf0B1/Ku63McfFzN1pnMg8LcAAAAASUVORK5CYII=",
      "cdfn2c08.png", false, 8, 32, "dbfdad37268883ddeeecc745da77130c");
  AKA_mark("lis===3658###sois===204810###eois===205365###lif===97###soif===53692###eoif===54247###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAICAIAAAAX52r4AAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAAlwSFlzAAAABAAAAAEAH+hVZQAAAOtJREFUeJx9kmuxwyAUhL/M1MBawEIsxEIsxEIs3FiohVjAAhaOhSMh9wePQtt0hwEG5rx2d7r4QADVxbg3eN3zxbr7iEc5BTOssJaHFtIHeleo9RDao8EBCawvIFgglN5dRIjwLLNsuHBh3RRy5AQgwSn8D2aYA+TlEEuZB+sr0EpeHJE/zl1PtshGrMPICAdz3GFNzIJoJANr8+foE6xRdAeBMJGQqhSGnE6kOzjAdPUULfjyRtECAQfXIEJmCYMY8D1T5HDU1JWi6WqdhkFkH63xZhCNIr8oPsAGkacvNu2d8YOH3ql+a9N/CM1cqmi++6QAAAAASUVORK5CYII=",
      "cdhn2c08.png", false, 32, 8, "650268c7196860898cbe701005cf2407");
  AKA_mark("lis===3660###sois===205369###eois===205775###lif===99###soif===54251###eoif===54657###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAAAgAAAAICAIAAABLbSncAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAAlwSFlzAAAAAQAAAAEATyXE1gAAAHtJREFUeJxFzlENwkAURNFTgoFnYS3UQisBC1gACSCBSsDCVgIroSuhlbB8NIX5mUwyubldQzCQ2KjMcBZ8zKFiP0zcaRd53Stb3n2LNWvJSVIwX/PoNvbbNlQkJ0dqRI0Qxz5Qg+VlffxQXQuyEsphFxNP3V93hxQKfAEqsC/QF17WrgAAAABJRU5ErkJggg==",
      "cdsn2c08.png", false, 8, 8, "9e580d6237f77bfa8e49cfef19236bcb");
  AKA_mark("lis===3662###sois===205779###eois===206843###lif===101###soif===54661###eoif===55725###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAAlwSFlzAAAD6AAAA+gBtXtSawAAAmdJREFUeJyVluGR3CAMhb/bcQNqgRZowVeCr4RLCZsSsiXcteASQglxC7RACckPEEbYeDeandkZDHpP0hPi7S/PzIPoL1uCCBHS08O8DQEczI3TkW0Q/hdAYAb3nF2xBAHiiwAOlpddtzYIxQLM8Hl+PPNLh3L0GI8LAAdfMJvPNfqunA48+M5Zgo8+jqn8S+8aWGE7ZaoiCrB0xfKQzLFb+beCSfA99v5km3U1FfpWM48+mR6cJj93wVbTtsLvYxyaqFvBbMxKzsGnyjYTE/DwWdWWYO2K5PcgpuKkibopkoM/ZXVTWNESAyzwUU8ZebuSu6lLTuNdSjojPApDqUw93NF2D8DWJX8E0CTHg5DgJ6zMSroIdwXJTeNrPWIrXHU7tRW3endQzt7hXjwncIn5HWLUxlO2sesMgWQBkvkoGUBKLN/6PQKeOda8qIv+bhVI3AZdr6spB9L1cnTG5Rhgb7SRSa2usRcGQdl0G+zVVcnk25tEyPmhVtIGYm3SQjX7y5kEgoeVFaToKBdZr4drgFQBGm670nMFPXhCZAOPCBKr9yL7A1wPYMXV3CJb+fALZlJoejAnzNdtZc0AaENN3ajzppnXwjO7q8LfCYUK4LsU7QAN10xk2a/SBD9gAbF+K/fQhmRsBICOKo0j3/nucF3vnXEyxcNeyak4sRj3/bKqfM5fDXIcapi9OjJDv2sBacfKmTndZswOh2boC3z10dZB0PKvE+FEl+/9CLXPFn9KaT+ert9jAdZ+7fDwkiuMKwvnr4TB23Q+inJs0cjmNQD2iXkVTS7R5fNmDFCtNsDx+f6C/QMQQNfOLmy7EgAAAABJRU5ErkJggg==",
      "cdun2c08.png", false, 32, 32, "fbe519db5608cf411e933ccbd1f92f87");
  AKA_mark("lis===3664###sois===206847###eois===207287###lif===103###soif===55729###eoif===56169###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAC1QTFRFIgD/AP//iAD/Iv8AAJn//2YA3QD/d/8A/wAAAP+Z3f8A/wC7/7sAAET/AP9E0rBJvQAAAB5oSVNUAEAAcAAwAGAAYAAgACAAUAAQAIAAQAAQADAAUABwSJlZQQAAAEdJREFUeJxj6OgIDT1zZtWq8nJj43fvZs5kIEMAlSsoSI4AKtfFhRwBVO7du+QIoHEZyBFA5SopkSOAyk1LI0cAlbt7NxkCAODE6tEPggV9AAAAAElFTkSuQmCC",
      "ch1n3p04.png", false, 32, 32, "a339593b0d82103e30ed7b00afd68816");
  AKA_mark("lis===3666###sois===207291###eois===209803###lif===105###soif===56173###eoif===58685###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAAYagMeiWXwAAAwBQTFRFIkQA9f/td/93y///EQoAOncAIiL//xH/EQAAIiIA/6xVZv9m/2Zm/wH/IhIA3P//zP+ZRET/AFVVIgAAy8v/REQAVf9Vy8sAMxoA/+zc7f//5P/L/9zcRP9EZmb/MwAARCIA7e3/ZmYA/6RE//+q7e0AAMvL/v///f/+//8BM/8zVSoAAQH/iIj/AKqqAQEARAAAiIgA/+TLulsAIv8iZjIA//+Zqqr/VQAAqqoAy2MAEf8R1P+qdzoA/0RE3GsAZgAAAf8BiEIA7P/ca9wA/9y6ADMzAO0A7XMA//+ImUoAEf//dwAA/4MB/7q6/nsA//7/AMsA/5mZIv//iAAA//93AIiI/9z/GjMAAACqM///AJkAmQAAAAABMmYA/7r/RP///6r/AHcAAP7+qgAASpkA//9m/yIiAACZi/8RVf///wEB/4j/AFUAABER///+//3+pP9EZv///2b/ADMA//9V/3d3AACI/0T/ABEAd///AGZm///tAAEA//XtERH///9E/yL//+3tEREAiP//AAB3k/8iANzcMzP//gD+urr/mf//MzMAY8sAuroArP9V///c//8ze/4A7QDtVVX/qv//3Nz/VVUAAABm3NwA3ADcg/8Bd3f//v7////L/1VVd3cA/v4AywDLAAD+AQIAAQAAEiIA//8iAEREm/8z/9SqAABVmZn/mZkAugC6KlUA/8vLtP9m/5sz//+6qgCqQogAU6oA/6qqAADtALq6//8RAP4AAABEAJmZmQCZ/8yZugAAiACIANwA/5MiAADc/v/+qlMAdwB3AgEAywAAAAAz/+3/ALoA/zMz7f/t/8SIvP93AKoAZgBmACIi3AAA/8v/3P/c/4sRAADLAAEBVQBVAIgAAAAiAf//y//L7QAA/4iIRABEW7oA/7x3/5n/AGYAuv+6AHd3c+0A/gAAMwAzAAC6/3f/AEQAqv+q//7+AAARIgAixP+IAO3tmf+Z/1X/ACIA/7RmEQARChEA/xER3P+6uv//iP+IAQAB/zP/uY7TYgAAAgBozPXjAAABsUlEQVR4nA3BBwAIBBAAwEeojEhkKzszCWVrWGVn7xWK0LD3Kio0aJgNq2zK3qOMhp2VWTKy9767mML3FOZX+rKXptwlHuQBBnODnrzFea4TaUjJQ0zlKjs4wAUiG+n5iAa8S0U2c4p4midIS/A/01nOEeI58vMFc+jEo/zIPqI8xchOM/6hN1+ynXiVMkwmMa04wVB+IV7jBYrwE/upR3fWEE2oyiza0pgVtGcl0YaNPM/PbKMQDVlIrKYoIznKVpZwmtnEJkryOB9Ti9z8xbfETsrxFS+xlvdZz9fEISqTi/+oxCUW8xlxkhp8w6csozXfMZx4k2o8xTgqcJACpCBusoeldKAUr9CfpEQ71jGNYTxLHZIwkPiN+XzCDPLRiA+4R5QlBwPoShZakJoexCQe5j1GkY43+JwrRHKu8TrzSMbbZOUdohvHqMufJKQX4zlDHOYPqnCROwyhIB2J2qyiOKm4zIfM5DixiB/ISWnOMoYStCSq8zILuMW/3GYEzYm5PMNEMvE3iXiMXURmMjCaF9nNI4ylPjGIfvQhAb+TkSfZQpyjC53JywbyMIGa3AeBG/4Qh5bI4AAAAABJRU5ErkJggg==",
      "ch2n3p08.png", false, 32, 32, "d36bdbefc126ef50bd57d51eb38f2ac4");
  AKA_mark("lis===3668###sois===209807###eois===210295###lif===107###soif===58689###eoif===59177###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAAAAACT4cgpAAAABGdBTUEAAYagMeiWXwAAAAd0SU1FB9ABAQwiON2c/4AAAADISURBVHicXdHBDcIwDAVQHypACPAIHaEjsAojVOLIBTEBGzACbFBGYAPYoEY9lQKfxElR4hwq58V17ZRgFiVxa4ENSJ7xmoip8bSAbQL3f80I/LXg358J0Y09LBS4ZuxPSwrnB6DQdI7AKMjvBeSS1x6m7UYLO+hQuoCvvnt4cOddAzmHLwdwjyokKOwq6Xns1YOg1/4e2unn6ED3Q7wgEglj1HEWnotO21UjhCkxMbcujYEVchDk8GYDF+QwsIHkZ2gopYF0/QAe2cJF+P+JawAAAABJRU5ErkJggg==",
      "cm0n0g04.png", false, 32, 32, "cf2f1ab4f34d0c70f15f636ef584d53a");
  AKA_mark("lis===3670###sois===210299###eois===210787###lif===109###soif===59181###eoif===59669###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAAAAACT4cgpAAAABGdBTUEAAYagMeiWXwAAAAd0SU1FB7IBAQAAAB4KVgsAAADISURBVHicXdHBDcIwDAVQHypACPAIHaEjsAojVOLIBTEBGzACbFBGYAPYoEY9lQKfxElR4hwq58V17ZRgFiVxa4ENSJ7xmoip8bSAbQL3f80I/LXg358J0Y09LBS4ZuxPSwrnB6DQdI7AKMjvBeSS1x6m7UYLO+hQuoCvvnt4cOddAzmHLwdwjyokKOwq6Xns1YOg1/4e2unn6ED3Q7wgEglj1HEWnotO21UjhCkxMbcujYEVchDk8GYDF+QwsIHkZ2gopYF0/QAe2cJF+P+JawAAAABJRU5ErkJggg==",
      "cm7n0g04.png", false, 32, 32, "cf2f1ab4f34d0c70f15f636ef584d53a");
  AKA_mark("lis===3672###sois===210791###eois===211279###lif===111###soif===59673###eoif===60161###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAAAAACT4cgpAAAABGdBTUEAAYagMeiWXwAAAAd0SU1FB88MHxc7O3UwH+AAAADISURBVHicXdHBDcIwDAVQHypACPAIHaEjsAojVOLIBTEBGzACbFBGYAPYoEY9lQKfxElR4hwq58V17ZRgFiVxa4ENSJ7xmoip8bSAbQL3f80I/LXg358J0Y09LBS4ZuxPSwrnB6DQdI7AKMjvBeSS1x6m7UYLO+hQuoCvvnt4cOddAzmHLwdwjyokKOwq6Xns1YOg1/4e2unn6ED3Q7wgEglj1HEWnotO21UjhCkxMbcujYEVchDk8GYDF+QwsIHkZ2gopYF0/QAe2cJF+P+JawAAAABJRU5ErkJggg==",
      "cm9n0g04.png", false, 32, 32, "cf2f1ab4f34d0c70f15f636ef584d53a");
  AKA_mark("lis===3674###sois===211283###eois===211667###lif===113###soif===60165###eoif===60549###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAIAAACsiDHgAAAABGdBTUEAAYagMeiWXwAAAANzQklUDQ0N0DeNwQAAAH5JREFUeJztl8ENxEAIAwcJ6cpI+q8qKeNepAgelq2dCjz4AdQM1jRcf3WIDQ13qUNsiBBQZ1gR0cARUFIz3pug3586wo5+rOcfIaBOsCSggSOgpcB8D4D3R9DgfUyECIhDbAhp4AjoKPD+CBq8P4IG72MiQkCdYUVEA0dAyQcwUyZpXH92ZwAAAABJRU5ErkJggg==",
      "cs3n2c16.png", false, 32, 32, "023541189afc3aa4ae617158b59fe635");
  AKA_mark("lis===3676###sois===211671###eois===212115###lif===115###soif===60553###eoif===60997###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAAYagMeiWXwAAAANzQklUAwMDo5KgQgAAAFRQTFRFkv8AAP+SAP//AP8AANv/AP9t/7YAAG3/tv8A/5IA2/8AAEn//yQA/wAAJP8ASf8AAP/bAP9JAP+2//8AAP8kALb//9sAAJL//20AACT//0kAbf8A33ArFwAAAEtJREFUeJyFyscBggAAALGzYldUsO2/pyMk73SGGE7QF3pDe2gLzdADHA7QDqIfdIUu0AocntAIbaAFdIdu0BIc1tAEvaABOkIf+AMiQDPhd/SuJgAAAABJRU5ErkJggg==",
      "cs3n3p08.png", false, 32, 32, "6b15613bf70a37c37de24edfb8f6d1df");
  AKA_mark("lis===3678###sois===212119###eois===212463###lif===117###soif===61001###eoif===61345###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAABGdBTUEAAYagMeiWXwAAAANzQklUBQUFGCbeQwAAAGJJREFUeJztlbERgEAMw5Q7L0EH+w/Fd4zxbEAqUUUDROfCcW1cwmELLltw2gI9wQgaastFyOPeJ7ctWLZATzCCjsLuAfIgBPlXBHkQ/kgwgm8KeRCCPAhB/hVh2QI9wQgaXuXOFG8QELloAAAAAElFTkSuQmCC",
      "cs5n2c08.png", false, 32, 32, "3211fb3ede03caf163fe33b4cf6d78f6");
  AKA_mark("lis===3680###sois===212467###eois===212927###lif===119###soif===61349###eoif===61809###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAAYagMeiWXwAAAANzQklUBQUFGCbeQwAAAGBQTFRF/xkAQv8Axf8AAP97AP+9AP//AP8AAMX/AKX//94Apf8AAGP//5wAACH//1oAAP86/zoAY/8A5v8A/wAAAP9aIf8AAP+cAP/eAOb///8AAIT//70AAEL//3sAhP8AAP8ZRy+F9QAAAEtJREFUeJyFwQUBwAAAgDDu7u79Wz4CG5NA9YJW8AhqwSUoBIdgFISCUvAKBkEgWASp4BN0glkQCVZBLNgEiWAXZIJccAoqwS1oxA/GcT4B7dbxuwAAAABJRU5ErkJggg==",
      "cs5n3p08.png", false, 32, 32, "3211fb3ede03caf163fe33b4cf6d78f6");
  AKA_mark("lis===3682###sois===212931###eois===213227###lif===121###soif===61813###eoif===62109###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAABGdBTUEAAYagMeiWXwAAAExJREFUeJzt1UENADAMQlGa4GPzr2pT0olo/mkgoO9EqRYba9HADhBgmGq4CL7sffkECDBNie6B4EGw4F8R4AOgBA+CBQ+CdQIEGOYB69wUb0ah5KoAAAAASUVORK5CYII=",
      "cs8n2c08.png", false, 32, 32, "023541189afc3aa4ae617158b59fe635");
  AKA_mark("lis===3684###sois===213231###eois===213671###lif===123###soif===62113###eoif===62553###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAAYagMeiWXwAAAGBQTFRFIP8A/x8AAP8fAP/foP8AAP8/AP//AP8AgP8AAP9fAP9/YP8A/wAA4P8AAP+fAOD/QP8A//8AAMD//98AAKD//78AAID/wP8AAP+//58AAGD//38AAED//18AACD//z8As4GzYwAAAEtJREFUeJyFwQUBwAAAgDDu7u79Wz4CG7UgEHyCR3AJDsEimASDoBFsgliQCypBL1CZIBQkgkJQClrBLogEqaATjIJZsApOwS14xQ8p4j4B+PNT2QAAAABJRU5ErkJggg==",
      "cs8n3p08.png", false, 32, 32, "023541189afc3aa4ae617158b59fe635");
  AKA_mark("lis===3686###sois===213675###eois===214135###lif===125###soif===62557###eoif===63017###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAAAAACT4cgpAAAABGdBTUEAAYagMeiWXwAAAMhJREFUeJxd0cENwjAMBVAfKkAI8AgdoSOwCiNU4sgFMQEbMAJsUEZgA9igRj2VAp/ESVHiHCrnxXXtlGAWJXFrgQ1InvGaiKnxtIBtAvd/zQj8teDfnwnRjT0sFLhm7E9LCucHoNB0jsAoyO8F5JLXHqbtRgs76FC6gK++e3hw510DOYcvB3CPKiQo7CrpeezVg6DX/h7a6efoQPdDvCASCWPUcRaei07bVSOEKTExty6NgRVyEOTwZgMX5DCwgeRnaCilgXT9AB7ZwkX4/4lrAAAAAElFTkSuQmCC",
      "ct0n0g04.png", false, 32, 32, "cf2f1ab4f34d0c70f15f636ef584d53a");
  AKA_mark("lis===3688###sois===214139###eois===215291###lif===127###soif===63021###eoif===64173###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAAAAACT4cgpAAAABGdBTUEAAYagMeiWXwAAAA50RVh0VGl0bGUAUG5nU3VpdGVPVc9MAAAAMXRFWHRBdXRob3IAV2lsbGVtIEEuSi4gdmFuIFNjaGFpawood2lsbGVtQHNjaGFpay5jb20pjsxHHwAAADh0RVh0Q29weXJpZ2h0AENvcHlyaWdodCBXaWxsZW0gdmFuIFNjaGFpaywgU2luZ2Fwb3JlIDE5OTUtOTaEUAQ4AAAA+3RFWHREZXNjcmlwdGlvbgBBIGNvbXBpbGF0aW9uIG9mIGEgc2V0IG9mIGltYWdlcyBjcmVhdGVkIHRvIHRlc3QgdGhlCnZhcmlvdXMgY29sb3ItdHlwZXMgb2YgdGhlIFBORyBmb3JtYXQuIEluY2x1ZGVkIGFyZQpibGFjayZ3aGl0ZSwgY29sb3IsIHBhbGV0dGVkLCB3aXRoIGFscGhhIGNoYW5uZWwsIHdpdGgKdHJhbnNwYXJlbmN5IGZvcm1hdHMuIEFsbCBiaXQtZGVwdGhzIGFsbG93ZWQgYWNjb3JkaW5nCnRvIHRoZSBzcGVjIGFyZSBwcmVzZW50Lk0JDWsAAAA5dEVYdFNvZnR3YXJlAENyZWF0ZWQgb24gYSBOZVhUc3RhdGlvbiBjb2xvciB1c2luZyAicG5tdG9wbmciLmoSZHkAAAAUdEVYdERpc2NsYWltZXIARnJlZXdhcmUuX4AsSgAAAMhJREFUeJxd0cENwjAMBVAfKkAI8AgdoSOwCiNU4sgFMQEbMAJsUEZgA9igRj2VAp/ESVHiHCrnxXXtlGAWJXFrgQ1InvGaiKnxtIBtAvd/zQj8teDfnwnRjT0sFLhm7E9LCucHoNB0jsAoyO8F5JLXHqbtRgs76FC6gK++e3hw510DOYcvB3CPKiQo7CrpeezVg6DX/h7a6efoQPdDvCASCWPUcRaei07bVSOEKTExty6NgRVyEOTwZgMX5DCwgeRnaCilgXT9AB7ZwkX4/4lrAAAAAElFTkSuQmCC",
      "ct1n0g04.png", false, 32, 32, "cf2f1ab4f34d0c70f15f636ef584d53a");
  AKA_mark("lis===3690###sois===215295###eois===216383###lif===129###soif===64177###eoif===65265###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAAAAACT4cgpAAAABGdBTUEAAYagMeiWXwAAABlpVFh0VGl0bGUAAABlbgBUaXRsZQBQbmdTdWl0ZdWsxR4AAAA4aVRYdEF1dGhvcgAAAGVuAEF1dGhvcgBXaWxsZW0gdmFuIFNjaGFpayAod2lsbGVtQHNjaGFpay5jb20pRVcgpAAAAEFpVFh0Q29weXJpZ2h0AAAAZW4AQ29weXJpZ2h0AENvcHlyaWdodCBXaWxsZW0gdmFuIFNjaGFpaywgQ2FuYWRhIDIwMTHS6zPBAAABDGlUWHREZXNjcmlwdGlvbgAAAGVuAERlc2NyaXB0aW9uAEEgY29tcGlsYXRpb24gb2YgYSBzZXQgb2YgaW1hZ2VzIGNyZWF0ZWQgdG8gdGVzdCB0aGUgdmFyaW91cyBjb2xvci10eXBlcyBvZiB0aGUgUE5HIGZvcm1hdC4gSW5jbHVkZWQgYXJlIGJsYWNrJndoaXRlLCBjb2xvciwgcGFsZXR0ZWQsIHdpdGggYWxwaGEgY2hhbm5lbCwgd2l0aCB0cmFuc3BhcmVuY3kgZm9ybWF0cy4gQWxsIGJpdC1kZXB0aHMgYWxsb3dlZCBhY2NvcmRpbmcgdG8gdGhlIHNwZWMgYXJlIHByZXNlbnQufjUNRAAAAEdpVFh0U29mdHdhcmUAAABlbgBTb2Z0d2FyZQBDcmVhdGVkIG9uIGEgTmVYVHN0YXRpb24gY29sb3IgdXNpbmcgInBubXRvcG5nIi7EGQUHAAAAJGlUWHREaXNjbGFpbWVyAAAAZW4ARGlzY2xhaW1lcgBGcmVld2FyZS7TvjIJAAAATElEQVQokWP4DwbGxi4uoaFpaeXlDGQJKCkhuB0d5An8/4/gzpxJngDcSRBAlgAIQAxctYo8AYSTwFyyBBDc3bvPnCFPAMGFeo50AQDds/NRVdY0lwAAAABJRU5ErkJggg==",
      "cten0g04.png", false, 32, 32, "ac076245d12023e111ec36acb36dcff1");
  AKA_mark("lis===3692###sois===216387###eois===217439###lif===131###soif===65269###eoif===66321###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAAAAACT4cgpAAAABGdBTUEAAYagMeiWXwAAABtpVFh0VGl0bGUAAABmaQBPdHNpa2tvAFBuZ1N1aXRl8x/ISQAAADlpVFh0QXV0aG9yAAAAZmkAVGVraWrDpABXaWxsZW0gdmFuIFNjaGFpayAod2lsbGVtQHNjaGFpay5jb20pTbKY1QAAAEhpVFh0Q29weXJpZ2h0AAAAZmkAVGVraWrDpG5vaWtldWRldABDb3B5cmlnaHQgV2lsbGVtIHZhbiBTY2hhaWssIEthbmFkYSAyMDExGP2/hwAAAOtpVFh0RGVzY3JpcHRpb24AAABmaQBLdXZhdXMAa29rb2VsbWEgam91a29uIGt1dmlhIGx1b3R1IHRlc3RhdGEgZXJpIHbDpHJpLXR5eXBwaXNpw6QgUE5HLW11b2Rvc3NhLiBNdWthbmEgb24gbXVzdGF2YWxrb2luZW4sIHbDpHJpLCBwYWxldHRlZCwgYWxwaGEta2FuYXZhLCBhdm9pbXV1ZGVuIG11b2Rvc3NhLiBLYWlra2kgYml0LXN5dnl5ZGVzc8OkIG11a2FhbiBzYWxsaXR0dWEgc3BlYyBvbiDigIvigItsw6RzbsOkLsc2cVkAAAA/aVRYdFNvZnR3YXJlAAAAZmkAT2hqZWxtaXN0b3QATHVvdHUgTmVYVHN0YXRpb24gdsOkcmnDpCAicG5tdG9wbmciLlFtpV0AAAAtaVRYdERpc2NsYWltZXIAAABmaQBWYXN0dXV2YXBhdXNsYXVzZWtlAEZyZWV3YXJlLvx3Hi8AAABISURBVCiRY/gPBsbGLi6hoWlp5eUMZAkoKSG4HR3kCfz/j+DOnEmeAAqXgTwBBHfVKvIE0LhkCSC4u3efOUOeAILLAAGkCwAA+XLyQRLQxL0AAAAASUVORK5CYII=",
      "ctfn0g04.png", false, 32, 32, "0428cabaa4c89cb12cd5cf0f269a0ff1");
  AKA_mark("lis===3694###sois===217443###eois===219115###lif===133###soif===66325###eoif===67997###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAAAAACT4cgpAAAABGdBTUEAAYagMeiWXwAAACBpVFh0VGl0bGUAAABlbADOpM6vz4TOu86/z4IAUG5nU3VpdGUgh0C5AAAARmlUWHRBdXRob3IAAABlbADOo8+FzrPOs8+BzrHPhs6tzrHPggBXaWxsZW0gdmFuIFNjaGFpayAod2lsbGVtQHNjaGFpay5jb20p1io2ZgAAAIlpVFh0Q29weXJpZ2h0AAAAZWwAzqDOvc61z4XOvM6xz4TOuc66zqwgzrTOuc66zrHOuc+OzrzOsc+EzrEAzqDOvc61z4XOvM6xz4TOuc66zqwgzrTOuc66zrHOuc+OzrzOsc+EzrEgU2NoYWlrIHZhbiBXaWxsZW0sIM6azrHOvc6xzrTOrM+CIDIwMTHXI+R2AAAB9WlUWHREZXNjcmlwdGlvbgAAAGVsAM6gzrXPgc65zrPPgc6xz4bOrgDOnM65zrEgz4PPhc67zrvOv86zzq4gzrHPgM+MIM6tzr3OsSDPg8+Nzr3Ov867zr8gzrXOuc66z4zOvc+Jzr0gz4DOv8+FIM60zrfOvM65zr/Phc+BzrPOrs64zrfOus6xzr0gzrPOuc6xIM+EzrcgzrTOv866zrnOvM6uIM+Ez4nOvSDOtM65zrHPhs+Mz4HPic69IM+Hz4HPic68zqzPhM+Jzr0tz4TPjc+Az4nOvSDPhM6/z4UgzrzOv8+Bz4bOriBQTkcuIM6gzrXPgc65zrvOsc68zrLOrM69zr/Ovc+EzrHOuSDOv865IM6xz4PPgM+Bz4zOvM6xz4XPgc61z4IsIM+Hz4HPjs68zrEsIHBhbGV0dGVkLCDOvM61IM6szrvPhs6xIM66zrHOvc6szrvOuSwgzrzOtSDOvM6/z4HPhs6tz4Igz4TOt8+CIM60zrnOsc+GzqzOvc61zrnOsc+CLiDOjM67zr/OuSDOu86vzrPOvy3Oss6szrjOtyDOtc+AzrnPhM+Bzq3PgM61z4TOsc65IM+Dz43OvM+Gz4nOvc6xIM68zrUgz4TOvyBzcGVjIM61zq/Ovc6xzrkgz4DOsc+Bz4zOvc+EzrXPgi6miCkYAAAAiWlUWHRTb2Z0d2FyZQAAAGVsAM6bzr/Os865z4POvM65zrrPjADOlM63zrzOuc6/z4XPgc6zzq7OuM63zrrOtSDPg861IM6tzr3OsSDPh8+Bz47OvM6xIE5lWFRzdGF0aW9uIM+Hz4HOt8+DzrnOvM6/z4DOv865z47Ovc+EzrHPgiAicG5tdG9wbmciLkN4y+sAAABDaVRYdERpc2NsYWltZXIAAABlbADOkc+Azr/PgM6/zq/Ot8+DzrcAzpTPic+BzrXOrM69IM67zr/Os865z4POvM65zrrPjC4snq9sAAAAXUlEQVQokZ3OQREAIQxD0WjBAhawgAUsYKEWsFALWEALFrLTnd3pPcf/DpkAIEuptbXex5gTAkSSf5ppkINma2nQGvl9hLsCkeR7KRIK5CX3vTXIBM7RIAcj7xXgAUU58kEPspNFAAAAAElFTkSuQmCC",
      "ctgn0g04.png", false, 32, 32, "32546f7ef2cce19fcbaa6b8849592c38");
  AKA_mark("lis===3696###sois===219119###eois===220907###lif===135###soif===68001###eoif===69789###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAAAAACT4cgpAAAABGdBTUEAAYagMeiWXwAAACZpVFh0VGl0bGUAAABoaQDgpLbgpYDgpLDgpY3gpLfgpJUAUG5nU3VpdGVT/Uu3AAAAPmlUWHRBdXRob3IAAABoaQDgpLLgpYfgpJbgpJUAV2lsbGVtIHZhbiBTY2hhaWsgKHdpbGxlbUBzY2hhaWsuY29tKc9NfecAAABoaVRYdENvcHlyaWdodAAAAGhpAOCkleClieCkquClgOCksOCkvuCkh+CknwDgpJXgpYngpKrgpYDgpLDgpL7gpIfgpJ8gV2lsbGVtIHZhbiBTY2hhaWssIDIwMTEg4KSV4KSo4KS+4KSh4KS+3xTVhQAAAmVpVFh0RGVzY3JpcHRpb24AAABoaQDgpLXgpL/gpLXgpLDgpKMA4KSV4KSw4KSo4KWHIOCkleClhyDgpLLgpL/gpI8gUE5HIOCkquCljeCksOCkvuCksOClguCkqiDgpJXgpYcg4KS14KS/4KSt4KS/4KSo4KWN4KSoIOCksOCkguCklyDgpKrgpY3gpLDgpJXgpL7gpLAg4KSq4KSw4KWA4KSV4KWN4KS34KSjIOCkrOCkqOCkvuCkr+CkviDgpJvgpLXgpL/gpK/gpYvgpIIg4KSV4KS+IOCkj+CklSDgpLjgpYfgpJ8g4KSV4KS+IOCkj+CklSDgpLjgpILgpJXgpLLgpKguIOCktuCkvuCkruCkv+CksiDgpJXgpL7gpLLgpYcg4KSU4KSwIOCkuOCkq+Clh+Ckpiwg4KSw4KSC4KSXLCDgpKrgpYjgpLLgpYfgpJ/gpYfgpKEg4KS54KWI4KSCLCDgpIXgpLLgpY3gpKvgpL4g4KSa4KWI4KSo4KSyIOCkleClhyDgpLjgpL7gpKUg4KSq4KS+4KSw4KSm4KSw4KWN4KS24KS/4KSk4KS+IOCkuOCljeCkteCksOClguCkquCli+CkgiDgpJXgpYcg4KS44KS+4KSlLiDgpLjgpK3gpYAg4KSs4KS/4KSfIOCkl+CkueCksOCkvuCkiCDgpJXgpLLgpY3gpKrgpKjgpL4g4KSV4KWHIOCkheCkqOClgeCkuOCkvuCksCDgpJXgpYAg4KSF4KSo4KWB4KSu4KSk4KS/IOCkpuClgCDgpK7gpYzgpJzgpYLgpKYg4KS54KWI4KSCLvrUkQYAAACRaVRYdFNvZnR3YXJlAAAAaGkA4KS44KWJ4KSr4KWN4KSf4KS14KWH4KSv4KSwAOCkj+CklSBOZVhUc3RhdGlvbiAicG5tdG9wbmcgJ+CkleCkviDgpIngpKrgpK/gpYvgpJcg4KSV4KSwIOCksOCkguCklyDgpKrgpLAg4KSs4KSo4KS+4KSv4KS+IOCkl+Ckr+Ckvi4VxVHXAAAAQmlUWHREaXNjbGFpbWVyAAAAaGkA4KSF4KS44KWN4KS14KWA4KSV4KSw4KSjAOCkq+CljeCksOClgOCkteClh+Ckr+CksC4tT0C7AAAAYElEQVQokWP4/19Q8P9/Y2MXl9DQtLTycgayBJSU/v+HcTs6yBMAARh35kzyBFxc/v8HO4kByGUgTyA09P9/sJMYVq0iTwDJSRBAhgCMCzLwzBnyBGDc3bsZGO7eJUsAAEBI89kMzfvBAAAAAElFTkSuQmCC",
      "cthn0g04.png", false, 32, 32, "c570e7393458556ecef30b71824e0d6e");
  AKA_mark("lis===3698###sois===220911###eois===222263###lif===137###soif===69793###eoif===71145###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAAAAACT4cgpAAAABGdBTUEAAYagMeiWXwAAACBpVFh0VGl0bGUAAABqYQDjgr/jgqTjg4jjg6sAUG5nU3VpdGUPGlwCAAAAOGlUWHRBdXRob3IAAABqYQDokZfogIUAV2lsbGVtIHZhbiBTY2hhaWsgKHdpbGxlbUBzY2hhaWsuY29tKeXxzKEAAABTaVRYdENvcHlyaWdodAAAAGphAOacrOaWh+OBuADokZfkvZzmqKnjgqbjgqPjg6zjg6Djg7TjgqHjg7Pjgrfjg6PjgqTjgq/jgIHjgqvjg4rjg4AyMDExhF9tvgAAAXdpVFh0RGVzY3JpcHRpb24AAABqYQDmpoLopoEAUE5H5b2i5byP44Gu5qeY44CF44Gq6Imy44Gu56iu6aGe44KS44OG44K544OI44GZ44KL44Gf44KB44Gr5L2c5oiQ44GV44KM44Gf44Kk44Oh44O844K444Gu44K744OD44OI44Gu44Kz44Oz44OR44Kk44Or44CC5ZCr44G+44KM44Gm44GE44KL44Gu44Gv6YCP5piO5bqm44Gu44OV44Kp44O844Oe44OD44OI44Gn44CB44Ki44Or44OV44Kh44OB44Oj44ON44Or44KS5oyB44Gk44CB55m96buS44CB44Kr44Op44O844CB44OR44Os44OD44OI44Gn44GZ44CC44GZ44G544Gm44Gu44OT44OD44OI5rex5bqm44GM5a2Y5Zyo44GX44Gm44GE44KL5LuV5qeY44Gr5b6T44Gj44Gf44GT44Go44GM44Gn44GN44G+44GX44Gf44CCwwUNtAAAAGNpVFh0U29mdHdhcmUAAABqYQDjgr3jg5Xjg4jjgqbjgqfjgqIAInBubXRvcG5nIuOCkuS9v+eUqOOBl+OBpk5lWFRzdGF0aW9u6Imy5LiK44Gr5L2c5oiQ44GV44KM44G+44GZ44CCwoP4MAAAADJpVFh0RGlzY2xhaW1lcgAAAGphAOWFjeiyrOS6i+mghQDjg5Xjg6rjg7zjgqbjgqfjgqLjgIJ28EPmAAAAZUlEQVQokWNgYPgPBMbGLi6hoWlp5eUMZAgICiop/f8P43Z0kCOgpGRs/P8/jDtzJjkCIAP//4cayLBqFTkCaFwGcgSQnMSwe/eZM+QIwLggA8+cuXuXHAEYd/duoKMY3r0jQwAATn/xuQxIlj4AAAAASUVORK5CYII=",
      "ctjn0g04.png", false, 32, 32, "81fd25285e6b46f3996cfd02b1f16071");
  AKA_mark("lis===3700###sois===222267###eois===223367###lif===139###soif===71149###eoif===72249###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAAAAACT4cgpAAAABGdBTUEAAYagMeiWXwAAAA50RVh0VGl0bGUAUG5nU3VpdGVPVc9MAAAAMXRFWHRBdXRob3IAV2lsbGVtIEEuSi4gdmFuIFNjaGFpawood2lsbGVtQHNjaGFpay5jb20pjsxHHwAAAEF6VFh0Q29weXJpZ2h0AAB4nHPOL6gsykzPKFEIz8zJSc1VKEvMUwhOzkjMzNZRCM7MS08syC9KVTC0tDTVtTQDAIthD6RSWpQSAAAAu3pUWHREZXNjcmlwdGlvbgAAeJwtjrEOwjAMRPd+xU1Mpf/AhFgQv2BcQyLcOEoMVf8eV7BZvnt3dwLbUrOSZyuwBwhdfD/yQk/p4CbkMsMNLt3hSYYPtWzv0EytHX2r4QsiJNyuZzysLeQTLoX1PQdLTYa7Er8Oa8ou4w8cUUnFI3zEmj2BtCYCJypF9PcbvFHpNQIKb//gPuGkinv24yzVUw9Qbd17mK3NuTyHfW2s6VV4b0dt0qX49AUf8lYE8mJ6iAAAAEB6VFh0U29mdHdhcmUAAHiccy5KTSxJTVHIz1NIVPBLjQgpLkksyQTykvNz8osUSosz89IVlAryckvyC/LSlfQApuwRQp5RqK4AAAAdelRYdERpc2NsYWltZXIAAHiccytKTS1PLErVAwARVQNg1K617wAAAMhJREFUeJxd0cENwjAMBVAfKkAI8AgdoSOwCiNU4sgFMQEbMAJsUEZgA9igRj2VAp/ESVHiHCrnxXXtlGAWJXFrgQ1InvGaiKnxtIBtAvd/zQj8teDfnwnRjT0sFLhm7E9LCucHoNB0jsAoyO8F5JLXHqbtRgs76FC6gK++e3hw510DOYcvB3CPKiQo7CrpeezVg6DX/h7a6efoQPdDvCASCWPUcRaei07bVSOEKTExty6NgRVyEOTwZgMX5DCwgeRnaCilgXT9AB7ZwkX4/4lrAAAAAElFTkSuQmCC",
      "ctzn0g04.png", false, 32, 32, "cf2f1ab4f34d0c70f15f636ef584d53a");
  AKA_mark("lis===3702###sois===223371###eois===225851###lif===141###soif===72253###eoif===74733###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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",
      "exif2c08.png", false, 32, 32, "7acea6df2b0e2a7613981decc569b2fb");
  AKA_mark("lis===3704###sois===225855###eois===226379###lif===143###soif===74737###eoif===75261###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAAAAABWESUoAAABBklEQVR4nIXSL0xCURTH8a/gGHNjBjc3AoFioFhIr7z0molmsxFpVCONSLPRbCYSiWKxWAwWN4ObG5ubcwzk6f3jds71hXPr/eye3/3dy/VkOruZ394tlqv7h8en55fXt/f1x+fXZrv73pflD2NDMDIEQ0NwZQguDcHAEFwYgkILwkoEuRJQFWQi3Jafkgr6IiDmAJWDcxEQkroTVFJ6IsAn9SHUXTgTgX+5kFLdlq4I8DlwZ6g+6IgANwV/W9UYbRHh9DBFdcqpCL8f+1CtcyLC7Sd9BMGxCEj6iIKWCKIg9vEnOEpFWPr1aVZF8j9oJCLLi38/iENDUDcENUNwYAgsgSWwxC/EfcpYUKbOtgAAAABJRU5ErkJggg==",
      "f00n0g08.png", false, 32, 32, "f34b8a71205dc26cd37d58fb19179172");
  AKA_mark("lis===3706###sois===226383###eois===229779###lif===145###soif===75265###eoif===78661###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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",
      "f00n2c08.png", false, 32, 32, "d70ea8925988413a9fe9de1633a31033");
  AKA_mark("lis===3708###sois===229783###eois===230307###lif===147###soif===78665###eoif===79189###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAAAAABWESUoAAABCElEQVR4nIXSIUvEQRAF8Pd2dnb2BDEIgsFgMVgsJovJZhIMNsFgFC4IpuOSYDi4IlwQDIJBMIjB5Cew+I0MHvff2bC7+ce+meFxki2bmaWUVFWjShQRCSGQJMjbUUfcWFvwOnfEpXXEhXXEmXXEaWoLnpgT5/j2gsepFFfAl/+DR1qIMYAPn8LDNIgpALz5OXigKzEHZmO8+Em5ryuxwCTf4cnvwr04iGyjKR79ttxVJx4w8/fgTnRijnt/MW5HJxaoGsQtceIZVYO4KU68omoQN6IT76gaxPXgxCeqBnFNBvGD/1emMIdB/C5BmcIUClHedCkYQ1tQ2BYMbAuSbUF0BNERREf8AZVRLIMTf6sKAAAAAElFTkSuQmCC",
      "f01n0g08.png", false, 32, 32, "38446c18ff7e0ca3951b7ad5fa5e81c0");
  AKA_mark("lis===3710###sois===230311###eois===231983###lif===149###soif===79193###eoif===80865###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAEY0lEQVR4nK2WP+wlVRmGn/f8/c6cM+fsCDQEIhRYidlCY4GRBBIrsdCQmFCwncZGCk0oLGhIKCgsjDGxojBWkoCxNdBSkKWl2cJCowkNJSzXYu7cndn97Yagk6d4zzfJfZtv7nN0wrCM2ZliV+ev9qqYPnk8L07kTLYzZlfnr/RKt76bR2AJImWS3SHb/+Womy+kkTQiSxYxE+1Asv9xovdvxJEZppFZigi2IxMKwYi7fN95Jtg2v5P111+GXjQKY9IoLFV425Hx5ZDDfeZrCHYne8MX/ek3oU/0SaMymkZlmYWzHRlXHpT9fp5xts/6w+thbvRKnzUao2vMLEPIdmRUvnTOyC5Zb77pW2Oe6V29MwZjaAyWRWB3IX0AnE4/uvfV/dArr/naqI0607paZx70oXkwFgm78Jg+BoB/nX4A5rb5lRlMa/7pr51VlcbUKDO1a+rUQRuqg3mRwxz2Pf2b7fnw9P11+GXQc79wuZIr1siNMss6pVOGpkEZ1EU39Bm7593Tdzx2PwJlf9T1lxWrYiVVUiM18qzcyZ08ZIPfPvn5+rtvnB55Vf8Bfnd6OmB74vEYKJesJ15UmPBVsRIqoREbcVbsxE4aevf658CNU4zYH/Up8KvTUxFbSVu4i0RZgx76oVzBT7gqX/EV3/ANPyt0fCcMhYEfxEXv6TPgx6fHE7aSt3DVpCRM9rxUUMFNqKKKq1LDNTTjOq7LDdxAg3987TbwrdPDGcvbv3zeYZTj0cQzyKBAgQkqVFShQYMZOuowYHD7SYB2epAKyvEovp3IkokiiphEFdWpiuZoYnZ0qTuGu339n0A4ff3BKii7o/hmxUR2mKM4Fc/kqJ7qqJ7maZ7Zqwe6/+LZjwD3yTNawtEAZwmUe5wgvtFJDvNkj3mKVwlMnhrOtEgLzFE9fvHC3wF36yeMqCXf44FopHKciCcGKZA85snrEkeVwBSpkZqokZZomTmdXnobcDd/xjBG1lLsKBA7eyBesnj02rkgBSySIxYpUSUxJWqmJqrRMs1OP38LcO+/yiiMiVG0VDsKZOXiCvHINaInRVIgRSyS1yXOlMyUqcbv3+GqR7f+zKhaZjsKxHbSENc6MRAjaSVhiZyxTDGKMRlv/eXqgpt/Y3TGrGXYUSAXIYh5xntiJEZSOmNGXr+bQilME7VSq2qlNTaBsAmEMbQs99qggLCCD3hPiMRITMS1xs6XJStYoUyUSqlMlZ1A2ATCPDQW2wsEikOEhPe4rcNHYiKsNUbM5/3OBZvIlVKxyk4gbAKhDs3LXUIQLuAc8viA8/iIj4SET8R0voOc97uQJ1LlKBA2gTANylBd9n4QchseF3AeF/ERn84Ew2fiut+FOBErR4GwCQQb5KGyXMwgVi4d2joU8QmXcGl/zyEUwoSvHAXCJhDSIA7ysppB676dO9g65FFEEZfQWmMo49cVPwuEo0DYBMImEEvngq2DrYOAPEQUUYKE0vHOcxAIR4FwEYhf/gtC7nstgnuX5wAAAABJRU5ErkJggg==",
      "f01n2c08.png", false, 32, 32, "a9081889af0c30f206d793919792a0b6");
  AKA_mark("lis===3712###sois===231987###eois===232559###lif===151###soif===80869###eoif===81441###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAAAAABWESUoAAABKklEQVR4nIXRL0uDURgF8MP5OBaLIIggCIJBDAODTdgHGCxYh0kwDFYEwwsLA8Ng4U2CYBLBYrEYLIJBEARB9H3uX8Om97nvwr35x+Wc83BwOjyvJtP66ub2/uHx6fnl9e394/PruzHW+RAifxppRESMMdZa66x33nsfQogxRkRKQbApCEpBUAqCUhA0BUHR4mB/d3tzPRM0SnQBAMgEbRJ9oJpM61zQJAEMRURqQOWgTQKYJwVUUtokesfzLoDqQqfEogug2tIuiS6g9qBriz5QqcXoWuJk0eVP0OdiBAyy1ekzMQZ6+V3otJgBR63LMShxDXTat6VP4g7A7HJ8MTpTgiEJ/D/1B0MSK6trG1s7e51DnYNBieXVRRgLgrEgGAuCsSCIgiAK4hfp5Je/v8zr/QAAAABJRU5ErkJggg==",
      "f02n0g08.png", false, 32, 32, "9af1c44cbb489e5385f422d047612dfc");
  AKA_mark("lis===3714###sois===232563###eois===234967###lif===153###soif===81445###eoif===83849###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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",
      "f02n2c08.png", false, 32, 32, "14658e750fd12c4777c46a949bb3399c");
  AKA_mark("lis===3716###sois===234971###eois===235587###lif===155###soif===83853###eoif===84469###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAAAAABWESUoAAABTElEQVR4nH3SsUtCURTH8e/phERREBENIUWCUBQ0BC4OQcsDB6EhCIoiECEDg6JIzOfaXxBCBUHQIDg0tTgINTQEDUHgH+C/8RrU53nKe3e5HPhw77n3d9R1Mtndvf3Do5Nc/vSseH5xeXV9UyqXbysV1626VU2JIIDQ24ZK3fKihW5KtNANooWuEi00SbTQBNFCl8QXhUb99eX56aF2nx8IjeOLJv2VG5yhi/ii+6d1+DC36IIMhCAcwLvtQ+cJiALUA53qHFaU4DH4Fp3FiDvgrZG1QmfM8/nGdZoEhE7bD0qlPRkSOoUViCdOk4yJe5IR0cIxcU8wIj7ZMXHHxBetdje5L7ZN3DHPFx3aCaAGaRP3uPgi3qH99/sDRZO+KgEBcGznQ8ewYnklubYemCAVrAgmJ4D2yzDRBRFCe0MWKvogVPggTAxAiPgHY2dcQrz+CzkAAAAASUVORK5CYII=",
      "f03n0g08.png", false, 32, 32, "bab714eea8df8ab97f4095442247c9e1");
  AKA_mark("lis===3718###sois===235591###eois===237411###lif===157###soif===84473###eoif===86293###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAE0klEQVR4nH2WXYhUZRjHf8+8Z2fnzNcZv1r7kCyyD7Gy1CiN2kK3kAXDQjJCKk2FCr0QDAp6D3hjflB30lV30k1Xe9FtIMEiXlh2YRBi5UWCre7sfO6cfbo45505M7O7w2GY4Rze3/v/P8/7/I9RcjZXsMWKray2q9fa+x+y69bbRx6zG560GzfZpzfb57babS/al162r4zb13faiTft7km75y279x2771373vv2wAf24CF75Kj95FN77Lg9ccKe/Nx+8aX9ytpTp8yxdcYvRQRQhjKUoARFKEIBCpCHPPiQc9+jkHXfIzACHnhgwEAGMiAgAOboU55W8IOIgARTSmG6jEIKk0thYka2n2F6DPPh84ZANMBfkWKUHaCL6erIp3R0pSytw+zfnqGsVNBA/ZUDDKUozi6lIMnqvpITp0PJClkYUUbAEzzwFAMZIYN5+9UMJaEMFdEAf3WaIZSUklCEglBQ8kIB8oKv+EIORsUxJPFqRPDE6RAzuStDkT7GmiUYRcfIgy8pHcKoMuoYiY6EYSbeyCQmlIWSY4wty4i9WkZHimHGd0vSJHFJy0qABuqv7cQMCf4Kz/8bnr8VnrsZnvszPHs9PPt7eOZqeOZK+PW0Pb2l11qj/a01Ah5m4/ZMA+pQgzmkCrMwi9xVmn40C9+ELZb+fGafbUArdc3DPLRhHiIw67dJA6lDHeaglmLMKHU/+sgWDtrgkF31sR07bB88Yh/+LrwVr35N99WhAQ1oQtMx2g4zD+a+zdJ0D9USHTgGM6o1v3PP/a3CTvktXv0n3VWDeGdpRhtppxgm2EiLAYY4hszCjFL1o5hxWP6OV7+g2+bchgYATWghsY42mNzj0oYm0oKG29EwY9aPzko1Xv2EbqjCHMy555fRYcyjya8mEt9zNZdaijG1otMt7C/hf5fC2w/bVV0Raa8GdBhdJ/NOTiu516t5tx7VCwqsV2/M5u+EbeBqeHuFXTmXtEbXK+nXgek8QAQd11ttaKEttIk20DpaQ2to5jiZk8zqwozfzttcO+wAN8LbozaooXW0jjaggTbRJtpCW9BCDWNZ8Nz5y7rxGA+BvJvUBaEEZQjQSuSX8nasHd4ByvaJ4QCRVIAYVuYQA158+CQ5jjmXL11GHBFlCFQrHT/Q8Cbg263pAJGhADFUfNQgnjvdMSM7zBCKbo4HaKCnrwFZ+9pAgEh/gBhKOfBQk9IRD/hYiq92mql/ZOIZx4h1VPTbaSBj9wyFVFFSdhnyfpJAgzqSYnD5BsDUHzLxQpexsPlc3LIL9gCDQdjnlSGXA0mCrl9Hcu3YxOXrAFNX+fGKXpzW7y/Fq8uNi6pBx1+zKCMuuyGbdQEaM7yUji5jC5d/HZij8vMPUIIKGkT+2DAjDhDDSBaVfkbslZeSMsqOHYyPy8SETE7K3r2yfz+9egRoEPlrF2UYMgYVFpQFkiuCSOlIcvwGDnqjN0zSg1fvaqfp96ZufNWSFwxQQRWFKMWIhHnoOEDbjfzuUIynRGq4R3Wf9HCvYpIXMAWEBUWX1tFyjGUDJKr1MUyvaup0DHjV1bGoV4syqj2GcdvvZ6S96iiR9AGGvRpidGYThulrvZjUZSyvo5myq+6kpBl3fe4NAAYYw14t2lfNVM0HdMz4/wOljpe9l86W/gAAAABJRU5ErkJggg==",
      "f03n2c08.png", false, 32, 32, "eef71a6ef947497fe0c45ea2ba65c5dd");
  AKA_mark("lis===3720###sois===237415###eois===237871###lif===159###soif===86297###eoif===86753###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAAAAABWESUoAAAA1ElEQVR4nIXRwW3CMBSA4d/2s81MnaFiBqQOwA0pp26A1EsnqJQtWAtCIebAAdsP2zlEetGn/9mKfG/iJsYYQwjeey/eiXPOWWuNMQYjZ1qPBUySpQmeQi5tgAV6BbAjgB0BrFz7QBW2nCqgCtUH+S/GLw3qwl+1syxMUN+qWsFRgVs2/OhAXTioX5MXZlhg4re5gt0FoKjIPZ+W7P0WzABMHFsrytITrC/x4UMMcWYfs1PIHdUoD7mixFKDUnwGDfSWDKSBkERfSKIvJNEXwkAIA/EAFiZMByGZYIEAAAAASUVORK5CYII=",
      "f04n0g08.png", false, 32, 32, "2bb4337fabd31e8786cbb3aec25315b1");
  AKA_mark("lis===3722###sois===237875###eois===239287###lif===161###soif===86757###eoif===88169###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAADoElEQVR4nK2WzY4bRRSFv1tV/ed225SigSgiCx6AF+AJ2CTvAXv27Fmxy1vwAKyyZ8kqQooQUQQsBjwzjstjuy+Lqm6XPWPLIFpH1q3qdp+qW+ee206pqSvqOqGpH4//262mdn89V2/WVOxRn4jzYQEFOLBgSJdCD1vYwgYMCG7xDJx6t6bkANVlw0jj0uv2NDvYgsEtPlZKoVBfrdO6cpQXz4y7OaRxiydKpdRCpb4JaTkJmoIii0/Oa4otGEU00ribudIIjTIRGvVtwHIO7uK78QxuOpgoE6FVpkKrvgsY/gXsubvutoEWWqUTpspM6NTPA8L/AndXKRU0MIEpdMpcmKv3K9AMgIq8BlRfHs0/iEfZqnt3Rxv3gE6RKXToDOnQuQ/5asbrDwKDXuL8wxgQMOB+X2qNxA00aItMBrIW7XwY8/mFvIkE7wmXH5D7c0mFjkXaQA3NkLMGbf3KonbY+A/6+TvSzKM4Upm7XmqBFPsi1QqpiKxSQ4U2Pnwrt5HgV8JBqYz1cAp/f8ChFin2TyfKAi2REoph+V/r1VvC+bo+mne3qyhlNUi2NbWIA4s65KfPtpHgF8J5x3o445arJACDDoGMQ5N55fNr+4ZVheaoj4dH5qsuBM0lmPSeDfoXKXi/2AHi77ZyB3yqT2u2NbsMfU3fHA4d61IROaw/xUjSscA1YF9/wsKAUQz8BgSuLmkgjlDEN8Z8SHIWq8llbCTQm6vBzFwkWPFUKTNUmiU/DpXScW/Zv8sqVpIljkqLifr5KI9L+XEJT/Sr8+3CcS+HbuuUQpK44x/OXYFnj6l/XxiRYJDPAUdSnXzzJW3NtGJa09Uyq/sX3wPm7XfMm0B7tj9YxybaXn7I8QzGTVRQSbKPRpkkqS0+gqnSrnynmCMwBI5NDybz2JHDZCdRKKUkkTTpwcUMpjBTuuDnpxqCYxfbc4QeGjp56oa8VfLqFV3HTWogMFfmwftHD8mx2aaX74ZvjQ1sYA1rCLCCD7CEBo0eOzQQpgPFDO1Yzb0KewAGx3ZHvofxs+ke7iFAGCzmyNAnENvtJJFpS+j8cU+m72FITw8WduCGfThYZ/quBrITDUQbQutzHTm0pwcBBZPlysI2+xIp2MtqrJAy4xvtrSI0fiwJhyrapzOPmzBDrmympoNazCgfY9WCVeW1QAtc0oz2jPUQaQR2g92ZIcgpzYOqcgcrCIWnTFbzgIPsNw+OyjEP8qUMCwrW/wPZ2mq+jvKj/AAAAABJRU5ErkJggg==",
      "f04n2c08.png", false, 32, 32, "82a6745345706f5c5a662a94fdd0ea29");
  AKA_mark("lis===3724###sois===239291###eois===239955###lif===163###soif===88173###eoif===88837###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAAAAACT4cgpAAABcUlEQVR4nHVRsU4CQRDd5Y5kj2oXtDi7u1IbNFRWiom1iYk/IMYfMIpfQPwCPf0CobAzAQmxMkaOxMLCgl3srNzdCtaCrLNgMEGdu8zt7cy8eW/GQ3PmT7xXpsj2n2e3C3snYAeb7oxdfDdmkKFEF3IycLEVRwwsH5dcFGDKS2EYBAFCJvvmQMt5xjCUIBvJe5dzmDTaaa+fdlvJcRFAF/fjmDKIKCvE000GrTIG/wxezFgBQEvLYY5ARmCIRurB9xiUOTaIKipZEfnVqzaX0lopebdZ28DZo7Vo2lYrJXkzM+VPvx2w8NbDfECAJjLQWXF/fh4oe9pIBWAC6kfaOt/5DWqt1giUIefh7OGVkGFMjEF2ZN5lzx8rJ9yhaXgUzGz7rJFy4Mp52rqo/CVfKqu00nbyGYB8W8gR+kkMtB2KWzfTTkQpU473oD8lu11NLuv166RW+W9R446QQgzEZLmeqxm+kpGSL48/2x/fzdR/AW8Fs1uE53SkAAAAAElFTkSuQmCC",
      "f99n0g04.png", false, 32, 32, "207c771481d8e0786644d1d3ccdc1253");
  AKA_mark("lis===3726###sois===239959###eois===240515###lif===165###soif===88841###eoif===89397###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAAAAAAGgflrAAAABGdBTUEAAIi4vcVJsAAAARBJREFUeJy11U0KwjAQBeBXrFpFUCjFXcFTNJfwtF4itxBcCCKCpeJfbXUhQTMTE0N0FoEZ6Os3pbTR/Q6tokjvpdT7otD7uGn0wXwOa9EbsIAsswdQMQsYjwMFo1GgYDgMFAwGnoLbTR/0+4GCJAkU9HqBAtcKTkG36ynwXeH/AlcAE9T1jwVxrPdt6ymgr/Ll4hDQACqgAU4BDaDFBNerX8DXgtkMWC7VVAj1eWUCumOnAwB5vlqpExBCSnUygXmF9fq9k9IiOJ9NAgCYTjcbtYBFQFdQzyBNdzsYiglOJ5NgMgHSFNjvhZDyfQUmOB5NAVWl+udlrx8cExwOpoDPxQRl6RfABNttoGCxCBM8AHUVjIYrRN23AAAAAElFTkSuQmCC",
      "g03n0g16.png", false, 32, 32, "33bca103ab06d5288fc5a40d52b46648");
  AKA_mark("lis===3728###sois===240519###eois===241111###lif===167###soif===89401###eoif===89993###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAABGdBTUEAAIi4vcVJsAAAASlJREFUeJzllk2KwkAQRqsx/kQEERR3LrzEeAiP6yH6FC4EFzKCGGRGZ0bjwojJJI/kw7iyVpVKpV+/LgLtYisOZ/DGu+L6R3E5OANgPi+uL6DfgIuA0YhWggBhBPT7IoAM/qC/1xMBqkG3KwLUGYShCFANOh0RoM6g3RYBqoEMUA1aLRFABrUBVINmUwS8n0EQiAAy+IV+NLhAXTUIyeAH6qoBHhEByID6Xz4DGfCMwXTqzGy5zK4xMzMzf38kg1LAZOJWqzidJKv7bEIGJwA0GkmyXsf5ovnKBgT4N4Px2G02qU1WNzgC4LFZs+HQbbd0Q7sHGXyXAQYDd2OY2W4XJ1vOHxEZfJUBoij7qc8ltyCDAwBq+w/20J+eQaUgg8+6AGRAt+W6DK5anlkjB1vfagAAAABJRU5ErkJggg==",
      "g03n2c08.png", false, 32, 32, "5ab30d7747a459c1051650a1351a4519");
  AKA_mark("lis===3730###sois===241115###eois===241499###lif===169###soif===89997###eoif===90381###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAABGdBTUEAAIi4vcVJsAAAAB5QTFRFAAAAAP///wD/AMjIra0A3d0A//////8A/93//63/MbogiAAAAGNJREFUeJxjKAcCJSAwBgJBIGBAFmAAAfqoCAWCmUAAV4EsQEcVLkDQAQRwFcgClKlg6DA2YEZS0dDBYcxsgGIGB1wFCKSlJaTBVUAE2MACCBUJDGzMQC1IKtLS4O5AFiBTBQBS03C95h21qwAAAABJRU5ErkJggg==",
      "g03n3p04.png", false, 32, 32, "cab490ee86d478d165f2a516345d0ff0");
  AKA_mark("lis===3732###sois===241503###eois===242083###lif===171###soif===90385###eoif===90965###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAAAAAAGgflrAAAABGdBTUEAAK/INwWK6QAAASJJREFUeJytlDkOwjAQRSciLAEkmjQpUtJwAE6AT+0bcAAaCgoKmhQgZWEJCUVkhZkxGVnGhaX5Up6fvxQHbQtoBQGetcbzbofnsK5xsN3C4KIHMEAcDwOocfh+42C18jRYLh0NKGCxcDR4vXAwn3saRJGjAQXMZp4G06mjAe1AAjADV4DYwWTiaSABxA6cDZ7PPxuMx3huGkcD+i/c74IBBVADChANKIAu0SAMhwHM4PGwG2w2AIeDSZUyzyszsAPW6+PR7ABKaW120aC7wun0PX0/7cyAttx3kKbnc59351sMqsoOSJLLhX9uMShLHHQdxDFAkgBkmVJaK9XXyAyKwmZwvZpZa6GDPLdf4ddiBrcbDkajYQAzyDJPg/3eDUANPik0iSilDmOAAAAAAElFTkSuQmCC",
      "g04n0g16.png", false, 32, 32, "e38a1551172886575b1d91af694ecfde");
  AKA_mark("lis===3734###sois===242087###eois===242687###lif===173###soif===90969###eoif===91569###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAABGdBTUEAAK/INwWK6QAAATBJREFUeJzVlj1uwkAQRr+VzJ+MRAMFBS0FB+AG8aF9hByAgoKGgoJIKFIifpLIFBiwg1+cT3GTKaz1eHfevJ3GIVN1BMGXNFTnn6rT0ScA5vPq/DPsF3ARMBxSJQgQRsBgYAJcg37fBLgGcWwCXINezwS4BjaADD5gf7drAlwDG+DOoNMxAWRAV9RumwB3Bv/fwAa4Bq2WCSCDE+xHgy/IuwYxGRDANcArOkCeDGwABRkcmwL8xWA2C5IWi3KNRJKUXl9dgyjKF9NpWC6z4iKvnpYXZEAzuwFWq+wxeW/8FmRAgG8zmEzCev3QZFIgkcEeAPdmpfE4bDY/Vhcb1AJGo3BhSNpus7xucmWobgbvdYDdrnw0LTyLQQZvdYDfBhm8NgUgg5emAGRAf8tNGZwBkU1XhkiDotcAAAAASUVORK5CYII=",
      "g04n2c08.png", false, 32, 32, "daa8561d65a6598e69d6ddb060d802b7");
  AKA_mark("lis===3736###sois===242691###eois===243079###lif===175###soif===91573###eoif===91961###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAABGdBTUEAAK/INwWK6QAAAB5QTFRFAAAAAP///9T/1NQA/wD/ALq6//////8A/5v/m5sAIugsggAAAGhJREFUeJy9zsEJgDAQRNEhsLnbgaQFW7CAXOae07ZgC7Zgt04IhPWq4D8Oj2VxqF1RLQpxQO8fsalTTRGHH8WlipoiDt8ECqsFsZZEq48biaxD9NybkzbEGLILBNGQDYjCff4Rh5fiBou1fg11pxGVAAAAAElFTkSuQmCC",
      "g04n3p04.png", false, 32, 32, "0f81d4307736954402890d7203244bd0");
  AKA_mark("lis===3738###sois===243083###eois===243631###lif===177###soif===91965###eoif===92513###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAAAAAAGgflrAAAABGdBTUEAANbY1E9YMgAAAQpJREFUeJyt1b0KgzAQB/AI0X4gSMcOzu3SxTdpHvQexdk+QRdBCqK2VewgQXOnCUeaQS8B//nlQA3GURgjCMw5gDm/3825/H7NhctFWAfeQPa9uXA62QOwmAiShCnAAXHsKTgemQLcA1eAU3A4MAWfDy/AKdjvmQJuABHgI+x2ngJXwP8F3ACnIIo8BThgGJgC/DK1rUPwftsFOIAIXAF4OAVhaA9gCLIsz3WtlP68EkHXrQtut7lWCkBfiWAroCiuV10DWAS4y8sm6toqwAHLJq41lAiaBi3I6X4+C5Gmz6dSAMsjEAEO0LuW5XSfHpt/cERQ19tHWBtE8HrxAoigqtCCZAoeDz/BD+1fhGYCQbPgAAAAAElFTkSuQmCC",
      "g05n0g16.png", false, 32, 32, "5f67c34aadb2f3a602fea6d4ad14fa6d");
  AKA_mark("lis===3740###sois===243635###eois===244199###lif===179###soif===92517###eoif===93081###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAABGdBTUEAANbY1E9YMgAAARVJREFUeJzlljkOwjAQRcdS2EJEQUdDiWiochI4aG5Cj7gADaJA7ItCwSJC8iR/cMdUzvjHL8+xorjcqssZzGSuuj+ubkdnAAwG1f055A24COh2aSUoEI4ukO90RIBqkCQigAwI0G6LANUgjkWAatBqiQDVQAaoBs2mCCCDE+QbDRHwfwYyQDWo10UAGQTbomAGV+iTwRHyCQH20A9mQADVoFaDCSoyIECwU3SA/IdBmrrptLjGxMzMsuflLwajkfvo2OS59Gvwi8Fslg+HruCUeRvQoSi/5ELH3+BLQLnIYOcB6PWcmfX7brHIH49c3iIy2HoAlsu3u7PS4F5ksPEAeBUZrCEfRSKADFaQD2ZAf8uhvkU3ajlNmZwVLFcAAAAASUVORK5CYII=",
      "g05n2c08.png", false, 32, 32, "30cda048c618598b39f96c40141851fa");
  AKA_mark("lis===3742###sois===244203###eois===244575###lif===181###soif===93085###eoif===93457###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAABGdBTUEAANbY1E9YMgAAAB5QTFRFAAAAAP//zMwA/8z/AK6u/wD/i4sA//////8A/4v/c+IkkgAAAFtJREFUeJxj6ACCUCBwAQJBIGBAFmAAAfqoUAKCmUAAV4EsQEcVaUBgDARwFcgClKkwMHZxYEFWwWDswuKAQwUIlJcXlMNVIAsgqWBgZwFqQVJRXg53B7IAmSoA1Ah4O0rtoFUAAAAASUVORK5CYII=",
      "g05n3p04.png", false, 32, 32, "2be19a2ad1bdba9734899e453a27625b");
  AKA_mark("lis===3744###sois===244579###eois===245103###lif===183###soif===93461###eoif===93985###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAAAAAAGgflrAAAABGdBTUEAARFwiTtYVgAAAPhJREFUeJzNlbsNhDAMhg1C4SVomYABqFiASchcmYkxEC2Ip4S4AuVEbCAXpbm/SUzx+cMC2TkOUOI4ai2EWte1Wnvbpj7IMngNbkAAafoOwMYEkCSWBnFsaRBFlgY6gNYgDC0NdACtQRAYGqyrGeAPDUwBWgPftzTQAYwN9t3QAP/O02RpgAHEYFneATjEwBSADdwFhX1TVYwxBgDA+dVAzaNBWd7baGdw9gRomqKQ92vIDOb5HoDvnJ8bghj8BuBcIrCBO6HIEeY5QJ4zxjmAEELIHXWgePhDkV3b9jzlapMnmcE4Pr/CXcgMhsEMQAz63tKg6+wMPgLFodTQLHMsAAAAAElFTkSuQmCC",
      "g07n0g16.png", false, 32, 32, "cdd82be241cbfadbceffc98d967dfe30");
  AKA_mark("lis===3746###sois===245107###eois===245659###lif===185###soif===93989###eoif===94541###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAABGdBTUEAARFwiTtYVgAAAQtJREFUeJzVlkEKgzAQRSciiaK49QS5gCsv4EnqsXImryHdlhZtKdhFK1U6HzM0YDvMIowhz+dXUE3ElyJwxSl+fuDH8Q0AypKfH8F+AlwIKAohAAhDQJ6jk0BJDbJMCJAaiAFSgzQVAqQGYgAyuIYC7GaAAEkiBCAD9IjEgJ8zMEYIkL5F/28AAXcwlxoUUgAyGMF+aHAB890yQAZaCwHAIBqJ2DZm1U2jnotXtZwB114Gda22nVAGgweg66aqUhsAlAECfIbMxN4SuXn9jQE/adcMYBANRGxr/W5rFRFZq7Sez3XzuUsDrmP03Szvt+8X/o74NcrAB+BVKINzKAAyOIUCIAP0MxvK4AEWgFoVP+GhCgAAAABJRU5ErkJggg==",
      "g07n2c08.png", false, 32, 32, "0dcc8b7a828dd05df802b636673ed0ab");
  AKA_mark("lis===3748###sois===245663###eois===246035###lif===187###soif===94545###eoif===94917###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAABGdBTUEAARFwiTtYVgAAAB5QTFRFAAAAAP//AJycv78A/3b/dnYA/wD///////8A/7//TpdUbAAAAFxJREFUeJxj6ACCNCBQAgJBIGBAFmAAAfqoMAYCFyCAq0AWoKOKUCCYCQRwFcgClKmYMFOJCUUFA1gAuwoQKC8vKFdiYoKogAswMCCrYGBnUkJRUV4OdweyAJkqACOga73pcj3PAAAAAElFTkSuQmCC",
      "g07n3p04.png", false, 32, 32, "8f1a3f91ca328ca507273e80324087e9");
  AKA_mark("lis===3750###sois===246039###eois===246487###lif===189###soif===94921###eoif===95369###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAAAAAAGgflrAAAABGdBTUEAAYagMeiWXwAAAL1JREFUeJztlTEOhCAQRT8bCyw9hlzD0tIDIQfyCF7D0ktYSGLBFoTFmUQC2WRjsv4CZqaYefwQEM6BSAiaa03zcaR5ZS0tSImk+IDiBpy42ndaqOtfEzwe3MGDrwlKTfxHD46jkKBp0g2KPdi2QoI73YNhmKYQGxOe12wP+j7Gxmgd1myCee66sx/G+J0TvCyT/Ajwa2QAAMeUNDHG8XvhBKJtaSEYpxQALItS/vyhSfbPtK7n2dcEz6sMvAHqCJi/5fyWiAAAAABJRU5ErkJggg==",
      "g10n0g16.png", false, 32, 32, "75b64641f0a3c0899ae3b466fcb97c06");
  AKA_mark("lis===3752###sois===246491###eois===246967###lif===191###soif===95373###eoif===95849###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAABGdBTUEAAYagMeiWXwAAANRJREFUeJztljEKhDAURP8HC+32HpYewdbS+/zNfbyCx7D1FAu7xUK2cA0aM0j4ARWcKhlNJsNTkS2FxQSuCIf9Z9jO3iAgz8P+B9xPIDdDC6IDQOHoAKhUDaBQA8SgKCIDDmtwM3C6GezqsAbJIF+HwRf4sQ0eKOAF/GQMUMB1GCApG7Qtd916D0NERDJPNQ2ahv1IM2/tBpqvad/buuYAdrMY6xn4znR2l6F/inxH1lNNg7JkIqoqHgb7P7hsIGsYjONitWwGk87+HuzrdA1S/VX8ANStTVTe34+eAAAAAElFTkSuQmCC",
      "g10n2c08.png", false, 32, 32, "69926b0e52c1371c81ca49d7cd0cf2b1");
  AKA_mark("lis===3754###sois===246971###eois===247355###lif===193###soif===95853###eoif===96237###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAABGdBTUEAAYagMeiWXwAAAB5QTFRFAAAAqakAAP///6r/VFQA/wD/AH9///////8A/1X/7g7bWgAAAGNJREFUeJxj6ACCUCBIAwIlIGBAFmAAAfqoEASCmUAAV4EsQEcVLkBgDARwFcgClKkwME5LYENWwWCcxpaApoKNAaICBMrLC8rTGKAq4AJALUgqGNjZgIYiqSgvh7sDWYBMFQBG4oXJmToRDgAAAABJRU5ErkJggg==",
      "g10n3p04.png", false, 32, 32, "832e5401524ab7238a6eccd5d852b8ef");
  AKA_mark("lis===3756###sois===247359###eois===247967###lif===195###soif===96241###eoif===96849###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAAAAAAGgflrAAAABGdBTUEAA9CQ+FSITwAAATZJREFUeJyllMsNwjAMQN0SQHwixGeNbsSBAToHXQDuHLoCi5A1CgjxhxY4RFGxLRJZ+FDXVvLy6laN3m9AEUW4ThJcbza4VkUBoqAHqO1WBqDGarfznxA02O9lAGYgBTCDw+FPAwqIY6HB8YgbjYbQQApgBqfTnwbnM2koocHlghvNptDgepUBmAEFtFpCg9sNN9ptocH97geUZcCAAgYDXNPXzAweD9zodPwAZvB8+gE0mAEFdLt+ADOgQ+r1bF6tAGYze29M/WtlBlWFG/0+AMBikabuGjCgAK1dzrK6qoMaxBUJrbXWGiDL5vNvgDHOAId6vTDRfQfL5XdljJsEmwF9Jrslz6dTgDy325KkHiSbAW0Mhzav1za7+bscNHCAXxE0GI38AGZAF4zHQgO6YDKRGXwAuz+aGCA4FKQAAAAASUVORK5CYII=",
      "g25n0g16.png", false, 32, 32, "698f892bb4453fdd325ae414dc82b34f");
  AKA_mark("lis===3758###sois===247971###eois===248607###lif===197###soif===96853###eoif===97489###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAABGdBTUEAA9CQ+FSITwAAAUxJREFUeJytlcttAjEQQMeLgSAQ4SPK2I44UAB1oC1gC+BACVQSykB8hIgSSIJzwFq8xE/KSB75MIxn5+lpLGGcxMMI3OQmXn+Ll+0WAOoArt2lAoCw3acCkMGB+uED2hkaHFMByIAAWRav3whABiclAIMMkgHI4Az9jYYSQAYEsFYJIIP3VAAySAYggw/ob7WUADIgQLOpBJDBJ/S320oAGVy0gB+okwEBXl/ggl4FGXxBf6ejBJDBVQugIINv6O92lQAy+A9guTQiMpsFMzYief0DrUGv55OyNPO5C5N4kAG9ugpwz4vCPBWfAwyym0j09Pv+iEhRmMXCififj9jUDWLH0l9gOKss3d+in14tg3ZAgMHAJ6uVm07NPXlMzOvThXdAW6sAIrJeB13h4wlzMiDAcAgXFGRA/aOREkAG1D8eKwFag8lECQCDX4gtYR8yuXeNAAAAAElFTkSuQmCC",
      "g25n2c08.png", false, 32, 32, "a64f63bacd6a0edec500179d538ede01");
  AKA_mark("lis===3760###sois===248611###eois===248995###lif===199###soif===97493###eoif===97877###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAABGdBTUEAA9CQ+FSITwAAAB5QTFRFAAAAAC0tAP//EBAA/1z//xD//wD/XFwA//////8AUlHX5QAAAGRJREFUeJy9zrENgDAMRFFbSpHWK7ACC7jICqzACrSUXoFtc1EkczVI+eX5FZYHncjQhoQHGa0RFzpQCh4Wih01lIKHf0KaKQtvZQyvcC8pRnHXaqpTzCEqziRCQo0Fyj94+Cg6NXRmxzu0UNgAAAAASUVORK5CYII=",
      "g25n3p04.png", false, 32, 32, "c2b4d9eb0587bc254212b05beb972578");
  AKA_mark("lis===3762###sois===248999###eois===249319###lif===201###soif===97881###eoif===98201###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAAAAAAGgflrAAAABGdBTUEAAYagMeiWXwAAAF5JREFUeJzV0jEKwDAMQ1E5W+9/xtygk8AoezLVKgSj2Y8/OICnuFcTE2OgOoJgHQiZAN2C9kDKBOgW3AZCJkC3oD2QMgG6BbeBkAnQLWgPpExgP28H7E/0GTjPfwAW2EvYX64rn9cAAAAASUVORK5CYII=",
      "oi1n0g16.png", false, 32, 32, "a14e204bbf905586d3763f3cc5dcb2f3");
  AKA_mark("lis===3764###sois===249323###eois===249823###lif===203###soif===98205###eoif===98705###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAIAAACsiDHgAAAABGdBTUEAAYagMeiWXwAAAOVJREFUeJzVlsEKgzAQRKfgQX/Lfrf9rfaWHgYDkoYmZpPMehiGReQ91qCPEEIAPi/gmu9kcnN+GD0nM1/O4vNad7cC6850KHCiM5fz7fJwXdEBYPOygV/o7PICeXSmsMA/dKbkGShD51xsAzXo7DIC9ehMAYG76MypZ6ANnfNJG7BAZx8uYIfOHChgjR4F+MfuDx0AtmfnDfREZ+8m0B+9m8Ao9Chg9x0Yi877jTYwA529WWAeerPAbPQoUH8GNNA5r9yAEjp7sYAeerGAKnoUyJ8BbXTOMxvwgM6eCPhBTwS8oTO/5kL+Xge7xOwAAAAASUVORK5CYII=",
      "oi1n2c16.png", false, 32, 32, "a3774d09367dd147a3539d2d2f6ca133");
  AKA_mark("lis===3766###sois===249827###eois===250163###lif===205###soif===98709###eoif===99045###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAAAAAAGgflrAAAABGdBTUEAAYagMeiWXwAAAEBJREFUeJzV0jEKwDAMQ1E5W+9/xtygk8AoezLVKgSj2Y8/OICnuFcTE2OgOoJgHQiZAN2C9kDKBOgW3AZCJkC3oD2QMjqwwDMAAAAeSURBVAG6BbeBkAnQLWgPpExgP28H7E/0GTjPfwAW2EvYX7J6X30AAAAASUVORK5CYII=",
      "oi2n0g16.png", false, 32, 32, "a14e204bbf905586d3763f3cc5dcb2f3");
  AKA_mark("lis===3768###sois===250167###eois===250683###lif===207###soif===99049###eoif===99565###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAIAAACsiDHgAAAABGdBTUEAAYagMeiWXwAAAIBJREFUeJzVlsEKgzAQRKfgQX/Lfrf9rfaWHgYDkoYmZpPMehiGReQ91qCPEEIAPi/gmu9kcnN+GD0nM1/O4vNad7cC6850KHCiM5fz7fJwXdEBYPOygV/o7PICeXSmsMA/dKbkGShD51xsAzXo7DIC9ehMAYG76MypZ6ANnfNJG7BAZx+ZiKBzAAAAZUlEQVQuYIfOHChgjR4F+MfuDx0AtmfnDfREZ+8m0B+9m8Ao9Chg9x0Yi877jTYwA529WWAeerPAbPQoUH8GNNA5r9yAEjp7sYAeerGAKnoUyJ8BbXTOMxvwgM6eCPhBTwS8oTO/5kL+Xk13nmIAAAAASUVORK5CYII=",
      "oi2n2c16.png", false, 32, 32, "a3774d09367dd147a3539d2d2f6ca133");
  AKA_mark("lis===3770###sois===250687###eois===251055###lif===209###soif===99569###eoif===99937###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAAAAAAGgflrAAAABGdBTUEAAYagMeiWXwAAAB9JREFUeJzV0jEKwDAMQ1E5W+9/xtygk8AoezLVKgSj2Y8/OIdtk98AAAAfSURBVICnuFcTE2OgOoJgHQiZAN2C9kDKBOgW3AZCJkC3oD3Oo8vsAAAAAklEQVSQMsVtZiAAAAAeSURBVAG6BbeBkAnQLWgPpExgP28H7E/0GTjPfwAW2EvYX7J6X30AAAAASUVORK5CYII=",
      "oi4n0g16.png", false, 32, 32, "a14e204bbf905586d3763f3cc5dcb2f3");
  AKA_mark("lis===3772###sois===251059###eois===251607###lif===211###soif===99941###eoif===100489###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAIAAACsiDHgAAAABGdBTUEAAYagMeiWXwAAAGNJREFUeJzVlsEKgzAQRKfgQX/Lfrf9rfaWHgYDkoYmZpPMehiGReQ91qCPEEIAPi/gmu9kcnN+GD0nM1/O4vNad7cC6850KHCiM5fz7fJwXdEBYPOygV/o7PICeXSmsMA/dKbkGShDblRaWAAAAB1JREFU51xsAzXo7DIC9ehMAYG76MypZ6ANnfNJG7BAZx9l6MXmAAAAY0lEQVQuYIfOHChgjR4F+MfuDx0AtmfnDfREZ+8m0B+9m8Ao9Chg9x0Yi877jTYwA529WWAeerPAbPQoUH8GNNA5r9yAEjp7sYAeerGAKnoUyJ8BbXTOMxvwgM6eCPhBTwS8oTO/5kIg4uIpAAAAAklEQVT+XnoXDXoAAAAASUVORK5CYII=",
      "oi4n2c16.png", false, 32, 32, "a3774d09367dd147a3539d2d2f6ca133");
  AKA_mark("lis===3774###sois===251611###eois===253419###lif===213###soif===100493###eoif===102301###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAAAAAAGgflrAAAABGdBTUEAAYagMeiWXwAAAAFJREFUeHbmhOYAAAABSURBVJzRgaKHAAAAAUlEQVTV3oFbswAAAAFJREFU0kDlzhAAAAABSURBVDF55n3SAAAAAUlEQVQKyO2U9gAAAAFJREFUwLNcv1gAAAABSURBVDAO4U1EAAAAAUlEQVQMIY4xwwAAAAFJREFUQ8ftbcIAAAABSURBVFE0VByKAAAAAUlEQVQ5dz314AAAAAFJREFUW9SB9ZQAAAABSURBVO8YjYIBAAAAAUlEQVR/6IIRRQAAAAFJREFUxlo/Gm0AAAABSURBVNynXeMXAAAAAUlEQVSg/u7eAAAAAAFJREFUk0E+vxYAAAABSURBVMCzXL9YAAAAAUlEQVQoHY3VEgAAAAFJREFUe+/v1VwAAAABSURBVDLg7yxoAAAAAUlEQVTV3oFbswAAAAFJREFUKvODtD4AAAABSURBVAQvVbnxAAAAAUlEQVSjZ+ePugAAAAFJREFU2dc3F5gAAAABSURBVI9VP+NZAAAAAUlEQVQ/nl5Q1QAAAAFJREFUOAA6xXYAAAABSURBVIDFgP7IAAAAAUlEQVSnYIpLowAAAAFJREFUuO2CRlYAAAABSURBVFfdN7m/AAAAAUlEQVQTrIY8NgAAAAFJREFUE6yGPDYAAAABSURBVGP8g00KAAAAAUlEQVSg/u7eAAAAAAFJREFUOu40pFoAAAABSURBVIIrjp/kAAAAAUlEQVRgZYocsAAAAAFJREFUHUs+ETEAAAABSURBVAgm4/XaAAAAAUlEQVSZoetWCAAAAAFJREFUACg4fegAAAABSURBVN3QWtOBAAAAAUlEQVSCK46f5AAAAAFJREFU9nzmKsEAAAABSURBVEBe5Dx4AAAAAUlEQVTKU4lWRgAAAAFJREFUBC9VufEAAAABSURBVOiG6ReiAAAAAUlEQVQW3OzIuQAAAAFJREFU3Kdd4xcAAAABSURBVAbBW9jdAAAAAUlEQVRCsOpdVAAAAAFJREFUJvo1+BUAAAABSURBVEBe5Dx4AAAAAUlEQVS3fT1bxwAAAAFJREFUoP7u3gAAAAABSURBVD1wUDH5AAAAAUlEQVSQ2DfurAAAAAFJREFUMuDvLGgAAAABSURBVAFfP01+AAAAAUlEQVS6A4wnegAAAAFJREFUBVhSiWcAAAABSURBVLd9PVvHAAAAAUlEQVSBsofOXgAAAAFJREFUkNg37qwAAAABSURBVAlR5MVMAAAAAUlEQVTQruuvPAAAAAFJREFULW3nIZ0AAAABSURBVGhrUZSCAAAAAUlEQVQPuIdgeQAAAAFJREFUpPmDGhkAAAABSURBVExXUnBTAAAAAUlEQVRgZYocsAAAAAFJREFUP55eUNUAAAABSURBVG/1NQEhAAAAAUlEQVQHtlzoSwAAAAFJREFU7IGE07sAAAABSURBVE/OWyHpAAAAAUlEQVT0kuhL7QAAAAFJREFUGUxT1SgAAAABSURBVDgAOsV2AAAAAUlEQVTPI+OiyQAAAAFJREFUf+iCEUUAAAABSURBVAAoOH3oAAAAAUlEQVQW3OzIuQAAAAFJREFU2KAwJw4AAAABSURBVEvJNuXwAAAAAUlEQVTYoDAnDgAAAAFJREFUX9PsMY0AAAAASUVORK5CYII=",
      "oi9n0g16.png", false, 32, 32, "a14e204bbf905586d3763f3cc5dcb2f3");
  AKA_mark("lis===3776###sois===253423###eois===257571###lif===215###soif===102305###eoif===106453###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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",
      "oi9n2c16.png", false, 32, 32, "a3774d09367dd147a3539d2d2f6ca133");
  AKA_mark("lis===3778###sois===257575###eois===260689###lif===217###soif===106457###eoif===109571###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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QOEDCAASABQ+gAAgAUDhAwgAEgAUPoAAIAFA4QMIABIAFD6AACABQOEDCAASABQ+gAAgAUDhAwgAEgAUPoAAIAFA4QMIABIAFD6AACABQOEDCAASABQ+gAAgAUDhAwgAEgAUPoAAIAFA4QMIABIAFD6AACABQOEDCAASABQ+gAAgAUDhAwgAEgAUPoAAIAFA4QMIABIAFD6AACABQOEDCAASABQ+gAAgAUDhAwgAEgAUPoAAIAFA4QMIABIAFD6AACABQOEDCAASABQ+gAAgAUDhAwgAEgAUPoAAIAFA4QMIABIAFD6AACABQOEDCAASABQ+gAAgAUDhAwgAEgAUPoAAIAFA4QMIABIAFD6AACABQOEDCAASABQ+gAAgAUDhAwgAEgAUPoAAIAFA4QMIABIAFD6AACABQOEDCAASABQ+gAAgAUDhAwgAEgAUPoAAIAFA4QMIABIAFD6AACABQOEDCAASABQ+gAAgAUDhAwgAEgAUPoAAIAFA4QMIABIAFD6AACABQOEDCAASABQ+gAAgAUDhAwgAEgAUPoAAIAFA4QMIABIAFD6AACABQOEDrNu2zb4Gs2n9C98FlZObRxMyAAAAAElFTkSuQmCC",
      "PngSuite.png", false, 256, 256, "183c2504778cb2b6384dbbad46fa2a2a");
  AKA_mark("lis===3780###sois===260693###eois===262073###lif===219###soif===109575###eoif===110955###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAIAAACsiDHgAAAABGdBTUEAAYagMeiWXwAAAohQTFRFAAAAAAAzAABmAACZAADMAAD/ADMAADMzADNmADOZADPMADP/AGYAAGYzAGZmAGaZAGbMAGb/AJkAAJkzAJlmAJmZAJnMAJn/AMwAAMwzAMxmAMyZAMzMAMz/AP8AAP8zAP9mAP+ZAP/MAP//MwAAMwAzMwBmMwCZMwDMMwD/MzMAMzMzMzNmMzOZMzPMMzP/M2YAM2YzM2ZmM2aZM2bMM2b/M5kAM5kzM5lmM5mZM5nMM5n/M8wAM8wzM8xmM8yZM8zMM8z/M/8AM/8zM/9mM/+ZM//MM///ZgAAZgAzZgBmZgCZZgDMZgD/ZjMAZjMzZjNmZjOZZjPMZjP/ZmYAZmYzZmZmZmaZZmbMZmb/ZpkAZpkzZplmZpmZZpnMZpn/ZswAZswzZsxmZsyZZszMZsz/Zv8AZv8zZv9mZv+ZZv/MZv//mQAAmQAzmQBmmQCZmQDMmQD/mTMAmTMzmTNmmTOZmTPMmTP/mWYAmWYzmWZmmWaZmWbMmWb/mZkAmZkzmZlmmZmZmZnMmZn/mcwAmcwzmcxmmcyZmczMmcz/mf8Amf8zmf9mmf+Zmf/Mmf//zAAAzAAzzABmzACZzADMzAD/zDMAzDMzzDNmzDOZzDPMzDP/zGYAzGYzzGZmzGaZzGbMzGb/zJkAzJkzzJlmzJmZzJnMzJn/zMwAzMwzzMxmzMyZzMzMzMz/zP8AzP8zzP9mzP+ZzP/MzP///wAA/wAz/wBm/wCZ/wDM/wD//zMA/zMz/zNm/zOZ/zPM/zP//2YA/2Yz/2Zm/2aZ/2bM/2b//5kA/5kz/5lm/5mZ/5nM/5n//8wA/8wz/8xm/8yZ/8zM/8z///8A//8z//9m//+Z///M////Y7C7UQAAAOVJREFUeJzVlsEKgzAQRKfgQX/Lfrf9rfaWHgYDkoYmZpPMehiGReQ91qCPEEIAPi/gmu9kcnN+GD0nM1/O4vNad7cC6850KHCiM5fz7fJwXdEBYPOygV/o7PICeXSmsMA/dKbkGShD51xsAzXo7DIC9ehMAYG76MypZ6ANnfNJG7BAZx8uYIfOHChgjR4F+MfuDx0AtmfnDfREZ+8m0B+9m8Ao9Chg9x0Yi877jTYwA529WWAeerPAbPQoUH8GNNA5r9yAEjp7sYAeerGAKnoUyJ8BbXTOMxvwgM6eCPhBTwS8oTO/5kL+Xge7xOwAAAAASUVORK5CYII=",
      "pp0n2c16.png", false, 32, 32, "a3774d09367dd147a3539d2d2f6ca133");
  AKA_mark("lis===3782###sois===262077###eois===263265###lif===221###soif===110959###eoif===112147###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABGdBTUEAAYagMeiWXwAAAohQTFRFAAAAAAAzAABmAACZAADMAAD/ADMAADMzADNmADOZADPMADP/AGYAAGYzAGZmAGaZAGbMAGb/AJkAAJkzAJlmAJmZAJnMAJn/AMwAAMwzAMxmAMyZAMzMAMz/AP8AAP8zAP9mAP+ZAP/MAP//MwAAMwAzMwBmMwCZMwDMMwD/MzMAMzMzMzNmMzOZMzPMMzP/M2YAM2YzM2ZmM2aZM2bMM2b/M5kAM5kzM5lmM5mZM5nMM5n/M8wAM8wzM8xmM8yZM8zMM8z/M/8AM/8zM/9mM/+ZM//MM///ZgAAZgAzZgBmZgCZZgDMZgD/ZjMAZjMzZjNmZjOZZjPMZjP/ZmYAZmYzZmZmZmaZZmbMZmb/ZpkAZpkzZplmZpmZZpnMZpn/ZswAZswzZsxmZsyZZszMZsz/Zv8AZv8zZv9mZv+ZZv/MZv//mQAAmQAzmQBmmQCZmQDMmQD/mTMAmTMzmTNmmTOZmTPMmTP/mWYAmWYzmWZmmWaZmWbMmWb/mZkAmZkzmZlmmZmZmZnMmZn/mcwAmcwzmcxmmcyZmczMmcz/mf8Amf8zmf9mmf+Zmf/Mmf//zAAAzAAzzABmzACZzADMzAD/zDMAzDMzzDNmzDOZzDPMzDP/zGYAzGYzzGZmzGaZzGbMzGb/zJkAzJkzzJlmzJmZzJnMzJn/zMwAzMwzzMxmzMyZzMzMzMz/zP8AzP8zzP9mzP+ZzP/MzP///wAA/wAz/wBm/wCZ/wDM/wD//zMA/zMz/zNm/zOZ/zPM/zP//2YA/2Yz/2Zm/2aZ/2bM/2b//5kA/5kz/5lm/5mZ/5nM/5n//8wA/8wz/8xm/8yZ/8zM/8z///8A//8z//9m//+Z///M////Y7C7UQAAAFVJREFUeJzt0DEKwDAMQ1EVPCT3v6BvogzO1KVLQcsfNBgMeuixLcnrlf1x//WzS2pJjgUAAAADyPWrwgMAAABgAMF+VXgAAAAAXIAdS3U3AAAAooADG8P2VRMVDwMAAAAASUVORK5CYII=",
      "pp0n6a08.png", false, 32, 32, "de9a6b2025046b20b3a408990a2b7e71");
  AKA_mark("lis===3784###sois===263269###eois===265309###lif===223###soif===112151###eoif===114191###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAAAAABWESUoAAAABGdBTUEAAYagMeiWXwAABRpzUExUc2l4LWN1YmUACAAAAP8AAAAAM/8AAAAAZv8AAAAAmf8AAAAAzP8AAAAA//8AAAAzAP8AAAAzM/8AAAAzZv8AAAAzmf8AAAAzzP8AAAAz//8AAABmAP8AAABmM/8AAABmZv8AAABmmf8AAABmzP8AAABm//8AAACZAP8AAACZM/8AAACZZv8AAACZmf8AAACZzP8AAACZ//8AAADMAP8AAADMM/8AAADMZv8AAADMmf8AAADMzP8AAADM//8AAAD/AP8AAAD/M/8AAAD/Zv8AAAD/mf8AAAD/zP8AAAD///8AADMAAP8AADMAM/8AADMAZv8AADMAmf8AADMAzP8AADMA//8AADMzAP8AADMzM/8AADMzZv8AADMzmf8AADMzzP8AADMz//8AADNmAP8AADNmM/8AADNmZv8AADNmmf8AADNmzP8AADNm//8AADOZAP8AADOZM/8AADOZZv8AADOZmf8AADOZzP8AADOZ//8AADPMAP8AADPMM/8AADPMZv8AADPMmf8AADPMzP8AADPM//8AADP/AP8AADP/M/8AADP/Zv8AADP/mf8AADP/zP8AADP///8AAGYAAP8AAGYAM/8AAGYAZv8AAGYAmf8AAGYAzP8AAGYA//8AAGYzAP8AAGYzM/8AAGYzZv8AAGYzmf8AAGYzzP8AAGYz//8AAGZmAP8AAGZmM/8AAGZmZv8AAGZmmf8AAGZmzP8AAGZm//8AAGaZAP8AAGaZM/8AAGaZZv8AAGaZmf8AAGaZzP8AAGaZ//8AAGbMAP8AAGbMM/8AAGbMZv8AAGbMmf8AAGbMzP8AAGbM//8AAGb/AP8AAGb/M/8AAGb/Zv8AAGb/mf8AAGb/zP8AAGb///8AAJkAAP8AAJkAM/8AAJkAZv8AAJkAmf8AAJkAzP8AAJkA//8AAJkzAP8AAJkzM/8AAJkzZv8AAJkzmf8AAJkzzP8AAJkz//8AAJlmAP8AAJlmM/8AAJlmZv8AAJlmmf8AAJlmzP8AAJlm//8AAJmZAP8AAJmZM/8AAJmZZv8AAJmZmf8AAJmZzP8AAJmZ//8AAJnMAP8AAJnMM/8AAJnMZv8AAJnMmf8AAJnMzP8AAJnM//8AAJn/AP8AAJn/M/8AAJn/Zv8AAJn/mf8AAJn/zP8AAJn///8AAMwAAP8AAMwAM/8AAMwAZv8AAMwAmf8AAMwAzP8AAMwA//8AAMwzAP8AAMwzM/8AAMwzZv8AAMwzmf8AAMwzzP8AAMwz//8AAMxmAP8AAMxmM/8AAMxmZv8AAMxmmf8AAMxmzP8AAMxm//8AAMyZAP8AAMyZM/8AAMyZZv8AAMyZmf8AAMyZzP8AAMyZ//8AAMzMAP8AAMzMM/8AAMzMZv8AAMzMmf8AAMzMzP8AAMzM//8AAMz/AP8AAMz/M/8AAMz/Zv8AAMz/mf8AAMz/zP8AAMz///8AAP8AAP8AAP8AM/8AAP8AZv8AAP8Amf8AAP8AzP8AAP8A//8AAP8zAP8AAP8zM/8AAP8zZv8AAP8zmf8AAP8zzP8AAP8z//8AAP9mAP8AAP9mM/8AAP9mZv8AAP9mmf8AAP9mzP8AAP9m//8AAP+ZAP8AAP+ZM/8AAP+ZZv8AAP+Zmf8AAP+ZzP8AAP+Z//8AAP/MAP8AAP/MM/8AAP/MZv8AAP/Mmf8AAP/MzP8AAP/M//8AAP//AP8AAP//M/8AAP//Zv8AAP//mf8AAP//zP8AAP////8AACL/aC4AAABBSURBVHicY2RgJAAUCMizDAUFjA8IKfj3Hz9geTAcFDDKEZBnZKJ5XAwGBYyP8Mr+/8/4h+ZxMRgUMMrglWVkBABQ5f5xNeLYWQAAAABJRU5ErkJggg==",
      "ps1n0g08.png", false, 32, 32, "f6470f9f6296c5109e2bd730fe203773");
  AKA_mark("lis===3786###sois===265313###eois===267569###lif===225###soif===114195###eoif===116451###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAIAAACsiDHgAAAABGdBTUEAAYagMeiWXwAABRpzUExUc2l4LWN1YmUACAAAAP8AAAAAM/8AAAAAZv8AAAAAmf8AAAAAzP8AAAAA//8AAAAzAP8AAAAzM/8AAAAzZv8AAAAzmf8AAAAzzP8AAAAz//8AAABmAP8AAABmM/8AAABmZv8AAABmmf8AAABmzP8AAABm//8AAACZAP8AAACZM/8AAACZZv8AAACZmf8AAACZzP8AAACZ//8AAADMAP8AAADMM/8AAADMZv8AAADMmf8AAADMzP8AAADM//8AAAD/AP8AAAD/M/8AAAD/Zv8AAAD/mf8AAAD/zP8AAAD///8AADMAAP8AADMAM/8AADMAZv8AADMAmf8AADMAzP8AADMA//8AADMzAP8AADMzM/8AADMzZv8AADMzmf8AADMzzP8AADMz//8AADNmAP8AADNmM/8AADNmZv8AADNmmf8AADNmzP8AADNm//8AADOZAP8AADOZM/8AADOZZv8AADOZmf8AADOZzP8AADOZ//8AADPMAP8AADPMM/8AADPMZv8AADPMmf8AADPMzP8AADPM//8AADP/AP8AADP/M/8AADP/Zv8AADP/mf8AADP/zP8AADP///8AAGYAAP8AAGYAM/8AAGYAZv8AAGYAmf8AAGYAzP8AAGYA//8AAGYzAP8AAGYzM/8AAGYzZv8AAGYzmf8AAGYzzP8AAGYz//8AAGZmAP8AAGZmM/8AAGZmZv8AAGZmmf8AAGZmzP8AAGZm//8AAGaZAP8AAGaZM/8AAGaZZv8AAGaZmf8AAGaZzP8AAGaZ//8AAGbMAP8AAGbMM/8AAGbMZv8AAGbMmf8AAGbMzP8AAGbM//8AAGb/AP8AAGb/M/8AAGb/Zv8AAGb/mf8AAGb/zP8AAGb///8AAJkAAP8AAJkAM/8AAJkAZv8AAJkAmf8AAJkAzP8AAJkA//8AAJkzAP8AAJkzM/8AAJkzZv8AAJkzmf8AAJkzzP8AAJkz//8AAJlmAP8AAJlmM/8AAJlmZv8AAJlmmf8AAJlmzP8AAJlm//8AAJmZAP8AAJmZM/8AAJmZZv8AAJmZmf8AAJmZzP8AAJmZ//8AAJnMAP8AAJnMM/8AAJnMZv8AAJnMmf8AAJnMzP8AAJnM//8AAJn/AP8AAJn/M/8AAJn/Zv8AAJn/mf8AAJn/zP8AAJn///8AAMwAAP8AAMwAM/8AAMwAZv8AAMwAmf8AAMwAzP8AAMwA//8AAMwzAP8AAMwzM/8AAMwzZv8AAMwzmf8AAMwzzP8AAMwz//8AAMxmAP8AAMxmM/8AAMxmZv8AAMxmmf8AAMxmzP8AAMxm//8AAMyZAP8AAMyZM/8AAMyZZv8AAMyZmf8AAMyZzP8AAMyZ//8AAMzMAP8AAMzMM/8AAMzMZv8AAMzMmf8AAMzMzP8AAMzM//8AAMz/AP8AAMz/M/8AAMz/Zv8AAMz/mf8AAMz/zP8AAMz///8AAP8AAP8AAP8AM/8AAP8AZv8AAP8Amf8AAP8AzP8AAP8A//8AAP8zAP8AAP8zM/8AAP8zZv8AAP8zmf8AAP8zzP8AAP8z//8AAP9mAP8AAP9mM/8AAP9mZv8AAP9mmf8AAP9mzP8AAP9m//8AAP+ZAP8AAP+ZM/8AAP+ZZv8AAP+Zmf8AAP+ZzP8AAP+Z//8AAP/MAP8AAP/MM/8AAP/MZv8AAP/Mmf8AAP/MzP8AAP/M//8AAP//AP8AAP//M/8AAP//Zv8AAP//mf8AAP//zP8AAP////8AACL/aC4AAADlSURBVHic1ZbBCoMwEESn4EF/y363/a32lh4GA5KGJmaTzHoYhkXkPdagjxBCAD4v4JrvZHJzfhg9JzNfzuLzWne3AuvOdChwojOX8+3ycF3RAWDzsoFf6OzyAnl0prDAP3Sm5BkoQ+dcbAM16OwyAvXoTAGBu+jMqWegDZ3zSRuwQGcfLmCHzhwoYI0eBfjH7g8dALZn5w30RGfvJtAfvZvAKPQoYPcdGIvO+402MAOdvVlgHnqzwGz0KFB/BjTQOa/cgBI6e7GAHnqxgCp6FMifAW10zjMb8IDOngj4QU8EvKEzv+ZC/l4Hu8TsAAAAAElFTkSuQmCC",
      "ps1n2c16.png", false, 32, 32, "a3774d09367dd147a3539d2d2f6ca133");
  AKA_mark("lis===3788###sois===267573###eois===270765###lif===227###soif===116455###eoif===119647###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAAAAABWESUoAAAABGdBTUEAAYagMeiWXwAACHpzUExUc2l4LWN1YmUAEAAAAAAAAAD/AAAAAAAAADMA/wAAAAAAAABmAP8AAAAAAAAAmQD/AAAAAAAAAMwA/wAAAAAAAAD/AP8AAAAAADMAAAD/AAAAAAAzADMA/wAAAAAAMwBmAP8AAAAAADMAmQD/AAAAAAAzAMwA/wAAAAAAMwD/AP8AAAAAAGYAAAD/AAAAAABmADMA/wAAAAAAZgBmAP8AAAAAAGYAmQD/AAAAAABmAMwA/wAAAAAAZgD/AP8AAAAAAJkAAAD/AAAAAACZADMA/wAAAAAAmQBmAP8AAAAAAJkAmQD/AAAAAACZAMwA/wAAAAAAmQD/AP8AAAAAAMwAAAD/AAAAAADMADMA/wAAAAAAzABmAP8AAAAAAMwAmQD/AAAAAADMAMwA/wAAAAAAzAD/AP8AAAAAAP8AAAD/AAAAAAD/ADMA/wAAAAAA/wBmAP8AAAAAAP8AmQD/AAAAAAD/AMwA/wAAAAAA/wD/AP8AAAAzAAAAAAD/AAAAMwAAADMA/wAAADMAAABmAP8AAAAzAAAAmQD/AAAAMwAAAMwA/wAAADMAAAD/AP8AAAAzADMAAAD/AAAAMwAzADMA/wAAADMAMwBmAP8AAAAzADMAmQD/AAAAMwAzAMwA/wAAADMAMwD/AP8AAAAzAGYAAAD/AAAAMwBmADMA/wAAADMAZgBmAP8AAAAzAGYAmQD/AAAAMwBmAMwA/wAAADMAZgD/AP8AAAAzAJkAAAD/AAAAMwCZADMA/wAAADMAmQBmAP8AAAAzAJkAmQD/AAAAMwCZAMwA/wAAADMAmQD/AP8AAAAzAMwAAAD/AAAAMwDMADMA/wAAADMAzABmAP8AAAAzAMwAmQD/AAAAMwDMAMwA/wAAADMAzAD/AP8AAAAzAP8AAAD/AAAAMwD/ADMA/wAAADMA/wBmAP8AAAAzAP8AmQD/AAAAMwD/AMwA/wAAADMA/wD/AP8AAABmAAAAAAD/AAAAZgAAADMA/wAAAGYAAABmAP8AAABmAAAAmQD/AAAAZgAAAMwA/wAAAGYAAAD/AP8AAABmADMAAAD/AAAAZgAzADMA/wAAAGYAMwBmAP8AAABmADMAmQD/AAAAZgAzAMwA/wAAAGYAMwD/AP8AAABmAGYAAAD/AAAAZgBmADMA/wAAAGYAZgBmAP8AAABmAGYAmQD/AAAAZgBmAMwA/wAAAGYAZgD/AP8AAABmAJkAAAD/AAAAZgCZADMA/wAAAGYAmQBmAP8AAABmAJkAmQD/AAAAZgCZAMwA/wAAAGYAmQD/AP8AAABmAMwAAAD/AAAAZgDMADMA/wAAAGYAzABmAP8AAABmAMwAmQD/AAAAZgDMAMwA/wAAAGYAzAD/AP8AAABmAP8AAAD/AAAAZgD/ADMA/wAAAGYA/wBmAP8AAABmAP8AmQD/AAAAZgD/AMwA/wAAAGYA/wD/AP8AAACZAAAAAAD/AAAAmQAAADMA/wAAAJkAAABmAP8AAACZAAAAmQD/AAAAmQAAAMwA/wAAAJkAAAD/AP8AAACZADMAAAD/AAAAmQAzADMA/wAAAJkAMwBmAP8AAACZADMAmQD/AAAAmQAzAMwA/wAAAJkAMwD/AP8AAACZAGYAAAD/AAAAmQBmADMA/wAAAJkAZgBmAP8AAACZAGYAmQD/AAAAmQBmAMwA/wAAAJkAZgD/AP8AAACZAJkAAAD/AAAAmQCZADMA/wAAAJkAmQBmAP8AAACZAJkAmQD/AAAAmQCZAMwA/wAAAJkAmQD/AP8AAACZAMwAAAD/AAAAmQDMADMA/wAAAJkAzABmAP8AAACZAMwAmQD/AAAAmQDMAMwA/wAAAJkAzAD/AP8AAACZAP8AAAD/AAAAmQD/ADMA/wAAAJkA/wBmAP8AAACZAP8AmQD/AAAAmQD/AMwA/wAAAJkA/wD/AP8AAADMAAAAAAD/AAAAzAAAADMA/wAAAMwAAABmAP8AAADMAAAAmQD/AAAAzAAAAMwA/wAAAMwAAAD/AP8AAADMADMAAAD/AAAAzAAzADMA/wAAAMwAMwBmAP8AAADMADMAmQD/AAAAzAAzAMwA/wAAAMwAMwD/AP8AAADMAGYAAAD/AAAAzABmADMA/wAAAMwAZgBmAP8AAADMAGYAmQD/AAAAzABmAMwA/wAAAMwAZgD/AP8AAADMAJkAAAD/AAAAzACZADMA/wAAAMwAmQBmAP8AAADMAJkAmQD/AAAAzACZAMwA/wAAAMwAmQD/AP8AAADMAMwAAAD/AAAAzADMADMA/wAAAMwAzABmAP8AAADMAMwAmQD/AAAAzADMAMwA/wAAAMwAzAD/AP8AAADMAP8AAAD/AAAAzAD/ADMA/wAAAMwA/wBmAP8AAADMAP8AmQD/AAAAzAD/AMwA/wAAAMwA/wD/AP8AAAD/AAAAAAD/AAAA/wAAADMA/wAAAP8AAABmAP8AAAD/AAAAmQD/AAAA/wAAAMwA/wAAAP8AAAD/AP8AAAD/ADMAAAD/AAAA/wAzADMA/wAAAP8AMwBmAP8AAAD/ADMAmQD/AAAA/wAzAMwA/wAAAP8AMwD/AP8AAAD/AGYAAAD/AAAA/wBmADMA/wAAAP8AZgBmAP8AAAD/AGYAmQD/AAAA/wBmAMwA/wAAAP8AZgD/AP8AAAD/AJkAAAD/AAAA/wCZADMA/wAAAP8AmQBmAP8AAAD/AJkAmQD/AAAA/wCZAMwA/wAAAP8AmQD/AP8AAAD/AMwAAAD/AAAA/wDMADMA/wAAAP8AzABmAP8AAAD/AMwAmQD/AAAA/wDMAMwA/wAAAP8AzAD/AP8AAAD/AP8AAAD/AAAA/wD/ADMA/wAAAP8A/wBmAP8AAAD/AP8AmQD/AAAA/wD/AMwA/wAAAP8A/wD/AP8AAJbQi4YAAABBSURBVHicY2RgJAAUCMizDAUFjA8IKfj3Hz9geTAcFDDKEZBnZKJ5XAwGBYyP8Mr+/8/4h+ZxMRgUMMrglWVkBABQ5f5xNeLYWQAAAABJRU5ErkJggg==",
      "ps2n0g08.png", false, 32, 32, "f6470f9f6296c5109e2bd730fe203773");
  AKA_mark("lis===3790###sois===270769###eois===274177###lif===229###soif===119651###eoif===123059###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAIAAACsiDHgAAAABGdBTUEAAYagMeiWXwAACHpzUExUc2l4LWN1YmUAEAAAAAAAAAD/AAAAAAAAADMA/wAAAAAAAABmAP8AAAAAAAAAmQD/AAAAAAAAAMwA/wAAAAAAAAD/AP8AAAAAADMAAAD/AAAAAAAzADMA/wAAAAAAMwBmAP8AAAAAADMAmQD/AAAAAAAzAMwA/wAAAAAAMwD/AP8AAAAAAGYAAAD/AAAAAABmADMA/wAAAAAAZgBmAP8AAAAAAGYAmQD/AAAAAABmAMwA/wAAAAAAZgD/AP8AAAAAAJkAAAD/AAAAAACZADMA/wAAAAAAmQBmAP8AAAAAAJkAmQD/AAAAAACZAMwA/wAAAAAAmQD/AP8AAAAAAMwAAAD/AAAAAADMADMA/wAAAAAAzABmAP8AAAAAAMwAmQD/AAAAAADMAMwA/wAAAAAAzAD/AP8AAAAAAP8AAAD/AAAAAAD/ADMA/wAAAAAA/wBmAP8AAAAAAP8AmQD/AAAAAAD/AMwA/wAAAAAA/wD/AP8AAAAzAAAAAAD/AAAAMwAAADMA/wAAADMAAABmAP8AAAAzAAAAmQD/AAAAMwAAAMwA/wAAADMAAAD/AP8AAAAzADMAAAD/AAAAMwAzADMA/wAAADMAMwBmAP8AAAAzADMAmQD/AAAAMwAzAMwA/wAAADMAMwD/AP8AAAAzAGYAAAD/AAAAMwBmADMA/wAAADMAZgBmAP8AAAAzAGYAmQD/AAAAMwBmAMwA/wAAADMAZgD/AP8AAAAzAJkAAAD/AAAAMwCZADMA/wAAADMAmQBmAP8AAAAzAJkAmQD/AAAAMwCZAMwA/wAAADMAmQD/AP8AAAAzAMwAAAD/AAAAMwDMADMA/wAAADMAzABmAP8AAAAzAMwAmQD/AAAAMwDMAMwA/wAAADMAzAD/AP8AAAAzAP8AAAD/AAAAMwD/ADMA/wAAADMA/wBmAP8AAAAzAP8AmQD/AAAAMwD/AMwA/wAAADMA/wD/AP8AAABmAAAAAAD/AAAAZgAAADMA/wAAAGYAAABmAP8AAABmAAAAmQD/AAAAZgAAAMwA/wAAAGYAAAD/AP8AAABmADMAAAD/AAAAZgAzADMA/wAAAGYAMwBmAP8AAABmADMAmQD/AAAAZgAzAMwA/wAAAGYAMwD/AP8AAABmAGYAAAD/AAAAZgBmADMA/wAAAGYAZgBmAP8AAABmAGYAmQD/AAAAZgBmAMwA/wAAAGYAZgD/AP8AAABmAJkAAAD/AAAAZgCZADMA/wAAAGYAmQBmAP8AAABmAJkAmQD/AAAAZgCZAMwA/wAAAGYAmQD/AP8AAABmAMwAAAD/AAAAZgDMADMA/wAAAGYAzABmAP8AAABmAMwAmQD/AAAAZgDMAMwA/wAAAGYAzAD/AP8AAABmAP8AAAD/AAAAZgD/ADMA/wAAAGYA/wBmAP8AAABmAP8AmQD/AAAAZgD/AMwA/wAAAGYA/wD/AP8AAACZAAAAAAD/AAAAmQAAADMA/wAAAJkAAABmAP8AAACZAAAAmQD/AAAAmQAAAMwA/wAAAJkAAAD/AP8AAACZADMAAAD/AAAAmQAzADMA/wAAAJkAMwBmAP8AAACZADMAmQD/AAAAmQAzAMwA/wAAAJkAMwD/AP8AAACZAGYAAAD/AAAAmQBmADMA/wAAAJkAZgBmAP8AAACZAGYAmQD/AAAAmQBmAMwA/wAAAJkAZgD/AP8AAACZAJkAAAD/AAAAmQCZADMA/wAAAJkAmQBmAP8AAACZAJkAmQD/AAAAmQCZAMwA/wAAAJkAmQD/AP8AAACZAMwAAAD/AAAAmQDMADMA/wAAAJkAzABmAP8AAACZAMwAmQD/AAAAmQDMAMwA/wAAAJkAzAD/AP8AAACZAP8AAAD/AAAAmQD/ADMA/wAAAJkA/wBmAP8AAACZAP8AmQD/AAAAmQD/AMwA/wAAAJkA/wD/AP8AAADMAAAAAAD/AAAAzAAAADMA/wAAAMwAAABmAP8AAADMAAAAmQD/AAAAzAAAAMwA/wAAAMwAAAD/AP8AAADMADMAAAD/AAAAzAAzADMA/wAAAMwAMwBmAP8AAADMADMAmQD/AAAAzAAzAMwA/wAAAMwAMwD/AP8AAADMAGYAAAD/AAAAzABmADMA/wAAAMwAZgBmAP8AAADMAGYAmQD/AAAAzABmAMwA/wAAAMwAZgD/AP8AAADMAJkAAAD/AAAAzACZADMA/wAAAMwAmQBmAP8AAADMAJkAmQD/AAAAzACZAMwA/wAAAMwAmQD/AP8AAADMAMwAAAD/AAAAzADMADMA/wAAAMwAzABmAP8AAADMAMwAmQD/AAAAzADMAMwA/wAAAMwAzAD/AP8AAADMAP8AAAD/AAAAzAD/ADMA/wAAAMwA/wBmAP8AAADMAP8AmQD/AAAAzAD/AMwA/wAAAMwA/wD/AP8AAAD/AAAAAAD/AAAA/wAAADMA/wAAAP8AAABmAP8AAAD/AAAAmQD/AAAA/wAAAMwA/wAAAP8AAAD/AP8AAAD/ADMAAAD/AAAA/wAzADMA/wAAAP8AMwBmAP8AAAD/ADMAmQD/AAAA/wAzAMwA/wAAAP8AMwD/AP8AAAD/AGYAAAD/AAAA/wBmADMA/wAAAP8AZgBmAP8AAAD/AGYAmQD/AAAA/wBmAMwA/wAAAP8AZgD/AP8AAAD/AJkAAAD/AAAA/wCZADMA/wAAAP8AmQBmAP8AAAD/AJkAmQD/AAAA/wCZAMwA/wAAAP8AmQD/AP8AAAD/AMwAAAD/AAAA/wDMADMA/wAAAP8AzABmAP8AAAD/AMwAmQD/AAAA/wDMAMwA/wAAAP8AzAD/AP8AAAD/AP8AAAD/AAAA/wD/ADMA/wAAAP8A/wBmAP8AAAD/AP8AmQD/AAAA/wD/AMwA/wAAAP8A/wD/AP8AAJbQi4YAAADlSURBVHic1ZbBCoMwEESn4EF/y363/a32lh4GA5KGJmaTzHoYhkXkPdagjxBCAD4v4JrvZHJzfhg9JzNfzuLzWne3AuvOdChwojOX8+3ycF3RAWDzsoFf6OzyAnl0prDAP3Sm5BkoQ+dcbAM16OwyAvXoTAGBu+jMqWegDZ3zSRuwQGcfLmCHzhwoYI0eBfjH7g8dALZn5w30RGfvJtAfvZvAKPQoYPcdGIvO+402MAOdvVlgHnqzwGz0KFB/BjTQOa/cgBI6e7GAHnqxgCp6FMifAW10zjMb8IDOngj4QU8EvKEzv+ZC/l4Hu8TsAAAAAElFTkSuQmCC",
      "ps2n2c16.png", false, 32, 32, "a3774d09367dd147a3539d2d2f6ca133");
  AKA_mark("lis===3792###sois===274181###eois===274427###lif===231###soif===123063###eoif===123309###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAAAEAAAABAQMAAAFS3GZcAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAANQTFRFAAD/injSVwAAAApJREFUeJxjYAAAAAIAAUivpHEAAAAASUVORK5CYII=",
      "s01i3p01.png", false, 1, 1, "c987217b78dd44056a9da58cf06b8c7a");
  AKA_mark("lis===3794###sois===274431###eois===274677###lif===233###soif===123313###eoif===123559###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAAAEAAAABAQMAAAAl21bKAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAANQTFRFAAD/injSVwAAAApJREFUeJxjYAAAAAIAAUivpHEAAAAASUVORK5CYII=",
      "s01n3p01.png", false, 1, 1, "c987217b78dd44056a9da58cf06b8c7a");
  AKA_mark("lis===3796###sois===274681###eois===274927###lif===235###soif===123563###eoif===123809###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAAAIAAAACAQMAAAE/f6/xAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAANQTFRFAP//GVwvJQAAAAtJREFUeJxjYAABAAAGAAH+jGfIAAAAAElFTkSuQmCC",
      "s02i3p01.png", false, 2, 2, "e1b1f768e50f5269db92782b4ad62247");
  AKA_mark("lis===3798###sois===274931###eois===275181###lif===237###soif===123813###eoif===124063###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAAAIAAAACAQMAAABIeJ9nAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAANQTFRFAP//GVwvJQAAAAxJREFUeJxjYGBgAAAABAAB9hc4VQAAAABJRU5ErkJggg==",
      "s02n3p01.png", false, 2, 2, "e1b1f768e50f5269db92782b4ad62247");
  AKA_mark("lis===3800###sois===275185###eois===275439###lif===239###soif===124067###eoif===124321###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAAAMAAAADAQMAAAEb4RdqAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAAZQTFRFAP8A/3cAseWlnwAAAAxJREFUeJxjYIADBwAATABB2snmHAAAAABJRU5ErkJggg==",
      "s03i3p01.png", false, 3, 3, "b05c579eb095ddac5d3b30e0329c33f4");
  AKA_mark("lis===3802###sois===275443###eois===275697###lif===241###soif===124325###eoif===124579###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAAAMAAAADAQMAAABs5if8AAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAAZQTFRFAP8A/3cAseWlnwAAAA5JREFUeJxjYGBwYGAAAADGAEE5MQxLAAAAAElFTkSuQmCC",
      "s03n3p01.png", false, 3, 3, "b05c579eb095ddac5d3b30e0329c33f4");
  AKA_mark("lis===3804###sois===275701###eois===275963###lif===243###soif===124583###eoif===124845###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAAAQAAAAEAQMAAAHkODyrAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAAZQTFRF/wB3//8AmvdDuQAAABRJREFUeJxjaGAAwQMMDgwTGD4AABmuBAG53zf2AAAAAElFTkSuQmCC",
      "s04i3p01.png", false, 4, 4, "c268bd54d984c22857d450e233766115");
  AKA_mark("lis===3806###sois===275967###eois===276225###lif===245###soif===124849###eoif===125107###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAAAQAAAAEAQMAAACTPww9AAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAAZQTFRF/wB3//8AmvdDuQAAAA9JREFUeJxj+MAwAQg/AAAMCAMBgre2CgAAAABJRU5ErkJggg==",
      "s04n3p01.png", false, 4, 4, "c268bd54d984c22857d450e233766115");
  AKA_mark("lis===3808###sois===276229###eois===276503###lif===247###soif===125111###eoif===125385###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFAgMAAAGHBv7gAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAAlQTFRFAP//dwD//wAAQaSqcwAAABlJREFUeJxjaGBoYFjAACI7gHQAEE9tACIATYMG43AkRkUAAAAASUVORK5CYII=",
      "s05i3p02.png", false, 5, 5, "fceb20e261cb29ebb6349bc6c2265beb");
  AKA_mark("lis===3810###sois===276507###eois===276773###lif===249###soif===125389###eoif===125655###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFAgMAAADwAc52AAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAAlQTFRFAP//dwD//wAAQaSqcwAAABRJREFUeJxjWNXAMLWBYSKYXNUAACoHBZCujPRKAAAAAElFTkSuQmCC",
      "s05n3p02.png", false, 5, 5, "fceb20e261cb29ebb6349bc6c2265beb");
  AKA_mark("lis===3812###sois===276777###eois===277063###lif===251###soif===125659###eoif===125945###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAAAYAAAAGAgMAAAHqpTdNAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAAlQTFRFAP8AAHf//wD/o0UOaAAAACJJREFUeJxjaGBoYJgAxA4MLQwrGDwYIhimJjBMSGBYtQAAWccHTMhl7SQAAAAASUVORK5CYII=",
      "s06i3p02.png", false, 6, 6, "b5c9900082b8119515e3b00634a379c5");
  AKA_mark("lis===3814###sois===277067###eois===277337###lif===253###soif===125949###eoif===126219###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAAAYAAAAGAgMAAACdogfbAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAAlQTFRFAP8AAHf//wD/o0UOaAAAABZJREFUeJxjWLWAYWoCwwQwAjJWLQAAOc8GXylw/coAAAAASUVORK5CYII=",
      "s06n3p02.png", false, 6, 6, "b5c9900082b8119515e3b00634a379c5");
  AKA_mark("lis===3816###sois===277341###eois===277635###lif===255###soif===126223###eoif===126517###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHAgMAAAHOO4/WAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAAxQTFRF/wB3AP93//8AAAD/G0OznAAAACVJREFUeJxjOMBwgOEBwweGDQyvGf4z/GFIAcI/DFdjGG7MAZIAweMMgVWC+YkAAAAASUVORK5CYII=",
      "s07i3p02.png", false, 7, 7, "cefe38d2a35e41b73b6270a398c283e8");
  AKA_mark("lis===3818###sois===277639###eois===277917###lif===257###soif===126521###eoif===126799###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHAgMAAAC5PL9AAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAAxQTFRF/wB3AP93//8AAAD/G0OznAAAABpJREFUeJxj+P+H4WoMw605DDfmgEgg+/8fAHF5CrkeXW0HAAAAAElFTkSuQmCC",
      "s07n3p02.png", false, 7, 7, "cefe38d2a35e41b73b6270a398c283e8");
  AKA_mark("lis===3820###sois===277921###eois===278215###lif===259###soif===126803###eoif===127097###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAAAgAAAAIAgMAAAHOZmaOAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAAxQTFRFAP//dwD/d/8A/wAAqrpZHAAAACVJREFUeJxjYAACASB+wGDHoAWk9zDMYVjBoLWCQbeCQf8HUAAAUNcF93DTSq8AAAAASUVORK5CYII=",
      "s08i3p02.png", false, 8, 8, "3f0fc2c825d2fad899359508e7f645e1");
  AKA_mark("lis===3822###sois===278219###eois===278501###lif===261###soif===127101###eoif===127383###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAAAgAAAAIAgMAAAC5YVYYAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAAxQTFRFAP//dwD/d/8A/wAAqrpZHAAAABtJREFUeJxjYGBg0FrBoP+DQbcChIAMIJeBAQA9VgU9+UwQEwAAAABJRU5ErkJggg==",
      "s08n3p02.png", false, 8, 8, "3f0fc2c825d2fad899359508e7f645e1");
  AKA_mark("lis===3824###sois===278505###eois===278795###lif===263###soif===127387###eoif===127677###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAAAkAAAAJAgMAAAHq+N4VAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAAxQTFRFAP8AAHf//wD//3cA/1YAZAAAACNJREFUeJxjYEACC4BYC4wYGF4zXAdiBgb7/wwMltEQDGQDAHX/B0YWjJcDAAAAAElFTkSuQmCC",
      "s09i3p02.png", false, 9, 9, "5c55b2480d623eae3a3aaac444eb9542");
  AKA_mark("lis===3826###sois===278799###eois===279085###lif===265###soif===127681###eoif===127967###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAAAkAAAAJAgMAAACd/+6DAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAAAxQTFRFAP8AAHf//wD//3cA/1YAZAAAAB9JREFUeJxjYAAC+/8MDFarGRgso4FYGkKD+CBxIAAAaWUFw2pDfyMAAAAASUVORK5CYII=",
      "s09n3p02.png", false, 9, 9, "5c55b2480d623eae3a3aaac444eb9542");
  AKA_mark("lis===3828###sois===279089###eois===279661###lif===267###soif===127971###eoif===128543###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAAH2U1dRAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAACdQTFRFAAAA/wB3AP//AP8AdwD/AHf/d/8A/wD//wAAAP93//8A/3cAAAD/9b8GOwAAANhJREFUeJx9kL0OgjAURj9FfuJTuBjXhqkkDvBGujo1casOLOyEgZmpM4kk8Fi29FYpMTbNl8O59+Y2AByC48nw5Ehe4Pr25orpfEeQ6LhPNgLgdmpQm2iWsdVxqA3V9lOyWKajTCEwWpDpx8TO6Oz3zMIoHYgtlWDORlWFqqDKgiAk6OBM6XoqgsgBPj0mC4QWcgUHJZW+QD1F56Yighx0ro82Ow5z4tEyDJ6ocfQFMuz8ER1/BaLs4HforcN6hMRF18KlMIyluP4QbCX0qz0hsN6yWjv/iTeEUtKElO3EIwAAAABJRU5ErkJggg==",
      "s32i3p04.png", false, 32, 32, "bbe63d9433641df3fcd2c745fed89a93");
  AKA_mark("lis===3830###sois===279665###eois===280113###lif===269###soif===128547###eoif===128995###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAACdQTFRFAAAA/wB3AP//AP8AdwD/AHf/d/8A/wD//wAAAP93//8A/3cAAAD/9b8GOwAAAHxJREFUeJyV0b0NgCAQBeBXAIlxCRt6WrbyNqB3CSsnYTAPTYzvSIhSXMhHcn8A7ch25FiviA40wDEkVAZ4hh2RQXMa6JLmxZaNPwEdBJO0aB9u3NhzraJvBKuCfwNmXQVBW9YQ5AskC1xW2n4ZMDEU2FlCNrOYae+Pt3ACA2HDSOt6Ji4AAAAASUVORK5CYII=",
      "s32n3p04.png", false, 32, 32, "bbe63d9433641df3fcd2c745fed89a93");
  AKA_mark("lis===3832###sois===280117###eois===280729###lif===271###soif===128999###eoif===129611###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACEAAAAhBAMAAAHSze/KAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAACdQTFRFAAAA/wB3AP//AP8AdwD/AHf/d/8A/wD//wAAAP93//8A/3cAAAD/9b8GOwAAAPZJREFUeJxdjzFywjAQRT/JMCjEBdzAkxN4RhdIwQHcuKeiplNLqZKWzrUr+jQ+gA6Vv6sVlnkey5K+Vm8NxBvmNMP7DpHzxLmL/HCHG+Cy8xI6l+M0y2GGYBw1lN0kq5gTOaThawlM434SRrT4UVqEsAvCFSNKmjNejpCz3RWTAUs/WsldVOM0Wug/vfISsPcmaWtFxBqrAkqVAesJ+jOkKQ0E/bMYXalhl1bUWRUbykVooPwtPHG5nPkunPG441Fzx8BnOyz0OBEdjF8ciQ7GAfjm9WsX5W+uWqMMK3r0tUZE5qo8m0OtEd48qlq5vtRXm8Td/wMULdZI1p9klQAAAABJRU5ErkJggg==",
      "s33i3p04.png", false, 33, 33, "20708bc9a6ffa8d8ca6e004e1e9aa3ae");
  AKA_mark("lis===3834###sois===280733###eois===281269###lif===273###soif===129615###eoif===130151###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACEAAAAhBAMAAAClyt9cAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAACdQTFRFAAAA/wB3AP//AP8AdwD/AHf/d/8A/wD//wAAAP93//8A/3cAAAD/9b8GOwAAAL5JREFUeJxdzy0SwyAQhuGv0+n0V6Q36HCCzHCBih4gBh8VXVeLjIyNi0bV13CAHKrLDi27vAwrEMADpMaS5wN8Sm+EEHAKpQXD0NMu9bAWWytqMU+YZRMMXWxENzhaO1fqsK5rTONXxIPikbvjRfHIPXGleOQaNlWuM1GUa6H/VC46qV26ForEKRLnVB06SaJwiZKUUNn1D/vsEqZNI0mjP3h4SUrR60G3aBOzalcL5TqyTbmMqVzJqV0R5PoCM2LWk+YxJesAAAAASUVORK5CYII=",
      "s33n3p04.png", false, 33, 33, "20708bc9a6ffa8d8ca6e004e1e9aa3ae");
  AKA_mark("lis===3836###sois===281273###eois===281837###lif===275###soif===130155###eoif===130719###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACIAAAAiBAMAAAG/biZnAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAACdQTFRFAAAA/wB3AP//AP8AdwD/AHf/d/8A/wD//wAAAP93//8A/3cAAAD/9b8GOwAAANJJREFUeJx9jr0KgzAURr9q/elbdJGu4mTAQR+pa6eAW+yQxV06ODs5CxX0sWrURHstDcnH4eTe3ABxBz6d5+74b8S7zcck72D7KvMx4XPaHfC4vVCpeP0OS0W1hAg9EQ0imqZhWElEm/OMm28tTdwQQkPzOrVl1pYpWplpcjQ1ME6aulKTawhbXUnI0dRsZG5hyJVHUr9bX5Hp8tl7UbOgXxJFHaL/NhUCYsBwJl0soO9QA5ddSc00vD90/TOgprpQA9rFXWpQMxAzLzIdh/+g/wDxGv/uWt+IKQAAAABJRU5ErkJggg==",
      "s34i3p04.png", false, 34, 34, "0912e0f97224057b298f163739d1365f");
  AKA_mark("lis===3838###sois===281841###eois===282269###lif===277###soif===130723###eoif===131151###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACIAAAAiBAMAAADIaRbxAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAACdQTFRFAAAA/wB3AP//AP8AdwD/AHf/d/8A/wD//wAAAP93//8A/3cAAAD/9b8GOwAAAG1JREFUeJyVz7ENgCAQBdBfIIlb2NDbMpYb0LMEFZMwGKcWJv9HwSsu5CX8uwPOOnKNod0dKtbhSHY0EiwkBYHEglk0OW4yPfwXqHhOTraPG234vCcFYykqKwtUeFZS8Sx2NUjqhFz1LVl+vUgHrMXtiDoroU4AAAAASUVORK5CYII=",
      "s34n3p04.png", false, 34, 34, "0912e0f97224057b298f163739d1365f");
  AKA_mark("lis===3840###sois===282273###eois===282901###lif===279###soif===131155###eoif===131783###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACMAAAAjBAMAAAGb8J78AAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAACdQTFRFAAAA/wB3AP//AP8AdwD/AHf/d/8A/wD//wAAAP93//8A/3cAAAD/9b8GOwAAAQRJREFUeJxlkD2uglAUhMf4A1GL93ZAWIHJ2YCFC7Cxt7Kmo7WktLWjprJ/DQu4i3pzzuUAF4fwk5k7+SYAzRN96CFyQsPvEIC80ZcIDf04iYZ5HmOeZaQOYzoxDRY05og7MCePDtQ5Al2770woUEahrrPahBaeluWUqiqmMWqBMS2GtEYGHR4XdK2flLVI3OO0AqE/hrjXuRWb3sVIEfHuRLMifxEGbsauFdl/Dk1NvTsthXeDdytUMP3N9MHjcec90x3vF96JXrjx2t5muuJC2cN1xi9lD9cPcCBjQeSGJXEpEhMYdU1hm5E4wlZGTGAHFj9IYTsd8A1MiVujzokXHXH+B9CK7qGbaRQOAAAAAElFTkSuQmCC",
      "s35i3p04.png", false, 35, 35, "b46d9ba87963f526624a6d485ff6465e");
  AKA_mark("lis===3842###sois===282905###eois===283453###lif===281###soif===131787###eoif===132335###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACMAAAAjBAMAAADs965qAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAACdQTFRFAAAA/wB3AP//AP8AdwD/AHf/d/8A/wD//wAAAP93//8A/3cAAAD/9b8GOwAAAMdJREFUeJxl0SEOg0AQheHXtJSmmPYGhBOQcIEKDoDBo9C42spKLA6Nqq/hAHuoPqZhM7P7E0asmOyXBbbeqpec4Kv6YFkWXBfVjL7v+Ks6VBWOla7ENGIyjSi4vdDlaPklraqBc27dhm9FzWTsPfBkMvYG3JmMvZv4QmNGlTXOvFdo5FFkDCoD4N8YRqPhsSbgsdXyTt7oeak3et5BjIZ3EaPhZVwv76h4kuWdN3JMjIwjImMOa0zEaY3Ocb021tsVrJE+pMMPA+LuR86i5UgAAAAASUVORK5CYII=",
      "s35n3p04.png", false, 35, 35, "b46d9ba87963f526624a6d485ff6465e");
  AKA_mark("lis===3844###sois===283457###eois===284029###lif===283###soif===132339###eoif===132911###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACQAAAAkBAMAAAFkKbU9AAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAACdQTFRFAAAA/wB3AP//AP8AdwD/AHf/d/8A/wD//wAAAP93//8A/3cAAAD/9b8GOwAAANlJREFUeJyNkb0KgzAURj/b+tO36CJdxUnBob5Ru3YKuGkHF3dxcHZyDlTQx2piTaJJC4bk43juvUEUiCgIO6/V8d6IVptMSUZx9HhmU0IwJwWe1+aOes7mV9ZzHr6JJfPAzcORbRCMC+Whcq5044bIgQoKXEGhcDn4svoqZRt9mQqyBXWQrpR9lSBHElRf9ZdgLdRVkCSqnaraqnozifXN61G0sT8siaINMGiqhq8rxDjpg7Fv3GUoOPFF72LvoF+/etipav4DtgosYSptELsHdXX2qaZa/jk/GoQXLvsYf8IAAAAASUVORK5CYII=",
      "s36i3p04.png", false, 36, 36, "65e57e33b4763a3b0c3f0fa92295406d");
  AKA_mark("lis===3846###sois===284033###eois===284473###lif===285###soif===132915###eoif===133355###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACQAAAAkBAMAAAATLoWrAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAACdQTFRFAAAA/wB3AP//AP8AdwD/AHf/d/8A/wD//wAAAP93//8A/3cAAAD/9b8GOwAAAHdJREFUeJxjYACBwu5llqpHoCQDFiEgxcCCLmTAcARdiIEVXWgBgyq6ENB0DCEsxlsqYDpClSwhBixCbBjGNwDdhe4ILE5F4lBXCBToqEILgEKMqEIMnKoHGNCEgCQWoULCQgYYNjJgsZGBWBvJE8L0EBZvgwMHAABJBMjTkay+AAAAAElFTkSuQmCC",
      "s36n3p04.png", false, 36, 36, "65e57e33b4763a3b0c3f0fa92295406d");
  AKA_mark("lis===3848###sois===284477###eois===285097###lif===287###soif===133359###eoif===133979###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACUAAAAlBAMAAAFAtw2mAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAACdQTFRFAAAA/wB3AP//AP8AdwD/AHf/d/8A/wD//wAAAP93//8A/3cAAAD/9b8GOwAAAP5JREFUeJxlkDsSgjAQhv8RHfFR6A0cTsBMLmDhAWjsrajpaFNS0tqlprK3yQFyKDcb8jD5GJLMssu3G2CS0EZDiBYTnY0Bat59DHxuBYG6nihgLBAcmSywm+Sclr9qjkvOKSOIESmxqOPCKNzQOG4Yx/3IDFAICU2TJDAglhUVEzYhYaA/2JFco4tacyEq4YhWGH02brigp0pfG0QQntiQu5S11vUNdzk8dmgx1FaxV1+rTWza19bWS3xTPuj7F70pL7xnvP+Z8aRn90zp8CB4CdxxJXgJXIATiXIvtVJ4C8hb0OVK5ppzyUa1FE5rLb04FN4OuZdG367zplJ6fx0nFJojsT+zAAAAAElFTkSuQmCC",
      "s37i3p04.png", false, 37, 37, "f21eff5c07a755577fea69c01459c65f");
  AKA_mark("lis===3850###sois===285101###eois===285645###lif===289###soif===133983###eoif===134527###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACUAAAAlBAMAAAA3sD0wAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAACdQTFRFAAAA/wB3AP//AP8AdwD/AHf/d/8A/wD//wAAAP93//8A/3cAAAD/9b8GOwAAAMVJREFUeJxl0S0Og0AQhuEvoU36J+AGDSfYhAsgegAMHoWuq62sxOJWr6rHcAAO1dkppbMzD9kRmxB4M0D0kp58hUl6I4SAU5A8+r6jI3WoKmRVwmEcMKYGlPSJMnFFS8++lRosyzLH8TfjRnhsajwIj80dBeGxybnV9J4pUPV6+j/TS3e2V3M69ttrUK/RpKmiV6QylcoKLVerXXMnjd4NGrxqjbW212W2F0fbC9vbwPbOF91Lq96t+xXw26+MjUfFHuh8APqFElFWDb0cAAAAAElFTkSuQmCC",
      "s37n3p04.png", false, 37, 37, "f21eff5c07a755577fea69c01459c65f");
  AKA_mark("lis===3852###sois===285649###eois===286221###lif===291###soif===134531###eoif===135103###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACYAAAAmBAMAAAEtFMQLAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAACdQTFRFAAAA/wB3AP//AP8AdwD/AHf/d/8A/wD//wAAAP93//8A/3cAAAD/9b8GOwAAANpJREFUeJylkT8LgkAchp/+WEFfokVapamDhvxGtTYduGmDi7s0NDc1Cwn6sTpF7w7PQEju9/L48N6pCMcCqeZuzeYjOfZT0I6sT1HNYtNkVHcpi5aB2/5xIW/z8TtzKzsDcbCOD5VaEknVY3yw7NrYaoABGucVxmJbmL2zUK0X7zTU6Gl8YWxqupnGlUGsbjYNUzR6ZzSGjFisbjjWbQrtdU2ewi/7JHkGlEOX4zsOwdLZK3z3PNexEjunp17FeYZ995dr/uR24JpvYoIb3euVlyl7x3pCnZd8AfUFRB95/EUWAAAAAElFTkSuQmCC",
      "s38i3p04.png", false, 38, 38, "f6237240a70b5844def0406dc8f63bbd");
  AKA_mark("lis===3854###sois===286225###eois===286649###lif===293###soif===135107###eoif===135531###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACYAAAAmBAMAAABaE/SdAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAACdQTFRFAAAA/wB3AP//AP8AdwD/AHf/d/8A/wD//wAAAP93//8A/3cAAAD/9b8GOwAAAGpJREFUeJxjYACBwu5llqpHYCQDNjEgzcCCIWbAcARDjIEVQ2wBgyqGGNAKTDFsdlgqYHGLKrliDNjE2DDtaAC6D8Mt2NyMzBs4MaDL0MUMgGLcaGLAuClgQBcDkmSLYTEPm72DyS3gsAIA8mkrg86sROEAAAAASUVORK5CYII=",
      "s38n3p04.png", false, 38, 38, "f6237240a70b5844def0406dc8f63bbd");
  AKA_mark("lis===3856###sois===286653###eois===287309###lif===295###soif===135535###eoif===136191###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACcAAAAnBAMAAAEJinyQAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAACdQTFRFAAAA/wB3AP//AP8AdwD/AHf/d/8A/wD//wAAAP93//8A/3cAAAD/9b8GOwAAARlJREFUeJxtkDFygzAQRZ/HkwSTFM4NGE7AjC6QIgdw457KtTtaSpVu3VFTuafhADpUVhISCOUxwPC1u/8voHtmM6NUg9ZgDBSimUSbaZRAUWgRjAXlFPmWavdaavypdopKlb6wStM4xTX1PeNQjh4q6gW67qPzMBAL6npTEGA5HcYhFFQ1a8E9FIyU2O20Dy0NSyPqqDzNmqHCzF8uuqwf49ylP06AdYKKE2LGym8eJsQ4OusvR8KEoyJMkCzE/s1ChAnoTYIBx5Tw4nZr5U5oeT547nhwlevtmnDhV3CPlR++BfdYOcOnuGXukih3zxH3nMvOeOOeOh/OmfE0Zc7tuzXfuT9O1nzv7n/lf+b7tQ8uQOpurXn9AQyWNfYM/uLgAAAAAElFTkSuQmCC",
      "s39i3p04.png", false, 39, 39, "ceb3b33633c181e13ecee80b153fb602");
  AKA_mark("lis===3858###sois===287313###eois===287881###lif===297###soif===136195###eoif===136763###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACcAAAAnBAMAAAB+jUwGAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAACdQTFRFAAAA/wB3AP//AP8AdwD/AHf/d/8A/wD//wAAAP93//8A/3cAAAD/9b8GOwAAANVJREFUeJxt0iEOg0AQheFHSJuUGnqDhhOQcIEKDoDBo9A4LBKJxaFX4TEcgEN1ZklDZ2Z/YMQa+DIA3Cga/Bk20QrnHBInWtC2DT2iBkWBuJDlmCfMqgkZvSeTvVHTdatFFY7j2Hn8taOk/Lj6oKf8uOrwovy4Sr3b2p9k1faFvtPa6TBgN+UGftptZLdViv1nL0P2PmSX7ihV7JEXPhj2ttGxYidMV+7mznRlz2OmK/v0YDo0m25o+/kXGjfoDtED9g565dFv7WLlni/tDMeq7AxPli8bpjUVK/+f5gAAAABJRU5ErkJggg==",
      "s39n3p04.png", false, 39, 39, "ceb3b33633c181e13ecee80b153fb602");
  AKA_mark("lis===3860###sois===287885###eois===288457###lif===299###soif===136767###eoif===137339###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACgAAAAoBAMAAAEJ15XIAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAACdQTFRFAAAA/wB3AP//AP8AdwD/AHf/d/8A/wD//wAAAP93//8A/3cAAAD/9b8GOwAAANpJREFUeJytjrEKgzAURa/FWmv7EV2kq2RS6FD/qK5OATd1cHEXB2cn50IL+lnVUBMxr4VCQ97N4ZC8POT+HcexclEQp/3g8GVBnHy4JANgT5kM66zjcx1jIxKLrFfpTFndROLN6aZPmdjgTKLjSUwXyL6gt+MSexCWAei2YVeKjXaBpUQotAoKAWPGTtmu/B1hzViEoPCqEK1EQ2GocGyWNXCfUdYEi0RW7QmJQJfcIiSaALqcltaTuvlJEiP9VZ7GAa21nCYBIUFIHHQJg3huUj3NiGvSHb9pXgoWak5w83t4AAAAAElFTkSuQmCC",
      "s40i3p04.png", false, 40, 40, "140f0d2eb778dad4a1871c17767e2d48");
  AKA_mark("lis===3862###sois===288461###eois===288901###lif===301###soif===137343###eoif===137783###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACgAAAAoBAMAAAB+0KVeAAAABGdBTUEAAYagMeiWXwAAAANzQklUBAQEd/i1owAAACdQTFRFAAAA/wB3AP//AP8AdwD/AHf/d/8A/wD//wAAAP93//8A/3cAAAD/9b8GOwAAAHVJREFUeJzN0LENgDAMRNFDiiwhlqBhiGxFNkifJagyBwWDEagQ/kXoSOHiyVZOp1K1HKnU+Jhi3BBHQCFGjxnRAGVRHms3Xq8LC51/Qurz99iacDg3tDcqpCyHbRLipgBXQk0ed8FHGggpUuCcuOnDYyF3dSfnZ1dwSF0UKQAAAABJRU5ErkJggg==",
      "s40n3p04.png", false, 40, 40, "140f0d2eb778dad4a1871c17767e2d48");
  AKA_mark("lis===3864###sois===288905###eois===289573###lif===303###soif===137787###eoif===138455###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAAAAACT4cgpAAAABGdBTUEAAYagMeiWXwAAAAJ0Uk5TAA/mLNCpAAAAAmJLR0QAAKqNIzIAAAFISURBVCiRddExT8JAFMBxPoJHWUxcriQuJiaFqpNLWxkdLOVCHJjunSau9GByohwTk8Il+hkcHd0kLrIymLCaOLBq0epdbRRIeNv9pnfvn/temdw6eJktQXJPK7cL8BbRklmsjzNInsJquWRjc/8mhc9B6JZt13aLe6z9rGDEm2W7VvU8d5vzcwUTEXqMcxocMd48VfAqBM8mDI4VvENr2M3eXkMDE1Km4iO7r+BDgxaKkXGnAURv0JZd6uON/FRBDK1eBHIQOAgX9GJzOBO8psA0nIN0UyBdTuS1j228qeELKh0NJ9hCWxoSCCKmwMljtJv+FgJOiLwqGRg1foEyDVbBQv0UIspqRHawgnEKMQBoMNBOdsJHBb0ORvlxBkkERDQtdPh35FiDU5j9ZxgRQf3LxS5DQetL5eaCPiynnFystE2m6+r/AOOSVs9bKk33AAAAAElFTkSuQmCC",
      "tbbn0g04.png", false, 32, 32, "d9b53613bd731e66dcfd5be93186c100");
  AKA_mark("lis===3866###sois===289577###eois===292397###lif===305###soif===138459###eoif===141279###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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",
      "tbbn2c16.png", false, 32, 32, "75954a76132c3971509841e973f029cd");
  AKA_mark("lis===3868###sois===292401###eois===294497###lif===307###soif===141283###eoif===143379###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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",
      "tbbn3p08.png", false, 32, 32, "d1f6636d81c74f163bfff1405bf406cf");
  AKA_mark("lis===3870###sois===294501###eois===297321###lif===309###soif===143383###eoif===146203###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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",
      "tbgn2c16.png", false, 32, 32, "75954a76132c3971509841e973f029cd");
  AKA_mark("lis===3872###sois===297325###eois===299421###lif===311###soif===146207###eoif===148303###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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",
      "tbgn3p08.png", false, 32, 32, "d1f6636d81c74f163bfff1405bf406cf");
  AKA_mark("lis===3874###sois===299425###eois===301701###lif===313###soif===148307###eoif===150583###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAABGdBTUEAAYagMeiWXwAAAAZ0Uk5TAP8A/wD/N1gbfQAAAAZiS0dEAP8AAAAAMyd88wAABfRJREFUSInNlgtM03cQx7//UmwwRQ1olQYMhpEgFZiRRLApqBgQxFAppZRBIiLg6GDI04mFoZRXKZT3+yFBnQynzgFzG8NlIoMwwWUhZgFMNHNOEQaDaXyxa8mWEQtiNpNdGkIov/vc3e/uez/MvmHD/whw586d3t7eycnJ/xhw7969tra2tLS0iIiIWH//NEfH0x4ePVrtg5GRfwUYHx/v6urKzc2NiopShIYedXXNMzPTACogBcgEqhmmycGhS6kcGRx89uzZUgFTU1NXr14tKyuLj49/X6FI2bUre/36MoZpAIqAD4F4LjfMwUGyYoUYkOt5xcuWHY2MbGxsHBgYePz4sWHAo0eP+vr6qqurk5OTExISjoWGZjs6lnA49cBZ4ALQCwwAl4Emhsm3sFDZ26ebm2cA5UAhoJBIYmNj6SAdr6mpoRCpAPMA/f396enp9HWS3sqdnD4HPgPagXNcbum2bcVi8WUbmyEW6zYwAfwC/KRHfgEoGYZyTfqHRUdHU6zzAMPDwyqVKicnJzMzMzU1VRUQ0GFuftbKSuPndyQpKeUvy1AoWnbsGLK2Hlu16lcud9DM7JSdXWpQ0N//EBcXFxIS4u/v39nZOQ9w//59cp2RkaHKURUUFNDdUkIfvI5R9uHh4QEBAWKx2NfX9+7du/MAdDnpmem2FbbsU2zXZld1qbqkpKSwsPDEiROpC9tRvZF3qolMJptz7e3tLZfLDXRRXl4ec4nBNWAK8nZ5cXEx9VJFRUVpaWl2dvaxBezw4cPBwfvt7FRsdgmXe8TOLsjT0+f48eMGAOSR+zEXncA0rEesi4qKyDUBqqqqqDHop1qtprql6U2pVFLFDxw4IJHsNzP7GuindgXeBaLs7aWtra0GAOSOd5Kna53bOkZyUzJVSVOh8az39DzjWVBfUF9fX1tbSzdEAKpJcHCwTBa8bt33wG9AI4u1n2FEQJiVlXxoaMgAoLm5eUPlBrQA3+kAwj4h5eTT6oOvdLPgVO1UV1fX0NBAA0V1J+9U6M2bTwKzwDUjo3csLN7ictdwuVKhUPL06VMDgPb2dkGhAE3U+cADcB5ycstyPc546GasCi5lLhQ+JUGMxMRE8i4WRxkbz1D4RkZxLi6eu3fv5vFcBQIpSYCBSSbr6elxznLGRYAU5wfgd/jW+ArrhegBKiEqFdFNUBLEoKElgEBwTh/+aVtbuYeHH4+XBjQwTEFt7UnDgJs3b7op3XSAVIDmeBJr1WuFtUJdX1VAVCKi4ZxjkPzJZHITk3EKn81WbNkSzOFoAZKVY6amoRSoYQDNmleil64+KphUmmAYOAObSht8q1Mc92L3yspKYlChwsLCdu5M14d/mc8P5fG89UEp6GNpGTg9PW0YQJIrfk+s07YyOKQ44BugG0wJo/tFiz1Fe+Zalhh0wwJBM/AHkOXkJLGweJvFCgcSgJq9e+Nm59s8uT6UcAh0sBluEW6rT63Gj4Aa6AIK4KP1mZu78vJyGlo+vw0YBQ65u+8RCARcbgxwiTLIyipeDJCfn29cb0zq7BzpvF21HX266uvaNB/eBd40FsQg/QgMDFy5soPqY2QU6eXl5eR0ELrmqzMxCeru7l4M8OTJE+0FrbPKOexgWHh0+LLzy/CJfgmoIdFIaLaJQToolUqXL/+IPHI44c7OIWx2DXCRz9/b1vbl7EtmYGUODg7GxMTQBnYodMCn+p2QC6laSrETgxSXAGvWUFNmMkwEw9D2LLK0jL1+ffBlV4YBZGNjY1lZWUFxQTivr20OJLkSjUZDDBpj0uRNm7xZLGobKk74xo2Jt279bNDPgoBZfVO1tLToxIMWZhZk2TISO2LQGEskEpFIxOfbmJp6eHnFP3w4sZCTxQBzdmPohkuNC3WtMkNJ+44YVD1aWH5+flu3biVBpWtb3MOr30UTExMkcLR5qGjEoDHet28f7Rb64/Pnz195fEkvuxcvXly5coWWNjFojCmDjo6OpRxcKmDORkdHtVotdRc9QZZ+6vUevzMzM/RCfa0jb/x1/Sd+IPxqXp1JowAAAABJRU5ErkJggg==",
      "tbrn2c08.png", false, 32, 32, "75954a76132c3971509841e973f029cd");
  AKA_mark("lis===3876###sois===301705###eois===303553###lif===315###soif===150587###eoif===152435###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAAAAAAGgflrAAAABGdBTUEAAYagMeiWXwAAAAJ0Uk5T///Itd/HAAAAAmJLR0T//xSrMc0AAAS8SURBVEiJY/hPIWCgqQGPH588+fEjWQa8eLF1a11damrUTjf9hB8LBR8JEG3Au3f793d2pqcnTvDZZSaiFaD+Unmr+hy9VwGeE72vbP/zB48Bnz4dOTJ1alFRzrzgSbYLdLP0t2s3q2VqLbc5rnRIglFqq/pLA46ctAULzp//8QPNgO/fT52aNausrLg4bZXHY0NO/SyjbSYXbALsZM1bDAOtZ7tWGFerbdNl1noZ1Z6XV1xcVjZ79pEj797BDThzpr6+rKwUCPzEzc3NmM3m2sSE2qTIBag5zne+6L7dNdAxy07O/IKaWc68UijIypo1C27AnTutrR0dLS3V1ckcLp7u8omvyqLLwaCINeFw2N4gEb9Yb1HfVUk3IaIFBTExQUF798INePWqpaWxsd2zr6+zs76+Ei8oK0tODgkJCPDxefYMbsCPH02FGe5JVypsJtyYPLm/v7m5GgNUAUFlZVZWeDhIs6dnZCRKLHR1ZV4pmdXXPEF20qSpU6dPnzKlvb0GDRQWRnMb3RQpkSjTXeO2p6kJxYBJkzLX5fv2b+zPnThxypTp02fOnD175szu7vr6OiCorS0vT0oKuaR6XbxY4ASPEPd1fek1a1AMmDIl/WMWQ6t4/8YJ8ZMnTy6skqxPnf5r3rw5c/r66uqysqKiwtfrPJOeLpTCc4H9Obe6CvO1aygGLFmSbpoiW3oc6IbCSZNaGPK2JbflGc2dO3/+ggVVVVFRkZF2grIBYod4FaVieUVFCmz//v6NYsC2bWn88empD7tS+ionzKpTL4uLksr7M2fOvHnz55eUREYGfVWYLT2dv8vyioeHlIz+/6IitKR8/HhKXYZNMGf16n6pqkulHaWGkc0FlbNnz507b15eXmSklYxsgLCotrzLEiUuIXdBs7n6aAbcuJEckWHjkZ8T3fsmOr0kqmRWxJv8R7NmgYxITw+fpBwDtP+2+XqxY0KafI5i9sePoxnw6lXi8dSHfsGx9o19SREZnEXXIkILFGbMmDVrzpzERE9X2QBRF8Vz0p/5lHl8eXyVjn/5gmbAnz8JZ5PbwvdHHCxcUcIc9rtwRcjZkhZQdM6aFRVlKSLjzp9hHCS9j1eD10LwUmAwluyc9yhhSsKUUNPMipobgbcLqoLnFzeDktS0aeHh2q8lW7m/OizQ1hY3EpnM49v+HIsBPT3x8ulLA5dlPCr7GvEmb1tQUeHryZOnTu3vDwtTihd14Utxdzd1F5ovxCMkd/QoFgN+/Vqckfw8WTW9KbMnrSLnU+Dt0uqJEydP7uwMDZUxFuIRnGVxVjReJFL++7a0//+xGAACFy7k5qampj3OuJytF7CuVKm/f+LExsbQUEV1fl2eBgEBgdWqnec5///HacD//2/etLWlVaXzZWYGiBcr9Pb291dVhYToN/KJcNdzJxqeeDDh/3+8BoDiY9WqdNP0pX4vi2d3d/f2lpQEB9vaSisLO/lYvNNAV42jWL9yuKg14mD9jY6O7u7c3KAgf39z8/LyX7+wqcVRL7x/v2BBc3NbW0dHenpgYEDAggV//2JXibNm+vfvwIHW1ra2xMSgoO3bcakiULXduzdhQmrqmTP41BCoXL9+ffwYvwqKa2cA4MyW1TM3HhMAAAAASUVORK5CYII=",
      "tbwn0g16.png", false, 32, 32, "56ea136a6e299452015ac02a7837e365");
  AKA_mark("lis===3878###sois===303557###eois===305649###lif===317###soif===152439###eoif===154531###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAAYagMeiWXwAAAt9QTFRF////gFZWtbW4qEJCn5+fsSAgixUVnZ2dGxtZm5ubAACEmZmZj6ePl5eXlZWVk5OTKSlWkZGRAACbj4+Pi5WLLi6njY2NgAAAi4uLuQAAiYmJDAzVeHV1h4eHAACyhYWFpQAA3gAAgYGBf39/AACefX19AADJe3t7eXl5NzdWd3d3dXV1c3NzSKlIjgAAAgJkAABiVolWKCh8U4tTiYmPZ2dnZWVlXW1dE+UThiYmby0tRJFEYWFhO507RIlEPZM9AACkAPMAAPEAWVlZV1dXVVVVU1NTNIU0UVFRJJckT09POjpBEBC6sg8PAMcAAMUA/Pz8AMMABASXAMEALXct+vr6AL8AAABoAL0A2tTUEBB7Ca0J+Pj4ALkAALcAnJyh9vb2DKEMALMAALEAEJEQAKsA8vLyAKkAAKcA7u7u7OzsAJcA6urqAABrAI0AAIsAAIkAAIcAMTExGRkqBwdAEhKuCQnu09bTzMzMkwAAoyoqxsbGxMTEzAAA0woKgWtreD4+AwNtAACfCgpWRkZIQUFNc11dUQcHqKio7e3voKCgnp6enJycAAC5mpqasgAAmJiY6wAAlpaWngAAlJSUExMckpKSkJCQjo6OAACRioqKiIiIdqJ2hYiFhoaGhISEeA8PgoKCfoJ+fn5+fHx8enp6SsBKdnZ2dHR0cnJycHBwmAAAbm5uanBqemZmampqhAAARKJES5ZLYWRhYmJiAPQAOJg4XFxcWlpaAOYAAgJdQnhCVlZWAADwLpQuR2hHMTFgANgAUlJSUFBQAM4AIZghFBRtAMgATExM/f39AMYAAACdb2tr6g4OSEhIALwANGY0AgL1U1NgALAAAK4AtwAAAKQA7+/vAKIAj09PlTQ0AJgAAJYAAJIA5+fnAIwA4+PjAIAAkgYGAQFvZFZZAABkTk5rz8/P3d3gAAB7ycnJFhZBISFZV1dZRER4v7+/693dLS1UCgpgAAD/v319DyW3rQAAAAF0Uk5TAEDm2GYAAAABYktHRACIBR1IAAACiklEQVQ4jWNgoDJ48CoNj+w9psVmTyyZv3zAKpv5Xsq0rYFNb4P4htVVXyIDUGXTavhWnmmwrJxcKb7Aqr29fcOjdV3PY2CyMa/6luu0WT6arNBfWyupwGa5QHy13pM1Oss5azLBCiqUl2tr35Lsv+p76yarouLEiYq1kuJntIFgfR9YwQv52fPVGX1Zb8poaWnVM9edPVtXxQhkrtp+6D1YQc58pbkzpJQ1UMHyLa6HT9yDuGGR5zVbEX7h+eowsHSpxnqXwyfOOUNdOSvplOOyaXy8U2SXQMHK7UZBUQItC6EKpkVHbLUQnMLLzcktobx4sarWlks+ajPDwwU6oAqmJCbt3DqHX2SjLk93z4zF63e8ld7btKvEgKMcqqDjaOrxrcum6Z5P38fO0rV0h7PoZ7VdxVObNWHBybTvxpWdTiIbj9/e1tPNssL52cW9jd7nXgushAVltXty3hHHTbZ+t+052bvXAA1weNMa1TQzHqYgcnfyw1inFNtT2fZ9nOymb8v2Nh4IUnn5qRqmIGf3lcLEgxmegXfsJ/T12Lz73Mvx+mVuLkcCTEHA/vQ7IcH+d4PvbuLl7tshepHrY7H+Y6FniNhee+3a/sSD+WF5m/h4J7mU7g1vLToml2uCUCB24/IFu+PZ5+9b8/MJ7/Hp1W854HC6uRqhIJTHfbNZ9JXYfGNBfinX0tOfDgTJcTChJKnna8z2JcUVGAoLKrlGcelzzTz2HC1JZs0zv5xUYCwmvNT1Y+NTA6MXDOggoOPo5UJDCbEVbt7FJe86MeSBoHxbyKLZEmsOeRVphWKTZ2C43jV/3mxTj8NdJ7HLA8F7+Xk2h5hwSgPBi+lmFfjkGRgSHuCXxwQADa7/kZ2V28AAAAAASUVORK5CYII=",
      "tbwn3p08.png", false, 32, 32, "d1f6636d81c74f163bfff1405bf406cf");
  AKA_mark("lis===3880###sois===305653###eois===307749###lif===319###soif===154535###eoif===156631###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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",
      "tbyn3p08.png", false, 32, 32, "d1f6636d81c74f163bfff1405bf406cf");
  AKA_mark("lis===3882###sois===307753###eois===308005###lif===321###soif===156635###eoif===156887###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAP8AAP8AAP8AAP+1n0POAAAAA3RSTlMAVaoLuSc5AAAAFElEQVR4XmNkAIJQIB4sjFWDiwEAKxcVYRYzLkEAAAAASUVORK5CYII=",
      "tm3n3p02.png", false, 32, 32, "82e044043a1f2c91533b2fea5e271daa");
  AKA_mark("lis===3884###sois===308009###eois===309065###lif===323###soif===156891###eoif===157947###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAAAAABWESUoAAAABGdBTUEAAYagMeiWXwAAAoZJREFUOI1jqCcAGEhU8PjkRzwKXmytS41yS1z4EKuCd/s70xN9zbQ0VDT0AyZe+YOq4NORqUU5wXZ6Bjrq2rbKEtIaBjkLzv+AKfh+alZZcZqnoYGxqY2dhaGNq7G6rnZUXnHZ7CPvwArO1JeVlvqZm5nbhKYEOLl4uDrZWajllAJB1iywgjutHS3VyS7uSWXl5eVFieFBft5+yUBmQUzQXrCCVy2N7X2d9ZWooCw5JMDnGVjBj6aMpIoJk/ubq2GgqqoyKzzAxzMS6ouuzJK+/klTp09pr4GCwmhjEQldtyaogkmZ+f39E6dMnzl7Znd9XV1teVKIqrggD4/+GqiCKemZLf0TJk+uqp8+b05fXVZUuK60EC8Ht8o1qIIl6Sml/f2TmvOS8+bOX1AVFWknK8YrxSti9xuqYFtafGpX34S6sqi8OfPml0QGK0jzW3lIGRTBgvp4SkZwdV9VaWlkwey58/IirWSFtV2UhATnwhTcSM7wyOmNLimJyJ81e256uLK0gLm4EJ/YcZiCV4mpfrGNSRlFEQUzZs1J9JQVVZLh4+FR/gJT8CchOTyisDi8MKRk+sxZUZYy/MYyvLxCgYjozktICM2sCSwILp46fVq4jiSPg7a4CE87QkFPfHpgRllEXlDh5Kn9YUqifO6mQkJCRxEKfi1OTk7PTMsJLJ04uTNURkjQUlREYRtKkruQm5qWkR1Q2j+xMVSRn0dAQPUcWpp805aWnhlQ3NtfFaLPx81t+AAj0f5ZlZ7uX9zdWxJsKy3s8xZbsr9SFFHf0Z0b5G9e/gt7vni/oLmtIz0wYMFfbPkCBP4daG1LDNqOLISe9e5NSD1Tj09B/dfH9fgVYAAA90bMUdlj1V0AAAAASUVORK5CYII=",
      "tp0n0g08.png", false, 32, 32, "38deadbdfb7b0ff5a2b4cad35e866b39");
  AKA_mark("lis===3886###sois===309069###eois===311293###lif===325###soif===157951###eoif===160175###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("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",
      "tp0n2c08.png", false, 32, 32, "c37c05b6929096c1736f91dccbe93d15");
  AKA_mark("lis===3888###sois===311297###eois===313361###lif===327###soif===160179###eoif===162243###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAAYagMeiWXwAAAt9QTFRFFBRtgFZWtbW4qEJCn5+fsSAgixUVnZ2dGxtZm5ubAACEmZmZj6ePl5eXlZWVk5OTKSlWkZGRAACbj4+Pi5WLLi6njY2NgAAAi4uLuQAAiYmJDAzVeHV1h4eHAACyhYWFpQAA3gAAgYGBf39/AACefX19AADJe3t7eXl5NzdWd3d3dXV1c3NzSKlIjgAAAgJkAABiVolWKCh8U4tTiYmPZ2dnZWVlXW1dE+UThiYmby0tRJFEYWFhO507RIlEPZM9AACkAPMAAPEAWVlZV1dXVVVVU1NTNIU0UVFRJJckT09POjpBEBC6sg8PAMcAAMUA/Pz8AMMABASXAMEALXct+vr6AL8AAABoAL0A2tTUEBB7Ca0J+Pj4ALkAALcAnJyh9vb2DKEMALMAALEAEJEQAKsA8vLyAKkAAKcA7u7u7OzsAJcA6urqAABrAI0AAIsAAIkAAIcAMTExGRkqBwdAEhKuCQnu09bTzMzMkwAAoyoqxsbGxMTEzAAA0woKgWtreD4+AwNtAACfCgpWRkZIQUFNc11dUQcHqKio7e3voKCgnp6enJycAAC5mpqasgAAmJiY6wAAlpaWngAAlJSUExMckpKSkJCQjo6OAACRioqKiIiIdqJ2hYiFhoaGhISEeA8PgoKCfoJ+fn5+fHx8enp6SsBKdnZ2dHR0cnJycHBwmAAAbm5uanBqemZmampqhAAARKJES5ZLYWRhYmJiAPQAOJg4XFxcWlpaAOYAAgJdQnhCVlZWAADwLpQuR2hHMTFgANgAUlJSUFBQAM4AIZgh////AMgATExM/f39AMYAAACdb2tr6g4OSEhIALwANGY0AgL1U1NgALAAAK4AtwAAAKQA7+/vAKIAj09PlTQ0AJgAAJYAAJIA5+fnAIwA4+PjAIAAkgYGAQFvZFZZAABkTk5rz8/P3d3gAAB7ycnJFhZBISFZV1dZRER4v7+/693dLS1UCgpgAAD/v319RGIGqgAAApBJREFUOI1jUCYAGEhU8OBVGh4F95gWmz2xZP7yAauCzPdSpm0NbHobxDesrvoSGYCqIK2Gb+WZBsvKyZXiC6za29s3PFrX9TwGpiDmVd9ynTbLR5MV+mtrJRXYLBeIr9Z7skZnOWdNJlhBhfJybe1bkv1XfW/dZFVUnDhRsVZS/Iw2EKzvAyt4IT97vjqjL+tNGS0trXrmurNn66oYgcxV2w+9ByvIma80d4aUsgYqWL7F9fCJexA3LPK8ZivCLzxfHQaWLtVY73L4xDlnqC9mJZ1yXDaNj3eK7BIoWLndKChKoGUhVMG06IitFoJTeLk5uSWUFy9W1dpyyUdtZni4QAdUwZTEpJ1b5/CLbNTl6e6ZsXj9jrfSe5t2lRhwlEMVdBxNPb512TTd8+n72Fm6lu5wFv2stqt4arNmAFQB074bV3Y6iWw8fntbTzfLCudnF/c2ep97LbASFtTV7sl5Rxw32frdtudk714DNMDhTWtU08x4mILI3ckPY51SbE9l2/dxspu+LdvbeCBI5eWnapiCnN1XChMPZngG3rGf0Ndj8+5zL8frl7m5HAkwBQH70++EBPvfDb67iZe7b4foRa6PxfqPhZ4honvttWv7Ew/mh+Vt4uOd5FK6N7y1iEEu1wShQOzG5Qt2x7PP37fm5xPe49Or33LA4XRzNUJBKI/7ZrPoK7H5xoL8Uq6lpz8dCJLjYEJJcs/XmO1LiiswFBZUco3i0ueayfAcLU1mzTO/nFRgLCa81PVj41MDoxcYiTag4+jlQkMJsRVu3sUl7zqxJfvybSGLZkusOeRVpBWKPV9c75o/b7apx+Guk9jyBQgcey8/z+YQE7IQetZ7Md2sQhmfAuWEB8r4FWAAANxEPMkO1rmYAAAAAElFTkSuQmCC",
      "tp0n3p08.png", false, 32, 32, "985ccf415de9754ff21296de6cf69a38");
  AKA_mark("lis===3890###sois===313365###eois===315441###lif===329###soif===162247###eoif===164323###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAAYagMeiWXwAAAt9QTFRF////gFZWtbW4qEJCn5+fsSAgixUVnZ2dGxtZm5ubAACEmZmZj6ePl5eXlZWVk5OTKSlWkZGRAACbj4+Pi5WLLi6njY2NgAAAi4uLuQAAiYmJDAzVeHV1h4eHAACyhYWFpQAA3gAAgYGBf39/AACefX19AADJe3t7eXl5NzdWd3d3dXV1c3NzSKlIjgAAAgJkAABiVolWKCh8U4tTiYmPZ2dnZWVlXW1dE+UThiYmby0tRJFEYWFhO507RIlEPZM9AACkAPMAAPEAWVlZV1dXVVVVU1NTNIU0UVFRJJckT09POjpBEBC6sg8PAMcAAMUA/Pz8AMMABASXAMEALXct+vr6AL8AAABoAL0A2tTUEBB7Ca0J+Pj4ALkAALcAnJyh9vb2DKEMALMAALEAEJEQAKsA8vLyAKkAAKcA7u7u7OzsAJcA6urqAABrAI0AAIsAAIkAAIcAMTExGRkqBwdAEhKuCQnu09bTzMzMkwAAoyoqxsbGxMTEzAAA0woKgWtreD4+AwNtAACfCgpWRkZIQUFNc11dUQcHqKio7e3voKCgnp6enJycAAC5mpqasgAAmJiY6wAAlpaWngAAlJSUExMckpKSkJCQjo6OAACRioqKiIiIdqJ2hYiFhoaGhISEeA8PgoKCfoJ+fn5+fHx8enp6SsBKdnZ2dHR0cnJycHBwmAAAbm5uanBqemZmampqhAAARKJES5ZLYWRhYmJiAPQAOJg4XFxcWlpaAOYAAgJdQnhCVlZWAADwLpQuR2hHMTFgANgAUlJSUFBQAM4AIZghFBRtAMgATExM/f39AMYAAACdb2tr6g4OSEhIALwANGY0AgL1U1NgALAAAK4AtwAAAKQA7+/vAKIAj09PlTQ0AJgAAJYAAJIA5+fnAIwA4+PjAIAAkgYGAQFvZFZZAABkTk5rz8/P3d3gAAB7ycnJFhZBISFZV1dZRER4v7+/693dLS1UCgpgAAD/v319DyW3rQAAAAF0Uk5TAEDm2GYAAAKKSURBVDiNY2CgMnjwKg2P7D2mxWZPLJm/fMAqm/leyrStgU1vg/iG1VVfIgNQZdNq+FaeabCsnFwpvsCqvb19w6N1Xc9jYLIxr/qW67RZPpqs0F9bK6nAZrlAfLXekzU6yzlrMsEKKpSXa2vfkuy/6nvrJqui4sSJirWS4me0gWB9H1jBC/nZ89UZfVlvymhpadUz1509W1fFCGSu2n7oPVhBznyluTOklDVQwfItrodP3IO4YZHnNVsRfuH56jCwdKnGepfDJ845Q105K+mU47JpfLxTZJdAwcrtRkFRAi0LoQqmRUdstRCcwsvNyS2hvHixqtaWSz5qM8PDBTqgCqYkJu3cOodfZKMuT3fPjMXrd7yV3tu0q8SAoxyqoONo6vGty6bpnk/fx87StXSHs+hntV3FU5s1YcHJtO/GlZ1OIhuP397W082ywvnZxb2N3udeC6yEBWW1e3LeEcdNtn637TnZu9cADXB40xrVNDMepiByd/LDWKcU21PZ9n2c7KZvy/Y2HghSefmpGqYgZ/eVwsSDGZ6Bd+wn9PXYvPvcy/H6ZW4uRwJMQcD+9Dshwf53g+9u4uXu2yF6ketjsf5joWeI2F577dr+xIP5YXmb+HgnuZTuDW8tOiaXa4JQIHbj8gW749nn71vz8wnv8enVbzngcLq5GqEglMd9s1n0ldh8Y0F+KdfS058OBMlxMKEkqedrzPYlxRUYCgsquUZx6XPNPPYcLUlmzTO/nFRgLCa81PVj41MDoxcM6CCg4+jlQkMJsRVu3sUl7zox5IGgfFvIotkSaw55FWmFYpNnYLjeNX/ebFOPw10nscsDwXv5eTaHmHBKA8GL6WYV+OQZGBIe4JfHBAANrv+RnZXbwAAAAABJRU5ErkJggg==",
      "tp1n3p08.png", false, 32, 32, "d1f6636d81c74f163bfff1405bf406cf");
  AKA_mark("lis===3892###sois===315445###eois===315724###lif===331###soif===164327###eoif===164606###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAEAAADurUJNAAAABGdBTUEAAYagMeiWXwAAAEFJREFUeJxjZGAkABQIyLMMBQWMDwgp+PcfP2B5MBwUMMoRkGdkonlcDAYFjI/wyv7/z/iH5nExGBQwyuCVZWQEAFDl/nE14thZAAAAAElFTkSuQmCC",
      "xc1n0g08.png", true, 32, 32, "d41d8cd98f00b204e9800998ecf8427e");
  AKA_mark("lis===3894###sois===315728###eois===316019###lif===333###soif===164610###eoif===164901###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAkAAAArGWqiAAAABGdBTUEAAYagMeiWXwAAAEhJREFUeJzt1cEJADAMAkCF7JH9t3ITO0Qr9KH4zuErtA0EO4AKFPgcoO3kfUx4QIECD0qHH8KEBxQo8KB0OCOpQIG7cHejwAGCsfleD0DPSwAAAABJRU5ErkJggg==",
      "xc9n2c08.png", true, 32, 32, "d41d8cd98f00b204e9800998ecf8427e");
  AKA_mark("lis===3896###sois===316023###eois===316314###lif===335###soif===164905###eoif===165196###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0NGg0AAAANSUhEUgAAACAAAAAgBAAAAACT4cgpAAAABGdBTUEAAYagMeiWXwAAAEhJREFUeJxjYGAQFFRSMjZ2cQkNTUsrL2cgQwCV29FBjgAqd+ZMcgRQuatWkSOAyt29mxwBVO6ZM+QIoHLv3iVHAJX77h0ZAgAfFO4B6v9B+gAAAABJRU5ErkJggg==",
      "xcrn0g04.png", true, 32, 32, "d41d8cd98f00b204e9800998ecf8427e");
  AKA_mark("lis===3898###sois===316318###eois===316633###lif===337###soif===165200###eoif===165515###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQAAAABbAUdZAAAABGdBTUEAAYagMeiWXwAAAFtJREFUeJwtzLEJAzAMBdHr0gSySiALejRvkBU8gsGNCmFFB1Hx4IovqurSpIRszqklUwbnUzRXEuIRsiG/SyY9G0JzJSVei9qynm9qyjBpLp0pYW7pbzBl8L8fEIdJL0NTVU0AAAAASUVORK5CYII=",
      "xcsn0g01.png", true, 32, 32, "d41d8cd98f00b204e9800998ecf8427e");
  AKA_mark("lis===3900###sois===316637###eois===316928###lif===339###soif===165519###eoif===165810###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAAIAAADMaKZiAAAABGdBTUEAAYagMeiWXwAAAEhJREFUeJzt1cEJADAMAkCF7JH9t3ITO0Qr9KH4zuErtA0EO4AKFPgcoO3kfUx4QIECD0qHH8KEBxQo8KB0OCOpQIG7cHejwAGCsfleD0DPSwAAAABJRU5ErkJggg==",
      "xd0n2c08.png", true, 32, 32, "d41d8cd98f00b204e9800998ecf8427e");
  AKA_mark("lis===3902###sois===316932###eois===317223###lif===341###soif===165814###eoif===166105###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAwIAAACLyNyyAAAABGdBTUEAAYagMeiWXwAAAEhJREFUeJzt1cEJADAMAkCF7JH9t3ITO0Qr9KH4zuErtA0EO4AKFPgcoO3kfUx4QIECD0qHH8KEBxQo8KB0OCOpQIG7cHejwAGCsfleD0DPSwAAAABJRU5ErkJggg==",
      "xd3n2c08.png", true, 32, 32, "d41d8cd98f00b204e9800998ecf8427e");
  AKA_mark("lis===3904###sois===317227###eois===317518###lif===343###soif===166109###eoif===166400###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgYwIAAAAS+qv/AAAABGdBTUEAAYagMeiWXwAAAEhJREFUeJzt1cEJADAMAkCF7JH9t3ITO0Qr9KH4zuErtA0EO4AKFPgcoO3kfUx4QIECD0qHH8KEBxQo8KB0OCOpQIG7cHejwAGCsfleD0DPSwAAAABJRU5ErkJggg==",
      "xd9n2c08.png", true, 32, 32, "d41d8cd98f00b204e9800998ecf8427e");
  AKA_mark("lis===3906###sois===317522###eois===317701###lif===345###soif===166404###eoif===166583###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQAAAABbAUdZAAAABGdBTUEAAYagMeiWXwAAAABJRU5ErkJggg==",
      "xdtn0g01.png", true, 32, 32, "d41d8cd98f00b204e9800998ecf8427e");
  AKA_mark("lis===3908###sois===317705###eois===317984###lif===347###soif===166587###eoif===166866###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAAAAABDU1VNAAAABGdBTUEAAYagMeiWXwAAAEFJREFUeJxjZGAkABQIyLMMBQWMDwgp+PcfP2B5MBwUMMoRkGdkonlcDAYFjI/wyv7/z/iH5nExGBQwyuCVZWQEAFDl/nE14thZAAAAAElFTkSuQmCC",
      "xhdn0g08.png", true, 32, 32, "d41d8cd98f00b204e9800998ecf8427e");
  AKA_mark("lis===3910###sois===317988###eois===318279###lif===349###soif===166870###eoif===167161###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORwoKGgoAAAAKSUhEUgAAACAAAAAgBAAAAACT4cgpAAAABGdBTUEAAYagMeiWXwAAAEhJREFUeJxjYGAQFFRSMjZ2cQkKTUsrL2cgQwCV29FBjgAqd+ZMcgRQuatWkSOAyt29mxwBVO6ZM+QIoHLv3iVHAJX77h0ZAgAfFO4B6v9B+gAAAABJRU5ErkJggg==",
      "xlfn0g04.png", true, 32, 32, "d41d8cd98f00b204e9800998ecf8427e");
  AKA_mark("lis===3912###sois===318283###eois===318598###lif===351###soif===167165###eoif===167480###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("CVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQAAAABbAUdZAAAABGdBTUEAAYagMeiWXwAAAFtJREFUeJwtzLEJAzAMBdHr0gSySiALejRvkBU8gsGNCmFFB1Hx4IovqurSpIRszqklUwbnUzRXEuIRsiG/SyY9G0JzJSVei9qynm9qyjBpLp0pYW7pbzBl8L8fEIdJL9AvFMkAAAAASUVORK5CYII=",
      "xs1n0g01.png", true, 32, 32, "d41d8cd98f00b204e9800998ecf8427e");
  AKA_mark("lis===3914###sois===318602###eois===318917###lif===353###soif===167484###eoif===167799###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVFORw0KGgoAAAANSUhEUgAAACAAAAAgAQAAAABbAUdZAAAABGdBTUEAAYagMeiWXwAAAFtJREFUeJwtzLEJAzAMBdHr0gSySiALejRvkBU8gsGNCmFFB1Hx4IovqurSpIRszqklUwbnUzRXEuIRsiG/SyY9G0JzJSVei9qynm9qyjBpLp0pYW7pbzBl8L8fEIdJL9AvFMkAAAAASUVORK5CYII=",
      "xs2n0g01.png", true, 32, 32, "d41d8cd98f00b204e9800998ecf8427e");
  AKA_mark("lis===3916###sois===318921###eois===319236###lif===355###soif===167803###eoif===168118###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBOZw0KGgoAAAANSUhEUgAAACAAAAAgAQAAAABbAUdZAAAABGdBTUEAAYagMeiWXwAAAFtJREFUeJwtzLEJAzAMBdHr0gSySiALejRvkBU8gsGNCmFFB1Hx4IovqurSpIRszqklUwbnUzRXEuIRsiG/SyY9G0JzJSVei9qynm9qyjBpLp0pYW7pbzBl8L8fEIdJL9AvFMkAAAAASUVORK5CYII=",
      "xs4n0g01.png", true, 32, 32, "d41d8cd98f00b204e9800998ecf8427e");
  AKA_mark("lis===3918###sois===319240###eois===319555###lif===357###soif===168122###eoif===168437###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KIAoAAAANSUhEUgAAACAAAAAgAQAAAABbAUdZAAAABGdBTUEAAYagMeiWXwAAAFtJREFUeJwtzLEJAzAMBdHr0gSySiALejRvkBU8gsGNCmFFB1Hx4IovqurSpIRszqklUwbnUzRXEuIRsiG/SyY9G0JzJSVei9qynm9qyjBpLp0pYW7pbzBl8L8fEIdJL9AvFMkAAAAASUVORK5CYII=",
      "xs7n0g01.png", true, 32, 32, "d41d8cd98f00b204e9800998ecf8427e");
  AKA_mark("lis===3920###sois===319559###eois===323887###lif===359###soif===168441###eoif===172769###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAMK0lEQVR42gEgDN/zAf//APgAAPgAAPcAAPgAAPgAAPgAAPcAAPgAAPgAAPgAAPgAAPcAAPgAAPgAAPgAAPcAAPgAAPgAAPgAAPcAAPgAAPgAAPgAAPgAAPcAAPgAAPgAAPgAAPcAAPgAAPgAAAQA+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgEAPgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIBAD3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAACAAACQQA+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAgAAAkAAAgEAPgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIAAAJAAAIAAAIBAD4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAACAAACQAACAAACAAACAQA9wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAgAAAkAAAgAAAgAAAgAAAkEAPgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIAAAJAAAIAAAIAAAIAAAJAAAIBAD4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAACAAACQAACAAACAAACAAACQAACAAACAQA+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAgAAAkAAAgAAAgAAAgAAAkAAAgAAAgAAAgEAPgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIAAAJAAAIAAAIAAAIAAAJAAAIAAAIAAAIAAAIBAD3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAACAAACQAACAAACAAACAAACQAACAAACAAACAAACAAACQQA+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAgAAAkAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAgAAAkAAAgEAPgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIAAAJAAAIAAAIAAAIAAAJAAAIAAAIAAAIAAAIAAAJAAAIAAAIBAD4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAACAAACQAACAAACAAACAAACQAACAAACAAACAAACAAACQAACAAACAAACAQA9wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAgAAAkAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAkEAPgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIAAAJAAAIAAAIAAAIAAAJAAAIAAAIAAAIAAAIAAAJAAAIAAAIAAAIAAAJAAAIBAD4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAACAAACQAACAAACAAACAAACQAACAAACAAACAAACAAACQAACAAACAAACAAACQAACAAACAQA+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAgAAAkAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAkAAAgAAAgAAAgEAPcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIAAAJAAAIAAAIAAAIAAAJAAAIAAAIAAAIAAAIAAAJAAAIAAAIAAAIAAAJAAAIAAAIAAAIAAAJBAD4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAACAAACQAACAAACAAACAAACQAACAAACAAACAAACAAACQAACAAACAAACAAACQAACAAACAAACAAACQAACAQA+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAgAAAkAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAkAAAgAAAgEAPgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIAAAJAAAIAAAIAAAIAAAJAAAIAAAIAAAIAAAIAAAJAAAIAAAIAAAIAAAJAAAIAAAIAAAIAAAJAAAIAAAIAAAIBAD4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAACAAACQAACAAACAAACAAACQAACAAACAAACAAACAAACQAACAAACAAACAAACQAACAAACAAACAAACQAACAAACAAACAAACAQA9wAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAgAAAkAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAgAAAkEAPgAAAAAAAAAAAAAAAAAAAAAAAAIAAAIAAAJAAAIAAAIAAAIAAAJAAAIAAAIAAAIAAAIAAAJAAAIAAAIAAAIAAAJAAAIAAAIAAAIAAAJAAAIAAAIAAAIAAAIAAAJAAAIBAD4AAAAAAAAAAAAAAAAAAAACAAACAAACQAACAAACAAACAAACQAACAAACAAACAAACAAACQAACAAACAAACAAACQAACAAACAAACAAACQAACAAACAAACAAACAAACQAACAAACAQA+AAAAAAAAAAAAAAAAAgAAAgAAAkAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAgAAAkAAAgAAAgAAAgEAPcAAAAAAAAAAAAIAAAIAAAJAAAIAAAIAAAIAAAJAAAIAAAIAAAIAAAIAAAJAAAIAAAIAAAIAAAJAAAIAAAIAAAIAAAJAAAIAAAIAAAIAAAIAAAJAAAIAAAIAAAIAAAJBAD4AAAAAAAACAAACAAACQAACAAACAAACAAACQAACAAACAAACAAACAAACQAACAAACAAACAAACQAACAAACAAACAAACQAACAAACAAACAAACAAACQAACAAACAAACAAACQAACAQA+AAAAAgAAAgAAAkAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAgAAAkAAAgAAAgAAAgAAAkAAAgAAAhVk05uHxPwlQAAAABJRU5ErkJggg==",
      "z00n2c08.png", false, 32, 32, "6284c288d49534c897da4e50a9d05002");
  AKA_mark("lis===3922###sois===323891###eois===324299###lif===361###soif===172773###eoif===173181###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAAr0lEQVR4XrXR3Q5AMAwF4Epc8P4Py91sIgxb15/TRUSC76Q9U0q0U7m28/5/Zl7Vv/Q+mwsZeJbQgIUoB+Q5Q07RidagCS79nADfwaNHBLx0eAdfHdtBQweuqK2jAro6JIDT/SUPdGfJY92zIpFuDpDqtg4UuqEDna5dkVpXBVh0eQdGXdiBXZesyKUPA7w6HwDQmZIxeq9kmN5cEVL/B4D1Twd4ve4gRL9XFKXngANVk05u39tDGQAAAABJRU5ErkJggg==",
      "z03n2c08.png", false, 32, 32, "6284c288d49534c897da4e50a9d05002");
  AKA_mark("lis===3924###sois===324303###eois===324699###lif===363###soif===173185###eoif===173581###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAAp0lEQVR4nLXRSw6AIBAD0JqwwPsfFna4MX4QYT4dVySS19BuraECFSg4D9158ktyLaEi8suhARnICSVQB/agF5x6UEW3HhHw0ukb9Dp3g4FOrGisswJ+dUrATPePvNCdI691T0Ui3Rwg1W0bKHTDBjpdW5FaVwVYdPkGRl24gV2XVOTSlwFefR5A0Ccjc/S/kWn6sCKm/g0g690GfP25QYh+VRSlA/kAVZNObjFSwSwAAAAASUVORK5CYII=",
      "z06n2c08.png", false, 32, 32, "6284c288d49534c897da4e50a9d05002");
  AKA_mark("lis===3926###sois===324703###eois===325099###lif===365###soif===173585###eoif===173981###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testPngSuite()");testPngSuiteImage("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAAp0lEQVR42rXRSw6AIBAD0JqwwPsfFna4MX4QYT4dVySS19BuraECFSg4D9158ktyLaEi8suhARnICSVQB/agF5x6UEW3HhHw0ukb9Dp3g4FOrGisswJ+dUrATPePvNCdI691T0Ui3Rwg1W0bKHTDBjpdW5FaVwVYdPkGRl24gV2XVOTSlwFefR5A0Ccjc/S/kWn6sCKm/g0g690GfP25QYh+VRSlA/kAVZNObtYRvvUAAAAASUVORK5CYII=",
      "z09n2c08.png", false, 32, 32, "6284c288d49534c897da4e50a9d05002");
}


/** Instrumented function testErrorImages() */
void testErrorImages() /* << Aka begin of function void testErrorImages() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testErrorImages()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.testErrorImages.325113.stub"

  AKA_mark("lis===3932###sois===325136###eois===325180###lif===1###soif===28###eoif===72###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testErrorImages()");std::cout << "testErrorImages" << std::endl;
  // Image with color type palette but missing PLTE chunk
  AKA_mark("lis===3934###sois===325243###eois===325471###lif===3###soif===135###eoif===363###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\testErrorImages()");testBase64Image("iVBORw0KGgoAAAANSUhEUgAAAQAAAAEAAgMAAAAhHED1AAAAU0lEQVR4Ae3MwQAAAAxFoXnM3/NDvGsBdB8JBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEEQDHGPAW1eyhK0AAAAASUVORK5CYII=", true, 256, 256, "");
}

/** Instrumented function doMain() */
void doMain() /* << Aka begin of function void doMain() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng_unittest.cpp.doMain.325483.stub"

  //PNG
  AKA_mark("lis===3939###sois===325506###eois===325521###lif===2###soif===28###eoif===43###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testPngSuite();
  AKA_mark("lis===3940###sois===325525###eois===325543###lif===3###soif===47###eoif===65###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testErrorImages();
  AKA_mark("lis===3941###sois===325547###eois===325562###lif===4###soif===69###eoif===84###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testPNGCodec();
  AKA_mark("lis===3942###sois===325566###eois===325595###lif===5###soif===88###eoif===117###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testPaletteFilterTypesZero();
  AKA_mark("lis===3943###sois===325599###eois===325616###lif===6###soif===121###eoif===138###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testComplexPNG();
  AKA_mark("lis===3944###sois===325620###eois===325639###lif===7###soif===142###eoif===161###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testInspectChunk();
  AKA_mark("lis===3945###sois===325643###eois===325667###lif===8###soif===165###eoif===189###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testPredefinedFilters();
  AKA_mark("lis===3946###sois===325671###eois===325685###lif===9###soif===193###eoif===207###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testFuzzing();
  AKA_mark("lis===3947###sois===325689###eois===325709###lif===10###soif===211###eoif===231###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testEncoderErrors();
  AKA_mark("lis===3948###sois===325713###eois===325742###lif===11###soif===235###eoif===264###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testPaletteToPaletteDecode();
  AKA_mark("lis===3949###sois===325746###eois===325776###lif===12###soif===268###eoif===298###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testPaletteToPaletteDecode2();
  AKA_mark("lis===3950###sois===325780###eois===325799###lif===13###soif===302###eoif===321###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testColorProfile();
  AKA_mark("lis===3951###sois===325803###eois===325814###lif===14###soif===325###eoif===336###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testExif();
  AKA_mark("lis===3952###sois===325818###eois===325834###lif===15###soif===340###eoif===356###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testBkgdChunk();
  AKA_mark("lis===3953###sois===325838###eois===325855###lif===16###soif===360###eoif===377###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testBkgdChunk2();
  AKA_mark("lis===3954###sois===325859###eois===325875###lif===17###soif===381###eoif===397###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testSbitChunk();

  //Colors
#ifndef DISABLE_SLOW
  AKA_mark("lis===3958###sois===325915###eois===325931###lif===21###soif===437###eoif===453###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testFewColors();
#endif // DISABLE_SLOW
  AKA_mark("lis===3960###sois===325959###eois===325981###lif===23###soif===481###eoif===503###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testColorKeyConvert();
  AKA_mark("lis===3961###sois===325985###eois===326004###lif===24###soif===507###eoif===526###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testColorConvert();
  AKA_mark("lis===3962###sois===326008###eois===326028###lif===25###soif===530###eoif===550###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testColorConvert2();
  AKA_mark("lis===3963###sois===326032###eois===326062###lif===26###soif===554###eoif===584###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testPaletteToPaletteConvert();
  AKA_mark("lis===3964###sois===326066###eois===326092###lif===27###soif===588###eoif===614###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testRGBToPaletteConvert();
  AKA_mark("lis===3965###sois===326096###eois===326123###lif===28###soif===618###eoif===645###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");test16bitColorEndianness();
  AKA_mark("lis===3966###sois===326127###eois===326149###lif===29###soif===649###eoif===671###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testAutoColorModels();
  AKA_mark("lis===3967###sois===326153###eois===326173###lif===30###soif===675###eoif===695###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testNoAutoConvert();
  AKA_mark("lis===3968###sois===326177###eois===326194###lif===31###soif===699###eoif===716###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testChrmToSrgb();
  AKA_mark("lis===3969###sois===326198###eois===326208###lif===32###soif===720###eoif===730###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testXYZ();
  AKA_mark("lis===3970###sois===326212###eois===326222###lif===33###soif===734###eoif===744###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testICC();
  AKA_mark("lis===3971###sois===326226###eois===326240###lif===34###soif===748###eoif===762###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testICCGray();

  //Zlib
  AKA_mark("lis===3974###sois===326256###eois===326275###lif===37###soif===778###eoif===797###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testCompressZlib();
  AKA_mark("lis===3975###sois===326279###eois===326304###lif===38###soif===801###eoif===826###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testHuffmanCodeLengths();
  AKA_mark("lis===3976###sois===326308###eois===326333###lif===39###soif===830###eoif===855###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testCustomZlibCompress();
  AKA_mark("lis===3977###sois===326337###eois===326363###lif===40###soif===859###eoif===885###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testCustomZlibCompress2();
  AKA_mark("lis===3978###sois===326367###eois===326387###lif===41###soif===889###eoif===909###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testCustomDeflate();
  AKA_mark("lis===3979###sois===326391###eois===326418###lif===42###soif===913###eoif===940###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testCustomZlibDecompress();
  AKA_mark("lis===3980###sois===326422###eois===326442###lif===43###soif===944###eoif===964###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testCustomInflate();
  // TODO: add test for huffman code with exactly 0 and 1 symbols present

  //lodepng_util
  AKA_mark("lis===3984###sois===326541###eois===326557###lif===47###soif===1063###eoif===1079###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testChunkUtil();
  AKA_mark("lis===3985###sois===326561###eois===326582###lif===48###soif===1083###eoif===1104###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");testGetFilterTypes();

  AKA_mark("lis===3987###sois===326588###eois===326634###lif===50###soif===1110###eoif===1156###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng_unittest.cpp\\doMain()");std::cout << "\ntest successful" << std::endl;
}

// int main() {
//   try {
//     doMain();
//   }
//   catch(...) {
//     std::cout << std::endl;
//     std::cout << "caught error!" << std::endl;
//     std::cout << "*** TEST FAILED ***" << std::endl;
//   }

//   return 0;
// }

#endif
