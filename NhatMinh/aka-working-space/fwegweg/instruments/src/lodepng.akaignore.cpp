/** Guard statement to avoid multiple declaration */
#ifndef AKA_SRC_E__CPP_PROJECTS_COLLECTION_NHATMINH_LVANDEVE_LODEPNG_SRC_LODEPNG_CPP
#define AKA_SRC_E__CPP_PROJECTS_COLLECTION_NHATMINH_LVANDEVE_LODEPNG_SRC_LODEPNG_CPP
#include <string>
#include <string.h>
#include <vector>
extern "C++" int AKA_mark(char* str);
extern "C++" void AKA_assert(char* actualName, int actualVal, char* expectedName, int expectedVal);
extern "C++" int AKA_assert_double(char* actualName, double actualVal, char* expectedName, double expectedVal);
extern "C++" int AKA_assert_ptr(char* actualName, void* actualVal, char* expectedName, void* expectedVal);
extern "C++" int AKA_fCall;
extern "C++" char* AKA_test_case_name;



/*
LodePNG version 20250506

Copyright (c) 2005-2025 Lode Vandevenne

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

    1. The origin of this software must not be misrepresented; you must not
    claim that you wrote the original software. If you use this software
    in a product, an acknowledgment in the product documentation would be
    appreciated but is not required.

    2. Altered source versions must be plainly marked as such, and must not be
    misrepresented as being the original software.

    3. This notice may not be removed or altered from any source
    distribution.
*/

/*
The manual and changelog are in the header file "lodepng.h"
Rename this file to lodepng.cpp to use it for C++, or to lodepng.c to use it for C.
*/

/** Guard statement to avoid multiple declaration */
#ifndef AKA_INCLUDE__LODEPNG_H_
#define AKA_INCLUDE__LODEPNG_H_
#include "lodepng.akaignore.h"
#endif


#ifdef LODEPNG_COMPILE_DISK
#include <limits.h> /* LONG_MAX */
#include <stdio.h> /* file handling */
#endif /* LODEPNG_COMPILE_DISK */

#ifdef LODEPNG_COMPILE_ALLOCATORS
#include <stdlib.h> /* allocations */
#endif /* LODEPNG_COMPILE_ALLOCATORS */

#if defined(_MSC_VER) && (_MSC_VER >= 1310) /*Visual Studio: A few warning types are not desired here.*/
#pragma warning( disable : 4244 ) /*implicit conversions: not warned by gcc -Wall -Wextra and requires too much casts*/
#pragma warning( disable : 4996 ) /*VS does not like fopen, but fopen_s is not standard C so unusable here*/
#endif /*_MSC_VER */

const char* LODEPNG_VERSION_STRING = "20250506";

/*
This source file is divided into the following large parts. The code sections
with the "LODEPNG_COMPILE_" #defines divide this up further in an intermixed way.
-Tools for C and common code for PNG and Zlib
-C Code for Zlib (huffman, deflate, ...)
-C Code for PNG (file format chunks, adam7, PNG filters, color conversions, ...)
-The C++ wrapper around all of the above
*/

/* ////////////////////////////////////////////////////////////////////////// */
/* ////////////////////////////////////////////////////////////////////////// */
/* // Tools for C, and common code for PNG and Zlib.                       // */
/* ////////////////////////////////////////////////////////////////////////// */
/* ////////////////////////////////////////////////////////////////////////// */

/*The malloc, realloc and free functions defined here with "lodepng_" in front
of the name, so that you can easily change them to others related to your
platform if needed. Everything else in the code calls these. Pass
-DLODEPNG_NO_COMPILE_ALLOCATORS to the compiler, or comment out
#define LODEPNG_COMPILE_ALLOCATORS in the header, to disable the ones here and
define them in your own project's source files without needing to change
lodepng source code. Don't forget to remove "static" if you copypaste them
from here.*/

#ifdef LODEPNG_COMPILE_ALLOCATORS
/** Instrumented function lodepng_malloc(size_t) */
static void* lodepng_malloc(size_t size) /* << Aka begin of function void * lodepng_malloc(size_t size) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_malloc(size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_malloc.3167.stub"

#ifdef LODEPNG_MAX_ALLOC
  if(size > LODEPNG_MAX_ALLOC) return 0;
#endif
  AKA_mark("lis===78###sois===3278###eois===3298###lif===4###soif===122###eoif===142###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_malloc(size_t)");return malloc(size);
}

/* NOTE: when realloc returns NULL, it leaves the original memory untouched */
/** Instrumented function lodepng_realloc(void*,size_t) */
static void* lodepng_realloc(void* ptr, size_t new_size) /* << Aka begin of function void * lodepng_realloc(void* ptr, size_t new_size) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_realloc(void*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_realloc.3396.stub"

#ifdef LODEPNG_MAX_ALLOC
  if(new_size > LODEPNG_MAX_ALLOC) return 0;
#endif
  AKA_mark("lis===86###sois===3527###eois===3557###lif===4###soif===142###eoif===172###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_realloc(void*,size_t)");return realloc(ptr, new_size);
}

/** Instrumented function lodepng_free(void*) */
static void lodepng_free(void* ptr) /* << Aka begin of function void lodepng_free(void* ptr) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_free(void*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_free.3576.stub"

  AKA_mark("lis===90###sois===3605###eois===3615###lif===1###soif===41###eoif===51###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_free(void*)");free(ptr);
}
#else /*LODEPNG_COMPILE_ALLOCATORS*/
/* TODO: support giving additional void* payload to the custom allocators */
void* lodepng_malloc(size_t size);
void* lodepng_realloc(void* ptr, size_t new_size);
void lodepng_free(void* ptr);
#endif /*LODEPNG_COMPILE_ALLOCATORS*/

/* convince the compiler to inline a function, for use when this measurably improves performance */
/* inline is not available in C90, but use it when supported by the compiler */
#if (defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)) || (defined(__cplusplus) && (__cplusplus >= 199711L))
#define LODEPNG_INLINE inline
#else
#define LODEPNG_INLINE /* not available */
#endif

/* restrict is not available in C90, but use it when supported by the compiler */
#if (defined(__GNUC__) && (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 1))) ||\
    (defined(_MSC_VER) && (_MSC_VER >= 1400)) || \
    (defined(__WATCOMC__) && (__WATCOMC__ >= 1250) && !defined(__cplusplus))
#define LODEPNG_RESTRICT __restrict
#else
#define LODEPNG_RESTRICT /* not available */
#endif

/* Replacements for C library functions such as memcpy and strlen, to support platforms
where a full C library is not available. The compiler can recognize them and compile
to something as fast. */

/** Instrumented function lodepng_memcpy(void*,void const*,size_t) */
static void lodepng_memcpy(void* LODEPNG_RESTRICT dst,
                           const void* LODEPNG_RESTRICT src, size_t size) /* << Aka begin of function void lodepng_memcpy(void* LODEPNG_RESTRICT dst,
                           const void* LODEPNG_RESTRICT src, size_t size) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_memcpy(void*,void const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_memcpy.4907.stub"

  AKA_mark("lis===122###sois===5030###eois===5039###lif===2###soif===135###eoif===144###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_memcpy(void*,void const*,size_t)");size_t i;
  int AKA_BLOCK_LOOP_5043 = 0;
    AKA_mark("lis===123###sois===5047###eois===5053###lif===3###soif===152###eoif===158###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_memcpy(void*,void const*,size_t)");
for(i = 0; AKA_mark("lis===123###sois===5054###eois===5062###lif===3###soif===159###eoif===167###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_memcpy(void*,void const*,size_t)") && (AKA_mark("lis===123###sois===5054###eois===5062###lif===3###soif===159###eoif===167###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_memcpy(void*,void const*,size_t)") && (i < size)); ({AKA_mark("lis===123###sois===5064###eois===5067###lif===3###soif===169###eoif===172###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_memcpy(void*,void const*,size_t)");i++;})) {
AKA_mark("lis===123###sois===5069###eois===5109###lif===3###soif===174###eoif===214###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_memcpy(void*,void const*,size_t)");((char*)dst)[i] = ((const char*)src)[i];
}

}

/** Instrumented function lodepng_memset(void*,int,size_t) */
static void lodepng_memset(void* LODEPNG_RESTRICT dst,
                           int value, size_t num) /* << Aka begin of function void lodepng_memset(void* LODEPNG_RESTRICT dst,
                           int value, size_t num) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_memset(void*,int,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_memset.5128.stub"

  AKA_mark("lis===128###sois===5227###eois===5236###lif===2###soif===111###eoif===120###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_memset(void*,int,size_t)");size_t i;
  int AKA_BLOCK_LOOP_5240 = 0;
    AKA_mark("lis===129###sois===5244###eois===5250###lif===3###soif===128###eoif===134###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_memset(void*,int,size_t)");
for(i = 0; AKA_mark("lis===129###sois===5251###eois===5258###lif===3###soif===135###eoif===142###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_memset(void*,int,size_t)") && (AKA_mark("lis===129###sois===5251###eois===5258###lif===3###soif===135###eoif===142###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_memset(void*,int,size_t)") && (i < num)); ({AKA_mark("lis===129###sois===5260###eois===5263###lif===3###soif===144###eoif===147###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_memset(void*,int,size_t)");i++;})) {
AKA_mark("lis===129###sois===5265###eois===5295###lif===3###soif===149###eoif===179###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_memset(void*,int,size_t)");((char*)dst)[i] = (char)value;
}

}

/* does not check memory out of bounds, do not use on untrusted data */
/** Instrumented function lodepng_strlen(char const*) */
static size_t lodepng_strlen(const char* a) /* << Aka begin of function size_t lodepng_strlen(const char* a) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_strlen(char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_strlen.5389.stub"

  AKA_mark("lis===134###sois===5424###eois===5445###lif===1###soif===49###eoif===70###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_strlen(char const*)");const char* orig = a;
  /* avoid warning about unused function in case of disabled COMPILE... macros */
  AKA_mark("lis===136###sois===5532###eois===5556###lif===3###soif===157###eoif===181###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_strlen(char const*)");(void)(&lodepng_strlen);
  int AKA_BLOCK_LOOP_5560 = 0;
    while(AKA_mark("lis===137###sois===5566###eois===5568###lif===4###soif===191###eoif===193###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_strlen(char const*)") && (AKA_mark("lis===137###sois===5566###eois===5568###lif===4###soif===191###eoif===193###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_strlen(char const*)") && (*a))) {
AKA_mark("lis===137###sois===5570###eois===5574###lif===4###soif===195###eoif===199###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_strlen(char const*)");a++;
}

  AKA_mark("lis===138###sois===5578###eois===5604###lif===5###soif===203###eoif===229###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_strlen(char const*)");return (size_t)(a - orig);
}

#define LODEPNG_MAX(a, b) (((a) > (b)) ? (a) : (b))
#define LODEPNG_MIN(a, b) (((a) < (b)) ? (a) : (b))

#if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_DECODER)
/* Safely check if adding two integers will overflow (no undefined
behavior, compiler removing the code, etc...) and output result. */
/** Instrumented function lodepng_addofl(size_t,size_t,size_t*) */
static int lodepng_addofl(size_t a, size_t b, size_t* result) /* << Aka begin of function int lodepng_addofl(size_t a, size_t b, size_t* result) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_addofl(size_t,size_t,size_t*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_addofl.5937.stub"

  AKA_mark("lis===148###sois===5993###eois===6009###lif===1###soif===67###eoif===83###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_addofl(size_t,size_t,size_t*)");*result = a + b; /* Unsigned addition is well defined and safe in C90 */
  AKA_mark("lis===149###sois===6069###eois===6088###lif===2###soif===143###eoif===162###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_addofl(size_t,size_t,size_t*)");return *result < a;
}
#endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_DECODER)*/

#ifdef LODEPNG_COMPILE_DECODER
/* Safely check if multiplying two integers will overflow (no undefined
behavior, compiler removing the code, etc...) and output result. */
/** Instrumented function lodepng_mulofl(size_t,size_t,size_t*) */
static int lodepng_mulofl(size_t a, size_t b, size_t* result) /* << Aka begin of function int lodepng_mulofl(size_t a, size_t b, size_t* result) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_mulofl(size_t,size_t,size_t*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_mulofl.6357.stub"

  AKA_mark("lis===157###sois===6413###eois===6429###lif===1###soif===67###eoif===83###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_mulofl(size_t,size_t,size_t*)");*result = a * b; /* Unsigned multiplication is well defined and safe in C90 */
  AKA_mark("lis===158###sois===6495###eois===6531###lif===2###soif===149###eoif===185###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_mulofl(size_t,size_t,size_t*)");return (a != 0 && *result / a != b);
}

#ifdef LODEPNG_COMPILE_ZLIB
/* Safely check if a + b > c, even if overflow could happen. */
/** Instrumented function lodepng_gtofl(size_t,size_t,size_t) */
static int lodepng_gtofl(size_t a, size_t b, size_t c) /* << Aka begin of function int lodepng_gtofl(size_t a, size_t b, size_t c) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_gtofl(size_t,size_t,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_gtofl.6643.stub"

  AKA_mark("lis===164###sois===6692###eois===6701###lif===1###soif===60###eoif===69###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_gtofl(size_t,size_t,size_t)");size_t d;
  if(AKA_mark("lis===165###sois===6708###eois===6732###lif===2###soif===76###eoif===100###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_gtofl(size_t,size_t,size_t)") && (AKA_mark("lis===165###sois===6708###eois===6732###lif===2###soif===76###eoif===100###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_gtofl(size_t,size_t,size_t)") && (lodepng_addofl(a, b, &d)))) {
AKA_mark("lis===165###sois===6734###eois===6743###lif===2###soif===102###eoif===111###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_gtofl(size_t,size_t,size_t)");return 1;
}

else {
AKA_mark("lis===-165-###sois===-6708-###eois===-670824-###lif===-2-###soif===-###eoif===-100-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_gtofl(size_t,size_t,size_t)");
}
  AKA_mark("lis===166###sois===6747###eois===6760###lif===3###soif===115###eoif===128###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_gtofl(size_t,size_t,size_t)");return d > c;
}
#endif /*LODEPNG_COMPILE_ZLIB*/
#endif /*LODEPNG_COMPILE_DECODER*/


/*
Often in case of an error a value is assigned to a variable and then it breaks
out of a loop (to go to the cleanup phase of a function). This macro does that.
It makes the error handling code shorter and more readable.

Example: if(!uivector_resize(&lz77_encoded, datasize)) ERROR_BREAK(83);
*/
#define CERROR_BREAK(errorvar, code){\
  errorvar = code;\
  break;\
}

/*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
#define ERROR_BREAK(code) CERROR_BREAK(error, code)

/*Set error var to the error code, and return it.*/
#define CERROR_RETURN_ERROR(errorvar, code){\
  errorvar = code;\
  return code;\
}

/*Try the code, if it returns error, also return the error.*/
#define CERROR_TRY_RETURN(call){\
  unsigned error = call;\
  if(error) return error;\
}

/*Set error var to the error code, and return from the void function.*/
#define CERROR_RETURN(errorvar, code){\
  errorvar = code;\
  return;\
}

/*
About uivector, ucvector and string:
-All of them wrap dynamic arrays or text strings in a similar way.
-LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
-The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
-They're not used in the interface, only internally in this file as static functions.
-As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
*/

#ifdef LODEPNG_COMPILE_ZLIB
#ifdef LODEPNG_COMPILE_ENCODER
/*dynamic vector of unsigned ints*/
typedef struct uivector {
  unsigned* data;
  size_t size; /*size in number of unsigned longs*/
  size_t allocsize; /*allocated size in bytes*/
} uivector;

/** Instrumented function uivector_cleanup(void*) */
static void uivector_cleanup(void* p) /* << Aka begin of function void uivector_cleanup(void* p) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_cleanup(void*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.uivector_cleanup.8624.stub"

  AKA_mark("lis===224###sois===8655###eois===8708###lif===1###soif===43###eoif===96###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_cleanup(void*)");((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
  AKA_mark("lis===225###sois===8712###eois===8747###lif===2###soif===100###eoif===135###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_cleanup(void*)");lodepng_free(((uivector*)p)->data);
  AKA_mark("lis===226###sois===8751###eois===8779###lif===3###soif===139###eoif===167###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_cleanup(void*)");((uivector*)p)->data = NULL;
}

/*returns 1 if success, 0 if failure ==> nothing done*/
/** Instrumented function uivector_resize(uivector*,size_t) */
static unsigned uivector_resize(uivector* p, size_t size) /* << Aka begin of function unsigned uivector_resize(uivector* p, size_t size) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_resize(uivector*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.uivector_resize.8859.stub"

  AKA_mark("lis===231###sois===8906###eois===8949###lif===1###soif===63###eoif===106###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_resize(uivector*,size_t)");size_t allocsize = size * sizeof(unsigned);
  if(AKA_mark("lis===232###sois===8956###eois===8980###lif===2###soif===113###eoif===137###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_resize(uivector*,size_t)") && (AKA_mark("lis===232###sois===8956###eois===8980###lif===2###soif===113###eoif===137###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_resize(uivector*,size_t)") && (allocsize > p->allocsize))) {
    AKA_mark("lis===233###sois===8989###eois===9039###lif===3###soif===146###eoif===196###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_resize(uivector*,size_t)");size_t newsize = allocsize + (p->allocsize >> 1u);
    AKA_mark("lis===234###sois===9045###eois===9092###lif===4###soif===202###eoif===249###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_resize(uivector*,size_t)");void* data = lodepng_realloc(p->data, newsize);
    if(AKA_mark("lis===235###sois===9101###eois===9105###lif===5###soif===258###eoif===262###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_resize(uivector*,size_t)") && (AKA_mark("lis===235###sois===9101###eois===9105###lif===5###soif===258###eoif===262###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_resize(uivector*,size_t)") && (data))) {
      AKA_mark("lis===236###sois===9116###eois===9139###lif===6###soif===273###eoif===296###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_resize(uivector*,size_t)");p->allocsize = newsize;
      AKA_mark("lis===237###sois===9147###eois===9173###lif===7###soif===304###eoif===330###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_resize(uivector*,size_t)");p->data = (unsigned*)data;
    }
    else {
AKA_mark("lis===239###sois===9191###eois===9200###lif===9###soif===348###eoif===357###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_resize(uivector*,size_t)");return 0;
}
 /*error: not enough memory*/
  }
else {
AKA_mark("lis===-232-###sois===-8956-###eois===-895624-###lif===-2-###soif===-###eoif===-137-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_resize(uivector*,size_t)");
}
  AKA_mark("lis===241###sois===9238###eois===9253###lif===11###soif===395###eoif===410###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_resize(uivector*,size_t)");p->size = size;
  AKA_mark("lis===242###sois===9257###eois===9266###lif===12###soif===414###eoif===423###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_resize(uivector*,size_t)");return 1; /*success*/
}

/** Instrumented function uivector_init(uivector*) */
static void uivector_init(uivector* p) /* << Aka begin of function void uivector_init(uivector* p) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_init(uivector*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.uivector_init.9297.stub"

  AKA_mark("lis===246###sois===9329###eois===9344###lif===1###soif===44###eoif===59###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_init(uivector*)");p->data = NULL;
  AKA_mark("lis===247###sois===9348###eois===9375###lif===2###soif===63###eoif===90###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_init(uivector*)");p->size = p->allocsize = 0;
}

/*returns 1 if success, 0 if failure ==> nothing done*/
/** Instrumented function uivector_push_back(uivector*,unsigned) */
static unsigned uivector_push_back(uivector* p, unsigned c) /* << Aka begin of function unsigned uivector_push_back(uivector* p, unsigned c) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_push_back(uivector*,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.uivector_push_back.9455.stub"

  if(AKA_mark("lis===252###sois===9507###eois===9539###lif===1###soif===68###eoif===100###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_push_back(uivector*,unsigned)") && (AKA_mark("lis===252###sois===9507###eois===9539###lif===1###soif===68###eoif===100###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_push_back(uivector*,unsigned)") && (!uivector_resize(p, p->size + 1)))) {
AKA_mark("lis===252###sois===9541###eois===9550###lif===1###soif===102###eoif===111###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_push_back(uivector*,unsigned)");return 0;
}

else {
AKA_mark("lis===-252-###sois===-9507-###eois===-950732-###lif===-1-###soif===-###eoif===-100-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_push_back(uivector*,unsigned)");
}
  AKA_mark("lis===253###sois===9554###eois===9579###lif===2###soif===115###eoif===140###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_push_back(uivector*,unsigned)");p->data[p->size - 1] = c;
  AKA_mark("lis===254###sois===9583###eois===9592###lif===3###soif===144###eoif===153###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\uivector_push_back(uivector*,unsigned)");return 1;
}
#endif /*LODEPNG_COMPILE_ENCODER*/
#endif /*LODEPNG_COMPILE_ZLIB*/

/* /////////////////////////////////////////////////////////////////////////// */

/*dynamic vector of unsigned chars*/
typedef struct ucvector {
  unsigned char* data;
  size_t size; /*used size*/
  size_t allocsize; /*allocated size*/
} ucvector;

/*returns 1 if success, 0 if failure ==> nothing done*/
/** Instrumented function ucvector_reserve(ucvector*,size_t) */
static unsigned ucvector_reserve(ucvector* p, size_t size) /* << Aka begin of function unsigned ucvector_reserve(ucvector* p, size_t size) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\ucvector_reserve(ucvector*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.ucvector_reserve.10000.stub"

  if(AKA_mark("lis===270###sois===10051###eois===10070###lif===1###soif===67###eoif===86###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ucvector_reserve(ucvector*,size_t)") && (AKA_mark("lis===270###sois===10051###eois===10070###lif===1###soif===67###eoif===86###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ucvector_reserve(ucvector*,size_t)") && (size > p->allocsize))) {
    AKA_mark("lis===271###sois===10079###eois===10124###lif===2###soif===95###eoif===140###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ucvector_reserve(ucvector*,size_t)");size_t newsize = size + (p->allocsize >> 1u);
    AKA_mark("lis===272###sois===10130###eois===10177###lif===3###soif===146###eoif===193###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ucvector_reserve(ucvector*,size_t)");void* data = lodepng_realloc(p->data, newsize);
    if(AKA_mark("lis===273###sois===10186###eois===10190###lif===4###soif===202###eoif===206###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ucvector_reserve(ucvector*,size_t)") && (AKA_mark("lis===273###sois===10186###eois===10190###lif===4###soif===202###eoif===206###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ucvector_reserve(ucvector*,size_t)") && (data))) {
      AKA_mark("lis===274###sois===10201###eois===10224###lif===5###soif===217###eoif===240###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ucvector_reserve(ucvector*,size_t)");p->allocsize = newsize;
      AKA_mark("lis===275###sois===10232###eois===10263###lif===6###soif===248###eoif===279###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ucvector_reserve(ucvector*,size_t)");p->data = (unsigned char*)data;
    }
    else {
AKA_mark("lis===277###sois===10281###eois===10290###lif===8###soif===297###eoif===306###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ucvector_reserve(ucvector*,size_t)");return 0;
}
 /*error: not enough memory*/
  }
else {
AKA_mark("lis===-270-###sois===-10051-###eois===-1005119-###lif===-1-###soif===-###eoif===-86-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ucvector_reserve(ucvector*,size_t)");
}
  AKA_mark("lis===279###sois===10328###eois===10337###lif===10###soif===344###eoif===353###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ucvector_reserve(ucvector*,size_t)");return 1; /*success*/
}

/*returns 1 if success, 0 if failure ==> nothing done*/
/** Instrumented function ucvector_resize(ucvector*,size_t) */
static unsigned ucvector_resize(ucvector* p, size_t size) /* << Aka begin of function unsigned ucvector_resize(ucvector* p, size_t size) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\ucvector_resize(ucvector*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.ucvector_resize.10429.stub"

  AKA_mark("lis===284###sois===10476###eois===10491###lif===1###soif===63###eoif===78###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ucvector_resize(ucvector*,size_t)");p->size = size;
  AKA_mark("lis===285###sois===10495###eois===10528###lif===2###soif===82###eoif===115###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ucvector_resize(ucvector*,size_t)");return ucvector_reserve(p, size);
}

/** Instrumented function ucvector_init(unsigned char*,size_t) */
static ucvector ucvector_init(unsigned char* buffer, size_t size) /* << Aka begin of function ucvector ucvector_init(unsigned char* buffer, size_t size) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\ucvector_init(unsigned char*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.ucvector_init.10551.stub"

  AKA_mark("lis===289###sois===10606###eois===10617###lif===1###soif===71###eoif===82###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ucvector_init(unsigned char*,size_t)");ucvector v;
  AKA_mark("lis===290###sois===10621###eois===10637###lif===2###soif===86###eoif===102###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ucvector_init(unsigned char*,size_t)");v.data = buffer;
  AKA_mark("lis===291###sois===10641###eois===10669###lif===3###soif===106###eoif===134###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ucvector_init(unsigned char*,size_t)");v.allocsize = v.size = size;
  AKA_mark("lis===292###sois===10673###eois===10682###lif===4###soif===138###eoif===147###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ucvector_init(unsigned char*,size_t)");return v;
}

/* ////////////////////////////////////////////////////////////////////////// */

#ifdef LODEPNG_COMPILE_PNG
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS

/*free string pointer and set it to NULL*/
/** Instrumented function string_cleanup(char**) */
static void string_cleanup(char** out) /* << Aka begin of function void string_cleanup(char** out) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\string_cleanup(char**)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.string_cleanup.10900.stub"

  AKA_mark("lis===302###sois===10932###eois===10951###lif===1###soif===44###eoif===63###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\string_cleanup(char**)");lodepng_free(*out);
  AKA_mark("lis===303###sois===10955###eois===10967###lif===2###soif===67###eoif===79###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\string_cleanup(char**)");*out = NULL;
}

/*also appends null termination character*/
/** Instrumented function alloc_string_sized(char const*,size_t) */
static char* alloc_string_sized(const char* in, size_t insize) /* << Aka begin of function char * alloc_string_sized(const char* in, size_t insize) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\alloc_string_sized(char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.alloc_string_sized.11030.stub"

  AKA_mark("lis===308###sois===11087###eois===11133###lif===1###soif===68###eoif===114###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\alloc_string_sized(char const*,size_t)");char* out = (char*)lodepng_malloc(insize + 1);
  if(AKA_mark("lis===309###sois===11140###eois===11143###lif===2###soif===121###eoif===124###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\alloc_string_sized(char const*,size_t)") && (AKA_mark("lis===309###sois===11140###eois===11143###lif===2###soif===121###eoif===124###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\alloc_string_sized(char const*,size_t)") && (out))) {
    AKA_mark("lis===310###sois===11152###eois===11184###lif===3###soif===133###eoif===165###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\alloc_string_sized(char const*,size_t)");lodepng_memcpy(out, in, insize);
    AKA_mark("lis===311###sois===11190###eois===11206###lif===4###soif===171###eoif===187###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\alloc_string_sized(char const*,size_t)");out[insize] = 0;
  }
else {
AKA_mark("lis===-309-###sois===-11140-###eois===-111403-###lif===-2-###soif===-###eoif===-124-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\alloc_string_sized(char const*,size_t)");
}
  AKA_mark("lis===313###sois===11215###eois===11226###lif===6###soif===196###eoif===207###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\alloc_string_sized(char const*,size_t)");return out;
}

/* dynamically allocates a new string with a copy of the null terminated input text */
/** Instrumented function alloc_string(char const*) */
static char* alloc_string(const char* in) /* << Aka begin of function char * alloc_string(const char* in) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\alloc_string(char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.alloc_string.11332.stub"

  AKA_mark("lis===318###sois===11368###eois===11418###lif===1###soif===47###eoif===97###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\alloc_string(char const*)");return alloc_string_sized(in, lodepng_strlen(in));
}
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
#endif /*LODEPNG_COMPILE_PNG*/

/* ////////////////////////////////////////////////////////////////////////// */

#if defined(LODEPNG_COMPILE_DECODER) || defined(LODEPNG_COMPILE_PNG)
/** Instrumented function lodepng_read32bitInt(unsigned char const*) */
static unsigned lodepng_read32bitInt(const unsigned char* buffer) /* << Aka begin of function unsigned lodepng_read32bitInt(const unsigned char* buffer) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_read32bitInt(unsigned char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_read32bitInt.11672.stub"

  AKA_mark("lis===327###sois===11727###eois===11858###lif===1###soif===71###eoif===202###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_read32bitInt(unsigned char const*)");return (((unsigned)buffer[0] << 24u) | ((unsigned)buffer[1] << 16u) |
         ((unsigned)buffer[2] << 8u) | (unsigned)buffer[3]);
}
#endif /*defined(LODEPNG_COMPILE_DECODER) || defined(LODEPNG_COMPILE_PNG)*/

#if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
/*buffer must have at least 4 allocated bytes available*/
/** Instrumented function lodepng_set32bitInt(unsigned char*,unsigned) */
static void lodepng_set32bitInt(unsigned char* buffer, unsigned value) /* << Aka begin of function void lodepng_set32bitInt(unsigned char* buffer, unsigned value) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set32bitInt(unsigned char*,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_set32bitInt.12083.stub"

  AKA_mark("lis===335###sois===12147###eois===12197###lif===1###soif===76###eoif===126###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set32bitInt(unsigned char*,unsigned)");buffer[0] = (unsigned char)((value >> 24) & 0xff);
  AKA_mark("lis===336###sois===12201###eois===12251###lif===2###soif===130###eoif===180###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set32bitInt(unsigned char*,unsigned)");buffer[1] = (unsigned char)((value >> 16) & 0xff);
  AKA_mark("lis===337###sois===12255###eois===12305###lif===3###soif===184###eoif===234###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set32bitInt(unsigned char*,unsigned)");buffer[2] = (unsigned char)((value >>  8) & 0xff);
  AKA_mark("lis===338###sois===12309###eois===12359###lif===4###soif===238###eoif===288###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set32bitInt(unsigned char*,unsigned)");buffer[3] = (unsigned char)((value      ) & 0xff);
}
#endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/

/* ////////////////////////////////////////////////////////////////////////// */
/* / File IO                                                                / */
/* ////////////////////////////////////////////////////////////////////////// */

#ifdef LODEPNG_COMPILE_DISK

/* returns negative value on error. This should be pure C compatible, so no fstat. */
/** Instrumented function lodepng_filesize(FILE*) */
static long lodepng_filesize(FILE* file) /* << Aka begin of function long lodepng_filesize(FILE* file) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_filesize(FILE*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_filesize.12821.stub"

  AKA_mark("lis===350###sois===12855###eois===12865###lif===1###soif===46###eoif===56###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_filesize(FILE*)");long size;
  if(AKA_mark("lis===351###sois===12872###eois===12901###lif===2###soif===63###eoif===92###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_filesize(FILE*)") && (AKA_mark("lis===351###sois===12872###eois===12901###lif===2###soif===63###eoif===92###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_filesize(FILE*)") && (fseek(file, 0, SEEK_END) != 0))) {
AKA_mark("lis===351###sois===12903###eois===12913###lif===2###soif===94###eoif===104###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_filesize(FILE*)");return -1;
}

else {
AKA_mark("lis===-351-###sois===-12872-###eois===-1287229-###lif===-2-###soif===-###eoif===-92-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_filesize(FILE*)");
}
  AKA_mark("lis===352###sois===12917###eois===12936###lif===3###soif===108###eoif===127###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_filesize(FILE*)");size = ftell(file);
  /* It may give LONG_MAX as directory size, this is invalid for us. */
  if(AKA_mark("lis===354###sois===13016###eois===13032###lif===5###soif===207###eoif===223###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_filesize(FILE*)") && (AKA_mark("lis===354###sois===13016###eois===13032###lif===5###soif===207###eoif===223###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_filesize(FILE*)") && (size == LONG_MAX))) {
AKA_mark("lis===354###sois===13034###eois===13044###lif===5###soif===225###eoif===235###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_filesize(FILE*)");return -1;
}

else {
AKA_mark("lis===-354-###sois===-13016-###eois===-1301616-###lif===-5-###soif===-###eoif===-223-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_filesize(FILE*)");
}
  if(AKA_mark("lis===355###sois===13051###eois===13080###lif===6###soif===242###eoif===271###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_filesize(FILE*)") && (AKA_mark("lis===355###sois===13051###eois===13080###lif===6###soif===242###eoif===271###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_filesize(FILE*)") && (fseek(file, 0, SEEK_SET) != 0))) {
AKA_mark("lis===355###sois===13082###eois===13092###lif===6###soif===273###eoif===283###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_filesize(FILE*)");return -1;
}

else {
AKA_mark("lis===-355-###sois===-13051-###eois===-1305129-###lif===-6-###soif===-###eoif===-271-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_filesize(FILE*)");
}
  AKA_mark("lis===356###sois===13096###eois===13108###lif===7###soif===287###eoif===299###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_filesize(FILE*)");return size;
}

/* Allocates the output buffer to the file size and reads the file into it. Returns error code.*/
/** Instrumented function lodepng_load_file_(unsigned char**,size_t*,FILE*) */
static unsigned lodepng_load_file_(unsigned char** out, size_t* outsize, FILE* file) /* << Aka begin of function unsigned lodepng_load_file_(unsigned char** out, size_t* outsize, FILE* file) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file_(unsigned char**,size_t*,FILE*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_load_file_.13230.stub"

  AKA_mark("lis===361###sois===13304###eois===13339###lif===1###soif===90###eoif===125###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file_(unsigned char**,size_t*,FILE*)");long size = lodepng_filesize(file);
  if(AKA_mark("lis===362###sois===13346###eois===13354###lif===2###soif===132###eoif===140###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file_(unsigned char**,size_t*,FILE*)") && (AKA_mark("lis===362###sois===13346###eois===13354###lif===2###soif===132###eoif===140###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file_(unsigned char**,size_t*,FILE*)") && (size < 0))) {
AKA_mark("lis===362###sois===13356###eois===13366###lif===2###soif===142###eoif===152###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file_(unsigned char**,size_t*,FILE*)");return 78;
}

else {
AKA_mark("lis===-362-###sois===-13346-###eois===-133468-###lif===-2-###soif===-###eoif===-140-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file_(unsigned char**,size_t*,FILE*)");
}
  AKA_mark("lis===363###sois===13370###eois===13394###lif===3###soif===156###eoif===180###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file_(unsigned char**,size_t*,FILE*)");*outsize = (size_t)size;
  AKA_mark("lis===364###sois===13398###eois===13450###lif===4###soif===184###eoif===236###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file_(unsigned char**,size_t*,FILE*)");*out = (unsigned char*)lodepng_malloc((size_t)size);
  if(AKA_mark("lis===365###sois===13457###eois===13476###lif===5###soif===243###eoif===262###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file_(unsigned char**,size_t*,FILE*)") && ((AKA_mark("lis===365###sois===13457###eois===13464###lif===5###soif===243###eoif===250###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file_(unsigned char**,size_t*,FILE*)") && (!(*out))) && (AKA_mark("lis===365###sois===13468###eois===13476###lif===5###soif===254###eoif===262###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file_(unsigned char**,size_t*,FILE*)") && (size > 0)))) {
AKA_mark("lis===365###sois===13478###eois===13488###lif===5###soif===264###eoif===274###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file_(unsigned char**,size_t*,FILE*)");return 83;
}

else {
AKA_mark("lis===-365-###sois===-13457-###eois===-1345719-###lif===-5-###soif===-###eoif===-262-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file_(unsigned char**,size_t*,FILE*)");
} /*the above malloc failed*/
  if(AKA_mark("lis===366###sois===13523###eois===13565###lif===6###soif===309###eoif===351###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file_(unsigned char**,size_t*,FILE*)") && (AKA_mark("lis===366###sois===13523###eois===13565###lif===6###soif===309###eoif===351###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file_(unsigned char**,size_t*,FILE*)") && (fread(*out, 1, *outsize, file) != *outsize))) {
AKA_mark("lis===366###sois===13567###eois===13577###lif===6###soif===353###eoif===363###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file_(unsigned char**,size_t*,FILE*)");return 78;
}

else {
AKA_mark("lis===-366-###sois===-13523-###eois===-1352342-###lif===-6-###soif===-###eoif===-351-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file_(unsigned char**,size_t*,FILE*)");
}
  AKA_mark("lis===367###sois===13581###eois===13590###lif===7###soif===367###eoif===376###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file_(unsigned char**,size_t*,FILE*)");return 0; /*ok*/
}

/** Instrumented function lodepng_load_file(unsigned char**,size_t*,char const*) */
unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename) /* << Aka begin of function unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file(unsigned char**,size_t*,char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_load_file.13613.stub"

  AKA_mark("lis===371###sois===13696###eois===13711###lif===1###soif===92###eoif===107###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file(unsigned char**,size_t*,char const*)");unsigned error;
  AKA_mark("lis===372###sois===13715###eois===13750###lif===2###soif===111###eoif===146###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file(unsigned char**,size_t*,char const*)");FILE* file = fopen(filename, "rb");
  if(AKA_mark("lis===373###sois===13757###eois===13762###lif===3###soif===153###eoif===158###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file(unsigned char**,size_t*,char const*)") && (AKA_mark("lis===373###sois===13757###eois===13762###lif===3###soif===153###eoif===158###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file(unsigned char**,size_t*,char const*)") && (!file))) {
AKA_mark("lis===373###sois===13764###eois===13774###lif===3###soif===160###eoif===170###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file(unsigned char**,size_t*,char const*)");return 78;
}

else {
AKA_mark("lis===-373-###sois===-13757-###eois===-137575-###lif===-3-###soif===-###eoif===-158-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file(unsigned char**,size_t*,char const*)");
}
  AKA_mark("lis===374###sois===13778###eois===13825###lif===4###soif===174###eoif===221###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file(unsigned char**,size_t*,char const*)");error = lodepng_load_file_(out, outsize, file);
  AKA_mark("lis===375###sois===13829###eois===13842###lif===5###soif===225###eoif===238###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file(unsigned char**,size_t*,char const*)");fclose(file);
  AKA_mark("lis===376###sois===13846###eois===13859###lif===6###soif===242###eoif===255###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_load_file(unsigned char**,size_t*,char const*)");return error;
}

/*write given buffer to the file, overwriting the file, it doesn't append to it.*/
/** Instrumented function lodepng_save_file(unsigned char const*,size_t,char const*) */
unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename) /* << Aka begin of function unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_save_file(unsigned char const*,size_t,char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_save_file.13959.stub"

  AKA_mark("lis===381###sois===14052###eois===14088###lif===1###soif===102###eoif===138###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_save_file(unsigned char const*,size_t,char const*)");FILE* file = fopen(filename, "wb" );
  if(AKA_mark("lis===382###sois===14095###eois===14100###lif===2###soif===145###eoif===150###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_save_file(unsigned char const*,size_t,char const*)") && (AKA_mark("lis===382###sois===14095###eois===14100###lif===2###soif===145###eoif===150###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_save_file(unsigned char const*,size_t,char const*)") && (!file))) {
AKA_mark("lis===382###sois===14102###eois===14112###lif===2###soif===152###eoif===162###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_save_file(unsigned char const*,size_t,char const*)");return 79;
}

else {
AKA_mark("lis===-382-###sois===-14095-###eois===-140955-###lif===-2-###soif===-###eoif===-150-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_save_file(unsigned char const*,size_t,char const*)");
}
  AKA_mark("lis===383###sois===14116###eois===14152###lif===3###soif===166###eoif===202###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_save_file(unsigned char const*,size_t,char const*)");fwrite(buffer, 1, buffersize, file);
  AKA_mark("lis===384###sois===14156###eois===14169###lif===4###soif===206###eoif===219###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_save_file(unsigned char const*,size_t,char const*)");fclose(file);
  AKA_mark("lis===385###sois===14173###eois===14182###lif===5###soif===223###eoif===232###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_save_file(unsigned char const*,size_t,char const*)");return 0;
}

#endif /*LODEPNG_COMPILE_DISK*/

/* ////////////////////////////////////////////////////////////////////////// */
/* ////////////////////////////////////////////////////////////////////////// */
/* // End of common code and tools. Begin of Zlib related code.            // */
/* ////////////////////////////////////////////////////////////////////////// */
/* ////////////////////////////////////////////////////////////////////////// */

#ifdef LODEPNG_COMPILE_ZLIB
#ifdef LODEPNG_COMPILE_ENCODER

typedef struct {
  ucvector* data;
  unsigned char bp; /*ok to overflow, indicates bit pos inside byte*/
} LodePNGBitWriter;

/** Instrumented function LodePNGBitWriter_init(LodePNGBitWriter*,ucvector*) */
static void LodePNGBitWriter_init(LodePNGBitWriter* writer, ucvector* data) /* << Aka begin of function void LodePNGBitWriter_init(LodePNGBitWriter* writer, ucvector* data) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGBitWriter_init(LodePNGBitWriter*,ucvector*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.LodePNGBitWriter_init.14842.stub"

  AKA_mark("lis===405###sois===14911###eois===14931###lif===1###soif===81###eoif===101###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGBitWriter_init(LodePNGBitWriter*,ucvector*)");writer->data = data;
  AKA_mark("lis===406###sois===14935###eois===14950###lif===2###soif===105###eoif===120###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGBitWriter_init(LodePNGBitWriter*,ucvector*)");writer->bp = 0;
}

/*TODO: this ignores potential out of memory errors*/
#define WRITEBIT(writer, bit){\
  /* append new byte */\
  if(((writer->bp) & 7u) == 0) {\
    if(!ucvector_resize(writer->data, writer->data->size + 1)) return;\
    writer->data->data[writer->data->size - 1] = 0;\
  }\
  (writer->data->data[writer->data->size - 1]) |= (bit << ((writer->bp) & 7u));\
  ++writer->bp;\
}

/* LSB of value is written first, and LSB of bytes is used first */
/** Instrumented function writeBits(LodePNGBitWriter*,unsigned,size_t) */
static void writeBits(LodePNGBitWriter* writer, unsigned value, size_t nbits) /* << Aka begin of function void writeBits(LodePNGBitWriter* writer, unsigned value, size_t nbits) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\writeBits(LodePNGBitWriter*,unsigned,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.writeBits.15425.stub"

  if(AKA_mark("lis===422###sois===15499###eois===15509###lif===1###soif===86###eoif===96###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeBits(LodePNGBitWriter*,unsigned,size_t)") && (AKA_mark("lis===422###sois===15499###eois===15509###lif===1###soif===86###eoif===96###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeBits(LodePNGBitWriter*,unsigned,size_t)") && (nbits == 1))) { /* compiler should statically compile this case if nbits == 1 */
    AKA_mark("lis===423###sois===15583###eois===15606###lif===2###soif===170###eoif===193###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeBits(LodePNGBitWriter*,unsigned,size_t)");WRITEBIT(writer, value);
  } else {
    /* TODO: increase output size only once here rather than in each WRITEBIT */
    AKA_mark("lis===426###sois===15707###eois===15716###lif===5###soif===294###eoif===303###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeBits(LodePNGBitWriter*,unsigned,size_t)");size_t i;
    int AKA_BLOCK_LOOP_15722 = 0;
    AKA_mark("lis===427###sois===15726###eois===15732###lif===6###soif===313###eoif===319###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeBits(LodePNGBitWriter*,unsigned,size_t)");
for(i = 0; AKA_mark("lis===427###sois===15733###eois===15743###lif===6###soif===320###eoif===330###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeBits(LodePNGBitWriter*,unsigned,size_t)") && (AKA_mark("lis===427###sois===15733###eois===15743###lif===6###soif===320###eoif===330###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeBits(LodePNGBitWriter*,unsigned,size_t)") && (i != nbits)); ({AKA_mark("lis===427###sois===15745###eois===15748###lif===6###soif===332###eoif===335###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeBits(LodePNGBitWriter*,unsigned,size_t)");++i;})) {
        AKA_BLOCK_LOOP_15722++;
        if (AKA_BLOCK_LOOP_15722 > 1000) {
            //break;
        }
      AKA_mark("lis===428###sois===15759###eois===15810###lif===7###soif===346###eoif===397###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeBits(LodePNGBitWriter*,unsigned,size_t)");WRITEBIT(writer, (unsigned char)((value >> i) & 1));
    }
  }
}

/* This one is to use for adding huffman symbol, the value bits are written MSB first */
/** Instrumented function writeBitsReversed(LodePNGBitWriter*,unsigned,size_t) */
static void writeBitsReversed(LodePNGBitWriter* writer, unsigned value, size_t nbits) /* << Aka begin of function void writeBitsReversed(LodePNGBitWriter* writer, unsigned value, size_t nbits) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\writeBitsReversed(LodePNGBitWriter*,unsigned,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.writeBitsReversed.15932.stub"

  AKA_mark("lis===435###sois===16011###eois===16020###lif===1###soif===91###eoif===100###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeBitsReversed(LodePNGBitWriter*,unsigned,size_t)");size_t i;
  int AKA_BLOCK_LOOP_16024 = 0;
    AKA_mark("lis===436###sois===16028###eois===16034###lif===2###soif===108###eoif===114###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeBitsReversed(LodePNGBitWriter*,unsigned,size_t)");
for(i = 0; AKA_mark("lis===436###sois===16035###eois===16045###lif===2###soif===115###eoif===125###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeBitsReversed(LodePNGBitWriter*,unsigned,size_t)") && (AKA_mark("lis===436###sois===16035###eois===16045###lif===2###soif===115###eoif===125###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeBitsReversed(LodePNGBitWriter*,unsigned,size_t)") && (i != nbits)); ({AKA_mark("lis===436###sois===16047###eois===16050###lif===2###soif===127###eoif===130###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeBitsReversed(LodePNGBitWriter*,unsigned,size_t)");++i;})) {
        AKA_BLOCK_LOOP_16024++;
        if (AKA_BLOCK_LOOP_16024 > 1000) {
            //break;
        }
    /* TODO: increase output size only once here rather than in each WRITEBIT */
    AKA_mark("lis===438###sois===16141###eois===16208###lif===4###soif===221###eoif===288###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeBitsReversed(LodePNGBitWriter*,unsigned,size_t)");WRITEBIT(writer, (unsigned char)((value >> (nbits - 1u - i)) & 1u));
  }
}
#endif /*LODEPNG_COMPILE_ENCODER*/

#ifdef LODEPNG_COMPILE_DECODER

typedef struct {
  const unsigned char* data;
  size_t size; /*size of data in bytes*/
  size_t bitsize; /*size of data in bits, end of valid bp values, should be 8*size*/
  size_t bp;
  unsigned buffer; /*buffer for reading bits. NOTE: 'unsigned' must support at least 32 bits*/
} LodePNGBitReader;

/* data size argument is in bytes. Returns error if size too large causing overflow */
/** Instrumented function LodePNGBitReader_init(LodePNGBitReader*,unsigned char const*,size_t) */
static unsigned LodePNGBitReader_init(LodePNGBitReader* reader, const unsigned char* data, size_t size) /* << Aka begin of function unsigned LodePNGBitReader_init(LodePNGBitReader* reader, const unsigned char* data, size_t size) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGBitReader_init(LodePNGBitReader*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.LodePNGBitReader_init.16704.stub"

  AKA_mark("lis===455###sois===16797###eois===16809###lif===1###soif===109###eoif===121###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGBitReader_init(LodePNGBitReader*,unsigned char const*,size_t)");size_t temp;
  AKA_mark("lis===456###sois===16813###eois===16833###lif===2###soif===125###eoif===145###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGBitReader_init(LodePNGBitReader*,unsigned char const*,size_t)");reader->data = data;
  AKA_mark("lis===457###sois===16837###eois===16857###lif===3###soif===149###eoif===169###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGBitReader_init(LodePNGBitReader*,unsigned char const*,size_t)");reader->size = size;
  /* size in bits, return error if overflow (if size_t is 32 bit this supports up to 500MB)  */
  if(AKA_mark("lis===459###sois===16961###eois===17003###lif===5###soif===273###eoif===315###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGBitReader_init(LodePNGBitReader*,unsigned char const*,size_t)") && (AKA_mark("lis===459###sois===16961###eois===17003###lif===5###soif===273###eoif===315###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGBitReader_init(LodePNGBitReader*,unsigned char const*,size_t)") && (lodepng_mulofl(size, 8u, &reader->bitsize)))) {
AKA_mark("lis===459###sois===17005###eois===17016###lif===5###soif===317###eoif===328###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGBitReader_init(LodePNGBitReader*,unsigned char const*,size_t)");return 105;
}

else {
AKA_mark("lis===-459-###sois===-16961-###eois===-1696142-###lif===-5-###soif===-###eoif===-315-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGBitReader_init(LodePNGBitReader*,unsigned char const*,size_t)");
}
  /*ensure incremented bp can be compared to bitsize without overflow even when it would be incremented 32 too much and
  trying to ensure 32 more bits*/
  if(AKA_mark("lis===462###sois===17179###eois===17222###lif===8###soif===491###eoif===534###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGBitReader_init(LodePNGBitReader*,unsigned char const*,size_t)") && (AKA_mark("lis===462###sois===17179###eois===17222###lif===8###soif===491###eoif===534###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGBitReader_init(LodePNGBitReader*,unsigned char const*,size_t)") && (lodepng_addofl(reader->bitsize, 64u, &temp)))) {
AKA_mark("lis===462###sois===17224###eois===17235###lif===8###soif===536###eoif===547###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGBitReader_init(LodePNGBitReader*,unsigned char const*,size_t)");return 105;
}

else {
AKA_mark("lis===-462-###sois===-17179-###eois===-1717943-###lif===-8-###soif===-###eoif===-534-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGBitReader_init(LodePNGBitReader*,unsigned char const*,size_t)");
}
  AKA_mark("lis===463###sois===17239###eois===17254###lif===9###soif===551###eoif===566###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGBitReader_init(LodePNGBitReader*,unsigned char const*,size_t)");reader->bp = 0;
  AKA_mark("lis===464###sois===17258###eois===17277###lif===10###soif===570###eoif===589###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGBitReader_init(LodePNGBitReader*,unsigned char const*,size_t)");reader->buffer = 0;
  AKA_mark("lis===465###sois===17281###eois===17290###lif===11###soif===593###eoif===602###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGBitReader_init(LodePNGBitReader*,unsigned char const*,size_t)");return 0; /*ok*/
}

/*
ensureBits functions:
Ensures the reader can at least read nbits bits in one or more readBits calls,
safely even if not enough bits are available.
The nbits parameter is unused but is given for documentation purposes, error
checking for amount of bits must be done beforehand.
*/

/*See ensureBits documentation above. This one ensures up to 9 bits */
/** Instrumented function ensureBits9(LodePNGBitReader*,size_t) */
static LODEPNG_INLINE void ensureBits9(LodePNGBitReader* reader, size_t nbits) /* << Aka begin of function void ensureBits9(LodePNGBitReader* reader, size_t nbits) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits9(LodePNGBitReader*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.ensureBits9.17695.stub"

  AKA_mark("lis===478###sois===17752###eois===17784###lif===1###soif===84###eoif===116###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits9(LodePNGBitReader*,size_t)");size_t start = reader->bp >> 3u;
  AKA_mark("lis===479###sois===17788###eois===17815###lif===2###soif===120###eoif===147###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits9(LodePNGBitReader*,size_t)");size_t size = reader->size;
  if(AKA_mark("lis===480###sois===17822###eois===17839###lif===3###soif===154###eoif===171###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits9(LodePNGBitReader*,size_t)") && (AKA_mark("lis===480###sois===17822###eois===17839###lif===3###soif===154###eoif===171###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits9(LodePNGBitReader*,size_t)") && (start + 1u < size))) {
    AKA_mark("lis===481###sois===17848###eois===17943###lif===4###soif===180###eoif===275###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits9(LodePNGBitReader*,size_t)");reader->buffer = (unsigned)reader->data[start + 0] | ((unsigned)reader->data[start + 1] << 8u);
    AKA_mark("lis===482###sois===17949###eois===17986###lif===5###soif===281###eoif===318###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits9(LodePNGBitReader*,size_t)");reader->buffer >>= (reader->bp & 7u);
  } else {
    AKA_mark("lis===484###sois===18004###eois===18023###lif===7###soif===336###eoif===355###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits9(LodePNGBitReader*,size_t)");reader->buffer = 0;
    if(AKA_mark("lis===485###sois===18032###eois===18049###lif===8###soif===364###eoif===381###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits9(LodePNGBitReader*,size_t)") && (AKA_mark("lis===485###sois===18032###eois===18049###lif===8###soif===364###eoif===381###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits9(LodePNGBitReader*,size_t)") && (start + 0u < size))) {
AKA_mark("lis===485###sois===18051###eois===18092###lif===8###soif===383###eoif===424###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits9(LodePNGBitReader*,size_t)");reader->buffer = reader->data[start + 0];
}

else {
AKA_mark("lis===-485-###sois===-18032-###eois===-1803217-###lif===-8-###soif===-###eoif===-381-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits9(LodePNGBitReader*,size_t)");
}
    AKA_mark("lis===486###sois===18098###eois===18135###lif===9###soif===430###eoif===467###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits9(LodePNGBitReader*,size_t)");reader->buffer >>= (reader->bp & 7u);
  }
  AKA_mark("lis===488###sois===18144###eois===18156###lif===11###soif===476###eoif===488###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits9(LodePNGBitReader*,size_t)");(void)nbits;
}

/*See ensureBits documentation above. This one ensures up to 17 bits */
/** Instrumented function ensureBits17(LodePNGBitReader*,size_t) */
static LODEPNG_INLINE void ensureBits17(LodePNGBitReader* reader, size_t nbits) /* << Aka begin of function void ensureBits17(LodePNGBitReader* reader, size_t nbits) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits17(LodePNGBitReader*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.ensureBits17.18263.stub"

  AKA_mark("lis===493###sois===18321###eois===18353###lif===1###soif===85###eoif===117###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits17(LodePNGBitReader*,size_t)");size_t start = reader->bp >> 3u;
  AKA_mark("lis===494###sois===18357###eois===18384###lif===2###soif===121###eoif===148###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits17(LodePNGBitReader*,size_t)");size_t size = reader->size;
  if(AKA_mark("lis===495###sois===18391###eois===18408###lif===3###soif===155###eoif===172###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits17(LodePNGBitReader*,size_t)") && (AKA_mark("lis===495###sois===18391###eois===18408###lif===3###soif===155###eoif===172###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits17(LodePNGBitReader*,size_t)") && (start + 2u < size))) {
    AKA_mark("lis===496###sois===18417###eois===18579###lif===4###soif===181###eoif===343###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits17(LodePNGBitReader*,size_t)");reader->buffer = (unsigned)reader->data[start + 0] | ((unsigned)reader->data[start + 1] << 8u) |
                     ((unsigned)reader->data[start + 2] << 16u);
    AKA_mark("lis===498###sois===18585###eois===18622###lif===6###soif===349###eoif===386###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits17(LodePNGBitReader*,size_t)");reader->buffer >>= (reader->bp & 7u);
  } else {
    AKA_mark("lis===500###sois===18640###eois===18659###lif===8###soif===404###eoif===423###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits17(LodePNGBitReader*,size_t)");reader->buffer = 0;
    if(AKA_mark("lis===501###sois===18668###eois===18685###lif===9###soif===432###eoif===449###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits17(LodePNGBitReader*,size_t)") && (AKA_mark("lis===501###sois===18668###eois===18685###lif===9###soif===432###eoif===449###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits17(LodePNGBitReader*,size_t)") && (start + 0u < size))) {
AKA_mark("lis===501###sois===18687###eois===18729###lif===9###soif===451###eoif===493###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits17(LodePNGBitReader*,size_t)");reader->buffer |= reader->data[start + 0];
}

else {
AKA_mark("lis===-501-###sois===-18668-###eois===-1866817-###lif===-9-###soif===-###eoif===-449-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits17(LodePNGBitReader*,size_t)");
}
    if(AKA_mark("lis===502###sois===18738###eois===18755###lif===10###soif===502###eoif===519###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits17(LodePNGBitReader*,size_t)") && (AKA_mark("lis===502###sois===18738###eois===18755###lif===10###soif===502###eoif===519###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits17(LodePNGBitReader*,size_t)") && (start + 1u < size))) {
AKA_mark("lis===502###sois===18757###eois===18817###lif===10###soif===521###eoif===581###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits17(LodePNGBitReader*,size_t)");reader->buffer |= ((unsigned)reader->data[start + 1] << 8u);
}

else {
AKA_mark("lis===-502-###sois===-18738-###eois===-1873817-###lif===-10-###soif===-###eoif===-519-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits17(LodePNGBitReader*,size_t)");
}
    AKA_mark("lis===503###sois===18823###eois===18860###lif===11###soif===587###eoif===624###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits17(LodePNGBitReader*,size_t)");reader->buffer >>= (reader->bp & 7u);
  }
  AKA_mark("lis===505###sois===18869###eois===18881###lif===13###soif===633###eoif===645###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits17(LodePNGBitReader*,size_t)");(void)nbits;
}

/*See ensureBits documentation above. This one ensures up to 25 bits */
/** Instrumented function ensureBits25(LodePNGBitReader*,size_t) */
static LODEPNG_INLINE void ensureBits25(LodePNGBitReader* reader, size_t nbits) /* << Aka begin of function void ensureBits25(LodePNGBitReader* reader, size_t nbits) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.ensureBits25.18988.stub"

  AKA_mark("lis===510###sois===19046###eois===19078###lif===1###soif===85###eoif===117###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)");size_t start = reader->bp >> 3u;
  AKA_mark("lis===511###sois===19082###eois===19109###lif===2###soif===121###eoif===148###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)");size_t size = reader->size;
  if(AKA_mark("lis===512###sois===19116###eois===19133###lif===3###soif===155###eoif===172###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)") && (AKA_mark("lis===512###sois===19116###eois===19133###lif===3###soif===155###eoif===172###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)") && (start + 3u < size))) {
    AKA_mark("lis===513###sois===19142###eois===19349###lif===4###soif===181###eoif===388###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)");reader->buffer = (unsigned)reader->data[start + 0] | ((unsigned)reader->data[start + 1] << 8u) |
                     ((unsigned)reader->data[start + 2] << 16u) | ((unsigned)reader->data[start + 3] << 24u);
    AKA_mark("lis===515###sois===19355###eois===19392###lif===6###soif===394###eoif===431###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)");reader->buffer >>= (reader->bp & 7u);
  } else {
    AKA_mark("lis===517###sois===19410###eois===19429###lif===8###soif===449###eoif===468###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)");reader->buffer = 0;
    if(AKA_mark("lis===518###sois===19438###eois===19455###lif===9###soif===477###eoif===494###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)") && (AKA_mark("lis===518###sois===19438###eois===19455###lif===9###soif===477###eoif===494###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)") && (start + 0u < size))) {
AKA_mark("lis===518###sois===19457###eois===19499###lif===9###soif===496###eoif===538###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)");reader->buffer |= reader->data[start + 0];
}

else {
AKA_mark("lis===-518-###sois===-19438-###eois===-1943817-###lif===-9-###soif===-###eoif===-494-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)");
}
    if(AKA_mark("lis===519###sois===19508###eois===19525###lif===10###soif===547###eoif===564###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)") && (AKA_mark("lis===519###sois===19508###eois===19525###lif===10###soif===547###eoif===564###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)") && (start + 1u < size))) {
AKA_mark("lis===519###sois===19527###eois===19587###lif===10###soif===566###eoif===626###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)");reader->buffer |= ((unsigned)reader->data[start + 1] << 8u);
}

else {
AKA_mark("lis===-519-###sois===-19508-###eois===-1950817-###lif===-10-###soif===-###eoif===-564-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)");
}
    if(AKA_mark("lis===520###sois===19596###eois===19613###lif===11###soif===635###eoif===652###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)") && (AKA_mark("lis===520###sois===19596###eois===19613###lif===11###soif===635###eoif===652###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)") && (start + 2u < size))) {
AKA_mark("lis===520###sois===19615###eois===19676###lif===11###soif===654###eoif===715###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)");reader->buffer |= ((unsigned)reader->data[start + 2] << 16u);
}

else {
AKA_mark("lis===-520-###sois===-19596-###eois===-1959617-###lif===-11-###soif===-###eoif===-652-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)");
}
    AKA_mark("lis===521###sois===19682###eois===19719###lif===12###soif===721###eoif===758###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)");reader->buffer >>= (reader->bp & 7u);
  }
  AKA_mark("lis===523###sois===19728###eois===19740###lif===14###soif===767###eoif===779###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits25(LodePNGBitReader*,size_t)");(void)nbits;
}

/*See ensureBits documentation above. This one ensures up to 32 bits */
/** Instrumented function ensureBits32(LodePNGBitReader*,size_t) */
static LODEPNG_INLINE void ensureBits32(LodePNGBitReader* reader, size_t nbits) /* << Aka begin of function void ensureBits32(LodePNGBitReader* reader, size_t nbits) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.ensureBits32.19847.stub"

  AKA_mark("lis===528###sois===19905###eois===19937###lif===1###soif===85###eoif===117###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)");size_t start = reader->bp >> 3u;
  AKA_mark("lis===529###sois===19941###eois===19968###lif===2###soif===121###eoif===148###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)");size_t size = reader->size;
  if(AKA_mark("lis===530###sois===19975###eois===19992###lif===3###soif===155###eoif===172###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)") && (AKA_mark("lis===530###sois===19975###eois===19992###lif===3###soif===155###eoif===172###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)") && (start + 4u < size))) {
    AKA_mark("lis===531###sois===20001###eois===20208###lif===4###soif===181###eoif===388###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)");reader->buffer = (unsigned)reader->data[start + 0] | ((unsigned)reader->data[start + 1] << 8u) |
                     ((unsigned)reader->data[start + 2] << 16u) | ((unsigned)reader->data[start + 3] << 24u);
    AKA_mark("lis===533###sois===20214###eois===20251###lif===6###soif===394###eoif===431###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)");reader->buffer >>= (reader->bp & 7u);
    AKA_mark("lis===534###sois===20257###eois===20348###lif===7###soif===437###eoif===528###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)");reader->buffer |= (((unsigned)reader->data[start + 4] << 24u) << (8u - (reader->bp & 7u)));
  } else {
    AKA_mark("lis===536###sois===20366###eois===20385###lif===9###soif===546###eoif===565###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)");reader->buffer = 0;
    if(AKA_mark("lis===537###sois===20394###eois===20411###lif===10###soif===574###eoif===591###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)") && (AKA_mark("lis===537###sois===20394###eois===20411###lif===10###soif===574###eoif===591###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)") && (start + 0u < size))) {
AKA_mark("lis===537###sois===20413###eois===20455###lif===10###soif===593###eoif===635###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)");reader->buffer |= reader->data[start + 0];
}

else {
AKA_mark("lis===-537-###sois===-20394-###eois===-2039417-###lif===-10-###soif===-###eoif===-591-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)");
}
    if(AKA_mark("lis===538###sois===20464###eois===20481###lif===11###soif===644###eoif===661###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)") && (AKA_mark("lis===538###sois===20464###eois===20481###lif===11###soif===644###eoif===661###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)") && (start + 1u < size))) {
AKA_mark("lis===538###sois===20483###eois===20543###lif===11###soif===663###eoif===723###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)");reader->buffer |= ((unsigned)reader->data[start + 1] << 8u);
}

else {
AKA_mark("lis===-538-###sois===-20464-###eois===-2046417-###lif===-11-###soif===-###eoif===-661-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)");
}
    if(AKA_mark("lis===539###sois===20552###eois===20569###lif===12###soif===732###eoif===749###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)") && (AKA_mark("lis===539###sois===20552###eois===20569###lif===12###soif===732###eoif===749###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)") && (start + 2u < size))) {
AKA_mark("lis===539###sois===20571###eois===20632###lif===12###soif===751###eoif===812###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)");reader->buffer |= ((unsigned)reader->data[start + 2] << 16u);
}

else {
AKA_mark("lis===-539-###sois===-20552-###eois===-2055217-###lif===-12-###soif===-###eoif===-749-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)");
}
    if(AKA_mark("lis===540###sois===20641###eois===20658###lif===13###soif===821###eoif===838###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)") && (AKA_mark("lis===540###sois===20641###eois===20658###lif===13###soif===821###eoif===838###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)") && (start + 3u < size))) {
AKA_mark("lis===540###sois===20660###eois===20721###lif===13###soif===840###eoif===901###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)");reader->buffer |= ((unsigned)reader->data[start + 3] << 24u);
}

else {
AKA_mark("lis===-540-###sois===-20641-###eois===-2064117-###lif===-13-###soif===-###eoif===-838-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)");
}
    AKA_mark("lis===541###sois===20727###eois===20764###lif===14###soif===907###eoif===944###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)");reader->buffer >>= (reader->bp & 7u);
  }
  AKA_mark("lis===543###sois===20773###eois===20785###lif===16###soif===953###eoif===965###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ensureBits32(LodePNGBitReader*,size_t)");(void)nbits;
}

/* Get bits without advancing the bit pointer. Must have enough bits available with ensureBits. Max nbits is 31. */
/** Instrumented function peekBits(LodePNGBitReader*,size_t) */
static LODEPNG_INLINE unsigned peekBits(LodePNGBitReader* reader, size_t nbits) /* << Aka begin of function unsigned peekBits(LodePNGBitReader* reader, size_t nbits) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\peekBits(LodePNGBitReader*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.peekBits.20940.stub"

  /* The shift allows nbits to be only up to 31. */
  AKA_mark("lis===549###sois===21047###eois===21092###lif===2###soif===138###eoif===183###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\peekBits(LodePNGBitReader*,size_t)");return reader->buffer & ((1u << nbits) - 1u);
}

/* Must have enough bits available with ensureBits */
/** Instrumented function advanceBits(LodePNGBitReader*,size_t) */
static LODEPNG_INLINE void advanceBits(LodePNGBitReader* reader, size_t nbits) /* << Aka begin of function void advanceBits(LodePNGBitReader* reader, size_t nbits) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\advanceBits(LodePNGBitReader*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.advanceBits.21181.stub"

  AKA_mark("lis===554###sois===21238###eois===21263###lif===1###soif===84###eoif===109###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\advanceBits(LodePNGBitReader*,size_t)");reader->buffer >>= nbits;
  AKA_mark("lis===555###sois===21267###eois===21287###lif===2###soif===113###eoif===133###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\advanceBits(LodePNGBitReader*,size_t)");reader->bp += nbits;
}

/* Must have enough bits available with ensureBits */
/** Instrumented function readBits(LodePNGBitReader*,size_t) */
static LODEPNG_INLINE unsigned readBits(LodePNGBitReader* reader, size_t nbits) /* << Aka begin of function unsigned readBits(LodePNGBitReader* reader, size_t nbits) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\readBits(LodePNGBitReader*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.readBits.21380.stub"

  AKA_mark("lis===560###sois===21434###eois===21476###lif===1###soif===85###eoif===127###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readBits(LodePNGBitReader*,size_t)");unsigned result = peekBits(reader, nbits);
  AKA_mark("lis===561###sois===21480###eois===21507###lif===2###soif===131###eoif===158###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readBits(LodePNGBitReader*,size_t)");advanceBits(reader, nbits);
  AKA_mark("lis===562###sois===21511###eois===21525###lif===3###soif===162###eoif===176###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readBits(LodePNGBitReader*,size_t)");return result;
}
#endif /*LODEPNG_COMPILE_DECODER*/

/** Instrumented function reverseBits(unsigned,unsigned) */
static unsigned reverseBits(unsigned bits, unsigned num) /* << Aka begin of function unsigned reverseBits(unsigned bits, unsigned num) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\reverseBits(unsigned,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.reverseBits.21584.stub"

  /*TODO: implement faster lookup table based version when needed*/
  AKA_mark("lis===568###sois===21699###eois===21722###lif===2###soif===131###eoif===154###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\reverseBits(unsigned,unsigned)");unsigned i, result = 0;
  int AKA_BLOCK_LOOP_21726 = 0;
    AKA_mark("lis===569###sois===21730###eois===21736###lif===3###soif===162###eoif===168###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\reverseBits(unsigned,unsigned)");
for(i = 0; AKA_mark("lis===569###sois===21737###eois===21744###lif===3###soif===169###eoif===176###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\reverseBits(unsigned,unsigned)") && (AKA_mark("lis===569###sois===21737###eois===21744###lif===3###soif===169###eoif===176###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\reverseBits(unsigned,unsigned)") && (i < num)); ({AKA_mark("lis===569###sois===21746###eois===21749###lif===3###soif===178###eoif===181###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\reverseBits(unsigned,unsigned)");i++;})) {
AKA_mark("lis===569###sois===21751###eois===21798###lif===3###soif===183###eoif===230###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\reverseBits(unsigned,unsigned)");result |= ((bits >> (num - i - 1u)) & 1u) << i;
}

  AKA_mark("lis===570###sois===21802###eois===21816###lif===4###soif===234###eoif===248###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\reverseBits(unsigned,unsigned)");return result;
}

/* ////////////////////////////////////////////////////////////////////////// */
/* / Deflate - Huffman                                                      / */
/* ////////////////////////////////////////////////////////////////////////// */

#define FIRST_LENGTH_CODE_INDEX 257
#define LAST_LENGTH_CODE_INDEX 285
/*256 literals, the end code, some length codes, and 2 unused codes*/
#define NUM_DEFLATE_CODE_SYMBOLS 288
/*the distance codes have their own symbols, 30 used, 2 unused*/
#define NUM_DISTANCE_SYMBOLS 32
/*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
#define NUM_CODE_LENGTH_CODES 19

/*the base lengths represented by codes 257-285*/
static const unsigned LENGTHBASE[29]
  = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
     67, 83, 99, 115, 131, 163, 195, 227, 258};

/*the extra bits used by codes 257-285 (added to base length)*/
static const unsigned LENGTHEXTRA[29]
  = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
      4,  4,  4,   4,   5,   5,   5,   5,   0};

/*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
static const unsigned DISTANCEBASE[30]
  = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
     769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};

/*the extra bits of backwards distances (added to base)*/
static const unsigned DISTANCEEXTRA[30]
  = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
       8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};

/*the order in which "code length alphabet code lengths" are stored as specified by deflate, out of this the huffman
tree of the dynamic huffman tree lengths is generated*/
static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
  = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};

/* ////////////////////////////////////////////////////////////////////////// */

/*
Huffman tree struct, containing multiple representations of the tree
*/
typedef struct HuffmanTree {
  unsigned* codes; /*the huffman codes (bit patterns representing the symbols)*/
  unsigned* lengths; /*the lengths of the huffman codes*/
  unsigned maxbitlen; /*maximum number of bits a single code can get*/
  unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
  /* for reading only */
  unsigned char* table_len; /*length of symbol from lookup table, or max length if secondary lookup needed*/
  unsigned short* table_value; /*value of symbol from lookup table, or pointer to secondary table if needed*/
} HuffmanTree;

/** Instrumented function HuffmanTree_init(HuffmanTree*) */
static void HuffmanTree_init(HuffmanTree* tree) /* << Aka begin of function void HuffmanTree_init(HuffmanTree* tree) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_init(HuffmanTree*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.HuffmanTree_init.24592.stub"

  AKA_mark("lis===627###sois===24633###eois===24649###lif===1###soif===53###eoif===69###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_init(HuffmanTree*)");tree->codes = 0;
  AKA_mark("lis===628###sois===24653###eois===24671###lif===2###soif===73###eoif===91###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_init(HuffmanTree*)");tree->lengths = 0;
  AKA_mark("lis===629###sois===24675###eois===24695###lif===3###soif===95###eoif===115###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_init(HuffmanTree*)");tree->table_len = 0;
  AKA_mark("lis===630###sois===24699###eois===24721###lif===4###soif===119###eoif===141###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_init(HuffmanTree*)");tree->table_value = 0;
}

/** Instrumented function HuffmanTree_cleanup(HuffmanTree*) */
static void HuffmanTree_cleanup(HuffmanTree* tree) /* << Aka begin of function void HuffmanTree_cleanup(HuffmanTree* tree) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_cleanup(HuffmanTree*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.HuffmanTree_cleanup.24740.stub"

  AKA_mark("lis===634###sois===24784###eois===24810###lif===1###soif===56###eoif===82###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_cleanup(HuffmanTree*)");lodepng_free(tree->codes);
  AKA_mark("lis===635###sois===24814###eois===24842###lif===2###soif===86###eoif===114###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_cleanup(HuffmanTree*)");lodepng_free(tree->lengths);
  AKA_mark("lis===636###sois===24846###eois===24876###lif===3###soif===118###eoif===148###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_cleanup(HuffmanTree*)");lodepng_free(tree->table_len);
  AKA_mark("lis===637###sois===24880###eois===24912###lif===4###soif===152###eoif===184###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_cleanup(HuffmanTree*)");lodepng_free(tree->table_value);
}

/* amount of bits for first huffman table lookup (aka root bits), see HuffmanTree_makeTable and huffmanDecodeSymbol.*/
/* values 8u and 9u work the fastest */
#define FIRSTBITS 9u

/* a symbol value too big to represent any valid symbol, to indicate reading disallowed huffman bits combination,
which is possible in case of only 0 or 1 present symbols. */
#define INVALIDSYMBOL 65535u

/* make table for huffman decoding */
/** Instrumented function HuffmanTree_makeTable(HuffmanTree*) */
static unsigned HuffmanTree_makeTable(HuffmanTree* tree) /* << Aka begin of function unsigned HuffmanTree_makeTable(HuffmanTree* tree) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.HuffmanTree_makeTable.25368.stub"

  AKA_mark("lis===650###sois===25414###eois===25463###lif===1###soif===62###eoif===111###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");static const unsigned headsize = 1u << FIRSTBITS; /*size of the first table*/
  AKA_mark("lis===651###sois===25495###eois===25560###lif===2###soif===143###eoif===208###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");static const unsigned mask = (1u << FIRSTBITS) /*headsize*/ - 1u;
  AKA_mark("lis===652###sois===25564###eois===25600###lif===3###soif===212###eoif===248###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");size_t i, numpresent, pointer, size; /*total table size*/
  AKA_mark("lis===653###sois===25625###eois===25700###lif===4###soif===273###eoif===348###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");unsigned* maxlens = (unsigned*)lodepng_malloc(headsize * sizeof(unsigned));
  if(AKA_mark("lis===654###sois===25707###eois===25715###lif===5###soif===355###eoif===363###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (AKA_mark("lis===654###sois===25707###eois===25715###lif===5###soif===355###eoif===363###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (!maxlens))) {
AKA_mark("lis===654###sois===25717###eois===25727###lif===5###soif===365###eoif===375###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");return 83;
}

else {
AKA_mark("lis===-654-###sois===-25707-###eois===-257078-###lif===-5-###soif===-###eoif===-363-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");
} /*alloc fail*/

  /* compute maxlens: max total bit length of symbols sharing prefix in the first table*/
  AKA_mark("lis===657###sois===25839###eois===25895###lif===8###soif===487###eoif===543###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");lodepng_memset(maxlens, 0, headsize * sizeof(*maxlens));
  int AKA_BLOCK_LOOP_25899 = 0;
    AKA_mark("lis===658###sois===25903###eois===25909###lif===9###soif===551###eoif===557###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");
for(i = 0; AKA_mark("lis===658###sois===25910###eois===25928###lif===9###soif===558###eoif===576###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (AKA_mark("lis===658###sois===25910###eois===25928###lif===9###soif===558###eoif===576###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (i < tree->numcodes)); ({AKA_mark("lis===658###sois===25930###eois===25933###lif===9###soif===578###eoif===581###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");i++;})) {
        AKA_BLOCK_LOOP_25899++;
        if (AKA_BLOCK_LOOP_25899 > 1000) {
            //break;
        }
    AKA_mark("lis===659###sois===25942###eois===25975###lif===10###soif===590###eoif===623###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");unsigned symbol = tree->codes[i];
    AKA_mark("lis===660###sois===25981###eois===26011###lif===11###soif===629###eoif===659###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");unsigned l = tree->lengths[i];
    AKA_mark("lis===661###sois===26017###eois===26032###lif===12###soif===665###eoif===680###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");unsigned index;
    if(AKA_mark("lis===662###sois===26041###eois===26055###lif===13###soif===689###eoif===703###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (AKA_mark("lis===662###sois===26041###eois===26055###lif===13###soif===689###eoif===703###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (l <= FIRSTBITS))) {
AKA_mark("lis===662###sois===26057###eois===26066###lif===13###soif===705###eoif===714###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");continue;
}

else {
AKA_mark("lis===-662-###sois===-26041-###eois===-2604114-###lif===-13-###soif===-###eoif===-703-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");
} /*symbols that fit in first table don't increase secondary table size*/
    /*get the FIRSTBITS MSBs, the MSBs of the symbol are encoded first. See later comment about the reversing*/
    AKA_mark("lis===664###sois===26257###eois===26315###lif===15###soif===905###eoif===963###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");index = reverseBits(symbol >> (l - FIRSTBITS), FIRSTBITS);
    AKA_mark("lis===665###sois===26321###eois===26369###lif===16###soif===969###eoif===1017###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");maxlens[index] = LODEPNG_MAX(maxlens[index], l);
  }
  /* compute total table size: size of first table plus all secondary tables for symbols longer than FIRSTBITS */
  AKA_mark("lis===668###sois===26493###eois===26509###lif===19###soif===1141###eoif===1157###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");size = headsize;
  int AKA_BLOCK_LOOP_26513 = 0;
    AKA_mark("lis===669###sois===26517###eois===26523###lif===20###soif===1165###eoif===1171###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");
for(i = 0; AKA_mark("lis===669###sois===26524###eois===26536###lif===20###soif===1172###eoif===1184###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (AKA_mark("lis===669###sois===26524###eois===26536###lif===20###soif===1172###eoif===1184###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (i < headsize)); ({AKA_mark("lis===669###sois===26538###eois===26541###lif===20###soif===1186###eoif===1189###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");++i;})) {
        AKA_BLOCK_LOOP_26513++;
        if (AKA_BLOCK_LOOP_26513 > 1000) {
            //break;
        }
    AKA_mark("lis===670###sois===26550###eois===26574###lif===21###soif===1198###eoif===1222###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");unsigned l = maxlens[i];
    if(AKA_mark("lis===671###sois===26583###eois===26596###lif===22###soif===1231###eoif===1244###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (AKA_mark("lis===671###sois===26583###eois===26596###lif===22###soif===1231###eoif===1244###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (l > FIRSTBITS))) {
AKA_mark("lis===671###sois===26598###eois===26639###lif===22###soif===1246###eoif===1287###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");size += (((size_t)1) << (l - FIRSTBITS));
}

else {
AKA_mark("lis===-671-###sois===-26583-###eois===-2658313-###lif===-22-###soif===-###eoif===-1244-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");
}
  }
  AKA_mark("lis===673###sois===26648###eois===26730###lif===24###soif===1296###eoif===1378###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");tree->table_len = (unsigned char*)lodepng_malloc(size * sizeof(*tree->table_len));
  AKA_mark("lis===674###sois===26734###eois===26821###lif===25###soif===1382###eoif===1469###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");tree->table_value = (unsigned short*)lodepng_malloc(size * sizeof(*tree->table_value));
  if(AKA_mark("lis===675###sois===26828###eois===26866###lif===26###soif===1476###eoif===1514###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && ((AKA_mark("lis===675###sois===26828###eois===26844###lif===26###soif===1476###eoif===1492###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (!tree->table_len)) || (AKA_mark("lis===675###sois===26848###eois===26866###lif===26###soif===1496###eoif===1514###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (!tree->table_value)))) {
    AKA_mark("lis===676###sois===26875###eois===26897###lif===27###soif===1523###eoif===1545###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");lodepng_free(maxlens);
    /* freeing tree->table values is done at a higher scope */
    AKA_mark("lis===678###sois===26967###eois===26977###lif===29###soif===1615###eoif===1625###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");return 83; /*alloc fail*/
  }
else {
AKA_mark("lis===-675-###sois===-26828-###eois===-2682838-###lif===-26-###soif===-###eoif===-1514-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");
}
  /*initialize with an invalid length to indicate unused entries*/
  int AKA_BLOCK_LOOP_27069 = 0;
    AKA_mark("lis===681###sois===27073###eois===27079###lif===32###soif===1721###eoif===1727###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");
for(i = 0; AKA_mark("lis===681###sois===27080###eois===27088###lif===32###soif===1728###eoif===1736###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (AKA_mark("lis===681###sois===27080###eois===27088###lif===32###soif===1728###eoif===1736###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (i < size)); ({AKA_mark("lis===681###sois===27090###eois===27093###lif===32###soif===1738###eoif===1741###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");++i;})) {
AKA_mark("lis===681###sois===27095###eois===27119###lif===32###soif===1743###eoif===1767###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");tree->table_len[i] = 16;
}


  /*fill in the first table for long symbols: max prefix size and pointer to secondary tables*/
  AKA_mark("lis===684###sois===27222###eois===27241###lif===35###soif===1870###eoif===1889###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");pointer = headsize;
  int AKA_BLOCK_LOOP_27245 = 0;
    AKA_mark("lis===685###sois===27249###eois===27255###lif===36###soif===1897###eoif===1903###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");
for(i = 0; AKA_mark("lis===685###sois===27256###eois===27268###lif===36###soif===1904###eoif===1916###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (AKA_mark("lis===685###sois===27256###eois===27268###lif===36###soif===1904###eoif===1916###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (i < headsize)); ({AKA_mark("lis===685###sois===27270###eois===27273###lif===36###soif===1918###eoif===1921###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");++i;})) {
        AKA_BLOCK_LOOP_27245++;
        if (AKA_BLOCK_LOOP_27245 > 1000) {
            //break;
        }
    AKA_mark("lis===686###sois===27282###eois===27306###lif===37###soif===1930###eoif===1954###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");unsigned l = maxlens[i];
    if(AKA_mark("lis===687###sois===27315###eois===27329###lif===38###soif===1963###eoif===1977###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (AKA_mark("lis===687###sois===27315###eois===27329###lif===38###soif===1963###eoif===1977###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (l <= FIRSTBITS))) {
AKA_mark("lis===687###sois===27331###eois===27340###lif===38###soif===1979###eoif===1988###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");continue;
}

else {
AKA_mark("lis===-687-###sois===-27315-###eois===-2731514-###lif===-38-###soif===-###eoif===-1977-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");
}
    AKA_mark("lis===688###sois===27346###eois===27369###lif===39###soif===1994###eoif===2017###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");tree->table_len[i] = l;
    AKA_mark("lis===689###sois===27375###eois===27422###lif===40###soif===2023###eoif===2070###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");tree->table_value[i] = (unsigned short)pointer;
    AKA_mark("lis===690###sois===27428###eois===27472###lif===41###soif===2076###eoif===2120###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");pointer += (((size_t)1) << (l - FIRSTBITS));
  }
  AKA_mark("lis===692###sois===27481###eois===27503###lif===43###soif===2129###eoif===2151###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");lodepng_free(maxlens);

  /*fill in the first table for short symbols, or secondary table for long symbols*/
  AKA_mark("lis===695###sois===27595###eois===27610###lif===46###soif===2243###eoif===2258###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");numpresent = 0;
  int AKA_BLOCK_LOOP_27614 = 0;
    AKA_mark("lis===696###sois===27618###eois===27624###lif===47###soif===2266###eoif===2272###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");
for(i = 0; AKA_mark("lis===696###sois===27625###eois===27643###lif===47###soif===2273###eoif===2291###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (AKA_mark("lis===696###sois===27625###eois===27643###lif===47###soif===2273###eoif===2291###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (i < tree->numcodes)); ({AKA_mark("lis===696###sois===27645###eois===27648###lif===47###soif===2293###eoif===2296###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");++i;})) {
        AKA_BLOCK_LOOP_27614++;
        if (AKA_BLOCK_LOOP_27614 > 1000) {
            //break;
        }
    AKA_mark("lis===697###sois===27657###eois===27687###lif===48###soif===2305###eoif===2335###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");unsigned l = tree->lengths[i];
    AKA_mark("lis===698###sois===27693###eois===27718###lif===49###soif===2341###eoif===2366###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");unsigned symbol, reverse;
    if(AKA_mark("lis===699###sois===27727###eois===27733###lif===50###soif===2375###eoif===2381###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (AKA_mark("lis===699###sois===27727###eois===27733###lif===50###soif===2375###eoif===2381###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (l == 0))) {
AKA_mark("lis===699###sois===27735###eois===27744###lif===50###soif===2383###eoif===2392###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");continue;
}

else {
AKA_mark("lis===-699-###sois===-27727-###eois===-277276-###lif===-50-###soif===-###eoif===-2381-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");
}
    AKA_mark("lis===700###sois===27750###eois===27774###lif===51###soif===2398###eoif===2422###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");symbol = tree->codes[i]; /*the huffman bit pattern. i itself is the value.*/
    /*reverse bits, because the huffman bits are given in MSB first order but the bit reader reads LSB first*/
    AKA_mark("lis===702###sois===27944###eois===27977###lif===53###soif===2592###eoif===2625###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");reverse = reverseBits(symbol, l);
    AKA_mark("lis===703###sois===27983###eois===27996###lif===54###soif===2631###eoif===2644###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");numpresent++;

    if(AKA_mark("lis===705###sois===28007###eois===28021###lif===56###soif===2655###eoif===2669###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (AKA_mark("lis===705###sois===28007###eois===28021###lif===56###soif===2655###eoif===2669###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (l <= FIRSTBITS))) {
      /*short symbol, fully in first table, replicated num times if l < FIRSTBITS*/
      AKA_mark("lis===707###sois===28117###eois===28154###lif===58###soif===2765###eoif===2802###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");unsigned num = 1u << (FIRSTBITS - l);
      AKA_mark("lis===708###sois===28162###eois===28173###lif===59###soif===2810###eoif===2821###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");unsigned j;
      int AKA_BLOCK_LOOP_28181 = 0;
    AKA_mark("lis===709###sois===28185###eois===28191###lif===60###soif===2833###eoif===2839###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");
for(j = 0; AKA_mark("lis===709###sois===28192###eois===28199###lif===60###soif===2840###eoif===2847###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (AKA_mark("lis===709###sois===28192###eois===28199###lif===60###soif===2840###eoif===2847###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (j < num)); ({AKA_mark("lis===709###sois===28201###eois===28204###lif===60###soif===2849###eoif===2852###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");++j;})) {
        AKA_BLOCK_LOOP_28181++;
        if (AKA_BLOCK_LOOP_28181 > 1000) {
            //break;
        }
        /*bit reader will read the l bits of symbol first, the remaining FIRSTBITS - l bits go to the MSB's*/
        AKA_mark("lis===711###sois===28328###eois===28364###lif===62###soif===2976###eoif===3012###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");unsigned index = reverse | (j << l);
        if(AKA_mark("lis===712###sois===28377###eois===28405###lif===63###soif===3025###eoif===3053###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (AKA_mark("lis===712###sois===28377###eois===28405###lif===63###soif===3025###eoif===3053###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (tree->table_len[index] != 16))) {
AKA_mark("lis===712###sois===28407###eois===28417###lif===63###soif===3055###eoif===3065###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");return 55;
}

else {
AKA_mark("lis===-712-###sois===-28377-###eois===-2837728-###lif===-63-###soif===-###eoif===-3053-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");
} /*invalid tree: long symbol shares prefix with short symbol*/
        AKA_mark("lis===713###sois===28489###eois===28516###lif===64###soif===3137###eoif===3164###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");tree->table_len[index] = l;
        AKA_mark("lis===714###sois===28526###eois===28571###lif===65###soif===3174###eoif===3219###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");tree->table_value[index] = (unsigned short)i;
      }
    } else {
      /*long symbol, shares prefix with other long symbols in first lookup table, needs second lookup*/
      /*the FIRSTBITS MSBs of the symbol are the first table index*/
      AKA_mark("lis===719###sois===28777###eois===28809###lif===70###soif===3425###eoif===3457###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");unsigned index = reverse & mask;
      AKA_mark("lis===720###sois===28817###eois===28858###lif===71###soif===3465###eoif===3506###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");unsigned maxlen = tree->table_len[index];
      /*log2 of secondary table length, should be >= l - FIRSTBITS*/
      AKA_mark("lis===722###sois===28936###eois===28975###lif===73###soif===3584###eoif===3623###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");unsigned tablelen = maxlen - FIRSTBITS;
      AKA_mark("lis===723###sois===28983###eois===29025###lif===74###soif===3631###eoif===3673###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");unsigned start = tree->table_value[index]; /*starting index in secondary table*/
      AKA_mark("lis===724###sois===29071###eois===29121###lif===75###soif===3719###eoif===3769###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");unsigned num = 1u << (tablelen - (l - FIRSTBITS)); /*amount of entries of this symbol in secondary table*/
      AKA_mark("lis===725###sois===29185###eois===29196###lif===76###soif===3833###eoif===3844###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");unsigned j;
      if(AKA_mark("lis===726###sois===29207###eois===29217###lif===77###soif===3855###eoif===3865###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (AKA_mark("lis===726###sois===29207###eois===29217###lif===77###soif===3855###eoif===3865###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (maxlen < l))) {
AKA_mark("lis===726###sois===29219###eois===29229###lif===77###soif===3867###eoif===3877###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");return 55;
}

else {
AKA_mark("lis===-726-###sois===-29207-###eois===-2920710-###lif===-77-###soif===-###eoif===-3865-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");
} /*invalid tree: long symbol shares prefix with short symbol*/
      int AKA_BLOCK_LOOP_29299 = 0;
    AKA_mark("lis===727###sois===29303###eois===29309###lif===78###soif===3951###eoif===3957###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");
for(j = 0; AKA_mark("lis===727###sois===29310###eois===29317###lif===78###soif===3958###eoif===3965###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (AKA_mark("lis===727###sois===29310###eois===29317###lif===78###soif===3958###eoif===3965###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (j < num)); ({AKA_mark("lis===727###sois===29319###eois===29322###lif===78###soif===3967###eoif===3970###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");++j;})) {
        AKA_BLOCK_LOOP_29299++;
        if (AKA_BLOCK_LOOP_29299 > 1000) {
            //break;
        }
        AKA_mark("lis===728###sois===29335###eois===29376###lif===79###soif===3983###eoif===4024###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");unsigned reverse2 = reverse >> FIRSTBITS; /* l - FIRSTBITS bits */
        AKA_mark("lis===729###sois===29411###eois===29473###lif===80###soif===4059###eoif===4121###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");unsigned index2 = start + (reverse2 | (j << (l - FIRSTBITS)));
        AKA_mark("lis===730###sois===29483###eois===29511###lif===81###soif===4131###eoif===4159###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");tree->table_len[index2] = l;
        AKA_mark("lis===731###sois===29521###eois===29567###lif===82###soif===4169###eoif===4215###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");tree->table_value[index2] = (unsigned short)i;
      }
    }
  }

  if(AKA_mark("lis===736###sois===29597###eois===29611###lif===87###soif===4245###eoif===4259###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (AKA_mark("lis===736###sois===29597###eois===29611###lif===87###soif===4245###eoif===4259###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (numpresent < 2))) {
    /* In case of exactly 1 symbol, in theory the huffman symbol needs 0 bits,
    but deflate uses 1 bit instead. In case of 0 symbols, no symbols can
    appear at all, but such huffman tree could still exist (e.g. if distance
    codes are never used). In both cases, not all symbols of the table will be
    filled in. Fill them in with an invalid symbol value so returning them from
    huffmanDecodeSymbol will cause error. */
    int AKA_BLOCK_LOOP_30059 = 0;
    AKA_mark("lis===743###sois===30063###eois===30069###lif===94###soif===4711###eoif===4717###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");
for(i = 0; AKA_mark("lis===743###sois===30070###eois===30078###lif===94###soif===4718###eoif===4726###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (AKA_mark("lis===743###sois===30070###eois===30078###lif===94###soif===4718###eoif===4726###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (i < size)); ({AKA_mark("lis===743###sois===30080###eois===30083###lif===94###soif===4728###eoif===4731###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");++i;})) {
        AKA_BLOCK_LOOP_30059++;
        if (AKA_BLOCK_LOOP_30059 > 1000) {
            //break;
        }
      if(AKA_mark("lis===744###sois===30097###eois===30121###lif===95###soif===4745###eoif===4769###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (AKA_mark("lis===744###sois===30097###eois===30121###lif===95###soif===4745###eoif===4769###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (tree->table_len[i] == 16))) {
        /* As length, use a value smaller than FIRSTBITS for the head table,
        and a value larger than FIRSTBITS for the secondary table, to ensure
        valid behavior for advanceBits when reading this symbol. */
        AKA_mark("lis===748###sois===30359###eois===30417###lif===99###soif===5007###eoif===5065###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");tree->table_len[i] = (i < headsize) ? 1 : (FIRSTBITS + 1);
        AKA_mark("lis===749###sois===30427###eois===30464###lif===100###soif===5075###eoif===5112###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");tree->table_value[i] = INVALIDSYMBOL;
      }
else {
AKA_mark("lis===-744-###sois===-30097-###eois===-3009724-###lif===-95-###soif===-###eoif===-4769-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");
}
    }
  } else {
    /* A good huffman tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
    If that is not the case (due to too long length codes), the table will not
    have been fully used, and this is an error (not all bit combinations can be
    decoded): an oversubscribed huffman tree, indicated by error 55. */
    int AKA_BLOCK_LOOP_30816 = 0;
    AKA_mark("lis===757###sois===30820###eois===30826###lif===108###soif===5468###eoif===5474###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");
for(i = 0; AKA_mark("lis===757###sois===30827###eois===30835###lif===108###soif===5475###eoif===5483###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (AKA_mark("lis===757###sois===30827###eois===30835###lif===108###soif===5475###eoif===5483###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (i < size)); ({AKA_mark("lis===757###sois===30837###eois===30840###lif===108###soif===5485###eoif===5488###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");++i;})) {
        AKA_BLOCK_LOOP_30816++;
        if (AKA_BLOCK_LOOP_30816 > 1000) {
            //break;
        }
      if(AKA_mark("lis===758###sois===30854###eois===30878###lif===109###soif===5502###eoif===5526###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (AKA_mark("lis===758###sois===30854###eois===30878###lif===109###soif===5502###eoif===5526###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)") && (tree->table_len[i] == 16))) {
AKA_mark("lis===758###sois===30880###eois===30890###lif===109###soif===5528###eoif===5538###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");return 55;
}

else {
AKA_mark("lis===-758-###sois===-30854-###eois===-3085424-###lif===-109-###soif===-###eoif===-5526-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");
}
    }
  }

  AKA_mark("lis===762###sois===30908###eois===30917###lif===113###soif===5556###eoif===5565###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeTable(HuffmanTree*)");return 0;
}

/*
Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
numcodes, lengths and maxbitlen must already be filled in correctly. return
value is error.
*/
/** Instrumented function HuffmanTree_makeFromLengths2(HuffmanTree*) */
static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree) /* << Aka begin of function unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.HuffmanTree_makeFromLengths2.31120.stub"

  AKA_mark("lis===771###sois===31173###eois===31191###lif===1###soif===69###eoif===87###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");unsigned* blcount;
  AKA_mark("lis===772###sois===31195###eois===31214###lif===2###soif===91###eoif===110###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");unsigned* nextcode;
  AKA_mark("lis===773###sois===31218###eois===31237###lif===3###soif===114###eoif===133###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");unsigned error = 0;
  AKA_mark("lis===774###sois===31241###eois===31258###lif===4###soif===137###eoif===154###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");unsigned bits, n;

  AKA_mark("lis===776###sois===31264###eois===31339###lif===6###soif===160###eoif===235###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");tree->codes = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
  AKA_mark("lis===777###sois===31343###eois===31421###lif===7###soif===239###eoif===317###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");blcount = (unsigned*)lodepng_malloc((tree->maxbitlen + 1) * sizeof(unsigned));
  AKA_mark("lis===778###sois===31425###eois===31504###lif===8###soif===321###eoif===400###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");nextcode = (unsigned*)lodepng_malloc((tree->maxbitlen + 1) * sizeof(unsigned));
  if(AKA_mark("lis===779###sois===31511###eois===31548###lif===9###soif===407###eoif===444###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)") && (((AKA_mark("lis===779###sois===31511###eois===31523###lif===9###soif===407###eoif===419###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)") && (!tree->codes)) || (AKA_mark("lis===779###sois===31527###eois===31535###lif===9###soif===423###eoif===431###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)") && (!blcount))) || (AKA_mark("lis===779###sois===31539###eois===31548###lif===9###soif===435###eoif===444###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)") && (!nextcode)))) {
AKA_mark("lis===779###sois===31550###eois===31561###lif===9###soif===446###eoif===457###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");error = 83;
}

else {
AKA_mark("lis===-779-###sois===-31511-###eois===-3151137-###lif===-9-###soif===-###eoif===-444-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");
} /*alloc fail*/

  if(AKA_mark("lis===781###sois===31585###eois===31591###lif===11###soif===481###eoif===487###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)") && (AKA_mark("lis===781###sois===31585###eois===31591###lif===11###soif===481###eoif===487###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)") && (!error))) {
    int AKA_BLOCK_LOOP_31600 = 0;
    AKA_mark("lis===782###sois===31604###eois===31610###lif===12###soif===500###eoif===506###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");
for(n = 0; AKA_mark("lis===782###sois===31611###eois===31635###lif===12###soif===507###eoif===531###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)") && (AKA_mark("lis===782###sois===31611###eois===31635###lif===12###soif===507###eoif===531###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)") && (n != tree->maxbitlen + 1)); ({AKA_mark("lis===782###sois===31637###eois===31640###lif===12###soif===533###eoif===536###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");n++;})) {
AKA_mark("lis===782###sois===31642###eois===31671###lif===12###soif===538###eoif===567###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");blcount[n] = nextcode[n] = 0;
}

    /*step 1: count number of instances of each code length*/
    int AKA_BLOCK_LOOP_31740 = 0;
    AKA_mark("lis===784###sois===31744###eois===31753###lif===14###soif===640###eoif===649###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");
for(bits = 0; AKA_mark("lis===784###sois===31754###eois===31776###lif===14###soif===650###eoif===672###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)") && (AKA_mark("lis===784###sois===31754###eois===31776###lif===14###soif===650###eoif===672###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)") && (bits != tree->numcodes)); ({AKA_mark("lis===784###sois===31778###eois===31784###lif===14###soif===674###eoif===680###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");++bits;})) {
AKA_mark("lis===784###sois===31786###eois===31817###lif===14###soif===682###eoif===713###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");++blcount[tree->lengths[bits]];
}

    /*step 2: generate the nextcode values*/
    int AKA_BLOCK_LOOP_31869 = 0;
    AKA_mark("lis===786###sois===31873###eois===31882###lif===16###soif===769###eoif===778###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");
for(bits = 1; AKA_mark("lis===786###sois===31883###eois===31906###lif===16###soif===779###eoif===802###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)") && (AKA_mark("lis===786###sois===31883###eois===31906###lif===16###soif===779###eoif===802###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)") && (bits <= tree->maxbitlen)); ({AKA_mark("lis===786###sois===31908###eois===31914###lif===16###soif===804###eoif===810###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");++bits;})) {
        AKA_BLOCK_LOOP_31869++;
        if (AKA_BLOCK_LOOP_31869 > 1000) {
            //break;
        }
      AKA_mark("lis===787###sois===31925###eois===31989###lif===17###soif===821###eoif===885###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");nextcode[bits] = (nextcode[bits - 1] + blcount[bits - 1]) << 1u;
    }
    /*step 3: generate all the codes*/
    int AKA_BLOCK_LOOP_32042 = 0;
    AKA_mark("lis===790###sois===32046###eois===32052###lif===20###soif===942###eoif===948###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");
for(n = 0; AKA_mark("lis===790###sois===32053###eois===32072###lif===20###soif===949###eoif===968###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)") && (AKA_mark("lis===790###sois===32053###eois===32072###lif===20###soif===949###eoif===968###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)") && (n != tree->numcodes)); ({AKA_mark("lis===790###sois===32074###eois===32077###lif===20###soif===970###eoif===973###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");++n;})) {
        AKA_BLOCK_LOOP_32042++;
        if (AKA_BLOCK_LOOP_32042 > 1000) {
            //break;
        }
      if(AKA_mark("lis===791###sois===32091###eois===32112###lif===21###soif===987###eoif===1008###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)") && (AKA_mark("lis===791###sois===32091###eois===32112###lif===21###soif===987###eoif===1008###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)") && (tree->lengths[n] != 0))) {
        AKA_mark("lis===792###sois===32125###eois===32171###lif===22###soif===1021###eoif===1067###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");tree->codes[n] = nextcode[tree->lengths[n]]++;
        /*remove superfluous bits from the code*/
        AKA_mark("lis===794###sois===32232###eois===32282###lif===24###soif===1128###eoif===1178###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");tree->codes[n] &= ((1u << tree->lengths[n]) - 1u);
      }
else {
AKA_mark("lis===-791-###sois===-32091-###eois===-3209121-###lif===-21-###soif===-###eoif===-1008-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");
}
    }
  }
else {
AKA_mark("lis===-781-###sois===-31585-###eois===-315856-###lif===-11-###soif===-###eoif===-487-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");
}

  AKA_mark("lis===799###sois===32309###eois===32331###lif===29###soif===1205###eoif===1227###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");lodepng_free(blcount);
  AKA_mark("lis===800###sois===32335###eois===32358###lif===30###soif===1231###eoif===1254###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");lodepng_free(nextcode);

  if(AKA_mark("lis===802###sois===32367###eois===32373###lif===32###soif===1263###eoif===1269###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)") && (AKA_mark("lis===802###sois===32367###eois===32373###lif===32###soif===1263###eoif===1269###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)") && (!error))) {
AKA_mark("lis===802###sois===32375###eois===32411###lif===32###soif===1271###eoif===1307###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");error = HuffmanTree_makeTable(tree);
}

else {
AKA_mark("lis===-802-###sois===-32367-###eois===-323676-###lif===-32-###soif===-###eoif===-1269-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");
}
  AKA_mark("lis===803###sois===32415###eois===32428###lif===33###soif===1311###eoif===1324###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths2(HuffmanTree*)");return error;
}

/*
given the code lengths (as stored in the PNG file), generate the tree as defined
by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
return value is error.
*/
/** Instrumented function HuffmanTree_makeFromLengths(HuffmanTree*,unsigned const*,size_t,unsigned) */
static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
                                            size_t numcodes, unsigned maxbitlen) /* << Aka begin of function unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
                                            size_t numcodes, unsigned maxbitlen) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths(HuffmanTree*,unsigned const*,size_t,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.HuffmanTree_makeFromLengths.32642.stub"

  AKA_mark("lis===813###sois===32800###eois===32811###lif===2###soif===174###eoif===185###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths(HuffmanTree*,unsigned const*,size_t,unsigned)");unsigned i;
  AKA_mark("lis===814###sois===32815###eois===32886###lif===3###soif===189###eoif===260###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths(HuffmanTree*,unsigned const*,size_t,unsigned)");tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
  if(AKA_mark("lis===815###sois===32893###eois===32907###lif===4###soif===267###eoif===281###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths(HuffmanTree*,unsigned const*,size_t,unsigned)") && (AKA_mark("lis===815###sois===32893###eois===32907###lif===4###soif===267###eoif===281###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths(HuffmanTree*,unsigned const*,size_t,unsigned)") && (!tree->lengths))) {
AKA_mark("lis===815###sois===32909###eois===32919###lif===4###soif===283###eoif===293###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths(HuffmanTree*,unsigned const*,size_t,unsigned)");return 83;
}

else {
AKA_mark("lis===-815-###sois===-32893-###eois===-3289314-###lif===-4-###soif===-###eoif===-281-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths(HuffmanTree*,unsigned const*,size_t,unsigned)");
} /*alloc fail*/
  int AKA_BLOCK_LOOP_32938 = 0;
    AKA_mark("lis===816###sois===32942###eois===32948###lif===5###soif===316###eoif===322###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths(HuffmanTree*,unsigned const*,size_t,unsigned)");
for(i = 0; AKA_mark("lis===816###sois===32949###eois===32962###lif===5###soif===323###eoif===336###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths(HuffmanTree*,unsigned const*,size_t,unsigned)") && (AKA_mark("lis===816###sois===32949###eois===32962###lif===5###soif===323###eoif===336###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths(HuffmanTree*,unsigned const*,size_t,unsigned)") && (i != numcodes)); ({AKA_mark("lis===816###sois===32964###eois===32967###lif===5###soif===338###eoif===341###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths(HuffmanTree*,unsigned const*,size_t,unsigned)");++i;})) {
AKA_mark("lis===816###sois===32969###eois===32998###lif===5###soif===343###eoif===372###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths(HuffmanTree*,unsigned const*,size_t,unsigned)");tree->lengths[i] = bitlen[i];
}

  AKA_mark("lis===817###sois===33002###eois===33038###lif===6###soif===376###eoif===412###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths(HuffmanTree*,unsigned const*,size_t,unsigned)");tree->numcodes = (unsigned)numcodes; /*number of symbols*/
  AKA_mark("lis===818###sois===33064###eois===33092###lif===7###soif===438###eoif===466###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths(HuffmanTree*,unsigned const*,size_t,unsigned)");tree->maxbitlen = maxbitlen;
  AKA_mark("lis===819###sois===33096###eois===33138###lif===8###soif===470###eoif===512###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromLengths(HuffmanTree*,unsigned const*,size_t,unsigned)");return HuffmanTree_makeFromLengths2(tree);
}

#ifdef LODEPNG_COMPILE_ENCODER

/*BPM: Boundary Package Merge, see "A Fast and Space-Economical Algorithm for Length-Limited Coding",
Jyrki Katajainen, Alistair Moffat, Andrew Turpin, 1995.*/

/*chain node for boundary package merge*/
typedef struct BPMNode {
  int weight; /*the sum of all weights in this chain*/
  unsigned index; /*index of this leaf node (called "count" in the paper)*/
  struct BPMNode* tail; /*the next nodes in this chain (null if last)*/
  int in_use;
} BPMNode;

/*lists of chains*/
typedef struct BPMLists {
  /*memory pool*/
  unsigned memsize;
  BPMNode* memory;
  unsigned numfree;
  unsigned nextfree;
  BPMNode** freelist;
  /*two heads of lookahead chains per list*/
  unsigned listsize;
  BPMNode** chains0;
  BPMNode** chains1;
} BPMLists;

/*creates a new chain node with the given parameters, from the memory in the lists */
/** Instrumented function bpmnode_create(BPMLists*,int,unsigned,BPMNode*) */
static BPMNode* bpmnode_create(BPMLists* lists, int weight, unsigned index, BPMNode* tail) /* << Aka begin of function BPMNode * bpmnode_create(BPMLists* lists, int weight, unsigned index, BPMNode* tail) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.bpmnode_create.34049.stub"

  AKA_mark("lis===851###sois===34131###eois===34142###lif===1###soif===96###eoif===107###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");unsigned i;
  AKA_mark("lis===852###sois===34146###eois===34162###lif===2###soif===111###eoif===127###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");BPMNode* result;

  /*memory full, so garbage collect*/
  if(AKA_mark("lis===855###sois===34210###eois===34243###lif===5###soif===175###eoif===208###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)") && (AKA_mark("lis===855###sois===34210###eois===34243###lif===5###soif===175###eoif===208###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)") && (lists->nextfree >= lists->numfree))) {
    /*mark only those that are in use*/
    int AKA_BLOCK_LOOP_34293 = 0;
    AKA_mark("lis===857###sois===34297###eois===34303###lif===7###soif===262###eoif===268###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");
for(i = 0; AKA_mark("lis===857###sois===34304###eois===34323###lif===7###soif===269###eoif===288###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)") && (AKA_mark("lis===857###sois===34304###eois===34323###lif===7###soif===269###eoif===288###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)") && (i != lists->memsize)); ({AKA_mark("lis===857###sois===34325###eois===34328###lif===7###soif===290###eoif===293###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");++i;})) {
AKA_mark("lis===857###sois===34330###eois===34358###lif===7###soif===295###eoif===323###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");lists->memory[i].in_use = 0;
}

    int AKA_BLOCK_LOOP_34364 = 0;
    AKA_mark("lis===858###sois===34368###eois===34374###lif===8###soif===333###eoif===339###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");
for(i = 0; AKA_mark("lis===858###sois===34375###eois===34395###lif===8###soif===340###eoif===360###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)") && (AKA_mark("lis===858###sois===34375###eois===34395###lif===8###soif===340###eoif===360###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)") && (i != lists->listsize)); ({AKA_mark("lis===858###sois===34397###eois===34400###lif===8###soif===362###eoif===365###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");++i;})) {
        AKA_BLOCK_LOOP_34364++;
        if (AKA_BLOCK_LOOP_34364 > 1000) {
            //break;
        }
      AKA_mark("lis===859###sois===34411###eois===34425###lif===9###soif===376###eoif===390###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");BPMNode* node;
      int AKA_BLOCK_LOOP_34433 = 0;
    AKA_mark("lis===860###sois===34437###eois===34462###lif===10###soif===402###eoif===427###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");
for(node = lists->chains0[i]; AKA_mark("lis===860###sois===34463###eois===34472###lif===10###soif===428###eoif===437###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)") && (AKA_mark("lis===860###sois===34463###eois===34472###lif===10###soif===428###eoif===437###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)") && (node != 0)); ({AKA_mark("lis===860###sois===34474###eois===34491###lif===10###soif===439###eoif===456###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");node = node->tail;})) {
AKA_mark("lis===860###sois===34493###eois===34510###lif===10###soif===458###eoif===475###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");node->in_use = 1;
}

      int AKA_BLOCK_LOOP_34518 = 0;
    AKA_mark("lis===861###sois===34522###eois===34547###lif===11###soif===487###eoif===512###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");
for(node = lists->chains1[i]; AKA_mark("lis===861###sois===34548###eois===34557###lif===11###soif===513###eoif===522###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)") && (AKA_mark("lis===861###sois===34548###eois===34557###lif===11###soif===513###eoif===522###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)") && (node != 0)); ({AKA_mark("lis===861###sois===34559###eois===34576###lif===11###soif===524###eoif===541###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");node = node->tail;})) {
AKA_mark("lis===861###sois===34578###eois===34595###lif===11###soif===543###eoif===560###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");node->in_use = 1;
}

    }
    /*collect those that are free*/
    AKA_mark("lis===864###sois===34645###eois===34664###lif===14###soif===610###eoif===629###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");lists->numfree = 0;
    int AKA_BLOCK_LOOP_34670 = 0;
    AKA_mark("lis===865###sois===34674###eois===34680###lif===15###soif===639###eoif===645###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");
for(i = 0; AKA_mark("lis===865###sois===34681###eois===34700###lif===15###soif===646###eoif===665###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)") && (AKA_mark("lis===865###sois===34681###eois===34700###lif===15###soif===646###eoif===665###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)") && (i != lists->memsize)); ({AKA_mark("lis===865###sois===34702###eois===34705###lif===15###soif===667###eoif===670###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");++i;})) {
        AKA_BLOCK_LOOP_34670++;
        if (AKA_BLOCK_LOOP_34670 > 1000) {
            //break;
        }
      if(AKA_mark("lis===866###sois===34719###eois===34743###lif===16###soif===684###eoif===708###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)") && (AKA_mark("lis===866###sois===34719###eois===34743###lif===16###soif===684###eoif===708###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)") && (!lists->memory[i].in_use))) {
AKA_mark("lis===866###sois===34745###eois===34799###lif===16###soif===710###eoif===764###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");lists->freelist[lists->numfree++] = &lists->memory[i];
}

else {
AKA_mark("lis===-866-###sois===-34719-###eois===-3471924-###lif===-16-###soif===-###eoif===-708-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");
}
    }
    AKA_mark("lis===868###sois===34812###eois===34832###lif===18###soif===777###eoif===797###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");lists->nextfree = 0;
  }
else {
AKA_mark("lis===-855-###sois===-34210-###eois===-3421033-###lif===-5-###soif===-###eoif===-208-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");
}

  AKA_mark("lis===871###sois===34843###eois===34887###lif===21###soif===808###eoif===852###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");result = lists->freelist[lists->nextfree++];
  AKA_mark("lis===872###sois===34891###eois===34915###lif===22###soif===856###eoif===880###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");result->weight = weight;
  AKA_mark("lis===873###sois===34919###eois===34941###lif===23###soif===884###eoif===906###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");result->index = index;
  AKA_mark("lis===874###sois===34945###eois===34965###lif===24###soif===910###eoif===930###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");result->tail = tail;
  AKA_mark("lis===875###sois===34969###eois===34983###lif===25###soif===934###eoif===948###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_create(BPMLists*,int,unsigned,BPMNode*)");return result;
}

/*sort the leaves with stable mergesort*/
/** Instrumented function bpmnode_sort(BPMNode*,size_t) */
static void bpmnode_sort(BPMNode* leaves, size_t num) /* << Aka begin of function void bpmnode_sort(BPMNode* leaves, size_t num) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.bpmnode_sort.35045.stub"

  AKA_mark("lis===880###sois===35092###eois===35155###lif===1###soif===59###eoif===122###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");BPMNode* mem = (BPMNode*)lodepng_malloc(sizeof(*leaves) * num);
  AKA_mark("lis===881###sois===35159###eois===35185###lif===2###soif===126###eoif===152###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");size_t width, counter = 0;
  int AKA_BLOCK_LOOP_35189 = 0;
    AKA_mark("lis===882###sois===35193###eois===35203###lif===3###soif===160###eoif===170###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");
for(width = 1; AKA_mark("lis===882###sois===35204###eois===35215###lif===3###soif===171###eoif===182###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)") && (AKA_mark("lis===882###sois===35204###eois===35215###lif===3###soif===171###eoif===182###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)") && (width < num)); ({AKA_mark("lis===882###sois===35217###eois===35227###lif===3###soif===184###eoif===194###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");width *= 2;})) {
        AKA_BLOCK_LOOP_35189++;
        if (AKA_BLOCK_LOOP_35189 > 1000) {
            //break;
        }
    AKA_mark("lis===883###sois===35236###eois===35278###lif===4###soif===203###eoif===245###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");BPMNode* a = (counter & 1) ? mem : leaves;
    AKA_mark("lis===884###sois===35284###eois===35326###lif===5###soif===251###eoif===293###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");BPMNode* b = (counter & 1) ? leaves : mem;
    AKA_mark("lis===885###sois===35332###eois===35341###lif===6###soif===299###eoif===308###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");size_t p;
    int AKA_BLOCK_LOOP_35347 = 0;
    AKA_mark("lis===886###sois===35351###eois===35357###lif===7###soif===318###eoif===324###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");
for(p = 0; AKA_mark("lis===886###sois===35358###eois===35365###lif===7###soif===325###eoif===332###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)") && (AKA_mark("lis===886###sois===35358###eois===35365###lif===7###soif===325###eoif===332###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)") && (p < num)); ({AKA_mark("lis===886###sois===35367###eois===35381###lif===7###soif===334###eoif===348###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");p += 2 * width;})) {
        AKA_BLOCK_LOOP_35347++;
        if (AKA_BLOCK_LOOP_35347 > 1000) {
            //break;
        }
      AKA_mark("lis===887###sois===35392###eois===35441###lif===8###soif===359###eoif===408###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");size_t q = (p + width > num) ? num : (p + width);
      AKA_mark("lis===888###sois===35449###eois===35506###lif===9###soif===416###eoif===473###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");size_t r = (p + 2 * width > num) ? num : (p + 2 * width);
      AKA_mark("lis===889###sois===35514###eois===35537###lif===10###soif===481###eoif===504###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");size_t i = p, j = q, k;
      int AKA_BLOCK_LOOP_35545 = 0;
    AKA_mark("lis===890###sois===35549###eois===35555###lif===11###soif===516###eoif===522###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");
for(k = p; AKA_mark("lis===890###sois===35556###eois===35561###lif===11###soif===523###eoif===528###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)") && (AKA_mark("lis===890###sois===35556###eois===35561###lif===11###soif===523###eoif===528###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)") && (k < r)); ({AKA_mark("lis===890###sois===35563###eois===35566###lif===11###soif===530###eoif===533###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");k++;})) {
        AKA_BLOCK_LOOP_35545++;
        if (AKA_BLOCK_LOOP_35545 > 1000) {
            //break;
        }
        if(AKA_mark("lis===891###sois===35582###eois===35629###lif===12###soif===549###eoif===596###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)") && ((AKA_mark("lis===891###sois===35582###eois===35587###lif===12###soif===549###eoif===554###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)") && (i < q)) && (((AKA_mark("lis===891###sois===35592###eois===35598###lif===12###soif===559###eoif===565###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)") && (j >= r)) || (AKA_mark("lis===891###sois===35602###eois===35628###lif===12###soif===569###eoif===595###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)") && (a[i].weight <= a[j].weight)))))) {
AKA_mark("lis===891###sois===35631###eois===35645###lif===12###soif===598###eoif===612###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");b[k] = a[i++];
}

        else {
AKA_mark("lis===892###sois===35660###eois===35674###lif===13###soif===627###eoif===641###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");b[k] = a[j++];
}

      }
    }
    AKA_mark("lis===895###sois===35696###eois===35706###lif===16###soif===663###eoif===673###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");counter++;
  }
  if(AKA_mark("lis===897###sois===35718###eois===35729###lif===18###soif===685###eoif===696###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)") && (AKA_mark("lis===897###sois===35718###eois===35729###lif===18###soif===685###eoif===696###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)") && (counter & 1))) {
AKA_mark("lis===897###sois===35731###eois===35782###lif===18###soif===698###eoif===749###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");lodepng_memcpy(leaves, mem, sizeof(*leaves) * num);
}

else {
AKA_mark("lis===-897-###sois===-35718-###eois===-3571811-###lif===-18-###soif===-###eoif===-696-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");
}
  AKA_mark("lis===898###sois===35786###eois===35804###lif===19###soif===753###eoif===771###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\bpmnode_sort(BPMNode*,size_t)");lodepng_free(mem);
}

/*Boundary Package Merge step, numpresent is the amount of leaves, and c is the current chain.*/
/** Instrumented function boundaryPM(BPMLists*,BPMNode*,size_t,int,int) */
static void boundaryPM(BPMLists* lists, BPMNode* leaves, size_t numpresent, int c, int num) /* << Aka begin of function void boundaryPM(BPMLists* lists, BPMNode* leaves, size_t numpresent, int c, int num) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.boundaryPM.35921.stub"

  AKA_mark("lis===903###sois===36006###eois===36052###lif===1###soif===97###eoif===143###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)");unsigned lastindex = lists->chains1[c]->index;

  if(AKA_mark("lis===905###sois===36061###eois===36067###lif===3###soif===152###eoif===158###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)") && (AKA_mark("lis===905###sois===36061###eois===36067###lif===3###soif===152###eoif===158###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)") && (c == 0))) {
    if(AKA_mark("lis===906###sois===36079###eois===36102###lif===4###soif===170###eoif===193###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)") && (AKA_mark("lis===906###sois===36079###eois===36102###lif===4###soif===170###eoif===193###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)") && (lastindex >= numpresent))) {
AKA_mark("lis===906###sois===36104###eois===36111###lif===4###soif===195###eoif===202###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)");return;
}

else {
AKA_mark("lis===-906-###sois===-36079-###eois===-3607923-###lif===-4-###soif===-###eoif===-193-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)");
}
    AKA_mark("lis===907###sois===36117###eois===36155###lif===5###soif===208###eoif===246###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)");lists->chains0[c] = lists->chains1[c];
    AKA_mark("lis===908###sois===36161###eois===36247###lif===6###soif===252###eoif===338###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)");lists->chains1[c] = bpmnode_create(lists, leaves[lastindex].weight, lastindex + 1, 0);
  } else {
    /*sum of the weights of the head nodes of the previous lookahead chains.*/
    AKA_mark("lis===911###sois===36345###eois===36417###lif===9###soif===436###eoif===508###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)");int sum = lists->chains0[c - 1]->weight + lists->chains1[c - 1]->weight;
    AKA_mark("lis===912###sois===36423###eois===36461###lif===10###soif===514###eoif===552###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)");lists->chains0[c] = lists->chains1[c];
    if(AKA_mark("lis===913###sois===36470###eois===36526###lif===11###soif===561###eoif===617###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)") && ((AKA_mark("lis===913###sois===36470###eois===36492###lif===11###soif===561###eoif===583###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)") && (lastindex < numpresent)) && (AKA_mark("lis===913###sois===36496###eois===36526###lif===11###soif===587###eoif===617###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)") && (sum > leaves[lastindex].weight)))) {
      AKA_mark("lis===914###sois===36537###eois===36645###lif===12###soif===628###eoif===736###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)");lists->chains1[c] = bpmnode_create(lists, leaves[lastindex].weight, lastindex + 1, lists->chains1[c]->tail);
      AKA_mark("lis===915###sois===36653###eois===36660###lif===13###soif===744###eoif===751###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)");return;
    }
else {
AKA_mark("lis===-913-###sois===-36470-###eois===-3647056-###lif===-11-###soif===-###eoif===-617-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)");
}
    AKA_mark("lis===917###sois===36673###eois===36754###lif===15###soif===764###eoif===845###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)");lists->chains1[c] = bpmnode_create(lists, sum, lastindex, lists->chains1[c - 1]);
    /*in the end we are only interested in the chain of the last list, so no
    need to recurse if we're at the last one (this gives measurable speedup)*/
    if(AKA_mark("lis===920###sois===36921###eois===36956###lif===18###soif===1012###eoif===1047###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)") && (AKA_mark("lis===920###sois===36921###eois===36956###lif===18###soif===1012###eoif===1047###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)") && (num + 1 < (int)(2 * numpresent - 2)))) {
      AKA_mark("lis===921###sois===36967###eois===37017###lif===19###soif===1058###eoif===1108###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)");boundaryPM(lists, leaves, numpresent, c - 1, num);
      AKA_mark("lis===922###sois===37025###eois===37075###lif===20###soif===1116###eoif===1166###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)");boundaryPM(lists, leaves, numpresent, c - 1, num);
    }
else {
AKA_mark("lis===-920-###sois===-36921-###eois===-3692135-###lif===-18-###soif===-###eoif===-1047-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\boundaryPM(BPMLists*,BPMNode*,size_t,int,int)");
}
  }
}

/** Instrumented function lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned) */
unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
                                      size_t numcodes, unsigned maxbitlen) /* << Aka begin of function unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
                                      size_t numcodes, unsigned maxbitlen) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_huffman_code_lengths.37103.stub"

  AKA_mark("lis===929###sois===37261###eois===37280###lif===2###soif===167###eoif===186###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");unsigned error = 0;
  AKA_mark("lis===930###sois===37284###eois===37295###lif===3###soif===190###eoif===201###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");unsigned i;
  AKA_mark("lis===931###sois===37299###eois===37321###lif===4###soif===205###eoif===227###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");size_t numpresent = 0; /*number of symbols with non-zero frequency*/
  AKA_mark("lis===932###sois===37371###eois===37387###lif===5###soif===277###eoif===293###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");BPMNode* leaves; /*the symbols, only those with > 0 frequency*/

  if(AKA_mark("lis===934###sois===37443###eois===37456###lif===7###soif===349###eoif===362###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (AKA_mark("lis===934###sois===37443###eois===37456###lif===7###soif===349###eoif===362###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (numcodes == 0))) {
AKA_mark("lis===934###sois===37458###eois===37468###lif===7###soif===364###eoif===374###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");return 80;
}

else {
AKA_mark("lis===-934-###sois===-37443-###eois===-3744313-###lif===-7-###soif===-###eoif===-362-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");
} /*error: a tree of 0 symbols is not supposed to be made*/
  if(AKA_mark("lis===935###sois===37533###eois===37571###lif===8###soif===439###eoif===477###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (AKA_mark("lis===935###sois===37533###eois===37571###lif===8###soif===439###eoif===477###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && ((1u << maxbitlen) < (unsigned)numcodes))) {
AKA_mark("lis===935###sois===37573###eois===37583###lif===8###soif===479###eoif===489###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");return 80;
}

else {
AKA_mark("lis===-935-###sois===-37533-###eois===-3753338-###lif===-8-###soif===-###eoif===-477-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");
} /*error: represent all symbols*/

  AKA_mark("lis===937###sois===37622###eois===37684###lif===10###soif===528###eoif===590###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");leaves = (BPMNode*)lodepng_malloc(numcodes * sizeof(*leaves));
  if(AKA_mark("lis===938###sois===37691###eois===37698###lif===11###soif===597###eoif===604###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (AKA_mark("lis===938###sois===37691###eois===37698###lif===11###soif===597###eoif===604###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (!leaves))) {
AKA_mark("lis===938###sois===37700###eois===37710###lif===11###soif===606###eoif===616###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");return 83;
}

else {
AKA_mark("lis===-938-###sois===-37691-###eois===-376917-###lif===-11-###soif===-###eoif===-604-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");
} /*alloc fail*/

  int AKA_BLOCK_LOOP_37731 = 0;
    AKA_mark("lis===940###sois===37735###eois===37741###lif===13###soif===641###eoif===647###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");
for(i = 0; AKA_mark("lis===940###sois===37742###eois===37755###lif===13###soif===648###eoif===661###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (AKA_mark("lis===940###sois===37742###eois===37755###lif===13###soif===648###eoif===661###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (i != numcodes)); ({AKA_mark("lis===940###sois===37757###eois===37760###lif===13###soif===663###eoif===666###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");++i;})) {
        AKA_BLOCK_LOOP_37731++;
        if (AKA_BLOCK_LOOP_37731 > 1000) {
            //break;
        }
    if(AKA_mark("lis===941###sois===37772###eois===37790###lif===14###soif===678###eoif===696###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (AKA_mark("lis===941###sois===37772###eois===37790###lif===14###soif===678###eoif===696###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (frequencies[i] > 0))) {
      AKA_mark("lis===942###sois===37801###eois===37849###lif===15###soif===707###eoif===755###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");leaves[numpresent].weight = (int)frequencies[i];
      AKA_mark("lis===943###sois===37857###eois===37886###lif===16###soif===763###eoif===792###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");leaves[numpresent].index = i;
      AKA_mark("lis===944###sois===37894###eois===37907###lif===17###soif===800###eoif===813###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");++numpresent;
    }
else {
AKA_mark("lis===-941-###sois===-37772-###eois===-3777218-###lif===-14-###soif===-###eoif===-696-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");
}
  }

  AKA_mark("lis===948###sois===37925###eois===37981###lif===21###soif===831###eoif===887###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");lodepng_memset(lengths, 0, numcodes * sizeof(*lengths));

  /*ensure at least two present symbols. There should be at least one symbol
  according to RFC 1951 section 3.2.7. Some decoders incorrectly require two. To
  make these work as well ensure there are at least two symbols. The
  Package-Merge code below also doesn't work correctly if there's only one
  symbol, it'd give it the theoretical 0 bits but in practice zlib wants 1 bit*/
  if(AKA_mark("lis===955###sois===38378###eois===38393###lif===28###soif===1284###eoif===1299###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (AKA_mark("lis===955###sois===38378###eois===38393###lif===28###soif===1284###eoif===1299###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (numpresent == 0))) {
    AKA_mark("lis===956###sois===38402###eois===38430###lif===29###soif===1308###eoif===1336###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");lengths[0] = lengths[1] = 1; /*note that for RFC 1951 section 3.2.7, only lengths[0] = 1 is needed*/
  } else {
if(AKA_mark("lis===957###sois===38516###eois===38531###lif===30###soif===1422###eoif===1437###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (AKA_mark("lis===957###sois===38516###eois===38531###lif===30###soif===1422###eoif===1437###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (numpresent == 1))) {
    AKA_mark("lis===958###sois===38540###eois===38569###lif===31###soif===1446###eoif===1475###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");lengths[leaves[0].index] = 1;
    AKA_mark("lis===959###sois===38575###eois===38617###lif===32###soif===1481###eoif===1523###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");lengths[leaves[0].index == 0 ? 1 : 0] = 1;
  } else {
    AKA_mark("lis===961###sois===38635###eois===38650###lif===34###soif===1541###eoif===1556###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");BPMLists lists;
    AKA_mark("lis===962###sois===38656###eois===38670###lif===35###soif===1562###eoif===1576###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");BPMNode* node;

    AKA_mark("lis===964###sois===38678###eois===38711###lif===37###soif===1584###eoif===1617###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");bpmnode_sort(leaves, numpresent);

    AKA_mark("lis===966###sois===38719###eois===38746###lif===39###soif===1625###eoif===1652###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");lists.listsize = maxbitlen;
    AKA_mark("lis===967###sois===38752###eois===38800###lif===40###soif===1658###eoif===1706###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");lists.memsize = 2 * maxbitlen * (maxbitlen + 1);
    AKA_mark("lis===968###sois===38806###eois===38825###lif===41###soif===1712###eoif===1731###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");lists.nextfree = 0;
    AKA_mark("lis===969###sois===38831###eois===38861###lif===42###soif===1737###eoif===1767###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");lists.numfree = lists.memsize;
    AKA_mark("lis===970###sois===38867###eois===38946###lif===43###soif===1773###eoif===1852###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");lists.memory = (BPMNode*)lodepng_malloc(lists.memsize * sizeof(*lists.memory));
    AKA_mark("lis===971###sois===38952###eois===39029###lif===44###soif===1858###eoif===1935###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");lists.freelist = (BPMNode**)lodepng_malloc(lists.memsize * sizeof(BPMNode*));
    AKA_mark("lis===972###sois===39035###eois===39112###lif===45###soif===1941###eoif===2018###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");lists.chains0 = (BPMNode**)lodepng_malloc(lists.listsize * sizeof(BPMNode*));
    AKA_mark("lis===973###sois===39118###eois===39195###lif===46###soif===2024###eoif===2101###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");lists.chains1 = (BPMNode**)lodepng_malloc(lists.listsize * sizeof(BPMNode*));
    if(AKA_mark("lis===974###sois===39204###eois===39272###lif===47###soif===2110###eoif===2178###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && ((((AKA_mark("lis===974###sois===39204###eois===39217###lif===47###soif===2110###eoif===2123###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (!lists.memory)) || (AKA_mark("lis===974###sois===39221###eois===39236###lif===47###soif===2127###eoif===2142###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (!lists.freelist))) || (AKA_mark("lis===974###sois===39240###eois===39254###lif===47###soif===2146###eoif===2160###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (!lists.chains0))) || (AKA_mark("lis===974###sois===39258###eois===39272###lif===47###soif===2164###eoif===2178###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (!lists.chains1)))) {
AKA_mark("lis===974###sois===39274###eois===39285###lif===47###soif===2180###eoif===2191###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");error = 83;
}

else {
AKA_mark("lis===-974-###sois===-39204-###eois===-3920468-###lif===-47-###soif===-###eoif===-2178-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");
} /*alloc fail*/

    if(AKA_mark("lis===976###sois===39311###eois===39317###lif===49###soif===2217###eoif===2223###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (AKA_mark("lis===976###sois===39311###eois===39317###lif===49###soif===2217###eoif===2223###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (!error))) {
      int AKA_BLOCK_LOOP_39328 = 0;
    AKA_mark("lis===977###sois===39332###eois===39338###lif===50###soif===2238###eoif===2244###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");
for(i = 0; AKA_mark("lis===977###sois===39339###eois===39357###lif===50###soif===2245###eoif===2263###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (AKA_mark("lis===977###sois===39339###eois===39357###lif===50###soif===2245###eoif===2263###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (i != lists.memsize)); ({AKA_mark("lis===977###sois===39359###eois===39362###lif===50###soif===2265###eoif===2268###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");++i;})) {
AKA_mark("lis===977###sois===39364###eois===39401###lif===50###soif===2270###eoif===2307###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");lists.freelist[i] = &lists.memory[i];
}


      AKA_mark("lis===979###sois===39411###eois===39458###lif===52###soif===2317###eoif===2364###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");bpmnode_create(&lists, leaves[0].weight, 1, 0);
      AKA_mark("lis===980###sois===39466###eois===39513###lif===53###soif===2372###eoif===2419###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");bpmnode_create(&lists, leaves[1].weight, 2, 0);

      int AKA_BLOCK_LOOP_39523 = 0;
    AKA_mark("lis===982###sois===39527###eois===39533###lif===55###soif===2433###eoif===2439###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");
for(i = 0; AKA_mark("lis===982###sois===39534###eois===39553###lif===55###soif===2440###eoif===2459###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (AKA_mark("lis===982###sois===39534###eois===39553###lif===55###soif===2440###eoif===2459###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (i != lists.listsize)); ({AKA_mark("lis===982###sois===39555###eois===39558###lif===55###soif===2461###eoif===2464###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");++i;})) {
        AKA_BLOCK_LOOP_39523++;
        if (AKA_BLOCK_LOOP_39523 > 1000) {
            //break;
        }
        AKA_mark("lis===983###sois===39571###eois===39607###lif===56###soif===2477###eoif===2513###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");lists.chains0[i] = &lists.memory[0];
        AKA_mark("lis===984###sois===39617###eois===39653###lif===57###soif===2523###eoif===2559###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");lists.chains1[i] = &lists.memory[1];
      }

      /*each boundaryPM call adds one chain to the last list, and we need 2 * numpresent - 2 chains.*/
      int AKA_BLOCK_LOOP_39776 = 0;
    AKA_mark("lis===988###sois===39780###eois===39786###lif===61###soif===2686###eoif===2692###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");
for(i = 2; AKA_mark("lis===988###sois===39787###eois===39810###lif===61###soif===2693###eoif===2716###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (AKA_mark("lis===988###sois===39787###eois===39810###lif===61###soif===2693###eoif===2716###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (i != 2 * numpresent - 2)); ({AKA_mark("lis===988###sois===39812###eois===39815###lif===61###soif===2718###eoif===2721###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");++i;})) {
AKA_mark("lis===988###sois===39817###eois===39884###lif===61###soif===2723###eoif===2790###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");boundaryPM(&lists, leaves, numpresent, (int)maxbitlen - 1, (int)i);
}


      int AKA_BLOCK_LOOP_39894 = 0;
    AKA_mark("lis===990###sois===39898###eois===39934###lif===63###soif===2804###eoif===2840###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");
for(node = lists.chains1[maxbitlen - 1]; AKA_mark("lis===990###sois===39935###eois===39939###lif===63###soif===2841###eoif===2845###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (AKA_mark("lis===990###sois===39935###eois===39939###lif===63###soif===2841###eoif===2845###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (node)); ({AKA_mark("lis===990###sois===39941###eois===39958###lif===63###soif===2847###eoif===2864###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");node = node->tail;})) {
        AKA_BLOCK_LOOP_39894++;
        if (AKA_BLOCK_LOOP_39894 > 1000) {
            //break;
        }
        int AKA_BLOCK_LOOP_39971 = 0;
    AKA_mark("lis===991###sois===39975###eois===39981###lif===64###soif===2881###eoif===2887###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");
for(i = 0; AKA_mark("lis===991###sois===39982###eois===39998###lif===64###soif===2888###eoif===2904###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (AKA_mark("lis===991###sois===39982###eois===39998###lif===64###soif===2888###eoif===2904###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)") && (i != node->index)); ({AKA_mark("lis===991###sois===40000###eois===40003###lif===64###soif===2906###eoif===2909###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");++i;})) {
AKA_mark("lis===991###sois===40005###eois===40032###lif===64###soif===2911###eoif===2938###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");++lengths[leaves[i].index];
}

      }
    }
else {
AKA_mark("lis===-976-###sois===-39311-###eois===-393116-###lif===-49-###soif===-###eoif===-2223-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");
}

    AKA_mark("lis===995###sois===40056###eois===40083###lif===68###soif===2962###eoif===2989###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");lodepng_free(lists.memory);
    AKA_mark("lis===996###sois===40089###eois===40118###lif===69###soif===2995###eoif===3024###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");lodepng_free(lists.freelist);
    AKA_mark("lis===997###sois===40124###eois===40152###lif===70###soif===3030###eoif===3058###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");lodepng_free(lists.chains0);
    AKA_mark("lis===998###sois===40158###eois===40186###lif===71###soif===3064###eoif===3092###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");lodepng_free(lists.chains1);
  }
}


  AKA_mark("lis===1001###sois===40197###eois===40218###lif===74###soif===3103###eoif===3124###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");lodepng_free(leaves);
  AKA_mark("lis===1002###sois===40222###eois===40235###lif===75###soif===3128###eoif===3141###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_huffman_code_lengths(unsigned*,unsigned const*,size_t,unsigned)");return error;
}

/*Create the Huffman tree given the symbol frequencies*/
/** Instrumented function HuffmanTree_makeFromFrequencies(HuffmanTree*,unsigned const*,size_t,size_t,unsigned) */
static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
                                                size_t mincodes, size_t numcodes, unsigned maxbitlen) /* << Aka begin of function unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
                                                size_t mincodes, size_t numcodes, unsigned maxbitlen) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromFrequencies(HuffmanTree*,unsigned const*,size_t,size_t,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.HuffmanTree_makeFromFrequencies.40316.stub"

  AKA_mark("lis===1008###sois===40504###eois===40523###lif===2###soif===204###eoif===223###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromFrequencies(HuffmanTree*,unsigned const*,size_t,size_t,unsigned)");unsigned error = 0;
  int AKA_BLOCK_LOOP_40527 = 0;
    while(AKA_mark("lis===1009###sois===40533###eois===40582###lif===3###soif===233###eoif===282###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromFrequencies(HuffmanTree*,unsigned const*,size_t,size_t,unsigned)") && ((AKA_mark("lis===1009###sois===40533###eois===40559###lif===3###soif===233###eoif===259###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromFrequencies(HuffmanTree*,unsigned const*,size_t,size_t,unsigned)") && (!frequencies[numcodes - 1])) && (AKA_mark("lis===1009###sois===40563###eois===40582###lif===3###soif===263###eoif===282###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromFrequencies(HuffmanTree*,unsigned const*,size_t,size_t,unsigned)") && (numcodes > mincodes)))) {
AKA_mark("lis===1009###sois===40584###eois===40595###lif===3###soif===284###eoif===295###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromFrequencies(HuffmanTree*,unsigned const*,size_t,size_t,unsigned)");--numcodes;
}
 /*trim zeroes*/
  AKA_mark("lis===1010###sois===40615###eois===40686###lif===4###soif===315###eoif===386###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromFrequencies(HuffmanTree*,unsigned const*,size_t,size_t,unsigned)");tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
  if(AKA_mark("lis===1011###sois===40693###eois===40707###lif===5###soif===393###eoif===407###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromFrequencies(HuffmanTree*,unsigned const*,size_t,size_t,unsigned)") && (AKA_mark("lis===1011###sois===40693###eois===40707###lif===5###soif===393###eoif===407###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromFrequencies(HuffmanTree*,unsigned const*,size_t,size_t,unsigned)") && (!tree->lengths))) {
AKA_mark("lis===1011###sois===40709###eois===40719###lif===5###soif===409###eoif===419###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromFrequencies(HuffmanTree*,unsigned const*,size_t,size_t,unsigned)");return 83;
}

else {
AKA_mark("lis===-1011-###sois===-40693-###eois===-4069314-###lif===-5-###soif===-###eoif===-407-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromFrequencies(HuffmanTree*,unsigned const*,size_t,size_t,unsigned)");
} /*alloc fail*/
  AKA_mark("lis===1012###sois===40738###eois===40766###lif===6###soif===438###eoif===466###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromFrequencies(HuffmanTree*,unsigned const*,size_t,size_t,unsigned)");tree->maxbitlen = maxbitlen;
  AKA_mark("lis===1013###sois===40770###eois===40806###lif===7###soif===470###eoif===506###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromFrequencies(HuffmanTree*,unsigned const*,size_t,size_t,unsigned)");tree->numcodes = (unsigned)numcodes; /*number of symbols*/

  AKA_mark("lis===1015###sois===40834###eois===40920###lif===9###soif===534###eoif===620###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromFrequencies(HuffmanTree*,unsigned const*,size_t,size_t,unsigned)");error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);
  if(AKA_mark("lis===1016###sois===40927###eois===40933###lif===10###soif===627###eoif===633###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromFrequencies(HuffmanTree*,unsigned const*,size_t,size_t,unsigned)") && (AKA_mark("lis===1016###sois===40927###eois===40933###lif===10###soif===627###eoif===633###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromFrequencies(HuffmanTree*,unsigned const*,size_t,size_t,unsigned)") && (!error))) {
AKA_mark("lis===1016###sois===40935###eois===40978###lif===10###soif===635###eoif===678###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromFrequencies(HuffmanTree*,unsigned const*,size_t,size_t,unsigned)");error = HuffmanTree_makeFromLengths2(tree);
}

else {
AKA_mark("lis===-1016-###sois===-40927-###eois===-409276-###lif===-10-###soif===-###eoif===-633-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromFrequencies(HuffmanTree*,unsigned const*,size_t,size_t,unsigned)");
}
  AKA_mark("lis===1017###sois===40982###eois===40995###lif===11###soif===682###eoif===695###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\HuffmanTree_makeFromFrequencies(HuffmanTree*,unsigned const*,size_t,size_t,unsigned)");return error;
}
#endif /*LODEPNG_COMPILE_ENCODER*/

/*get the literal and length code tree of a deflated block with fixed tree, as per the deflate specification*/
/** Instrumented function generateFixedLitLenTree(HuffmanTree*) */
static unsigned generateFixedLitLenTree(HuffmanTree* tree) /* << Aka begin of function unsigned generateFixedLitLenTree(HuffmanTree* tree) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.generateFixedLitLenTree.41166.stub"

  AKA_mark("lis===1023###sois===41214###eois===41236###lif===1###soif===64###eoif===86###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)");unsigned i, error = 0;
  AKA_mark("lis===1024###sois===41240###eois===41330###lif===2###soif===90###eoif===180###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)");unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
  if(AKA_mark("lis===1025###sois===41337###eois===41344###lif===3###soif===187###eoif===194###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)") && (AKA_mark("lis===1025###sois===41337###eois===41344###lif===3###soif===187###eoif===194###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)") && (!bitlen))) {
AKA_mark("lis===1025###sois===41346###eois===41356###lif===3###soif===196###eoif===206###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)");return 83;
}

else {
AKA_mark("lis===-1025-###sois===-41337-###eois===-413377-###lif===-3-###soif===-###eoif===-194-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)");
} /*alloc fail*/

  /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
  int AKA_BLOCK_LOOP_41469 = 0;
    AKA_mark("lis===1028###sois===41473###eois===41481###lif===6###soif===323###eoif===331###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)");
for(i =   0; AKA_mark("lis===1028###sois===41482###eois===41490###lif===6###soif===332###eoif===340###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)") && (AKA_mark("lis===1028###sois===41482###eois===41490###lif===6###soif===332###eoif===340###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)") && (i <= 143)); ({AKA_mark("lis===1028###sois===41492###eois===41495###lif===6###soif===342###eoif===345###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)");++i;})) {
AKA_mark("lis===1028###sois===41497###eois===41511###lif===6###soif===347###eoif===361###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)");bitlen[i] = 8;
}

  int AKA_BLOCK_LOOP_41515 = 0;
    AKA_mark("lis===1029###sois===41519###eois===41527###lif===7###soif===369###eoif===377###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)");
for(i = 144; AKA_mark("lis===1029###sois===41528###eois===41536###lif===7###soif===378###eoif===386###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)") && (AKA_mark("lis===1029###sois===41528###eois===41536###lif===7###soif===378###eoif===386###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)") && (i <= 255)); ({AKA_mark("lis===1029###sois===41538###eois===41541###lif===7###soif===388###eoif===391###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)");++i;})) {
AKA_mark("lis===1029###sois===41543###eois===41557###lif===7###soif===393###eoif===407###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)");bitlen[i] = 9;
}

  int AKA_BLOCK_LOOP_41561 = 0;
    AKA_mark("lis===1030###sois===41565###eois===41573###lif===8###soif===415###eoif===423###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)");
for(i = 256; AKA_mark("lis===1030###sois===41574###eois===41582###lif===8###soif===424###eoif===432###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)") && (AKA_mark("lis===1030###sois===41574###eois===41582###lif===8###soif===424###eoif===432###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)") && (i <= 279)); ({AKA_mark("lis===1030###sois===41584###eois===41587###lif===8###soif===434###eoif===437###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)");++i;})) {
AKA_mark("lis===1030###sois===41589###eois===41603###lif===8###soif===439###eoif===453###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)");bitlen[i] = 7;
}

  int AKA_BLOCK_LOOP_41607 = 0;
    AKA_mark("lis===1031###sois===41611###eois===41619###lif===9###soif===461###eoif===469###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)");
for(i = 280; AKA_mark("lis===1031###sois===41620###eois===41628###lif===9###soif===470###eoif===478###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)") && (AKA_mark("lis===1031###sois===41620###eois===41628###lif===9###soif===470###eoif===478###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)") && (i <= 287)); ({AKA_mark("lis===1031###sois===41630###eois===41633###lif===9###soif===480###eoif===483###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)");++i;})) {
AKA_mark("lis===1031###sois===41635###eois===41649###lif===9###soif===485###eoif===499###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)");bitlen[i] = 8;
}


  AKA_mark("lis===1033###sois===41655###eois===41735###lif===11###soif===505###eoif===585###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)");error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);

  AKA_mark("lis===1035###sois===41741###eois===41762###lif===13###soif===591###eoif===612###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)");lodepng_free(bitlen);
  AKA_mark("lis===1036###sois===41766###eois===41779###lif===14###soif===616###eoif===629###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedLitLenTree(HuffmanTree*)");return error;
}

/*get the distance code tree of a deflated block with fixed tree, as specified in the deflate specification*/
/** Instrumented function generateFixedDistanceTree(HuffmanTree*) */
static unsigned generateFixedDistanceTree(HuffmanTree* tree) /* << Aka begin of function unsigned generateFixedDistanceTree(HuffmanTree* tree) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedDistanceTree(HuffmanTree*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.generateFixedDistanceTree.41913.stub"

  AKA_mark("lis===1041###sois===41963###eois===41985###lif===1###soif===66###eoif===88###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedDistanceTree(HuffmanTree*)");unsigned i, error = 0;
  AKA_mark("lis===1042###sois===41989###eois===42075###lif===2###soif===92###eoif===178###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedDistanceTree(HuffmanTree*)");unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
  if(AKA_mark("lis===1043###sois===42082###eois===42089###lif===3###soif===185###eoif===192###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedDistanceTree(HuffmanTree*)") && (AKA_mark("lis===1043###sois===42082###eois===42089###lif===3###soif===185###eoif===192###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedDistanceTree(HuffmanTree*)") && (!bitlen))) {
AKA_mark("lis===1043###sois===42091###eois===42101###lif===3###soif===194###eoif===204###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedDistanceTree(HuffmanTree*)");return 83;
}

else {
AKA_mark("lis===-1043-###sois===-42082-###eois===-420827-###lif===-3-###soif===-###eoif===-192-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedDistanceTree(HuffmanTree*)");
} /*alloc fail*/

  /*there are 32 distance codes, but 30-31 are unused*/
  int AKA_BLOCK_LOOP_42179 = 0;
    AKA_mark("lis===1046###sois===42183###eois===42189###lif===6###soif===286###eoif===292###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedDistanceTree(HuffmanTree*)");
for(i = 0; AKA_mark("lis===1046###sois===42190###eois===42215###lif===6###soif===293###eoif===318###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedDistanceTree(HuffmanTree*)") && (AKA_mark("lis===1046###sois===42190###eois===42215###lif===6###soif===293###eoif===318###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedDistanceTree(HuffmanTree*)") && (i != NUM_DISTANCE_SYMBOLS)); ({AKA_mark("lis===1046###sois===42217###eois===42220###lif===6###soif===320###eoif===323###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedDistanceTree(HuffmanTree*)");++i;})) {
AKA_mark("lis===1046###sois===42222###eois===42236###lif===6###soif===325###eoif===339###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedDistanceTree(HuffmanTree*)");bitlen[i] = 5;
}

  AKA_mark("lis===1047###sois===42240###eois===42316###lif===7###soif===343###eoif===419###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedDistanceTree(HuffmanTree*)");error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);

  AKA_mark("lis===1049###sois===42322###eois===42343###lif===9###soif===425###eoif===446###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedDistanceTree(HuffmanTree*)");lodepng_free(bitlen);
  AKA_mark("lis===1050###sois===42347###eois===42360###lif===10###soif===450###eoif===463###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\generateFixedDistanceTree(HuffmanTree*)");return error;
}

#ifdef LODEPNG_COMPILE_DECODER

/*
returns the code. The bit reader must already have been ensured at least 15 bits
*/
/** Instrumented function huffmanDecodeSymbol(LodePNGBitReader*,HuffmanTree const*) */
static unsigned huffmanDecodeSymbol(LodePNGBitReader* reader, const HuffmanTree* codetree) /* << Aka begin of function unsigned huffmanDecodeSymbol(LodePNGBitReader* reader, const HuffmanTree* codetree) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\huffmanDecodeSymbol(LodePNGBitReader*,HuffmanTree const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.huffmanDecodeSymbol.42507.stub"

  AKA_mark("lis===1059###sois===42587###eois===42637###lif===1###soif===96###eoif===146###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\huffmanDecodeSymbol(LodePNGBitReader*,HuffmanTree const*)");unsigned short code = peekBits(reader, FIRSTBITS);
  AKA_mark("lis===1060###sois===42641###eois===42686###lif===2###soif===150###eoif===195###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\huffmanDecodeSymbol(LodePNGBitReader*,HuffmanTree const*)");unsigned short l = codetree->table_len[code];
  AKA_mark("lis===1061###sois===42690###eois===42741###lif===3###soif===199###eoif===250###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\huffmanDecodeSymbol(LodePNGBitReader*,HuffmanTree const*)");unsigned short value = codetree->table_value[code];
  if(AKA_mark("lis===1062###sois===42748###eois===42762###lif===4###soif===257###eoif===271###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\huffmanDecodeSymbol(LodePNGBitReader*,HuffmanTree const*)") && (AKA_mark("lis===1062###sois===42748###eois===42762###lif===4###soif===257###eoif===271###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\huffmanDecodeSymbol(LodePNGBitReader*,HuffmanTree const*)") && (l <= FIRSTBITS))) {
    AKA_mark("lis===1063###sois===42771###eois===42794###lif===5###soif===280###eoif===303###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\huffmanDecodeSymbol(LodePNGBitReader*,HuffmanTree const*)");advanceBits(reader, l);
    AKA_mark("lis===1064###sois===42800###eois===42813###lif===6###soif===309###eoif===322###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\huffmanDecodeSymbol(LodePNGBitReader*,HuffmanTree const*)");return value;
  } else {
    AKA_mark("lis===1066###sois===42831###eois===42862###lif===8###soif===340###eoif===371###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\huffmanDecodeSymbol(LodePNGBitReader*,HuffmanTree const*)");advanceBits(reader, FIRSTBITS);
    AKA_mark("lis===1067###sois===42868###eois===42909###lif===9###soif===377###eoif===418###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\huffmanDecodeSymbol(LodePNGBitReader*,HuffmanTree const*)");value += peekBits(reader, l - FIRSTBITS);
    AKA_mark("lis===1068###sois===42915###eois===42975###lif===10###soif===424###eoif===484###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\huffmanDecodeSymbol(LodePNGBitReader*,HuffmanTree const*)");advanceBits(reader, codetree->table_len[value] - FIRSTBITS);
    AKA_mark("lis===1069###sois===42981###eois===43017###lif===11###soif===490###eoif===526###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\huffmanDecodeSymbol(LodePNGBitReader*,HuffmanTree const*)");return codetree->table_value[value];
  }
}
#endif /*LODEPNG_COMPILE_DECODER*/

#ifdef LODEPNG_COMPILE_DECODER

/* ////////////////////////////////////////////////////////////////////////// */
/* / Inflator (Decompressor)                                                / */
/* ////////////////////////////////////////////////////////////////////////// */

/*get the tree of a deflated block with fixed tree, as specified in the deflate specification
Returns error code.*/
/** Instrumented function getTreeInflateFixed(HuffmanTree*,HuffmanTree*) */
static unsigned getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d) /* << Aka begin of function unsigned getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateFixed(HuffmanTree*,HuffmanTree*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.getTreeInflateFixed.43481.stub"

  AKA_mark("lis===1083###sois===43549###eois===43599###lif===1###soif===84###eoif===134###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateFixed(HuffmanTree*,HuffmanTree*)");unsigned error = generateFixedLitLenTree(tree_ll);
  if(AKA_mark("lis===1084###sois===43606###eois===43611###lif===2###soif===141###eoif===146###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateFixed(HuffmanTree*,HuffmanTree*)") && (AKA_mark("lis===1084###sois===43606###eois===43611###lif===2###soif===141###eoif===146###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateFixed(HuffmanTree*,HuffmanTree*)") && (error))) {
AKA_mark("lis===1084###sois===43613###eois===43626###lif===2###soif===148###eoif===161###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateFixed(HuffmanTree*,HuffmanTree*)");return error;
}

else {
AKA_mark("lis===-1084-###sois===-43606-###eois===-436065-###lif===-2-###soif===-###eoif===-146-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateFixed(HuffmanTree*,HuffmanTree*)");
}
  AKA_mark("lis===1085###sois===43630###eois===43671###lif===3###soif===165###eoif===206###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateFixed(HuffmanTree*,HuffmanTree*)");return generateFixedDistanceTree(tree_d);
}

/*get the tree of a deflated block with dynamic tree, the tree itself is also Huffman compressed with a known tree*/
/** Instrumented function getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*) */
static unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,
                                      LodePNGBitReader* reader) /* << Aka begin of function unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,
                                      LodePNGBitReader* reader) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.getTreeInflateDynamic.43812.stub"

  /*make sure that length values that aren't filled in will be 0, or a wrong tree will be generated*/
  AKA_mark("lis===1092###sois===44050###eois===44069###lif===3###soif===254###eoif===273###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");unsigned error = 0;
  AKA_mark("lis===1093###sois===44073###eois===44107###lif===4###soif===277###eoif===311###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");unsigned n, HLIT, HDIST, HCLEN, i;

  /*see comments in deflateDynamic for explanation of the context and these variables, it is analogous*/
  AKA_mark("lis===1096###sois===44219###eois===44243###lif===7###soif===423###eoif===447###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");unsigned* bitlen_ll = 0; /*lit,len code lengths*/
  AKA_mark("lis===1097###sois===44272###eois===44295###lif===8###soif===476###eoif===499###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");unsigned* bitlen_d = 0; /*dist code lengths*/
  /*code length code lengths ("clcl"), the bit lengths of the huffman tree used to compress bitlen_ll and bitlen_d*/
  AKA_mark("lis===1099###sois===44439###eois===44463###lif===10###soif===643###eoif===667###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");unsigned* bitlen_cl = 0;
  AKA_mark("lis===1100###sois===44467###eois===44487###lif===11###soif===671###eoif===691###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");HuffmanTree tree_cl; /*the code tree for code length codes (the huffman tree for compressed huffman trees)*/

  if(AKA_mark("lis===1102###sois===44584###eois===44617###lif===13###soif===788###eoif===821###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1102###sois===44584###eois===44617###lif===13###soif===788###eoif===821###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (reader->bitsize - reader->bp < 14))) {
AKA_mark("lis===1102###sois===44619###eois===44629###lif===13###soif===823###eoif===833###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");return 49;
}

else {
AKA_mark("lis===-1102-###sois===-44584-###eois===-4458433-###lif===-13-###soif===-###eoif===-821-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");
} /*error: the bit pointer is or will go past the memory*/
  AKA_mark("lis===1103###sois===44690###eois===44715###lif===14###soif===894###eoif===919###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");ensureBits17(reader, 14);

  /*number of literal/length codes + 257. Unlike the spec, the value 257 is added to it here already*/
  AKA_mark("lis===1106###sois===44825###eois===44859###lif===17###soif===1029###eoif===1063###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");HLIT =  readBits(reader, 5) + 257;
  /*number of distance codes. Unlike the spec, the value 1 is added to it here already*/
  AKA_mark("lis===1108###sois===44953###eois===44985###lif===19###soif===1157###eoif===1189###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");HDIST = readBits(reader, 5) + 1;
  /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
  AKA_mark("lis===1110###sois===45082###eois===45114###lif===21###soif===1286###eoif===1318###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");HCLEN = readBits(reader, 4) + 4;

  AKA_mark("lis===1112###sois===45120###eois===45200###lif===23###soif===1324###eoif===1404###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));
  if(AKA_mark("lis===1113###sois===45207###eois===45217###lif===24###soif===1411###eoif===1421###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1113###sois===45207###eois===45217###lif===24###soif===1411###eoif===1421###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (!bitlen_cl))) {
AKA_mark("lis===1113###sois===45219###eois===45244###lif===24###soif===1423###eoif===1448###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");return 83 /*alloc fail*/;
}

else {
AKA_mark("lis===-1113-###sois===-45207-###eois===-4520710-###lif===-24-###soif===-###eoif===-1421-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");
}

  AKA_mark("lis===1115###sois===45250###eois===45277###lif===26###soif===1454###eoif===1481###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");HuffmanTree_init(&tree_cl);

  int AKA_BLOCK_LOOP_45283 = 0;
    while(AKA_mark("lis===1117###sois===45289###eois===45295###lif===28###soif===1493###eoif===1499###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1117###sois===45289###eois===45295###lif===28###soif===1493###eoif===1499###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (!error))) {
        AKA_BLOCK_LOOP_45283++;
        if (AKA_BLOCK_LOOP_45283 > 1000) {
            //break;
        }
    /*read the code length codes out of 3 * (amount of code length codes) bits*/
    if(AKA_mark("lis===1119###sois===45389###eois===45442###lif===30###soif===1593###eoif===1646###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1119###sois===45389###eois===45442###lif===30###soif===1593###eoif===1646###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (lodepng_gtofl(reader->bp, HCLEN * 3, reader->bitsize)))) {
      AKA_mark("lis===1120###sois===45453###eois===45468###lif===31###soif===1657###eoif===1672###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");ERROR_BREAK(50); /*error: the bit pointer is or will go past the memory*/
    }
else {
AKA_mark("lis===-1119-###sois===-45389-###eois===-4538953-###lif===-30-###soif===-###eoif===-1646-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");
}
    int AKA_BLOCK_LOOP_45539 = 0;
    AKA_mark("lis===1122###sois===45543###eois===45549###lif===33###soif===1747###eoif===1753###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");
for(i = 0; AKA_mark("lis===1122###sois===45550###eois===45560###lif===33###soif===1754###eoif===1764###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1122###sois===45550###eois===45560###lif===33###soif===1754###eoif===1764###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (i != HCLEN)); ({AKA_mark("lis===1122###sois===45562###eois===45565###lif===33###soif===1766###eoif===1769###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");++i;})) {
        AKA_BLOCK_LOOP_45539++;
        if (AKA_BLOCK_LOOP_45539 > 1000) {
            //break;
        }
      AKA_mark("lis===1123###sois===45576###eois===45599###lif===34###soif===1780###eoif===1803###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");ensureBits9(reader, 3); /*out of bounds already checked above */
      AKA_mark("lis===1124###sois===45648###eois===45695###lif===35###soif===1852###eoif===1899###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");bitlen_cl[CLCL_ORDER[i]] = readBits(reader, 3);
    }
    int AKA_BLOCK_LOOP_45708 = 0;
    AKA_mark("lis===1126###sois===45712###eois===45722###lif===37###soif===1916###eoif===1926###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");
for(i = HCLEN; AKA_mark("lis===1126###sois===45723###eois===45749###lif===37###soif===1927###eoif===1953###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1126###sois===45723###eois===45749###lif===37###soif===1927###eoif===1953###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (i != NUM_CODE_LENGTH_CODES)); ({AKA_mark("lis===1126###sois===45751###eois===45754###lif===37###soif===1955###eoif===1958###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");++i;})) {
        AKA_BLOCK_LOOP_45708++;
        if (AKA_BLOCK_LOOP_45708 > 1000) {
            //break;
        }
      AKA_mark("lis===1127###sois===45765###eois===45794###lif===38###soif===1969###eoif===1998###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");bitlen_cl[CLCL_ORDER[i]] = 0;
    }

    AKA_mark("lis===1130###sois===45809###eois===45892###lif===41###soif===2013###eoif===2096###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);
    if(AKA_mark("lis===1131###sois===45901###eois===45906###lif===42###soif===2105###eoif===2110###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1131###sois===45901###eois===45906###lif===42###soif===2105###eoif===2110###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (error))) {
AKA_mark("lis===1131###sois===45908###eois===45914###lif===42###soif===2112###eoif===2118###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");break;
}

else {
AKA_mark("lis===-1131-###sois===-45901-###eois===-459015-###lif===-42-###soif===-###eoif===-2110-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");
}

    /*now we can use this tree to read the lengths for the tree that this function will return*/
    AKA_mark("lis===1134###sois===46020###eois===46103###lif===45###soif===2224###eoif===2307###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");bitlen_ll = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
    AKA_mark("lis===1135###sois===46109###eois===46187###lif===46###soif===2313###eoif===2391###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");bitlen_d = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
    if(AKA_mark("lis===1136###sois===46196###eois===46219###lif===47###soif===2400###eoif===2423###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && ((AKA_mark("lis===1136###sois===46196###eois===46206###lif===47###soif===2400###eoif===2410###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (!bitlen_ll)) || (AKA_mark("lis===1136###sois===46210###eois===46219###lif===47###soif===2414###eoif===2423###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (!bitlen_d)))) {AKA_mark("lis===1136###sois===46221###eois===46251###lif===47###soif===2425###eoif===2455###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");AKA_mark("lis===1136###sois===46221###eois===46251###lif===47###soif===2425###eoif===2455###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");ERROR_BREAK(83 /*alloc fail*/)}
else {
AKA_mark("lis===-1136-###sois===-46196-###eois===-4619623-###lif===-47-###soif===-###eoif===-2423-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");
};
    AKA_mark("lis===1137###sois===46258###eois===46334###lif===48###soif===2462###eoif===2538###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");lodepng_memset(bitlen_ll, 0, NUM_DEFLATE_CODE_SYMBOLS * sizeof(*bitlen_ll));
    AKA_mark("lis===1138###sois===46340###eois===46410###lif===49###soif===2544###eoif===2614###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");lodepng_memset(bitlen_d, 0, NUM_DISTANCE_SYMBOLS * sizeof(*bitlen_d));

    /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
    AKA_mark("lis===1141###sois===46534###eois===46540###lif===52###soif===2738###eoif===2744###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");i = 0;
    int AKA_BLOCK_LOOP_46546 = 0;
    while(AKA_mark("lis===1142###sois===46552###eois===46568###lif===53###soif===2756###eoif===2772###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1142###sois===46552###eois===46568###lif===53###soif===2756###eoif===2772###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (i < HLIT + HDIST))) {
        AKA_BLOCK_LOOP_46546++;
        if (AKA_BLOCK_LOOP_46546 > 1000) {
            //break;
        }
      AKA_mark("lis===1143###sois===46579###eois===46593###lif===54###soif===2783###eoif===2797###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");unsigned code;
      AKA_mark("lis===1144###sois===46601###eois===46626###lif===55###soif===2805###eoif===2830###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");ensureBits25(reader, 22); /* up to 15 bits for huffman code, up to 7 extra bits below*/
      AKA_mark("lis===1145###sois===46696###eois===46741###lif===56###soif===2900###eoif===2945###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");code = huffmanDecodeSymbol(reader, &tree_cl);
      if(AKA_mark("lis===1146###sois===46752###eois===46762###lif===57###soif===2956###eoif===2966###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1146###sois===46752###eois===46762###lif===57###soif===2956###eoif===2966###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (code <= 15))) /*a length code*/ {
        if(AKA_mark("lis===1147###sois===46796###eois===46804###lif===58###soif===3000###eoif===3008###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1147###sois===46796###eois===46804###lif===58###soif===3000###eoif===3008###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (i < HLIT))) {
AKA_mark("lis===1147###sois===46806###eois===46826###lif===58###soif===3010###eoif===3030###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");bitlen_ll[i] = code;
}

        else {
AKA_mark("lis===1148###sois===46841###eois===46867###lif===59###soif===3045###eoif===3071###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");bitlen_d[i - HLIT] = code;
}

        AKA_mark("lis===1149###sois===46877###eois===46881###lif===60###soif===3081###eoif===3085###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");++i;
      } else {
if(AKA_mark("lis===1150###sois===46899###eois===46909###lif===61###soif===3103###eoif===3113###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1150###sois===46899###eois===46909###lif===61###soif===3103###eoif===3113###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (code == 16))) /*repeat previous*/ {
        AKA_mark("lis===1151###sois===46942###eois===46965###lif===62###soif===3146###eoif===3169###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
        AKA_mark("lis===1152###sois===47032###eois===47047###lif===63###soif===3236###eoif===3251###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");unsigned value; /*set value to the previous code*/

        if(AKA_mark("lis===1154###sois===47097###eois===47103###lif===65###soif===3301###eoif===3307###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1154###sois===47097###eois===47103###lif===65###soif===3301###eoif===3307###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (i == 0))) {AKA_mark("lis===1154###sois===47105###eois===47120###lif===65###soif===3309###eoif===3324###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");AKA_mark("lis===1154###sois===47105###eois===47120###lif===65###soif===3309###eoif===3324###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");ERROR_BREAK(54)}
else {
AKA_mark("lis===-1154-###sois===-47097-###eois===-470976-###lif===-65-###soif===-###eoif===-3307-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");
}; /*can't repeat previous if i is 0*/

        AKA_mark("lis===1156###sois===47169###eois===47202###lif===67###soif===3373###eoif===3406###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");replength += readBits(reader, 2);

        if(AKA_mark("lis===1158###sois===47217###eois===47229###lif===69###soif===3421###eoif===3433###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1158###sois===47217###eois===47229###lif===69###soif===3421###eoif===3433###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (i < HLIT + 1))) {
AKA_mark("lis===1158###sois===47231###eois===47256###lif===69###soif===3435###eoif===3460###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");value = bitlen_ll[i - 1];
}

        else {
AKA_mark("lis===1159###sois===47271###eois===47302###lif===70###soif===3475###eoif===3506###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");value = bitlen_d[i - HLIT - 1];
}

        /*repeat this value in the next lengths*/
        int AKA_BLOCK_LOOP_47363 = 0;
    AKA_mark("lis===1161###sois===47367###eois===47373###lif===72###soif===3571###eoif===3577###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");
for(n = 0; AKA_mark("lis===1161###sois===47374###eois===47387###lif===72###soif===3578###eoif===3591###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1161###sois===47374###eois===47387###lif===72###soif===3578###eoif===3591###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (n < replength)); ({AKA_mark("lis===1161###sois===47389###eois===47392###lif===72###soif===3593###eoif===3596###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");++n;})) {
        AKA_BLOCK_LOOP_47363++;
        if (AKA_BLOCK_LOOP_47363 > 1000) {
            //break;
        }
          if(AKA_mark("lis===1162###sois===47410###eois===47427###lif===73###soif===3614###eoif===3631###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1162###sois===47410###eois===47427###lif===73###soif===3614###eoif===3631###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (i >= HLIT + HDIST))) {AKA_mark("lis===1162###sois===47429###eois===47444###lif===73###soif===3633###eoif===3648###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");AKA_mark("lis===1162###sois===47429###eois===47444###lif===73###soif===3633###eoif===3648###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");ERROR_BREAK(13)}
else {
AKA_mark("lis===-1162-###sois===-47410-###eois===-4741017-###lif===-73-###soif===-###eoif===-3631-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");
}; /*error: i is larger than the amount of codes*/
          if(AKA_mark("lis===1163###sois===47508###eois===47516###lif===74###soif===3712###eoif===3720###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1163###sois===47508###eois===47516###lif===74###soif===3712###eoif===3720###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (i < HLIT))) {
AKA_mark("lis===1163###sois===47518###eois===47539###lif===74###soif===3722###eoif===3743###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");bitlen_ll[i] = value;
}

          else {
AKA_mark("lis===1164###sois===47556###eois===47583###lif===75###soif===3760###eoif===3787###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");bitlen_d[i - HLIT] = value;
}

          AKA_mark("lis===1165###sois===47595###eois===47599###lif===76###soif===3799###eoif===3803###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");++i;
        }
      } else {
if(AKA_mark("lis===1167###sois===47628###eois===47638###lif===78###soif===3832###eoif===3842###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1167###sois===47628###eois===47638###lif===78###soif===3832###eoif===3842###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (code == 17))) /*repeat "0" 3-10 times*/ {
        AKA_mark("lis===1168###sois===47677###eois===47700###lif===79###soif===3881###eoif===3904###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");unsigned replength = 3; /*read in the bits that indicate repeat length*/
        AKA_mark("lis===1169###sois===47759###eois===47792###lif===80###soif===3963###eoif===3996###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");replength += readBits(reader, 3);

        /*repeat this value in the next lengths*/
        int AKA_BLOCK_LOOP_47855 = 0;
    AKA_mark("lis===1172###sois===47859###eois===47865###lif===83###soif===4063###eoif===4069###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");
for(n = 0; AKA_mark("lis===1172###sois===47866###eois===47879###lif===83###soif===4070###eoif===4083###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1172###sois===47866###eois===47879###lif===83###soif===4070###eoif===4083###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (n < replength)); ({AKA_mark("lis===1172###sois===47881###eois===47884###lif===83###soif===4085###eoif===4088###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");++n;})) {
        AKA_BLOCK_LOOP_47855++;
        if (AKA_BLOCK_LOOP_47855 > 1000) {
            //break;
        }
          if(AKA_mark("lis===1173###sois===47902###eois===47919###lif===84###soif===4106###eoif===4123###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1173###sois===47902###eois===47919###lif===84###soif===4106###eoif===4123###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (i >= HLIT + HDIST))) {AKA_mark("lis===1173###sois===47921###eois===47936###lif===84###soif===4125###eoif===4140###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");AKA_mark("lis===1173###sois===47921###eois===47936###lif===84###soif===4125###eoif===4140###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");ERROR_BREAK(14)}
else {
AKA_mark("lis===-1173-###sois===-47902-###eois===-4790217-###lif===-84-###soif===-###eoif===-4123-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");
}; /*error: i is larger than the amount of codes*/

          if(AKA_mark("lis===1175###sois===48002###eois===48010###lif===86###soif===4206###eoif===4214###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1175###sois===48002###eois===48010###lif===86###soif===4206###eoif===4214###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (i < HLIT))) {
AKA_mark("lis===1175###sois===48012###eois===48029###lif===86###soif===4216###eoif===4233###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");bitlen_ll[i] = 0;
}

          else {
AKA_mark("lis===1176###sois===48046###eois===48069###lif===87###soif===4250###eoif===4273###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");bitlen_d[i - HLIT] = 0;
}

          AKA_mark("lis===1177###sois===48081###eois===48085###lif===88###soif===4285###eoif===4289###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");++i;
        }
      } else {
if(AKA_mark("lis===1179###sois===48114###eois===48124###lif===90###soif===4318###eoif===4328###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1179###sois===48114###eois===48124###lif===90###soif===4318###eoif===4328###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (code == 18))) /*repeat "0" 11-138 times*/ {
        AKA_mark("lis===1180###sois===48165###eois===48189###lif===91###soif===4369###eoif===4393###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");unsigned replength = 11; /*read in the bits that indicate repeat length*/
        AKA_mark("lis===1181###sois===48248###eois===48281###lif===92###soif===4452###eoif===4485###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");replength += readBits(reader, 7);

        /*repeat this value in the next lengths*/
        int AKA_BLOCK_LOOP_48344 = 0;
    AKA_mark("lis===1184###sois===48348###eois===48354###lif===95###soif===4552###eoif===4558###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");
for(n = 0; AKA_mark("lis===1184###sois===48355###eois===48368###lif===95###soif===4559###eoif===4572###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1184###sois===48355###eois===48368###lif===95###soif===4559###eoif===4572###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (n < replength)); ({AKA_mark("lis===1184###sois===48370###eois===48373###lif===95###soif===4574###eoif===4577###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");++n;})) {
        AKA_BLOCK_LOOP_48344++;
        if (AKA_BLOCK_LOOP_48344 > 1000) {
            //break;
        }
          if(AKA_mark("lis===1185###sois===48391###eois===48408###lif===96###soif===4595###eoif===4612###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1185###sois===48391###eois===48408###lif===96###soif===4595###eoif===4612###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (i >= HLIT + HDIST))) {AKA_mark("lis===1185###sois===48410###eois===48425###lif===96###soif===4614###eoif===4629###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");AKA_mark("lis===1185###sois===48410###eois===48425###lif===96###soif===4614###eoif===4629###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");ERROR_BREAK(15)}
else {
AKA_mark("lis===-1185-###sois===-48391-###eois===-4839117-###lif===-96-###soif===-###eoif===-4612-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");
}; /*error: i is larger than the amount of codes*/

          if(AKA_mark("lis===1187###sois===48491###eois===48499###lif===98###soif===4695###eoif===4703###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1187###sois===48491###eois===48499###lif===98###soif===4695###eoif===4703###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (i < HLIT))) {
AKA_mark("lis===1187###sois===48501###eois===48518###lif===98###soif===4705###eoif===4722###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");bitlen_ll[i] = 0;
}

          else {
AKA_mark("lis===1188###sois===48535###eois===48558###lif===99###soif===4739###eoif===4762###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");bitlen_d[i - HLIT] = 0;
}

          AKA_mark("lis===1189###sois===48570###eois===48574###lif===100###soif===4774###eoif===4778###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");++i;
        }
      } else /*if(code == INVALIDSYMBOL)*/ {
        AKA_mark("lis===1192###sois===48641###eois===48656###lif===103###soif===4845###eoif===4860###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");ERROR_BREAK(16); /*error: tried to read disallowed huffman symbol*/
      }
}

}

}

      /*check if any of the ensureBits above went out of bounds*/
      if(AKA_mark("lis===1195###sois===48795###eois===48823###lif===106###soif===4999###eoif===5027###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1195###sois===48795###eois===48823###lif===106###soif===4999###eoif===5027###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (reader->bp > reader->bitsize))) {
        /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
        (10=no endcode, 11=wrong jump outside of tree)*/
        /* TODO: revise error codes 10,11,50: the above comment is no longer valid */
        AKA_mark("lis===1199###sois===49083###eois===49098###lif===110###soif===5287###eoif===5302###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
      }
else {
AKA_mark("lis===-1195-###sois===-48795-###eois===-4879528-###lif===-106-###soif===-###eoif===-5027-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");
}
    }
    if(AKA_mark("lis===1202###sois===49165###eois===49170###lif===113###soif===5369###eoif===5374###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1202###sois===49165###eois===49170###lif===113###soif===5369###eoif===5374###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (error))) {
AKA_mark("lis===1202###sois===49172###eois===49178###lif===113###soif===5376###eoif===5382###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");break;
}

else {
AKA_mark("lis===-1202-###sois===-49165-###eois===-491655-###lif===-113-###soif===-###eoif===-5374-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");
}

    if(AKA_mark("lis===1204###sois===49189###eois===49208###lif===115###soif===5393###eoif===5412###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1204###sois===49189###eois===49208###lif===115###soif===5393###eoif===5412###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (bitlen_ll[256] == 0))) {AKA_mark("lis===1204###sois===49210###eois===49225###lif===115###soif===5414###eoif===5429###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");AKA_mark("lis===1204###sois===49210###eois===49225###lif===115###soif===5414###eoif===5429###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");ERROR_BREAK(64)}
else {
AKA_mark("lis===-1204-###sois===-49189-###eois===-4918919-###lif===-115-###soif===-###eoif===-5412-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");
}; /*the length of the end code 256 must be larger than 0*/

    /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
    AKA_mark("lis===1207###sois===49391###eois===49477###lif===118###soif===5595###eoif===5681###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);
    if(AKA_mark("lis===1208###sois===49486###eois===49491###lif===119###soif===5690###eoif===5695###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (AKA_mark("lis===1208###sois===49486###eois===49491###lif===119###soif===5690###eoif===5695###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)") && (error))) {
AKA_mark("lis===1208###sois===49493###eois===49499###lif===119###soif===5697###eoif===5703###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");break;
}

else {
AKA_mark("lis===-1208-###sois===-49486-###eois===-494865-###lif===-119-###soif===-###eoif===-5695-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");
}
    AKA_mark("lis===1209###sois===49505###eois===49585###lif===120###soif===5709###eoif===5789###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);

    AKA_mark("lis===1211###sois===49593###eois===49599###lif===122###soif===5797###eoif===5803###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");break; /*end of error-while*/
  }

  AKA_mark("lis===1214###sois===49633###eois===49657###lif===125###soif===5837###eoif===5861###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");lodepng_free(bitlen_cl);
  AKA_mark("lis===1215###sois===49661###eois===49685###lif===126###soif===5865###eoif===5889###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");lodepng_free(bitlen_ll);
  AKA_mark("lis===1216###sois===49689###eois===49712###lif===127###soif===5893###eoif===5916###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");lodepng_free(bitlen_d);
  AKA_mark("lis===1217###sois===49716###eois===49746###lif===128###soif===5920###eoif===5950###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");HuffmanTree_cleanup(&tree_cl);

  AKA_mark("lis===1219###sois===49752###eois===49765###lif===130###soif===5956###eoif===5969###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getTreeInflateDynamic(HuffmanTree*,HuffmanTree*,LodePNGBitReader*)");return error;
}

/*inflate a block with dynamic of fixed Huffman tree. btype must be 1 or 2.*/
/** Instrumented function inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t) */
static unsigned inflateHuffmanBlock(ucvector* out, LodePNGBitReader* reader,
                                    unsigned btype, size_t max_output_size) /* << Aka begin of function unsigned inflateHuffmanBlock(ucvector* out, LodePNGBitReader* reader,
                                    unsigned btype, size_t max_output_size) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.inflateHuffmanBlock.49867.stub"

  AKA_mark("lis===1225###sois===50010###eois===50029###lif===2###soif===159###eoif===178###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");unsigned error = 0;
  AKA_mark("lis===1226###sois===50033###eois===50053###lif===3###soif===182###eoif===202###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");HuffmanTree tree_ll; /*the huffman tree for literal and length codes*/
  AKA_mark("lis===1227###sois===50107###eois===50126###lif===4###soif===256###eoif===275###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");HuffmanTree tree_d; /*the huffman tree for distance codes*/
  AKA_mark("lis===1228###sois===50170###eois===50203###lif===5###soif===319###eoif===352###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");const size_t reserved_size = 260; /* must be at least 258 for max length, and a few extra for adding a few extra literals */
  AKA_mark("lis===1229###sois===50298###eois===50311###lif===6###soif===447###eoif===460###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");int done = 0;

  if(AKA_mark("lis===1231###sois===50320###eois===50369###lif===8###soif===469###eoif===518###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (AKA_mark("lis===1231###sois===50320###eois===50369###lif===8###soif===469###eoif===518###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (!ucvector_reserve(out, out->size + reserved_size)))) {
AKA_mark("lis===1231###sois===50371###eois===50381###lif===8###soif===520###eoif===530###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");return 83;
}

else {
AKA_mark("lis===-1231-###sois===-50320-###eois===-5032049-###lif===-8-###soif===-###eoif===-518-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");
} /*alloc fail*/

  AKA_mark("lis===1233###sois===50402###eois===50429###lif===10###soif===551###eoif===578###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");HuffmanTree_init(&tree_ll);
  AKA_mark("lis===1234###sois===50433###eois===50459###lif===11###soif===582###eoif===608###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");HuffmanTree_init(&tree_d);

  if(AKA_mark("lis===1236###sois===50468###eois===50478###lif===13###soif===617###eoif===627###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (AKA_mark("lis===1236###sois===50468###eois===50478###lif===13###soif===617###eoif===627###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (btype == 1))) {
AKA_mark("lis===1236###sois===50480###eois===50527###lif===13###soif===629###eoif===676###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");error = getTreeInflateFixed(&tree_ll, &tree_d);
}

  else /*if(btype == 2)*/ {
AKA_mark("lis===1237###sois===50555###eois===50612###lif===14###soif===704###eoif===761###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");error = getTreeInflateDynamic(&tree_ll, &tree_d, reader);
}



  int AKA_BLOCK_LOOP_50620 = 0;
    while(AKA_mark("lis===1240###sois===50626###eois===50641###lif===17###soif===775###eoif===790###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && ((AKA_mark("lis===1240###sois===50626###eois===50632###lif===17###soif===775###eoif===781###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (!error)) && (AKA_mark("lis===1240###sois===50636###eois===50641###lif===17###soif===785###eoif===790###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (!done)))) /*decode all symbols until end reached, breaks at end code*/ {
        AKA_BLOCK_LOOP_50620++;
        if (AKA_BLOCK_LOOP_50620 > 1000) {
            //break;
        }
    /*code_ll is literal, length or end code*/
    AKA_mark("lis===1242###sois===50759###eois===50776###lif===19###soif===908###eoif===925###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");unsigned code_ll;
    /* ensure enough bits for 2 huffman code reads (15 bits each): if the first is a literal, a second literal is read at once. This
    appears to be slightly faster, than ensuring 20 bits here for 1 huffman symbol and the potential 5 extra bits for the length symbol.*/
    AKA_mark("lis===1245###sois===51056###eois===51081###lif===22###soif===1205###eoif===1230###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");ensureBits32(reader, 30);
    AKA_mark("lis===1246###sois===51087###eois===51135###lif===23###soif===1236###eoif===1284###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");code_ll = huffmanDecodeSymbol(reader, &tree_ll);
    if(AKA_mark("lis===1247###sois===51144###eois===51158###lif===24###soif===1293###eoif===1307###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (AKA_mark("lis===1247###sois===51144###eois===51158###lif===24###soif===1293###eoif===1307###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (code_ll <= 255))) {
      /*slightly faster code path if multiple literals in a row*/
      AKA_mark("lis===1249###sois===51236###eois===51284###lif===26###soif===1385###eoif===1433###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");out->data[out->size++] = (unsigned char)code_ll;
      AKA_mark("lis===1250###sois===51292###eois===51340###lif===27###soif===1441###eoif===1489###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");code_ll = huffmanDecodeSymbol(reader, &tree_ll);
    }
else {
AKA_mark("lis===-1247-###sois===-51144-###eois===-5114414-###lif===-24-###soif===-###eoif===-1307-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");
}
    if(AKA_mark("lis===1252###sois===51356###eois===51370###lif===29###soif===1505###eoif===1519###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (AKA_mark("lis===1252###sois===51356###eois===51370###lif===29###soif===1505###eoif===1519###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (code_ll <= 255))) /*literal symbol*/ {
      AKA_mark("lis===1253###sois===51400###eois===51448###lif===30###soif===1549###eoif===1597###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");out->data[out->size++] = (unsigned char)code_ll;
    } else {
if(AKA_mark("lis===1254###sois===51464###eois===51535###lif===31###soif===1613###eoif===1684###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && ((AKA_mark("lis===1254###sois===51464###eois===51498###lif===31###soif===1613###eoif===1647###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (code_ll >= FIRST_LENGTH_CODE_INDEX)) && (AKA_mark("lis===1254###sois===51502###eois===51535###lif===31###soif===1651###eoif===1684###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (code_ll <= LAST_LENGTH_CODE_INDEX)))) /*length code*/ {
      AKA_mark("lis===1255###sois===51562###eois===51588###lif===32###soif===1711###eoif===1737###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");unsigned code_d, distance;
      AKA_mark("lis===1256###sois===51596###eois===51636###lif===33###soif===1745###eoif===1785###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
      AKA_mark("lis===1257###sois===51683###eois===51714###lif===34###soif===1832###eoif===1863###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");size_t start, backward, length;

      /*part 1: get length base*/
      AKA_mark("lis===1260###sois===51759###eois===51814###lif===37###soif===1908###eoif===1963###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];

      /*part 2: get extra bits and add the value of that to length*/
      AKA_mark("lis===1263###sois===51894###eois===51958###lif===40###soif===2043###eoif===2107###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
      if(AKA_mark("lis===1264###sois===51969###eois===51988###lif===41###soif===2118###eoif===2137###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (AKA_mark("lis===1264###sois===51969###eois===51988###lif===41###soif===2118###eoif===2137###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (numextrabits_l != 0))) {
        /* bits already ensured above */
        AKA_mark("lis===1266###sois===52043###eois===52067###lif===43###soif===2192###eoif===2216###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");ensureBits25(reader, 5);
        AKA_mark("lis===1267###sois===52077###eois===52120###lif===44###soif===2226###eoif===2269###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");length += readBits(reader, numextrabits_l);
      }
else {
AKA_mark("lis===-1264-###sois===-51969-###eois===-5196919-###lif===-41-###soif===-###eoif===-2137-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");
}

      /*part 3: get distance code*/
      AKA_mark("lis===1271###sois===52176###eois===52201###lif===48###soif===2325###eoif===2350###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");ensureBits32(reader, 28); /* up to 15 for the huffman symbol, up to 13 for the extra bits */
      AKA_mark("lis===1272###sois===52276###eois===52322###lif===49###soif===2425###eoif===2471###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");code_d = huffmanDecodeSymbol(reader, &tree_d);
      if(AKA_mark("lis===1273###sois===52333###eois===52344###lif===50###soif===2482###eoif===2493###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (AKA_mark("lis===1273###sois===52333###eois===52344###lif===50###soif===2482###eoif===2493###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (code_d > 29))) {
        if(AKA_mark("lis===1274###sois===52360###eois===52372###lif===51###soif===2509###eoif===2521###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (AKA_mark("lis===1274###sois===52360###eois===52372###lif===51###soif===2509###eoif===2521###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (code_d <= 31))) {
          AKA_mark("lis===1275###sois===52387###eois===52402###lif===52###soif===2536###eoif===2551###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");ERROR_BREAK(18); /*error: invalid distance code (30-31 are never used)*/
        } else /* if(code_d == INVALIDSYMBOL) */{
          AKA_mark("lis===1277###sois===52522###eois===52537###lif===54###soif===2671###eoif===2686###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");ERROR_BREAK(16); /*error: tried to read disallowed huffman symbol*/
        }
      }
else {
AKA_mark("lis===-1273-###sois===-52333-###eois===-5233311-###lif===-50-###soif===-###eoif===-2493-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");
}
      AKA_mark("lis===1280###sois===52617###eois===52649###lif===57###soif===2766###eoif===2798###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");distance = DISTANCEBASE[code_d];

      /*part 4: get extra bits from distance*/
      AKA_mark("lis===1283###sois===52707###eois===52746###lif===60###soif===2856###eoif===2895###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");numextrabits_d = DISTANCEEXTRA[code_d];
      if(AKA_mark("lis===1284###sois===52757###eois===52776###lif===61###soif===2906###eoif===2925###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (AKA_mark("lis===1284###sois===52757###eois===52776###lif===61###soif===2906###eoif===2925###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (numextrabits_d != 0))) {
        /* bits already ensured above */
        AKA_mark("lis===1286###sois===52831###eois===52876###lif===63###soif===2980###eoif===3025###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");distance += readBits(reader, numextrabits_d);
      }
else {
AKA_mark("lis===-1284-###sois===-52757-###eois===-5275719-###lif===-61-###soif===-###eoif===-2925-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");
}

      /*part 5: fill in all the out[n] values based on the length and dist*/
      AKA_mark("lis===1290###sois===52973###eois===52991###lif===67###soif===3122###eoif===3140###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");start = out->size;
      if(AKA_mark("lis===1291###sois===53002###eois===53018###lif===68###soif===3151###eoif===3167###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (AKA_mark("lis===1291###sois===53002###eois===53018###lif===68###soif===3151###eoif===3167###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (distance > start))) {AKA_mark("lis===1291###sois===53020###eois===53035###lif===68###soif===3169###eoif===3184###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");AKA_mark("lis===1291###sois===53020###eois===53035###lif===68###soif===3169###eoif===3184###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");ERROR_BREAK(52)}
else {
AKA_mark("lis===-1291-###sois===-53002-###eois===-5300216-###lif===-68-###soif===-###eoif===-3167-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");
}; /*too long backward distance*/
      AKA_mark("lis===1292###sois===53075###eois===53103###lif===69###soif===3224###eoif===3252###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");backward = start - distance;

      AKA_mark("lis===1294###sois===53113###eois===53133###lif===71###soif===3262###eoif===3282###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");out->size += length;
      if(AKA_mark("lis===1295###sois===53144###eois===53161###lif===72###soif===3293###eoif===3310###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (AKA_mark("lis===1295###sois===53144###eois===53161###lif===72###soif===3293###eoif===3310###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (distance < length))) {
        AKA_mark("lis===1296###sois===53174###eois===53189###lif===73###soif===3323###eoif===3338###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");size_t forward;
        AKA_mark("lis===1297###sois===53199###eois===53265###lif===74###soif===3348###eoif===3414###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");lodepng_memcpy(out->data + start, out->data + backward, distance);
        AKA_mark("lis===1298###sois===53275###eois===53293###lif===75###soif===3424###eoif===3442###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");start += distance;
        int AKA_BLOCK_LOOP_53303 = 0;
    AKA_mark("lis===1299###sois===53307###eois===53326###lif===76###soif===3456###eoif===3475###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");
for(forward = distance; AKA_mark("lis===1299###sois===53327###eois===53343###lif===76###soif===3476###eoif===3492###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (AKA_mark("lis===1299###sois===53327###eois===53343###lif===76###soif===3476###eoif===3492###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (forward < length)); ({AKA_mark("lis===1299###sois===53345###eois===53354###lif===76###soif===3494###eoif===3503###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");++forward;})) {
        AKA_BLOCK_LOOP_53303++;
        if (AKA_BLOCK_LOOP_53303 > 1000) {
            //break;
        }
          AKA_mark("lis===1300###sois===53369###eois===53412###lif===77###soif===3518###eoif===3561###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");out->data[start++] = out->data[backward++];
        }
      } else {
        AKA_mark("lis===1303###sois===53449###eois===53513###lif===80###soif===3598###eoif===3662###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");lodepng_memcpy(out->data + start, out->data + backward, length);
      }
    } else {
if(AKA_mark("lis===1305###sois===53538###eois===53552###lif===82###soif===3687###eoif===3701###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (AKA_mark("lis===1305###sois===53538###eois===53552###lif===82###soif===3687###eoif===3701###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (code_ll == 256))) {
      AKA_mark("lis===1306###sois===53563###eois===53572###lif===83###soif===3712###eoif===3721###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");done = 1; /*end code, finish the loop*/
    } else /*if(code_ll == INVALIDSYMBOL)*/ {
      AKA_mark("lis===1308###sois===53657###eois===53672###lif===85###soif===3806###eoif===3821###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");ERROR_BREAK(16); /*error: tried to read disallowed huffman symbol*/
    }
}

}

    if(AKA_mark("lis===1310###sois===53740###eois===53782###lif===87###soif===3889###eoif===3931###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (AKA_mark("lis===1310###sois===53740###eois===53782###lif===87###soif===3889###eoif===3931###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (out->allocsize - out->size < reserved_size))) {
      if(AKA_mark("lis===1311###sois===53796###eois===53845###lif===88###soif===3945###eoif===3994###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (AKA_mark("lis===1311###sois===53796###eois===53845###lif===88###soif===3945###eoif===3994###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (!ucvector_reserve(out, out->size + reserved_size)))) {AKA_mark("lis===1311###sois===53847###eois===53862###lif===88###soif===3996###eoif===4011###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");AKA_mark("lis===1311###sois===53847###eois===53862###lif===88###soif===3996###eoif===4011###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");ERROR_BREAK(83)}
else {
AKA_mark("lis===-1311-###sois===-53796-###eois===-5379649-###lif===-88-###soif===-###eoif===-3994-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");
}; /*alloc fail*/
    }
else {
AKA_mark("lis===-1310-###sois===-53740-###eois===-5374042-###lif===-87-###soif===-###eoif===-3931-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");
}
    /*check if any of the ensureBits above went out of bounds*/
    if(AKA_mark("lis===1314###sois===53959###eois===53987###lif===91###soif===4108###eoif===4136###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (AKA_mark("lis===1314###sois===53959###eois===53987###lif===91###soif===4108###eoif===4136###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (reader->bp > reader->bitsize))) {
      /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
      (10=no endcode, 11=wrong jump outside of tree)*/
      /* TODO: revise error codes 10,11,50: the above comment is no longer valid */
      AKA_mark("lis===1318###sois===54239###eois===54254###lif===95###soif===4388###eoif===4403###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");ERROR_BREAK(51); /*error, bit pointer jumps past memory*/
    }
else {
AKA_mark("lis===-1314-###sois===-53959-###eois===-5395928-###lif===-91-###soif===-###eoif===-4136-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");
}
    if(AKA_mark("lis===1320###sois===54312###eois===54358###lif===97###soif===4461###eoif===4507###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && ((AKA_mark("lis===1320###sois===54312###eois===54327###lif===97###soif===4461###eoif===4476###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (max_output_size)) && (AKA_mark("lis===1320###sois===54331###eois===54358###lif===97###soif===4480###eoif===4507###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)") && (out->size > max_output_size)))) {
      AKA_mark("lis===1321###sois===54369###eois===54385###lif===98###soif===4518###eoif===4534###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");ERROR_BREAK(109); /*error, larger than max size*/
    }
else {
AKA_mark("lis===-1320-###sois===-54312-###eois===-5431246-###lif===-97-###soif===-###eoif===-4507-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");
}
  }

  AKA_mark("lis===1325###sois===54436###eois===54466###lif===102###soif===4585###eoif===4615###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");HuffmanTree_cleanup(&tree_ll);
  AKA_mark("lis===1326###sois===54470###eois===54499###lif===103###soif===4619###eoif===4648###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");HuffmanTree_cleanup(&tree_d);

  AKA_mark("lis===1328###sois===54505###eois===54518###lif===105###soif===4654###eoif===4667###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateHuffmanBlock(ucvector*,LodePNGBitReader*,unsigned,size_t)");return error;
}

/** Instrumented function inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*) */
static unsigned inflateNoCompression(ucvector* out, LodePNGBitReader* reader,
                                     const LodePNGDecompressSettings* settings) /* << Aka begin of function unsigned inflateNoCompression(ucvector* out, LodePNGBitReader* reader,
                                     const LodePNGDecompressSettings* settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.inflateNoCompression.54541.stub"

  AKA_mark("lis===1333###sois===54689###eois===54704###lif===2###soif===164###eoif===179###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");size_t bytepos;
  AKA_mark("lis===1334###sois===54708###eois===54735###lif===3###soif===183###eoif===210###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");size_t size = reader->size;
  AKA_mark("lis===1335###sois===54739###eois===54769###lif===4###soif===214###eoif===244###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");unsigned LEN, NLEN, error = 0;

  /*go to first boundary of byte*/
  AKA_mark("lis===1338###sois===54811###eois===54845###lif===7###soif===286###eoif===320###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");bytepos = (reader->bp + 7u) >> 3u;

  /*read LEN (2 bytes) and NLEN (2 bytes)*/
  if(AKA_mark("lis===1341###sois===54899###eois===54918###lif===10###soif===374###eoif===393###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)") && (AKA_mark("lis===1341###sois===54899###eois===54918###lif===10###soif===374###eoif===393###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)") && (bytepos + 4 >= size))) {
AKA_mark("lis===1341###sois===54920###eois===54930###lif===10###soif===395###eoif===405###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");return 52;
}

else {
AKA_mark("lis===-1341-###sois===-54899-###eois===-5489919-###lif===-10-###soif===-###eoif===-393-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");
} /*error, bit pointer will jump past memory*/
  AKA_mark("lis===1342###sois===54979###eois===55063###lif===11###soif===454###eoif===538###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");LEN = (unsigned)reader->data[bytepos] + ((unsigned)reader->data[bytepos + 1] << 8u); AKA_mark("lis===1342###sois===55064###eois===55077###lif===11###soif===539###eoif===552###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");bytepos += 2;
  AKA_mark("lis===1343###sois===55081###eois===55166###lif===12###soif===556###eoif===641###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");NLEN = (unsigned)reader->data[bytepos] + ((unsigned)reader->data[bytepos + 1] << 8u); AKA_mark("lis===1343###sois===55167###eois===55180###lif===12###soif===642###eoif===655###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");bytepos += 2;

  /*check if 16-bit NLEN is really the one's complement of LEN*/
  if(AKA_mark("lis===1346###sois===55255###eois===55300###lif===15###soif===730###eoif===775###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)") && ((AKA_mark("lis===1346###sois===55255###eois===55277###lif===15###soif===730###eoif===752###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)") && (!settings->ignore_nlen)) && (AKA_mark("lis===1346###sois===55281###eois===55300###lif===15###soif===756###eoif===775###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)") && (LEN + NLEN != 65535)))) {
    AKA_mark("lis===1347###sois===55309###eois===55319###lif===16###soif===784###eoif===794###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");return 21; /*error: NLEN is not one's complement of LEN*/
  }
else {
AKA_mark("lis===-1346-###sois===-55255-###eois===-5525545-###lif===-15-###soif===-###eoif===-775-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");
}

  if(AKA_mark("lis===1350###sois===55380###eois===55418###lif===19###soif===855###eoif===893###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)") && (AKA_mark("lis===1350###sois===55380###eois===55418###lif===19###soif===855###eoif===893###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)") && (!ucvector_resize(out, out->size + LEN)))) {
AKA_mark("lis===1350###sois===55420###eois===55430###lif===19###soif===895###eoif===905###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");return 83;
}

else {
AKA_mark("lis===-1350-###sois===-55380-###eois===-5538038-###lif===-19-###soif===-###eoif===-893-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");
} /*alloc fail*/

  /*read the literal data: LEN bytes are now stored in the out buffer*/
  if(AKA_mark("lis===1353###sois===55527###eois===55547###lif===22###soif===1002###eoif===1022###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)") && (AKA_mark("lis===1353###sois===55527###eois===55547###lif===22###soif===1002###eoif===1022###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)") && (bytepos + LEN > size))) {
AKA_mark("lis===1353###sois===55549###eois===55559###lif===22###soif===1024###eoif===1034###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");return 23;
}

else {
AKA_mark("lis===-1353-###sois===-55527-###eois===-5552720-###lif===-22-###soif===-###eoif===-1022-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");
} /*error: reading outside of in buffer*/

  /*out->data can be NULL (when LEN is zero), and arithmetics on NULL ptr is undefined*/
  if (AKA_mark("lis===1356###sois===55699###eois===55702###lif===25###soif===1174###eoif===1177###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)") && (AKA_mark("lis===1356###sois===55699###eois===55702###lif===25###soif===1174###eoif===1177###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)") && (LEN))) {
    AKA_mark("lis===1357###sois===55711###eois===55784###lif===26###soif===1186###eoif===1259###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");lodepng_memcpy(out->data + out->size - LEN, reader->data + bytepos, LEN);
    AKA_mark("lis===1358###sois===55790###eois===55805###lif===27###soif===1265###eoif===1280###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");bytepos += LEN;
  }
else {
AKA_mark("lis===-1356-###sois===-55699-###eois===-556993-###lif===-25-###soif===-###eoif===-1177-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");
}

  AKA_mark("lis===1361###sois===55816###eois===55843###lif===30###soif===1291###eoif===1318###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");reader->bp = bytepos << 3u;

  AKA_mark("lis===1363###sois===55849###eois===55862###lif===32###soif===1324###eoif===1337###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflateNoCompression(ucvector*,LodePNGBitReader*,LodePNGDecompressSettings const*)");return error;
}

/** Instrumented function lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*) */
static unsigned lodepng_inflatev(ucvector* out,
                                 const unsigned char* in, size_t insize,
                                 const LodePNGDecompressSettings* settings) /* << Aka begin of function unsigned lodepng_inflatev(ucvector* out,
                                 const unsigned char* in, size_t insize,
                                 const LodePNGDecompressSettings* settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_inflatev.55885.stub"

  AKA_mark("lis===1369###sois===56073###eois===56093###lif===3###soif===204###eoif===224###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");unsigned BFINAL = 0;
  AKA_mark("lis===1370###sois===56097###eois===56121###lif===4###soif===228###eoif===252###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");LodePNGBitReader reader;
  AKA_mark("lis===1371###sois===56125###eois===56185###lif===5###soif===256###eoif===316###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");unsigned error = LodePNGBitReader_init(&reader, in, insize);

  if(AKA_mark("lis===1373###sois===56194###eois===56199###lif===7###soif===325###eoif===330###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (AKA_mark("lis===1373###sois===56194###eois===56199###lif===7###soif===325###eoif===330###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (error))) {
AKA_mark("lis===1373###sois===56201###eois===56214###lif===7###soif===332###eoif===345###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");return error;
}

else {
AKA_mark("lis===-1373-###sois===-56194-###eois===-561945-###lif===-7-###soif===-###eoif===-330-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");
}

  int AKA_BLOCK_LOOP_56220 = 0;
    while(AKA_mark("lis===1375###sois===56226###eois===56233###lif===9###soif===357###eoif===364###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (AKA_mark("lis===1375###sois===56226###eois===56233###lif===9###soif===357###eoif===364###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (!BFINAL))) {
        AKA_BLOCK_LOOP_56220++;
        if (AKA_BLOCK_LOOP_56220 > 1000) {
            //break;
        }
    AKA_mark("lis===1376###sois===56242###eois===56257###lif===10###soif===373###eoif===388###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");unsigned BTYPE;
    if(AKA_mark("lis===1377###sois===56266###eois===56296###lif===11###soif===397###eoif===427###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (AKA_mark("lis===1377###sois===56266###eois===56296###lif===11###soif===397###eoif===427###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (reader.bitsize - reader.bp < 3))) {
AKA_mark("lis===1377###sois===56298###eois===56308###lif===11###soif===429###eoif===439###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");return 52;
}

else {
AKA_mark("lis===-1377-###sois===-56266-###eois===-5626630-###lif===-11-###soif===-###eoif===-427-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");
} /*error, bit pointer will jump past memory*/
    AKA_mark("lis===1378###sois===56359###eois===56383###lif===12###soif===490###eoif===514###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");ensureBits9(&reader, 3);
    AKA_mark("lis===1379###sois===56389###eois===56419###lif===13###soif===520###eoif===550###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");BFINAL = readBits(&reader, 1);
    AKA_mark("lis===1380###sois===56425###eois===56454###lif===14###soif===556###eoif===585###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");BTYPE = readBits(&reader, 2);

    if(AKA_mark("lis===1382###sois===56465###eois===56475###lif===16###soif===596###eoif===606###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (AKA_mark("lis===1382###sois===56465###eois===56475###lif===16###soif===596###eoif===606###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (BTYPE == 3))) {
AKA_mark("lis===1382###sois===56477###eois===56487###lif===16###soif===608###eoif===618###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");return 20;
}
 /*error: invalid BTYPE*/
    else {
if(AKA_mark("lis===1383###sois===56526###eois===56536###lif===17###soif===657###eoif===667###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (AKA_mark("lis===1383###sois===56526###eois===56536###lif===17###soif===657###eoif===667###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (BTYPE == 0))) {
AKA_mark("lis===1383###sois===56538###eois===56591###lif===17###soif===669###eoif===722###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");error = inflateNoCompression(out, &reader, settings);
}
 /*no compression*/
    else {
AKA_mark("lis===1384###sois===56621###eois===56697###lif===18###soif===752###eoif===828###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");error = inflateHuffmanBlock(out, &reader, BTYPE, settings->max_output_size);
}

}
 /*compression, BTYPE 01 or 10*/
    if(AKA_mark("lis===1385###sois===56738###eois===56814###lif===19###soif===869###eoif===945###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (((AKA_mark("lis===1385###sois===56738###eois===56744###lif===19###soif===869###eoif===875###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (!error)) && (AKA_mark("lis===1385###sois===56748###eois===56773###lif===19###soif===879###eoif===904###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (settings->max_output_size))) && (AKA_mark("lis===1385###sois===56777###eois===56814###lif===19###soif===908###eoif===945###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (out->size > settings->max_output_size)))) {
AKA_mark("lis===1385###sois===56816###eois===56828###lif===19###soif===947###eoif===959###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");error = 109;
}

else {
AKA_mark("lis===-1385-###sois===-56738-###eois===-5673876-###lif===-19-###soif===-###eoif===-945-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");
}
    if(AKA_mark("lis===1386###sois===56837###eois===56842###lif===20###soif===968###eoif===973###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (AKA_mark("lis===1386###sois===56837###eois===56842###lif===20###soif===968###eoif===973###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (error))) {
AKA_mark("lis===1386###sois===56844###eois===56850###lif===20###soif===975###eoif===981###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");break;
}

else {
AKA_mark("lis===-1386-###sois===-56837-###eois===-568375-###lif===-20-###soif===-###eoif===-973-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");
}
  }

  AKA_mark("lis===1389###sois===56861###eois===56874###lif===23###soif===992###eoif===1005###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");return error;
}

/** Instrumented function lodepng_inflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGDecompressSettings const*) */
unsigned lodepng_inflate(unsigned char** out, size_t* outsize,
                         const unsigned char* in, size_t insize,
                         const LodePNGDecompressSettings* settings) /* << Aka begin of function unsigned lodepng_inflate(unsigned char** out, size_t* outsize,
                         const unsigned char* in, size_t insize,
                         const LodePNGDecompressSettings* settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_inflate.56890.stub"

  AKA_mark("lis===1395###sois===57084###eois===57127###lif===3###soif===203###eoif===246###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");ucvector v = ucvector_init(*out, *outsize);
  AKA_mark("lis===1396###sois===57131###eois===57191###lif===4###soif===250###eoif===310###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");unsigned error = lodepng_inflatev(&v, in, insize, settings);
  AKA_mark("lis===1397###sois===57195###eois===57209###lif===5###soif===314###eoif===328###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");*out = v.data;
  AKA_mark("lis===1398###sois===57213###eois===57231###lif===6###soif===332###eoif===350###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");*outsize = v.size;
  AKA_mark("lis===1399###sois===57235###eois===57248###lif===7###soif===354###eoif===367###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");return error;
}

/** Instrumented function inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*) */
static unsigned inflatev(ucvector* out, const unsigned char* in, size_t insize,
                        const LodePNGDecompressSettings* settings) /* << Aka begin of function unsigned inflatev(ucvector* out, const unsigned char* in, size_t insize,
                        const LodePNGDecompressSettings* settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.inflatev.57271.stub"

  if(AKA_mark("lis===1404###sois===57411###eois===57435###lif===2###soif===156###eoif===180###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (AKA_mark("lis===1404###sois===57411###eois===57435###lif===2###soif===156###eoif===180###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (settings->custom_inflate))) {
    AKA_mark("lis===1405###sois===57444###eois===57532###lif===3###soif===189###eoif===277###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");unsigned error = settings->custom_inflate(&out->data, &out->size, in, insize, settings);
    AKA_mark("lis===1406###sois===57538###eois===57565###lif===4###soif===283###eoif===310###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");out->allocsize = out->size;
    if(AKA_mark("lis===1407###sois===57574###eois===57579###lif===5###soif===319###eoif===324###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (AKA_mark("lis===1407###sois===57574###eois===57579###lif===5###soif===319###eoif===324###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (error))) {
      /*the custom inflate is allowed to have its own error codes, however, we translate it to code 110*/
      AKA_mark("lis===1409###sois===57697###eois===57709###lif===7###soif===442###eoif===454###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");error = 110;
      /*if there's a max output size, and the custom zlib returned error, then indicate that error instead*/
      if(AKA_mark("lis===1411###sois===57830###eois===57896###lif===9###soif===575###eoif===641###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && ((AKA_mark("lis===1411###sois===57830###eois===57855###lif===9###soif===575###eoif===600###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (settings->max_output_size)) && (AKA_mark("lis===1411###sois===57859###eois===57896###lif===9###soif===604###eoif===641###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (out->size > settings->max_output_size)))) {
AKA_mark("lis===1411###sois===57898###eois===57910###lif===9###soif===643###eoif===655###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");error = 109;
}

else {
AKA_mark("lis===-1411-###sois===-57830-###eois===-5783066-###lif===-9-###soif===-###eoif===-641-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");
}
    }
else {
AKA_mark("lis===-1407-###sois===-57574-###eois===-575745-###lif===-5-###soif===-###eoif===-324-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");
}
    AKA_mark("lis===1413###sois===57923###eois===57936###lif===11###soif===668###eoif===681###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");return error;
  } else {
    AKA_mark("lis===1415###sois===57954###eois===58005###lif===13###soif===699###eoif===750###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\inflatev(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");return lodepng_inflatev(out, in, insize, settings);
  }
}

#endif /*LODEPNG_COMPILE_DECODER*/

#ifdef LODEPNG_COMPILE_ENCODER

/* ////////////////////////////////////////////////////////////////////////// */
/* / Deflator (Compressor)                                                  / */
/* ////////////////////////////////////////////////////////////////////////// */

static const unsigned MAX_SUPPORTED_DEFLATE_LENGTH = 258;

/*search the index in the array, that has the largest value smaller than or equal to the given value,
given array must be sorted (if no value is smaller, it returns the size of the given array)*/
/** Instrumented function searchCodeIndex(unsigned const*,size_t,size_t) */
static size_t searchCodeIndex(const unsigned* array, size_t array_size, size_t value) /* << Aka begin of function size_t searchCodeIndex(const unsigned* array, size_t array_size, size_t value) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\searchCodeIndex(unsigned const*,size_t,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.searchCodeIndex.58610.stub"

  /*binary search (only small gain over linear). TODO: use CPU log2 instruction for getting symbols instead*/
  AKA_mark("lis===1433###sois===58798###eois===58814###lif===2###soif===202###eoif===218###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\searchCodeIndex(unsigned const*,size_t,size_t)");size_t left = 1;
  AKA_mark("lis===1434###sois===58818###eois===58848###lif===3###soif===222###eoif===252###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\searchCodeIndex(unsigned const*,size_t,size_t)");size_t right = array_size - 1;

  int AKA_BLOCK_LOOP_58854 = 0;
    while(AKA_mark("lis===1436###sois===58860###eois===58873###lif===5###soif===264###eoif===277###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\searchCodeIndex(unsigned const*,size_t,size_t)") && (AKA_mark("lis===1436###sois===58860###eois===58873###lif===5###soif===264###eoif===277###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\searchCodeIndex(unsigned const*,size_t,size_t)") && (left <= right))) {
        AKA_BLOCK_LOOP_58854++;
        if (AKA_BLOCK_LOOP_58854 > 1000) {
            //break;
        }
    AKA_mark("lis===1437###sois===58882###eois===58915###lif===6###soif===286###eoif===319###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\searchCodeIndex(unsigned const*,size_t,size_t)");size_t mid = (left + right) >> 1;
    if(AKA_mark("lis===1438###sois===58924###eois===58943###lif===7###soif===328###eoif===347###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\searchCodeIndex(unsigned const*,size_t,size_t)") && (AKA_mark("lis===1438###sois===58924###eois===58943###lif===7###soif===328###eoif===347###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\searchCodeIndex(unsigned const*,size_t,size_t)") && (array[mid] >= value))) {
AKA_mark("lis===1438###sois===58945###eois===58961###lif===7###soif===349###eoif===365###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\searchCodeIndex(unsigned const*,size_t,size_t)");right = mid - 1;
}

    else {
AKA_mark("lis===1439###sois===58972###eois===58987###lif===8###soif===376###eoif===391###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\searchCodeIndex(unsigned const*,size_t,size_t)");left = mid + 1;
}

  }
  if(AKA_mark("lis===1441###sois===58999###eois===59040###lif===10###soif===403###eoif===444###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\searchCodeIndex(unsigned const*,size_t,size_t)") && ((AKA_mark("lis===1441###sois===58999###eois===59017###lif===10###soif===403###eoif===421###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\searchCodeIndex(unsigned const*,size_t,size_t)") && (left >= array_size)) || (AKA_mark("lis===1441###sois===59021###eois===59040###lif===10###soif===425###eoif===444###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\searchCodeIndex(unsigned const*,size_t,size_t)") && (array[left] > value)))) {
AKA_mark("lis===1441###sois===59042###eois===59049###lif===10###soif===446###eoif===453###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\searchCodeIndex(unsigned const*,size_t,size_t)");left--;
}

else {
AKA_mark("lis===-1441-###sois===-58999-###eois===-5899941-###lif===-10-###soif===-###eoif===-444-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\searchCodeIndex(unsigned const*,size_t,size_t)");
}
  AKA_mark("lis===1442###sois===59053###eois===59065###lif===11###soif===457###eoif===469###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\searchCodeIndex(unsigned const*,size_t,size_t)");return left;
}

/** Instrumented function addLengthDistance(uivector*,size_t,size_t) */
static void addLengthDistance(uivector* values, size_t length, size_t distance) /* << Aka begin of function void addLengthDistance(uivector* values, size_t length, size_t distance) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addLengthDistance(uivector*,size_t,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addLengthDistance.59084.stub"

  /*values in encoded vector are those used by deflate:
  0-255: literal bytes
  256: end
  257-285: length/distance pair (length code, followed by extra length bits, distance code, extra distance bits)
  286-287: invalid*/

  AKA_mark("lis===1452###sois===59388###eois===59461###lif===7###soif===316###eoif===389###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addLengthDistance(uivector*,size_t,size_t)");unsigned length_code = (unsigned)searchCodeIndex(LENGTHBASE, 29, length);
  AKA_mark("lis===1453###sois===59465###eois===59534###lif===8###soif===393###eoif===462###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addLengthDistance(uivector*,size_t,size_t)");unsigned extra_length = (unsigned)(length - LENGTHBASE[length_code]);
  AKA_mark("lis===1454###sois===59538###eois===59613###lif===9###soif===466###eoif===541###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addLengthDistance(uivector*,size_t,size_t)");unsigned dist_code = (unsigned)searchCodeIndex(DISTANCEBASE, 30, distance);
  AKA_mark("lis===1455###sois===59617###eois===59690###lif===10###soif===545###eoif===618###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addLengthDistance(uivector*,size_t,size_t)");unsigned extra_distance = (unsigned)(distance - DISTANCEBASE[dist_code]);

  AKA_mark("lis===1457###sois===59696###eois===59722###lif===12###soif===624###eoif===650###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addLengthDistance(uivector*,size_t,size_t)");size_t pos = values->size;
  /*TODO: return error when this fails (out of memory)*/
  AKA_mark("lis===1459###sois===59784###eois===59840###lif===14###soif===712###eoif===768###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addLengthDistance(uivector*,size_t,size_t)");unsigned ok = uivector_resize(values, values->size + 4);
  if(AKA_mark("lis===1460###sois===59847###eois===59849###lif===15###soif===775###eoif===777###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addLengthDistance(uivector*,size_t,size_t)") && (AKA_mark("lis===1460###sois===59847###eois===59849###lif===15###soif===775###eoif===777###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addLengthDistance(uivector*,size_t,size_t)") && (ok))) {
    AKA_mark("lis===1461###sois===59858###eois===59920###lif===16###soif===786###eoif===848###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addLengthDistance(uivector*,size_t,size_t)");values->data[pos + 0] = length_code + FIRST_LENGTH_CODE_INDEX;
    AKA_mark("lis===1462###sois===59926###eois===59963###lif===17###soif===854###eoif===891###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addLengthDistance(uivector*,size_t,size_t)");values->data[pos + 1] = extra_length;
    AKA_mark("lis===1463###sois===59969###eois===60003###lif===18###soif===897###eoif===931###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addLengthDistance(uivector*,size_t,size_t)");values->data[pos + 2] = dist_code;
    AKA_mark("lis===1464###sois===60009###eois===60048###lif===19###soif===937###eoif===976###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addLengthDistance(uivector*,size_t,size_t)");values->data[pos + 3] = extra_distance;
  }
else {
AKA_mark("lis===-1460-###sois===-59847-###eois===-598472-###lif===-15-###soif===-###eoif===-777-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addLengthDistance(uivector*,size_t,size_t)");
}
}

/*3 bytes of data get encoded into two bytes. The hash cannot use more than 3
bytes as input because 3 is the minimum match length for deflate*/
static const unsigned HASH_NUM_VALUES = 65536;
static const unsigned HASH_BIT_MASK = 65535; /*HASH_NUM_VALUES - 1, but C90 does not like that as initializer*/

typedef struct Hash {
  int* head; /*hash value to head circular pos - can be outdated if went around window*/
  /*circular pos to prev circular pos*/
  unsigned short* chain;
  int* val; /*circular pos to hash value*/

  /*TODO: do this not only for zeros but for any repeated byte. However for PNG
  it's always going to be the zeros that dominate, so not important for PNG*/
  int* headz; /*similar to head, but for chainz*/
  unsigned short* chainz; /*those with same amount of zeros*/
  unsigned short* zeros; /*length of zeros streak, used as a second hash chain*/
} Hash;

/** Instrumented function hash_init(Hash*,unsigned) */
static unsigned hash_init(Hash* hash, unsigned windowsize) /* << Aka begin of function unsigned hash_init(Hash* hash, unsigned windowsize) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.hash_init.60979.stub"

  AKA_mark("lis===1487###sois===61027###eois===61038###lif===1###soif===64###eoif===75###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");unsigned i;
  AKA_mark("lis===1488###sois===61042###eois===61107###lif===2###soif===79###eoif===144###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");hash->head = (int*)lodepng_malloc(sizeof(int) * HASH_NUM_VALUES);
  AKA_mark("lis===1489###sois===61111###eois===61170###lif===3###soif===148###eoif===207###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");hash->val = (int*)lodepng_malloc(sizeof(int) * windowsize);
  AKA_mark("lis===1490###sois===61174###eois===61257###lif===4###soif===211###eoif===294###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");hash->chain = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);

  AKA_mark("lis===1492###sois===61263###eois===61346###lif===6###soif===300###eoif===383###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");hash->zeros = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
  AKA_mark("lis===1493###sois===61350###eois===61435###lif===7###soif===387###eoif===472###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");hash->headz = (int*)lodepng_malloc(sizeof(int) * (MAX_SUPPORTED_DEFLATE_LENGTH + 1));
  AKA_mark("lis===1494###sois===61439###eois===61523###lif===8###soif===476###eoif===560###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");hash->chainz = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);

  if(AKA_mark("lis===1496###sois===61532###eois===61622###lif===10###soif===569###eoif===659###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)") && ((((((AKA_mark("lis===1496###sois===61532###eois===61543###lif===10###soif===569###eoif===580###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)") && (!hash->head)) || (AKA_mark("lis===1496###sois===61547###eois===61559###lif===10###soif===584###eoif===596###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)") && (!hash->chain))) || (AKA_mark("lis===1496###sois===61563###eois===61573###lif===10###soif===600###eoif===610###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)") && (!hash->val)))  || (AKA_mark("lis===1496###sois===61578###eois===61590###lif===10###soif===615###eoif===627###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)") && (!hash->headz)))|| (AKA_mark("lis===1496###sois===61593###eois===61606###lif===10###soif===630###eoif===643###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)") && (!hash->chainz))) || (AKA_mark("lis===1496###sois===61610###eois===61622###lif===10###soif===647###eoif===659###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)") && (!hash->zeros)))) {
    AKA_mark("lis===1497###sois===61631###eois===61641###lif===11###soif===668###eoif===678###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");return 83; /*alloc fail*/
  }
else {
AKA_mark("lis===-1496-###sois===-61532-###eois===-6153290-###lif===-10-###soif===-###eoif===-659-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");
}

  /*initialize hash table*/
  int AKA_BLOCK_LOOP_61696 = 0;
    AKA_mark("lis===1501###sois===61700###eois===61706###lif===15###soif===737###eoif===743###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");
for(i = 0; AKA_mark("lis===1501###sois===61707###eois===61727###lif===15###soif===744###eoif===764###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)") && (AKA_mark("lis===1501###sois===61707###eois===61727###lif===15###soif===744###eoif===764###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)") && (i != HASH_NUM_VALUES)); ({AKA_mark("lis===1501###sois===61729###eois===61732###lif===15###soif===766###eoif===769###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");++i;})) {
AKA_mark("lis===1501###sois===61734###eois===61753###lif===15###soif===771###eoif===790###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");hash->head[i] = -1;
}

  int AKA_BLOCK_LOOP_61757 = 0;
    AKA_mark("lis===1502###sois===61761###eois===61767###lif===16###soif===798###eoif===804###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");
for(i = 0; AKA_mark("lis===1502###sois===61768###eois===61783###lif===16###soif===805###eoif===820###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)") && (AKA_mark("lis===1502###sois===61768###eois===61783###lif===16###soif===805###eoif===820###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)") && (i != windowsize)); ({AKA_mark("lis===1502###sois===61785###eois===61788###lif===16###soif===822###eoif===825###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");++i;})) {
AKA_mark("lis===1502###sois===61790###eois===61808###lif===16###soif===827###eoif===845###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");hash->val[i] = -1;
}

  int AKA_BLOCK_LOOP_61812 = 0;
    AKA_mark("lis===1503###sois===61816###eois===61822###lif===17###soif===853###eoif===859###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");
for(i = 0; AKA_mark("lis===1503###sois===61823###eois===61838###lif===17###soif===860###eoif===875###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)") && (AKA_mark("lis===1503###sois===61823###eois===61838###lif===17###soif===860###eoif===875###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)") && (i != windowsize)); ({AKA_mark("lis===1503###sois===61840###eois===61843###lif===17###soif===877###eoif===880###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");++i;})) {
AKA_mark("lis===1503###sois===61845###eois===61864###lif===17###soif===882###eoif===901###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");hash->chain[i] = i;
}
 /*same value as index indicates uninitialized*/

  int AKA_BLOCK_LOOP_61918 = 0;
    AKA_mark("lis===1505###sois===61922###eois===61928###lif===19###soif===959###eoif===965###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");
for(i = 0; AKA_mark("lis===1505###sois===61929###eois===61962###lif===19###soif===966###eoif===999###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)") && (AKA_mark("lis===1505###sois===61929###eois===61962###lif===19###soif===966###eoif===999###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)") && (i <= MAX_SUPPORTED_DEFLATE_LENGTH)); ({AKA_mark("lis===1505###sois===61964###eois===61967###lif===19###soif===1001###eoif===1004###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");++i;})) {
AKA_mark("lis===1505###sois===61969###eois===61989###lif===19###soif===1006###eoif===1026###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");hash->headz[i] = -1;
}

  int AKA_BLOCK_LOOP_61993 = 0;
    AKA_mark("lis===1506###sois===61997###eois===62003###lif===20###soif===1034###eoif===1040###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");
for(i = 0; AKA_mark("lis===1506###sois===62004###eois===62019###lif===20###soif===1041###eoif===1056###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)") && (AKA_mark("lis===1506###sois===62004###eois===62019###lif===20###soif===1041###eoif===1056###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)") && (i != windowsize)); ({AKA_mark("lis===1506###sois===62021###eois===62024###lif===20###soif===1058###eoif===1061###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");++i;})) {
AKA_mark("lis===1506###sois===62026###eois===62046###lif===20###soif===1063###eoif===1083###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");hash->chainz[i] = i;
}
 /*same value as index indicates uninitialized*/

  AKA_mark("lis===1508###sois===62100###eois===62109###lif===22###soif===1137###eoif===1146###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_init(Hash*,unsigned)");return 0;
}

/** Instrumented function hash_cleanup(Hash*) */
static void hash_cleanup(Hash* hash) /* << Aka begin of function void hash_cleanup(Hash* hash) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_cleanup(Hash*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.hash_cleanup.62128.stub"

  AKA_mark("lis===1512###sois===62158###eois===62183###lif===1###soif===42###eoif===67###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_cleanup(Hash*)");lodepng_free(hash->head);
  AKA_mark("lis===1513###sois===62187###eois===62211###lif===2###soif===71###eoif===95###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_cleanup(Hash*)");lodepng_free(hash->val);
  AKA_mark("lis===1514###sois===62215###eois===62241###lif===3###soif===99###eoif===125###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_cleanup(Hash*)");lodepng_free(hash->chain);

  AKA_mark("lis===1516###sois===62247###eois===62273###lif===5###soif===131###eoif===157###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_cleanup(Hash*)");lodepng_free(hash->zeros);
  AKA_mark("lis===1517###sois===62277###eois===62303###lif===6###soif===161###eoif===187###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_cleanup(Hash*)");lodepng_free(hash->headz);
  AKA_mark("lis===1518###sois===62307###eois===62334###lif===7###soif===191###eoif===218###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\hash_cleanup(Hash*)");lodepng_free(hash->chainz);
}



/** Instrumented function getHash(unsigned char const*,size_t,size_t) */
static unsigned getHash(const unsigned char* data, size_t size, size_t pos) /* << Aka begin of function unsigned getHash(const unsigned char* data, size_t size, size_t pos) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\getHash(unsigned char const*,size_t,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.getHash.62361.stub"

  AKA_mark("lis===1524###sois===62426###eois===62446###lif===1###soif===81###eoif===101###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getHash(unsigned char const*,size_t,size_t)");unsigned result = 0;
  if(AKA_mark("lis===1525###sois===62453###eois===62467###lif===2###soif===108###eoif===122###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getHash(unsigned char const*,size_t,size_t)") && (AKA_mark("lis===1525###sois===62453###eois===62467###lif===2###soif===108###eoif===122###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getHash(unsigned char const*,size_t,size_t)") && (pos + 2 < size))) {
    /*A simple shift and xor hash is used. Since the data of PNGs is dominated
    by zeroes due to the filters, a better hash does not have a significant
    effect on speed in traversing the chain, and causes more time spend on
    calculating the hash.*/
    AKA_mark("lis===1530###sois===62738###eois===62780###lif===7###soif===393###eoif===435###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getHash(unsigned char const*,size_t,size_t)");result ^= ((unsigned)data[pos + 0] << 0u);
    AKA_mark("lis===1531###sois===62786###eois===62828###lif===8###soif===441###eoif===483###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getHash(unsigned char const*,size_t,size_t)");result ^= ((unsigned)data[pos + 1] << 4u);
    AKA_mark("lis===1532###sois===62834###eois===62876###lif===9###soif===489###eoif===531###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getHash(unsigned char const*,size_t,size_t)");result ^= ((unsigned)data[pos + 2] << 8u);
  } else {
    AKA_mark("lis===1534###sois===62894###eois===62911###lif===11###soif===549###eoif===566###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getHash(unsigned char const*,size_t,size_t)");size_t amount, i;
    if(AKA_mark("lis===1535###sois===62920###eois===62931###lif===12###soif===575###eoif===586###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getHash(unsigned char const*,size_t,size_t)") && (AKA_mark("lis===1535###sois===62920###eois===62931###lif===12###soif===575###eoif===586###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getHash(unsigned char const*,size_t,size_t)") && (pos >= size))) {
AKA_mark("lis===1535###sois===62933###eois===62942###lif===12###soif===588###eoif===597###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getHash(unsigned char const*,size_t,size_t)");return 0;
}

else {
AKA_mark("lis===-1535-###sois===-62920-###eois===-6292011-###lif===-12-###soif===-###eoif===-586-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getHash(unsigned char const*,size_t,size_t)");
}
    AKA_mark("lis===1536###sois===62948###eois===62968###lif===13###soif===603###eoif===623###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getHash(unsigned char const*,size_t,size_t)");amount = size - pos;
    int AKA_BLOCK_LOOP_62974 = 0;
    AKA_mark("lis===1537###sois===62978###eois===62984###lif===14###soif===633###eoif===639###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getHash(unsigned char const*,size_t,size_t)");
for(i = 0; AKA_mark("lis===1537###sois===62985###eois===62996###lif===14###soif===640###eoif===651###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getHash(unsigned char const*,size_t,size_t)") && (AKA_mark("lis===1537###sois===62985###eois===62996###lif===14###soif===640###eoif===651###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getHash(unsigned char const*,size_t,size_t)") && (i != amount)); ({AKA_mark("lis===1537###sois===62998###eois===63001###lif===14###soif===653###eoif===656###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getHash(unsigned char const*,size_t,size_t)");++i;})) {
AKA_mark("lis===1537###sois===63003###eois===63051###lif===14###soif===658###eoif===706###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getHash(unsigned char const*,size_t,size_t)");result ^= ((unsigned)data[pos + i] << (i * 8u));
}

  }
  AKA_mark("lis===1539###sois===63060###eois===63090###lif===16###soif===715###eoif===745###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getHash(unsigned char const*,size_t,size_t)");return result & HASH_BIT_MASK;
}

/** Instrumented function countZeros(unsigned char const*,size_t,size_t) */
static unsigned countZeros(const unsigned char* data, size_t size, size_t pos) /* << Aka begin of function unsigned countZeros(const unsigned char* data, size_t size, size_t pos) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\countZeros(unsigned char const*,size_t,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.countZeros.63113.stub"

  AKA_mark("lis===1543###sois===63181###eois===63221###lif===1###soif===84###eoif===124###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\countZeros(unsigned char const*,size_t,size_t)");const unsigned char* start = data + pos;
  AKA_mark("lis===1544###sois===63225###eois===63289###lif===2###soif===128###eoif===192###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\countZeros(unsigned char const*,size_t,size_t)");const unsigned char* end = start + MAX_SUPPORTED_DEFLATE_LENGTH;
  if(AKA_mark("lis===1545###sois===63296###eois===63313###lif===3###soif===199###eoif===216###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\countZeros(unsigned char const*,size_t,size_t)") && (AKA_mark("lis===1545###sois===63296###eois===63313###lif===3###soif===199###eoif===216###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\countZeros(unsigned char const*,size_t,size_t)") && (end > data + size))) {
AKA_mark("lis===1545###sois===63315###eois===63333###lif===3###soif===218###eoif===236###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\countZeros(unsigned char const*,size_t,size_t)");end = data + size;
}

else {
AKA_mark("lis===-1545-###sois===-63296-###eois===-6329617-###lif===-3-###soif===-###eoif===-216-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\countZeros(unsigned char const*,size_t,size_t)");
}
  AKA_mark("lis===1546###sois===63337###eois===63350###lif===4###soif===240###eoif===253###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\countZeros(unsigned char const*,size_t,size_t)");data = start;
  int AKA_BLOCK_LOOP_63354 = 0;
    while(AKA_mark("lis===1547###sois===63360###eois===63385###lif===5###soif===263###eoif===288###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\countZeros(unsigned char const*,size_t,size_t)") && ((AKA_mark("lis===1547###sois===63360###eois===63371###lif===5###soif===263###eoif===274###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\countZeros(unsigned char const*,size_t,size_t)") && (data != end)) && (AKA_mark("lis===1547###sois===63375###eois===63385###lif===5###soif===278###eoif===288###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\countZeros(unsigned char const*,size_t,size_t)") && (*data == 0)))) {
AKA_mark("lis===1547###sois===63387###eois===63394###lif===5###soif===290###eoif===297###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\countZeros(unsigned char const*,size_t,size_t)");++data;
}

  /*subtracting two addresses returned as 32-bit number (max value is MAX_SUPPORTED_DEFLATE_LENGTH)*/
  AKA_mark("lis===1549###sois===63501###eois===63533###lif===7###soif===404###eoif===436###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\countZeros(unsigned char const*,size_t,size_t)");return (unsigned)(data - start);
}

/*wpos = pos & (windowsize - 1)*/
/** Instrumented function updateHashChain(Hash*,size_t,unsigned,unsigned short) */
static void updateHashChain(Hash* hash, size_t wpos, unsigned hashval, unsigned short numzeros) /* << Aka begin of function void updateHashChain(Hash* hash, size_t wpos, unsigned hashval, unsigned short numzeros) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\updateHashChain(Hash*,size_t,unsigned,unsigned short)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.updateHashChain.63587.stub"

  AKA_mark("lis===1554###sois===63676###eois===63707###lif===1###soif===101###eoif===132###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\updateHashChain(Hash*,size_t,unsigned,unsigned short)");hash->val[wpos] = (int)hashval;
  if(AKA_mark("lis===1555###sois===63714###eois===63739###lif===2###soif===139###eoif===164###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\updateHashChain(Hash*,size_t,unsigned,unsigned short)") && (AKA_mark("lis===1555###sois===63714###eois===63739###lif===2###soif===139###eoif===164###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\updateHashChain(Hash*,size_t,unsigned,unsigned short)") && (hash->head[hashval] != -1))) {
AKA_mark("lis===1555###sois===63741###eois===63781###lif===2###soif===166###eoif===206###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\updateHashChain(Hash*,size_t,unsigned,unsigned short)");hash->chain[wpos] = hash->head[hashval];
}

else {
AKA_mark("lis===-1555-###sois===-63714-###eois===-6371425-###lif===-2-###soif===-###eoif===-164-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\updateHashChain(Hash*,size_t,unsigned,unsigned short)");
}
  AKA_mark("lis===1556###sois===63785###eois===63817###lif===3###soif===210###eoif===242###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\updateHashChain(Hash*,size_t,unsigned,unsigned short)");hash->head[hashval] = (int)wpos;

  AKA_mark("lis===1558###sois===63823###eois===63852###lif===5###soif===248###eoif===277###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\updateHashChain(Hash*,size_t,unsigned,unsigned short)");hash->zeros[wpos] = numzeros;
  if(AKA_mark("lis===1559###sois===63859###eois===63886###lif===6###soif===284###eoif===311###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\updateHashChain(Hash*,size_t,unsigned,unsigned short)") && (AKA_mark("lis===1559###sois===63859###eois===63886###lif===6###soif===284###eoif===311###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\updateHashChain(Hash*,size_t,unsigned,unsigned short)") && (hash->headz[numzeros] != -1))) {
AKA_mark("lis===1559###sois===63888###eois===63931###lif===6###soif===313###eoif===356###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\updateHashChain(Hash*,size_t,unsigned,unsigned short)");hash->chainz[wpos] = hash->headz[numzeros];
}

else {
AKA_mark("lis===-1559-###sois===-63859-###eois===-6385927-###lif===-6-###soif===-###eoif===-311-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\updateHashChain(Hash*,size_t,unsigned,unsigned short)");
}
  AKA_mark("lis===1560###sois===63935###eois===63969###lif===7###soif===360###eoif===394###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\updateHashChain(Hash*,size_t,unsigned,unsigned short)");hash->headz[numzeros] = (int)wpos;
}

/*
LZ77-encode the data. Return value is error code. The input are raw bytes, the output
is in the form of unsigned integers with codes representing for example literal bytes, or
length/distance pairs.
It uses a hash table technique to let it encode faster. When doing LZ77 encoding, a
sliding window (of windowsize) is used, and all past bytes in that window can be used as
the "dictionary". A brute force search through all possible distances would be slow, and
this hash technique is one out of several ways to speed this up.
*/
/** Instrumented function encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned) */
static unsigned encodeLZ77(uivector* out, Hash* hash,
                           const unsigned char* in, size_t inpos, size_t insize, unsigned windowsize,
                           unsigned minmatch, unsigned nicematch, unsigned lazymatching) /* << Aka begin of function unsigned encodeLZ77(uivector* out, Hash* hash,
                           const unsigned char* in, size_t inpos, size_t insize, unsigned windowsize,
                           unsigned minmatch, unsigned nicematch, unsigned lazymatching) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.encodeLZ77.64533.stub"

  AKA_mark("lis===1575###sois===64769###eois===64780###lif===3###soif===252###eoif===263###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");size_t pos;
  AKA_mark("lis===1576###sois===64784###eois===64806###lif===4###soif===267###eoif===289###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");unsigned i, error = 0;
  /*for large window lengths, assume the user wants no compression loss. Otherwise, max hash chain length speedup.*/
  AKA_mark("lis===1578###sois===64928###eois===65004###lif===6###soif===411###eoif===487###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");unsigned maxchainlength = windowsize >= 8192 ? windowsize : windowsize / 8u;
  AKA_mark("lis===1579###sois===65008###eois===65087###lif===7###soif===491###eoif===570###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");unsigned maxlazymatch = windowsize >= 8192 ? MAX_SUPPORTED_DEFLATE_LENGTH : 64;

  AKA_mark("lis===1581###sois===65093###eois===65115###lif===9###soif===576###eoif===598###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");unsigned usezeros = 1; /*not sure if setting it to false for windowsize < 8192 is better or worse*/
  AKA_mark("lis===1582###sois===65196###eois===65218###lif===10###soif===679###eoif===701###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");unsigned numzeros = 0;

  AKA_mark("lis===1584###sois===65224###eois===65240###lif===12###soif===707###eoif===723###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");unsigned offset; /*the offset represents the distance in LZ77 terminology*/
  AKA_mark("lis===1585###sois===65303###eois===65319###lif===13###soif===786###eoif===802###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");unsigned length;
  AKA_mark("lis===1586###sois===65323###eois===65341###lif===14###soif===806###eoif===824###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");unsigned lazy = 0;
  AKA_mark("lis===1587###sois===65345###eois===65385###lif===15###soif===828###eoif===868###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");unsigned lazylength = 0, lazyoffset = 0;
  AKA_mark("lis===1588###sois===65389###eois===65406###lif===16###soif===872###eoif===889###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");unsigned hashval;
  AKA_mark("lis===1589###sois===65410###eois===65450###lif===17###soif===893###eoif===933###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");unsigned current_offset, current_length;
  AKA_mark("lis===1590###sois===65454###eois===65475###lif===18###soif===937###eoif===958###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");unsigned prev_offset;
  AKA_mark("lis===1591###sois===65479###eois===65528###lif===19###soif===962###eoif===1011###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");const unsigned char *lastptr, *foreptr, *backptr;
  AKA_mark("lis===1592###sois===65532###eois===65549###lif===20###soif===1015###eoif===1032###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");unsigned hashpos;

  if(AKA_mark("lis===1594###sois===65558###eois===65595###lif===22###soif===1041###eoif===1078###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && ((AKA_mark("lis===1594###sois===65558###eois===65573###lif===22###soif===1041###eoif===1056###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (windowsize == 0)) || (AKA_mark("lis===1594###sois===65577###eois===65595###lif===22###soif===1060###eoif===1078###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (windowsize > 32768)))) {
AKA_mark("lis===1594###sois===65597###eois===65607###lif===22###soif===1080###eoif===1090###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");return 60;
}

else {
AKA_mark("lis===-1594-###sois===-65558-###eois===-6555837-###lif===-22-###soif===-###eoif===-1078-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
} /*error: windowsize smaller/larger than allowed*/
  if(AKA_mark("lis===1595###sois===65664###eois===65700###lif===23###soif===1147###eoif===1183###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1595###sois===65664###eois===65700###lif===23###soif===1147###eoif===1183###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && ((windowsize & (windowsize - 1)) != 0))) {
AKA_mark("lis===1595###sois===65702###eois===65712###lif===23###soif===1185###eoif===1195###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");return 90;
}

else {
AKA_mark("lis===-1595-###sois===-65664-###eois===-6566436-###lif===-23-###soif===-###eoif===-1183-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
} /*error: must be power of two*/

  if(AKA_mark("lis===1597###sois===65753###eois===65793###lif===25###soif===1236###eoif===1276###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1597###sois===65753###eois===65793###lif===25###soif===1236###eoif===1276###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (nicematch > MAX_SUPPORTED_DEFLATE_LENGTH))) {
AKA_mark("lis===1597###sois===65795###eois===65836###lif===25###soif===1278###eoif===1319###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");nicematch = MAX_SUPPORTED_DEFLATE_LENGTH;
}

else {
AKA_mark("lis===-1597-###sois===-65753-###eois===-6575340-###lif===-25-###soif===-###eoif===-1276-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
}

  int AKA_BLOCK_LOOP_65842 = 0;
    AKA_mark("lis===1599###sois===65846###eois===65858###lif===27###soif===1329###eoif===1341###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
for(pos = inpos; AKA_mark("lis===1599###sois===65859###eois===65871###lif===27###soif===1342###eoif===1354###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1599###sois===65859###eois===65871###lif===27###soif===1342###eoif===1354###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (pos < insize)); ({AKA_mark("lis===1599###sois===65873###eois===65878###lif===27###soif===1356###eoif===1361###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");++pos;})) {
        AKA_BLOCK_LOOP_65842++;
        if (AKA_BLOCK_LOOP_65842 > 1000) {
            //break;
        }
    AKA_mark("lis===1600###sois===65887###eois===65924###lif===28###soif===1370###eoif===1407###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");size_t wpos = pos & (windowsize - 1); /*position for in 'circular' hash buffers*/
    AKA_mark("lis===1601###sois===65974###eois===65999###lif===29###soif===1457###eoif===1482###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");unsigned chainlength = 0;

    AKA_mark("lis===1603###sois===66007###eois===66042###lif===31###soif===1490###eoif===1525###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");hashval = getHash(in, insize, pos);

    if(AKA_mark("lis===1605###sois===66053###eois===66077###lif===33###soif===1536###eoif===1560###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && ((AKA_mark("lis===1605###sois===66053###eois===66061###lif===33###soif===1536###eoif===1544###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (usezeros)) && (AKA_mark("lis===1605###sois===66065###eois===66077###lif===33###soif===1548###eoif===1560###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (hashval == 0)))) {
      if(AKA_mark("lis===1606###sois===66091###eois===66104###lif===34###soif===1574###eoif===1587###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1606###sois===66091###eois===66104###lif===34###soif===1574###eoif===1587###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (numzeros == 0))) {
AKA_mark("lis===1606###sois===66106###eois===66145###lif===34###soif===1589###eoif===1628###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");numzeros = countZeros(in, insize, pos);
}

      else {
if(AKA_mark("lis===1607###sois===66161###eois===66215###lif===35###soif===1644###eoif===1698###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && ((AKA_mark("lis===1607###sois===66161###eois===66184###lif===35###soif===1644###eoif===1667###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (pos + numzeros > insize)) || (AKA_mark("lis===1607###sois===66188###eois===66215###lif===35###soif===1671###eoif===1698###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (in[pos + numzeros - 1] != 0)))) {
AKA_mark("lis===1607###sois===66217###eois===66228###lif===35###soif===1700###eoif===1711###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");--numzeros;
}

else {
AKA_mark("lis===-1607-###sois===-66161-###eois===-6616154-###lif===-35-###soif===-###eoif===-1698-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
}
}

    } else {
      AKA_mark("lis===1609###sois===66250###eois===66263###lif===37###soif===1733###eoif===1746###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");numzeros = 0;
    }

    AKA_mark("lis===1612###sois===66278###eois===66325###lif===40###soif===1761###eoif===1808###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");updateHashChain(hash, wpos, hashval, numzeros);

    /*the length and offset found for the current position*/
    AKA_mark("lis===1615###sois===66395###eois===66406###lif===43###soif===1878###eoif===1889###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");length = 0;
    AKA_mark("lis===1616###sois===66412###eois===66423###lif===44###soif===1895###eoif===1906###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");offset = 0;

    AKA_mark("lis===1618###sois===66431###eois===66459###lif===46###soif===1914###eoif===1942###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");hashpos = hash->chain[wpos];

    AKA_mark("lis===1620###sois===66467###eois===66572###lif===48###soif===1950###eoif===2055###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");lastptr = &in[insize < pos + MAX_SUPPORTED_DEFLATE_LENGTH ? insize : pos + MAX_SUPPORTED_DEFLATE_LENGTH];

    /*search for the longest string*/
    AKA_mark("lis===1623###sois===66619###eois===66635###lif===51###soif===2102###eoif===2118###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");prev_offset = 0;
    int AKA_BLOCK_LOOP_66641 = 0;
    for(;;) {
        AKA_BLOCK_LOOP_66641++;
        if (AKA_BLOCK_LOOP_66641 > 1000) {
            //break;
        }
      if(AKA_mark("lis===1625###sois===66661###eois===66692###lif===53###soif===2144###eoif===2175###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1625###sois===66661###eois===66692###lif===53###soif===2144###eoif===2175###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (chainlength++ >= maxchainlength))) {
AKA_mark("lis===1625###sois===66694###eois===66700###lif===53###soif===2177###eoif===2183###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");break;
}

else {
AKA_mark("lis===-1625-###sois===-66661-###eois===-6666131-###lif===-53-###soif===-###eoif===-2175-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
}
      AKA_mark("lis===1626###sois===66708###eois===66800###lif===54###soif===2191###eoif===2283###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");current_offset = (unsigned)(hashpos <= wpos ? wpos - hashpos : wpos - hashpos + windowsize);

      if(AKA_mark("lis===1628###sois===66813###eois===66841###lif===56###soif===2296###eoif===2324###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1628###sois===66813###eois===66841###lif===56###soif===2296###eoif===2324###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (current_offset < prev_offset))) {
AKA_mark("lis===1628###sois===66843###eois===66849###lif===56###soif===2326###eoif===2332###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");break;
}

else {
AKA_mark("lis===-1628-###sois===-66813-###eois===-6681328-###lif===-56-###soif===-###eoif===-2324-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
} /*stop when went completely around the circular buffer*/
      AKA_mark("lis===1629###sois===66914###eois===66943###lif===57###soif===2397###eoif===2426###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");prev_offset = current_offset;
      if(AKA_mark("lis===1630###sois===66954###eois===66972###lif===58###soif===2437###eoif===2455###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1630###sois===66954###eois===66972###lif===58###soif===2437###eoif===2455###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (current_offset > 0))) {
        /*test the next characters*/
        AKA_mark("lis===1632###sois===67023###eois===67042###lif===60###soif===2506###eoif===2525###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");foreptr = &in[pos];
        AKA_mark("lis===1633###sois===67052###eois===67088###lif===61###soif===2535###eoif===2571###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");backptr = &in[pos - current_offset];

        /*common case in PNGs is lots of zeros. Quickly skip over them as a speedup*/
        if(AKA_mark("lis===1636###sois===67190###eois===67203###lif===64###soif===2673###eoif===2686###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1636###sois===67190###eois===67203###lif===64###soif===2673###eoif===2686###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (numzeros >= 3))) {
          AKA_mark("lis===1637###sois===67218###eois===67255###lif===65###soif===2701###eoif===2738###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");unsigned skip = hash->zeros[hashpos];
          if(AKA_mark("lis===1638###sois===67270###eois===67285###lif===66###soif===2753###eoif===2768###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1638###sois===67270###eois===67285###lif===66###soif===2753###eoif===2768###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (skip > numzeros))) {
AKA_mark("lis===1638###sois===67287###eois===67303###lif===66###soif===2770###eoif===2786###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");skip = numzeros;
}

else {
AKA_mark("lis===-1638-###sois===-67270-###eois===-6727015-###lif===-66-###soif===-###eoif===-2768-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
}
          AKA_mark("lis===1639###sois===67315###eois===67331###lif===67###soif===2798###eoif===2814###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");backptr += skip;
          AKA_mark("lis===1640###sois===67343###eois===67359###lif===68###soif===2826###eoif===2842###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");foreptr += skip;
        }
else {
AKA_mark("lis===-1636-###sois===-67190-###eois===-6719013-###lif===-64-###soif===-###eoif===-2686-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
}

        int AKA_BLOCK_LOOP_67382 = 0;
    while(AKA_mark("lis===1643###sois===67388###eois===67430###lif===71###soif===2871###eoif===2913###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && ((AKA_mark("lis===1643###sois===67388###eois===67406###lif===71###soif===2871###eoif===2889###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (foreptr != lastptr)) && (AKA_mark("lis===1643###sois===67410###eois===67430###lif===71###soif===2893###eoif===2913###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (*backptr == *foreptr)))) /*maximum supported length by deflate is max length*/ {
        AKA_BLOCK_LOOP_67382++;
        if (AKA_BLOCK_LOOP_67382 > 1000) {
            //break;
        }
          AKA_mark("lis===1644###sois===67499###eois===67509###lif===72###soif===2982###eoif===2992###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");++backptr;
          AKA_mark("lis===1645###sois===67521###eois===67531###lif===73###soif===3004###eoif===3014###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");++foreptr;
        }
        AKA_mark("lis===1647###sois===67552###eois===67600###lif===75###soif===3035###eoif===3083###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");current_length = (unsigned)(foreptr - &in[pos]);

        if(AKA_mark("lis===1649###sois===67615###eois===67638###lif===77###soif===3098###eoif===3121###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1649###sois===67615###eois===67638###lif===77###soif===3098###eoif===3121###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (current_length > length))) {
          AKA_mark("lis===1650###sois===67653###eois===67677###lif===78###soif===3136###eoif===3160###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");length = current_length; /*the longest length*/
          AKA_mark("lis===1651###sois===67712###eois===67736###lif===79###soif===3195###eoif===3219###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");offset = current_offset; /*the offset that is related to this longest length*/
          /*jump out once a length of max length is found (speed gain). This also jumps
          out if length is MAX_SUPPORTED_DEFLATE_LENGTH*/
          if(AKA_mark("lis===1654###sois===67953###eois===67980###lif===82###soif===3436###eoif===3463###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1654###sois===67953###eois===67980###lif===82###soif===3436###eoif===3463###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (current_length >= nicematch))) {
AKA_mark("lis===1654###sois===67982###eois===67988###lif===82###soif===3465###eoif===3471###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");break;
}

else {
AKA_mark("lis===-1654-###sois===-67953-###eois===-6795327-###lif===-82-###soif===-###eoif===-3463-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
}
        }
else {
AKA_mark("lis===-1649-###sois===-67615-###eois===-6761523-###lif===-77-###soif===-###eoif===-3121-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
}
      }
else {
AKA_mark("lis===-1630-###sois===-66954-###eois===-6695418-###lif===-58-###soif===-###eoif===-2455-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
}

      if(AKA_mark("lis===1658###sois===68021###eois===68052###lif===86###soif===3504###eoif===3535###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1658###sois===68021###eois===68052###lif===86###soif===3504###eoif===3535###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (hashpos == hash->chain[hashpos]))) {
AKA_mark("lis===1658###sois===68054###eois===68060###lif===86###soif===3537###eoif===3543###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");break;
}

else {
AKA_mark("lis===-1658-###sois===-68021-###eois===-6802131-###lif===-86-###soif===-###eoif===-3535-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
}

      if(AKA_mark("lis===1660###sois===68073###eois===68107###lif===88###soif===3556###eoif===3590###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && ((AKA_mark("lis===1660###sois===68073###eois===68086###lif===88###soif===3556###eoif===3569###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (numzeros >= 3)) && (AKA_mark("lis===1660###sois===68090###eois===68107###lif===88###soif===3573###eoif===3590###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (length > numzeros)))) {
        AKA_mark("lis===1661###sois===68120###eois===68152###lif===89###soif===3603###eoif===3635###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");hashpos = hash->chainz[hashpos];
        if(AKA_mark("lis===1662###sois===68165###eois===68197###lif===90###soif===3648###eoif===3680###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1662###sois===68165###eois===68197###lif===90###soif===3648###eoif===3680###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (hash->zeros[hashpos] != numzeros))) {
AKA_mark("lis===1662###sois===68199###eois===68205###lif===90###soif===3682###eoif===3688###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");break;
}

else {
AKA_mark("lis===-1662-###sois===-68165-###eois===-6816532-###lif===-90-###soif===-###eoif===-3680-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
}
      } else {
        AKA_mark("lis===1664###sois===68231###eois===68262###lif===92###soif===3714###eoif===3745###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");hashpos = hash->chain[hashpos];
        /*outdated hash value, happens if particular value was not encountered in whole last window*/
        if(AKA_mark("lis===1666###sois===68378###eois===68412###lif===94###soif===3861###eoif===3895###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1666###sois===68378###eois===68412###lif===94###soif===3861###eoif===3895###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (hash->val[hashpos] != (int)hashval))) {
AKA_mark("lis===1666###sois===68414###eois===68420###lif===94###soif===3897###eoif===3903###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");break;
}

else {
AKA_mark("lis===-1666-###sois===-68378-###eois===-6837834-###lif===-94-###soif===-###eoif===-3895-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
}
      }
    }

    if(AKA_mark("lis===1670###sois===68447###eois===68459###lif===98###soif===3930###eoif===3942###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1670###sois===68447###eois===68459###lif===98###soif===3930###eoif===3942###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (lazymatching))) {
      if(AKA_mark("lis===1671###sois===68473###eois===68560###lif===99###soif===3956###eoif===4043###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && ((((AKA_mark("lis===1671###sois===68473###eois===68478###lif===99###soif===3956###eoif===3961###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (!lazy)) && (AKA_mark("lis===1671###sois===68482###eois===68493###lif===99###soif===3965###eoif===3976###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (length >= 3))) && (AKA_mark("lis===1671###sois===68497###eois===68519###lif===99###soif===3980###eoif===4002###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (length <= maxlazymatch))) && (AKA_mark("lis===1671###sois===68523###eois===68560###lif===99###soif===4006###eoif===4043###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (length < MAX_SUPPORTED_DEFLATE_LENGTH)))) {
        AKA_mark("lis===1672###sois===68573###eois===68582###lif===100###soif===4056###eoif===4065###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");lazy = 1;
        AKA_mark("lis===1673###sois===68592###eois===68612###lif===101###soif===4075###eoif===4095###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");lazylength = length;
        AKA_mark("lis===1674###sois===68622###eois===68642###lif===102###soif===4105###eoif===4125###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");lazyoffset = offset;
        AKA_mark("lis===1675###sois===68652###eois===68661###lif===103###soif===4135###eoif===4144###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");continue; /*try the next byte*/
      }
else {
AKA_mark("lis===-1671-###sois===-68473-###eois===-6847387-###lif===-99-###soif===-###eoif===-4043-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
}
      if(AKA_mark("lis===1677###sois===68703###eois===68707###lif===105###soif===4186###eoif===4190###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1677###sois===68703###eois===68707###lif===105###soif===4186###eoif===4190###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (lazy))) {
        AKA_mark("lis===1678###sois===68720###eois===68729###lif===106###soif===4203###eoif===4212###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");lazy = 0;
        if(AKA_mark("lis===1679###sois===68742###eois===68750###lif===107###soif===4225###eoif===4233###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1679###sois===68742###eois===68750###lif===107###soif===4225###eoif===4233###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (pos == 0))) {AKA_mark("lis===1679###sois===68752###eois===68767###lif===107###soif===4235###eoif===4250###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");AKA_mark("lis===1679###sois===68752###eois===68767###lif===107###soif===4235###eoif===4250###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");ERROR_BREAK(81)}
else {
AKA_mark("lis===-1679-###sois===-68742-###eois===-687428-###lif===-107-###soif===-###eoif===-4233-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
};
        if(AKA_mark("lis===1680###sois===68781###eois===68804###lif===108###soif===4264###eoif===4287###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1680###sois===68781###eois===68804###lif===108###soif===4264###eoif===4287###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (length > lazylength + 1))) {
          /*push the previous character as literal*/
          if(AKA_mark("lis===1682###sois===68876###eois===68913###lif===110###soif===4359###eoif===4396###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1682###sois===68876###eois===68913###lif===110###soif===4359###eoif===4396###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (!uivector_push_back(out, in[pos - 1])))) {AKA_mark("lis===1682###sois===68915###eois===68945###lif===110###soif===4398###eoif===4428###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");AKA_mark("lis===1682###sois===68915###eois===68945###lif===110###soif===4398###eoif===4428###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");ERROR_BREAK(83 /*alloc fail*/)}
else {
AKA_mark("lis===-1682-###sois===-68876-###eois===-6887637-###lif===-110-###soif===-###eoif===-4396-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
};
        } else {
          AKA_mark("lis===1684###sois===68976###eois===68996###lif===112###soif===4459###eoif===4479###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");length = lazylength;
          AKA_mark("lis===1685###sois===69008###eois===69028###lif===113###soif===4491###eoif===4511###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");offset = lazyoffset;
          AKA_mark("lis===1686###sois===69040###eois===69065###lif===114###soif===4523###eoif===4548###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");hash->head[hashval] = -1; /*the same hashchain update will be done, this ensures no wrong alteration*/
          AKA_mark("lis===1687###sois===69154###eois===69181###lif===115###soif===4637###eoif===4664###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");hash->headz[numzeros] = -1; /*idem*/
          AKA_mark("lis===1688###sois===69202###eois===69208###lif===116###soif===4685###eoif===4691###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");--pos;
        }
      }
else {
AKA_mark("lis===-1677-###sois===-68703-###eois===-687034-###lif===-105-###soif===-###eoif===-4190-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
}
    }
else {
AKA_mark("lis===-1670-###sois===-68447-###eois===-6844712-###lif===-98-###soif===-###eoif===-3942-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
}
    if(AKA_mark("lis===1692###sois===69244###eois===69278###lif===120###soif===4727###eoif===4761###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && ((AKA_mark("lis===1692###sois===69244###eois===69255###lif===120###soif===4727###eoif===4738###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (length >= 3)) && (AKA_mark("lis===1692###sois===69259###eois===69278###lif===120###soif===4742###eoif===4761###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (offset > windowsize)))) {AKA_mark("lis===1692###sois===69280###eois===69338###lif===120###soif===4763###eoif===4821###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");AKA_mark("lis===1692###sois===69280###eois===69338###lif===120###soif===4763###eoif===4821###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");ERROR_BREAK(86 /*too big (or overflown negative) offset*/)}
else {
AKA_mark("lis===-1692-###sois===-69244-###eois===-6924434-###lif===-120-###soif===-###eoif===-4761-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
};

    /*encode it as length/distance pair or literal value*/
    if(AKA_mark("lis===1695###sois===69410###eois===69420###lif===123###soif===4893###eoif===4903###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1695###sois===69410###eois===69420###lif===123###soif===4893###eoif===4903###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (length < 3))) /*only lengths of 3 or higher are supported as length/distance pair*/ {
      if(AKA_mark("lis===1696###sois===69504###eois===69537###lif===124###soif===4987###eoif===5020###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1696###sois===69504###eois===69537###lif===124###soif===4987###eoif===5020###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (!uivector_push_back(out, in[pos])))) {AKA_mark("lis===1696###sois===69539###eois===69569###lif===124###soif===5022###eoif===5052###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");AKA_mark("lis===1696###sois===69539###eois===69569###lif===124###soif===5022###eoif===5052###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");ERROR_BREAK(83 /*alloc fail*/)}
else {
AKA_mark("lis===-1696-###sois===-69504-###eois===-6950433-###lif===-124-###soif===-###eoif===-5020-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
};
    } else {
if(AKA_mark("lis===1697###sois===69586###eois===69637###lif===125###soif===5069###eoif===5120###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && ((AKA_mark("lis===1697###sois===69586###eois===69603###lif===125###soif===5069###eoif===5086###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (length < minmatch)) || (((AKA_mark("lis===1697###sois===69608###eois===69619###lif===125###soif===5091###eoif===5102###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (length == 3)) && (AKA_mark("lis===1697###sois===69623###eois===69636###lif===125###soif===5106###eoif===5119###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (offset > 4096)))))) {
      /*compensate for the fact that longer offsets have more extra bits, a
      length of only 3 may be not worth it then*/
      if(AKA_mark("lis===1700###sois===69779###eois===69812###lif===128###soif===5262###eoif===5295###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1700###sois===69779###eois===69812###lif===128###soif===5262###eoif===5295###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (!uivector_push_back(out, in[pos])))) {AKA_mark("lis===1700###sois===69814###eois===69844###lif===128###soif===5297###eoif===5327###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");AKA_mark("lis===1700###sois===69814###eois===69844###lif===128###soif===5297###eoif===5327###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");ERROR_BREAK(83 /*alloc fail*/)}
else {
AKA_mark("lis===-1700-###sois===-69779-###eois===-6977933-###lif===-128-###soif===-###eoif===-5295-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
};
    } else {
      AKA_mark("lis===1702###sois===69867###eois===69906###lif===130###soif===5350###eoif===5389###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");addLengthDistance(out, length, offset);
      int AKA_BLOCK_LOOP_69914 = 0;
    AKA_mark("lis===1703###sois===69918###eois===69924###lif===131###soif===5401###eoif===5407###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
for(i = 1; AKA_mark("lis===1703###sois===69925###eois===69935###lif===131###soif===5408###eoif===5418###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1703###sois===69925###eois===69935###lif===131###soif===5408###eoif===5418###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (i < length)); ({AKA_mark("lis===1703###sois===69937###eois===69940###lif===131###soif===5420###eoif===5423###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");++i;})) {
        AKA_BLOCK_LOOP_69914++;
        if (AKA_BLOCK_LOOP_69914 > 1000) {
            //break;
        }
        AKA_mark("lis===1704###sois===69953###eois===69959###lif===132###soif===5436###eoif===5442###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");++pos;
        AKA_mark("lis===1705###sois===69969###eois===69999###lif===133###soif===5452###eoif===5482###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");wpos = pos & (windowsize - 1);
        AKA_mark("lis===1706###sois===70009###eois===70044###lif===134###soif===5492###eoif===5527###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");hashval = getHash(in, insize, pos);
        if(AKA_mark("lis===1707###sois===70057###eois===70081###lif===135###soif===5540###eoif===5564###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && ((AKA_mark("lis===1707###sois===70057###eois===70065###lif===135###soif===5540###eoif===5548###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (usezeros)) && (AKA_mark("lis===1707###sois===70069###eois===70081###lif===135###soif===5552###eoif===5564###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (hashval == 0)))) {
          if(AKA_mark("lis===1708###sois===70099###eois===70112###lif===136###soif===5582###eoif===5595###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (AKA_mark("lis===1708###sois===70099###eois===70112###lif===136###soif===5582###eoif===5595###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (numzeros == 0))) {
AKA_mark("lis===1708###sois===70114###eois===70153###lif===136###soif===5597###eoif===5636###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");numzeros = countZeros(in, insize, pos);
}

          else {
if(AKA_mark("lis===1709###sois===70173###eois===70227###lif===137###soif===5656###eoif===5710###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && ((AKA_mark("lis===1709###sois===70173###eois===70196###lif===137###soif===5656###eoif===5679###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (pos + numzeros > insize)) || (AKA_mark("lis===1709###sois===70200###eois===70227###lif===137###soif===5683###eoif===5710###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)") && (in[pos + numzeros - 1] != 0)))) {
AKA_mark("lis===1709###sois===70229###eois===70240###lif===137###soif===5712###eoif===5723###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");--numzeros;
}

else {
AKA_mark("lis===-1709-###sois===-70173-###eois===-7017354-###lif===-137-###soif===-###eoif===-5710-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");
}
}

        } else {
          AKA_mark("lis===1711###sois===70270###eois===70283###lif===139###soif===5753###eoif===5766###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");numzeros = 0;
        }
        AKA_mark("lis===1713###sois===70304###eois===70351###lif===141###soif===5787###eoif===5834###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");updateHashChain(hash, wpos, hashval, numzeros);
      }
    }
}

  } /*end of the loop through each character of input*/

  AKA_mark("lis===1718###sois===70430###eois===70443###lif===146###soif===5913###eoif===5926###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\encodeLZ77(uivector*,Hash*,unsigned char const*,size_t,size_t,unsigned,unsigned,unsigned,unsigned)");return error;
}

/* /////////////////////////////////////////////////////////////////////////// */

/** Instrumented function deflateNoCompression(ucvector*,unsigned char const*,size_t) */
static unsigned deflateNoCompression(ucvector* out, const unsigned char* data, size_t datasize) /* << Aka begin of function unsigned deflateNoCompression(ucvector* out, const unsigned char* data, size_t datasize) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.deflateNoCompression.70551.stub"

  /*non compressed deflate block data: 1 bit BFINAL,2 bits BTYPE,(5 bits): it jumps to start of next byte,
  2 bytes LEN, 2 bytes NLEN, LEN bytes literal DATA*/

  AKA_mark("lis===1727###sois===70801###eois===70859###lif===4###soif===266###eoif===324###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");size_t i, numdeflateblocks = (datasize + 65534u) / 65535u;
  AKA_mark("lis===1728###sois===70863###eois===70882###lif===5###soif===328###eoif===347###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");size_t datapos = 0;
  int AKA_BLOCK_LOOP_70886 = 0;
    AKA_mark("lis===1729###sois===70890###eois===70896###lif===6###soif===355###eoif===361###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");
for(i = 0; AKA_mark("lis===1729###sois===70897###eois===70918###lif===6###soif===362###eoif===383###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)") && (AKA_mark("lis===1729###sois===70897###eois===70918###lif===6###soif===362###eoif===383###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)") && (i != numdeflateblocks)); ({AKA_mark("lis===1729###sois===70920###eois===70923###lif===6###soif===385###eoif===388###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");++i;})) {
        AKA_BLOCK_LOOP_70886++;
        if (AKA_BLOCK_LOOP_70886 > 1000) {
            //break;
        }
    AKA_mark("lis===1730###sois===70932###eois===70966###lif===7###soif===397###eoif===431###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");unsigned BFINAL, BTYPE, LEN, NLEN;
    AKA_mark("lis===1731###sois===70972###eois===70996###lif===8###soif===437###eoif===461###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");unsigned char firstbyte;
    AKA_mark("lis===1732###sois===71002###eois===71025###lif===9###soif===467###eoif===490###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");size_t pos = out->size;

    AKA_mark("lis===1734###sois===71033###eois===71070###lif===11###soif===498###eoif===535###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");BFINAL = (i == numdeflateblocks - 1);
    AKA_mark("lis===1735###sois===71076###eois===71086###lif===12###soif===541###eoif===551###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");BTYPE = 0;

    AKA_mark("lis===1737###sois===71094###eois===71106###lif===14###soif===559###eoif===571###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");LEN = 65535;
    if(AKA_mark("lis===1738###sois===71115###eois===71142###lif===15###soif===580###eoif===607###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)") && (AKA_mark("lis===1738###sois===71115###eois===71142###lif===15###soif===580###eoif===607###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)") && (datasize - datapos < 65535u))) {
AKA_mark("lis===1738###sois===71144###eois===71189###lif===15###soif===609###eoif===654###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");LEN = (unsigned)datasize - (unsigned)datapos;
}

else {
AKA_mark("lis===-1738-###sois===-71115-###eois===-7111527-###lif===-15-###soif===-###eoif===-607-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");
}
    AKA_mark("lis===1739###sois===71195###eois===71214###lif===16###soif===660###eoif===679###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");NLEN = 65535 - LEN;

    if(AKA_mark("lis===1741###sois===71225###eois===71267###lif===18###soif===690###eoif===732###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)") && (AKA_mark("lis===1741###sois===71225###eois===71267###lif===18###soif===690###eoif===732###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)") && (!ucvector_resize(out, out->size + LEN + 5)))) {
AKA_mark("lis===1741###sois===71269###eois===71279###lif===18###soif===734###eoif===744###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");return 83;
}

else {
AKA_mark("lis===-1741-###sois===-71225-###eois===-7122542-###lif===-18-###soif===-###eoif===-732-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");
} /*alloc fail*/

    AKA_mark("lis===1743###sois===71302###eois===71384###lif===20###soif===767###eoif===849###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");firstbyte = (unsigned char)(BFINAL + ((BTYPE & 1u) << 1u) + ((BTYPE & 2u) << 1u));
    AKA_mark("lis===1744###sois===71390###eois===71421###lif===21###soif===855###eoif===886###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");out->data[pos + 0] = firstbyte;
    AKA_mark("lis===1745###sois===71427###eois===71475###lif===22###soif===892###eoif===940###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");out->data[pos + 1] = (unsigned char)(LEN & 255);
    AKA_mark("lis===1746###sois===71481###eois===71529###lif===23###soif===946###eoif===994###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");out->data[pos + 2] = (unsigned char)(LEN >> 8u);
    AKA_mark("lis===1747###sois===71535###eois===71584###lif===24###soif===1000###eoif===1049###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");out->data[pos + 3] = (unsigned char)(NLEN & 255);
    AKA_mark("lis===1748###sois===71590###eois===71639###lif===25###soif===1055###eoif===1104###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");out->data[pos + 4] = (unsigned char)(NLEN >> 8u);
    AKA_mark("lis===1749###sois===71645###eois===71702###lif===26###soif===1110###eoif===1167###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");lodepng_memcpy(out->data + pos + 5, data + datapos, LEN);
    AKA_mark("lis===1750###sois===71708###eois===71723###lif===27###soif===1173###eoif===1188###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");datapos += LEN;
  }

  AKA_mark("lis===1753###sois===71734###eois===71743###lif===30###soif===1199###eoif===1208###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateNoCompression(ucvector*,unsigned char const*,size_t)");return 0;
}

/*
write the lz77-encoded data, which has lit, len and dist codes, to compressed stream using huffman trees.
tree_ll: the tree for lit and len codes.
tree_d: the tree for distance codes.
*/
/** Instrumented function writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*) */
static void writeLZ77data(LodePNGBitWriter* writer, const uivector* lz77_encoded,
                          const HuffmanTree* tree_ll, const HuffmanTree* tree_d) /* << Aka begin of function void writeLZ77data(LodePNGBitWriter* writer, const uivector* lz77_encoded,
                          const HuffmanTree* tree_ll, const HuffmanTree* tree_d) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.writeLZ77data.71957.stub"

  AKA_mark("lis===1763###sois===72114###eois===72127###lif===2###soif===169###eoif===182###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)");size_t i = 0;
  int AKA_BLOCK_LOOP_72131 = 0;
    AKA_mark("lis===1764###sois===72135###eois===72141###lif===3###soif===190###eoif===196###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)");
for(i = 0; AKA_mark("lis===1764###sois===72142###eois===72165###lif===3###soif===197###eoif===220###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)") && (AKA_mark("lis===1764###sois===72142###eois===72165###lif===3###soif===197###eoif===220###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)") && (i != lz77_encoded->size)); ({AKA_mark("lis===1764###sois===72167###eois===72170###lif===3###soif===222###eoif===225###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)");++i;})) {
        AKA_BLOCK_LOOP_72131++;
        if (AKA_BLOCK_LOOP_72131 > 1000) {
            //break;
        }
    AKA_mark("lis===1765###sois===72179###eois===72216###lif===4###soif===234###eoif===271###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)");unsigned val = lz77_encoded->data[i];
    AKA_mark("lis===1766###sois===72222###eois===72292###lif===5###soif===277###eoif===347###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)");writeBitsReversed(writer, tree_ll->codes[val], tree_ll->lengths[val]);
    if(AKA_mark("lis===1767###sois===72301###eois===72310###lif===6###soif===356###eoif===365###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)") && (AKA_mark("lis===1767###sois===72301###eois===72310###lif===6###soif===356###eoif===365###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)") && (val > 256))) /*for a length code, 3 more things have to be added*/ {
      AKA_mark("lis===1768###sois===72375###eois===72429###lif===7###soif===430###eoif===484###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)");unsigned length_index = val - FIRST_LENGTH_CODE_INDEX;
      AKA_mark("lis===1769###sois===72437###eois===72494###lif===8###soif===492###eoif===549###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)");unsigned n_length_extra_bits = LENGTHEXTRA[length_index];
      AKA_mark("lis===1770###sois===72502###eois===72555###lif===9###soif===557###eoif===610###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)");unsigned length_extra_bits = lz77_encoded->data[++i];

      AKA_mark("lis===1772###sois===72565###eois===72614###lif===11###soif===620###eoif===669###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)");unsigned distance_code = lz77_encoded->data[++i];

      AKA_mark("lis===1774###sois===72624###eois===72664###lif===13###soif===679###eoif===719###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)");unsigned distance_index = distance_code;
      AKA_mark("lis===1775###sois===72672###eois===72735###lif===14###soif===727###eoif===790###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)");unsigned n_distance_extra_bits = DISTANCEEXTRA[distance_index];
      AKA_mark("lis===1776###sois===72743###eois===72798###lif===15###soif===798###eoif===853###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)");unsigned distance_extra_bits = lz77_encoded->data[++i];

      AKA_mark("lis===1778###sois===72808###eois===72866###lif===17###soif===863###eoif===921###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)");writeBits(writer, length_extra_bits, n_length_extra_bits);
      AKA_mark("lis===1779###sois===72874###eois===72962###lif===18###soif===929###eoif===1017###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)");writeBitsReversed(writer, tree_d->codes[distance_code], tree_d->lengths[distance_code]);
      AKA_mark("lis===1780###sois===72970###eois===73032###lif===19###soif===1025###eoif===1087###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)");writeBits(writer, distance_extra_bits, n_distance_extra_bits);
    }
else {
AKA_mark("lis===-1767-###sois===-72301-###eois===-723019-###lif===-6-###soif===-###eoif===-365-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeLZ77data(LodePNGBitWriter*,uivector const*,HuffmanTree const*,HuffmanTree const*)");
}
  }
}

/*Deflate for a block of type "dynamic", that is, with freely, optimally, created huffman trees*/
/** Instrumented function deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned) */
static unsigned deflateDynamic(LodePNGBitWriter* writer, Hash* hash,
                               const unsigned char* data, size_t datapos, size_t dataend,
                               const LodePNGCompressSettings* settings, unsigned final) /* << Aka begin of function unsigned deflateDynamic(LodePNGBitWriter* writer, Hash* hash,
                               const unsigned char* data, size_t datapos, size_t dataend,
                               const LodePNGCompressSettings* settings, unsigned final) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.deflateDynamic.73166.stub"

  AKA_mark("lis===1789###sois===73404###eois===73423###lif===3###soif===254###eoif===273###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");unsigned error = 0;

  /*
  A block is compressed as follows: The PNG data is lz77 encoded, resulting in
  literal bytes and length/distance pairs. This is then huffman compressed with
  two huffman trees. One huffman tree is used for the lit and len values ("ll"),
  another huffman tree is used for the dist values ("d"). These two trees are
  stored using their code lengths, and to compress even more these code lengths
  are also run-length encoded and huffman compressed. This gives a huffman tree
  of code lengths "cl". The code lengths used to describe this third tree are
  the code length code lengths ("clcl").
  */

  /*The lz77 encoded data, represented with integers since there will also be length and distance codes in it*/
  AKA_mark("lis===1803###sois===74161###eois===74183###lif===17###soif===1011###eoif===1033###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");uivector lz77_encoded;
  AKA_mark("lis===1804###sois===74187###eois===74207###lif===18###soif===1037###eoif===1057###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");HuffmanTree tree_ll; /*tree for lit,len values*/
  AKA_mark("lis===1805###sois===74239###eois===74258###lif===19###soif===1089###eoif===1108###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");HuffmanTree tree_d; /*tree for distance codes*/
  AKA_mark("lis===1806###sois===74290###eois===74310###lif===20###soif===1140###eoif===1160###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");HuffmanTree tree_cl; /*tree for encoding the code lengths representing tree_ll and tree_d*/
  AKA_mark("lis===1807###sois===74385###eois===74414###lif===21###soif===1235###eoif===1264###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");unsigned* frequencies_ll = 0; /*frequency of lit,len codes*/
  AKA_mark("lis===1808###sois===74449###eois===74477###lif===22###soif===1299###eoif===1327###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");unsigned* frequencies_d = 0; /*frequency of dist codes*/
  AKA_mark("lis===1809###sois===74509###eois===74538###lif===23###soif===1359###eoif===1388###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");unsigned* frequencies_cl = 0; /*frequency of code length codes*/
  AKA_mark("lis===1810###sois===74577###eois===74602###lif===24###soif===1427###eoif===1452###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");unsigned* bitlen_lld = 0; /*lit,len,dist code lengths (int bits), literally (without repeat codes).*/
  AKA_mark("lis===1811###sois===74682###eois===74709###lif===25###soif===1532###eoif===1559###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");unsigned* bitlen_lld_e = 0; /*bitlen_lld encoded with repeat codes (this is a rudimentary run length compression)*/
  AKA_mark("lis===1812###sois===74801###eois===74837###lif===26###soif===1651###eoif===1687###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");size_t datasize = dataend - datapos;

  /*
  If we could call "bitlen_cl" the the code length code lengths ("clcl"), that is the bit lengths of codes to represent
  tree_cl in CLCL_ORDER, then due to the huffman compression of huffman tree representations ("two levels"), there are
  some analogies:
  bitlen_lld is to tree_cl what data is to tree_ll and tree_d.
  bitlen_lld_e is to bitlen_lld what lz77_encoded is to data.
  bitlen_cl is to bitlen_lld_e what bitlen_lld is to lz77_encoded.
  */

  AKA_mark("lis===1823###sois===75312###eois===75336###lif===37###soif===2162###eoif===2186###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");unsigned BFINAL = final;
  AKA_mark("lis===1824###sois===75340###eois===75349###lif===38###soif===2190###eoif===2199###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");size_t i;
  AKA_mark("lis===1825###sois===75353###eois===75427###lif===39###soif===2203###eoif===2277###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");size_t numcodes_ll, numcodes_d, numcodes_lld, numcodes_lld_e, numcodes_cl;
  AKA_mark("lis===1826###sois===75431###eois===75459###lif===40###soif===2281###eoif===2309###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");unsigned HLIT, HDIST, HCLEN;

  AKA_mark("lis===1828###sois===75465###eois===75494###lif===42###soif===2315###eoif===2344###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");uivector_init(&lz77_encoded);
  AKA_mark("lis===1829###sois===75498###eois===75525###lif===43###soif===2348###eoif===2375###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");HuffmanTree_init(&tree_ll);
  AKA_mark("lis===1830###sois===75529###eois===75555###lif===44###soif===2379###eoif===2405###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");HuffmanTree_init(&tree_d);
  AKA_mark("lis===1831###sois===75559###eois===75586###lif===45###soif===2409###eoif===2436###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");HuffmanTree_init(&tree_cl);
  /* could fit on stack, but >1KB is on the larger side so allocate instead */
  AKA_mark("lis===1833###sois===75670###eois===75744###lif===47###soif===2520###eoif===2594###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");frequencies_ll = (unsigned*)lodepng_malloc(286 * sizeof(*frequencies_ll));
  AKA_mark("lis===1834###sois===75748###eois===75819###lif===48###soif===2598###eoif===2669###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");frequencies_d = (unsigned*)lodepng_malloc(30 * sizeof(*frequencies_d));
  AKA_mark("lis===1835###sois===75823###eois===75915###lif===49###soif===2673###eoif===2765###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");frequencies_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(*frequencies_cl));

  if(AKA_mark("lis===1837###sois===75924###eois===75976###lif===51###soif===2774###eoif===2826###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (((AKA_mark("lis===1837###sois===75924###eois===75939###lif===51###soif===2774###eoif===2789###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (!frequencies_ll)) || (AKA_mark("lis===1837###sois===75943###eois===75957###lif===51###soif===2793###eoif===2807###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (!frequencies_d))) || (AKA_mark("lis===1837###sois===75961###eois===75976###lif===51###soif===2811###eoif===2826###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (!frequencies_cl)))) {
AKA_mark("lis===1837###sois===75978###eois===75989###lif===51###soif===2828###eoif===2839###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");error = 83;
}

else {
AKA_mark("lis===-1837-###sois===-75924-###eois===-7592452-###lif===-51-###soif===-###eoif===-2826-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
} /*alloc fail*/

  /*This while loop never loops due to a break at the end, it is here to
  allow breaking out of it to the cleanup phase on error conditions.*/
  int AKA_BLOCK_LOOP_76156 = 0;
    while(AKA_mark("lis===1841###sois===76162###eois===76168###lif===55###soif===3012###eoif===3018###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1841###sois===76162###eois===76168###lif===55###soif===3012###eoif===3018###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (!error))) {
        AKA_BLOCK_LOOP_76156++;
        if (AKA_BLOCK_LOOP_76156 > 1000) {
            //break;
        }
    AKA_mark("lis===1842###sois===76177###eois===76242###lif===56###soif===3027###eoif===3092###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");lodepng_memset(frequencies_ll, 0, 286 * sizeof(*frequencies_ll));
    AKA_mark("lis===1843###sois===76248###eois===76310###lif===57###soif===3098###eoif===3160###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");lodepng_memset(frequencies_d, 0, 30 * sizeof(*frequencies_d));
    AKA_mark("lis===1844###sois===76316###eois===76399###lif===58###soif===3166###eoif===3249###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");lodepng_memset(frequencies_cl, 0, NUM_CODE_LENGTH_CODES * sizeof(*frequencies_cl));

    if(AKA_mark("lis===1846###sois===76410###eois===76428###lif===60###soif===3260###eoif===3278###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1846###sois===76410###eois===76428###lif===60###soif===3260###eoif===3278###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (settings->use_lz77))) {
      AKA_mark("lis===1847###sois===76439###eois===76616###lif===61###soif===3289###eoif===3466###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
                         settings->minmatch, settings->nicematch, settings->lazymatching);
      if(AKA_mark("lis===1849###sois===76627###eois===76632###lif===63###soif===3477###eoif===3482###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1849###sois===76627###eois===76632###lif===63###soif===3477###eoif===3482###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (error))) {
AKA_mark("lis===1849###sois===76634###eois===76640###lif===63###soif===3484###eoif===3490###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");break;
}

else {
AKA_mark("lis===-1849-###sois===-76627-###eois===-766275-###lif===-63-###soif===-###eoif===-3482-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
}
    } else {
      if(AKA_mark("lis===1851###sois===76665###eois===76706###lif===65###soif===3515###eoif===3556###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1851###sois===76665###eois===76706###lif===65###soif===3515###eoif===3556###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (!uivector_resize(&lz77_encoded, datasize)))) {AKA_mark("lis===1851###sois===76708###eois===76738###lif===65###soif===3558###eoif===3588###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");AKA_mark("lis===1851###sois===76708###eois===76738###lif===65###soif===3558###eoif===3588###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");ERROR_BREAK(83 /*alloc fail*/)}
else {
AKA_mark("lis===-1851-###sois===-76665-###eois===-7666541-###lif===-65-###soif===-###eoif===-3556-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
};
      int AKA_BLOCK_LOOP_76747 = 0;
    AKA_mark("lis===1852###sois===76751###eois===76763###lif===66###soif===3601###eoif===3613###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
for(i = datapos; AKA_mark("lis===1852###sois===76764###eois===76775###lif===66###soif===3614###eoif===3625###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1852###sois===76764###eois===76775###lif===66###soif===3614###eoif===3625###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (i < dataend)); ({AKA_mark("lis===1852###sois===76777###eois===76780###lif===66###soif===3627###eoif===3630###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");++i;})) {
AKA_mark("lis===1852###sois===76782###eois===76823###lif===66###soif===3632###eoif===3673###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");lz77_encoded.data[i - datapos] = data[i];
}
 /*no LZ77, but still will be Huffman compressed*/
    }

    /*Count the frequencies of lit, len and dist codes*/
    int AKA_BLOCK_LOOP_76946 = 0;
    AKA_mark("lis===1856###sois===76950###eois===76956###lif===70###soif===3800###eoif===3806###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
for(i = 0; AKA_mark("lis===1856###sois===76957###eois===76979###lif===70###soif===3807###eoif===3829###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1856###sois===76957###eois===76979###lif===70###soif===3807###eoif===3829###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (i != lz77_encoded.size)); ({AKA_mark("lis===1856###sois===76981###eois===76984###lif===70###soif===3831###eoif===3834###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");++i;})) {
        AKA_BLOCK_LOOP_76946++;
        if (AKA_BLOCK_LOOP_76946 > 1000) {
            //break;
        }
      AKA_mark("lis===1857###sois===76995###eois===77034###lif===71###soif===3845###eoif===3884###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");unsigned symbol = lz77_encoded.data[i];
      AKA_mark("lis===1858###sois===77042###eois===77067###lif===72###soif===3892###eoif===3917###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");++frequencies_ll[symbol];
      if(AKA_mark("lis===1859###sois===77078###eois===77090###lif===73###soif===3928###eoif===3940###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1859###sois===77078###eois===77090###lif===73###soif===3928###eoif===3940###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (symbol > 256))) {
        AKA_mark("lis===1860###sois===77103###eois===77144###lif===74###soif===3953###eoif===3994###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");unsigned dist = lz77_encoded.data[i + 2];
        AKA_mark("lis===1861###sois===77154###eois===77176###lif===75###soif===4004###eoif===4026###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");++frequencies_d[dist];
        AKA_mark("lis===1862###sois===77186###eois===77193###lif===76###soif===4036###eoif===4043###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");i += 3;
      }
else {
AKA_mark("lis===-1859-###sois===-77078-###eois===-7707812-###lif===-73-###soif===-###eoif===-3940-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
}
    }
    AKA_mark("lis===1865###sois===77215###eois===77239###lif===79###soif===4065###eoif===4089###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");frequencies_ll[256] = 1; /*there will be exactly 1 end code, at the end of the block*/

    /*Make both huffman trees, one for the lit and len codes, one for the dist codes*/
    AKA_mark("lis===1868###sois===77397###eois===77477###lif===82###soif===4247###eoif===4327###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");error = HuffmanTree_makeFromFrequencies(&tree_ll, frequencies_ll, 257, 286, 15);
    if(AKA_mark("lis===1869###sois===77486###eois===77491###lif===83###soif===4336###eoif===4341###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1869###sois===77486###eois===77491###lif===83###soif===4336###eoif===4341###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (error))) {
AKA_mark("lis===1869###sois===77493###eois===77499###lif===83###soif===4343###eoif===4349###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");break;
}

else {
AKA_mark("lis===-1869-###sois===-77486-###eois===-774865-###lif===-83-###soif===-###eoif===-4341-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
}
    /*2, not 1, is chosen for mincodes: some buggy PNG decoders require at least 2 symbols in the dist tree*/
    AKA_mark("lis===1871###sois===77616###eois===77691###lif===85###soif===4466###eoif===4541###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");error = HuffmanTree_makeFromFrequencies(&tree_d, frequencies_d, 2, 30, 15);
    if(AKA_mark("lis===1872###sois===77700###eois===77705###lif===86###soif===4550###eoif===4555###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1872###sois===77700###eois===77705###lif===86###soif===4550###eoif===4555###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (error))) {
AKA_mark("lis===1872###sois===77707###eois===77713###lif===86###soif===4557###eoif===4563###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");break;
}

else {
AKA_mark("lis===-1872-###sois===-77700-###eois===-777005-###lif===-86-###soif===-###eoif===-4555-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
}

    AKA_mark("lis===1874###sois===77721###eois===77770###lif===88###soif===4571###eoif===4620###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");numcodes_ll = LODEPNG_MIN(tree_ll.numcodes, 286);
    AKA_mark("lis===1875###sois===77776###eois===77822###lif===89###soif===4626###eoif===4672###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");numcodes_d = LODEPNG_MIN(tree_d.numcodes, 30);
    /*store the code lengths of both generated trees in bitlen_lld*/
    AKA_mark("lis===1877###sois===77898###eois===77938###lif===91###soif===4748###eoif===4788###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");numcodes_lld = numcodes_ll + numcodes_d;
    AKA_mark("lis===1878###sois===77944###eois===78019###lif===92###soif===4794###eoif===4869###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");bitlen_lld = (unsigned*)lodepng_malloc(numcodes_lld * sizeof(*bitlen_lld));
    /*numcodes_lld_e never needs more size than bitlen_lld*/
    AKA_mark("lis===1880###sois===78087###eois===78166###lif===94###soif===4937###eoif===5016###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");bitlen_lld_e = (unsigned*)lodepng_malloc(numcodes_lld * sizeof(*bitlen_lld_e));
    if(AKA_mark("lis===1881###sois===78175###eois===78203###lif===95###soif===5025###eoif===5053###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && ((AKA_mark("lis===1881###sois===78175###eois===78186###lif===95###soif===5025###eoif===5036###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (!bitlen_lld)) || (AKA_mark("lis===1881###sois===78190###eois===78203###lif===95###soif===5040###eoif===5053###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (!bitlen_lld_e)))) {AKA_mark("lis===1881###sois===78205###eois===78220###lif===95###soif===5055###eoif===5070###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");AKA_mark("lis===1881###sois===78205###eois===78220###lif===95###soif===5055###eoif===5070###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");ERROR_BREAK(83)}
else {
AKA_mark("lis===-1881-###sois===-78175-###eois===-7817528-###lif===-95-###soif===-###eoif===-5053-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
}; /*alloc fail*/
    AKA_mark("lis===1882###sois===78242###eois===78261###lif===96###soif===5092###eoif===5111###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");numcodes_lld_e = 0;

    int AKA_BLOCK_LOOP_78269 = 0;
    AKA_mark("lis===1884###sois===78273###eois===78279###lif===98###soif===5123###eoif===5129###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
for(i = 0; AKA_mark("lis===1884###sois===78280###eois===78296###lif===98###soif===5130###eoif===5146###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1884###sois===78280###eois===78296###lif===98###soif===5130###eoif===5146###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (i != numcodes_ll)); ({AKA_mark("lis===1884###sois===78298###eois===78301###lif===98###soif===5148###eoif===5151###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");++i;})) {
AKA_mark("lis===1884###sois===78303###eois===78338###lif===98###soif===5153###eoif===5188###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");bitlen_lld[i] = tree_ll.lengths[i];
}

    int AKA_BLOCK_LOOP_78344 = 0;
    AKA_mark("lis===1885###sois===78348###eois===78354###lif===99###soif===5198###eoif===5204###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
for(i = 0; AKA_mark("lis===1885###sois===78355###eois===78370###lif===99###soif===5205###eoif===5220###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1885###sois===78355###eois===78370###lif===99###soif===5205###eoif===5220###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (i != numcodes_d)); ({AKA_mark("lis===1885###sois===78372###eois===78375###lif===99###soif===5222###eoif===5225###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");++i;})) {
AKA_mark("lis===1885###sois===78377###eois===78425###lif===99###soif===5227###eoif===5275###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");bitlen_lld[numcodes_ll + i] = tree_d.lengths[i];
}


    /*run-length compress bitlen_ldd into bitlen_lld_e by using repeat codes 16 (copy length 3-6 times),
    17 (3-10 zeroes), 18 (11-138 zeroes)*/
    int AKA_BLOCK_LOOP_78583 = 0;
    AKA_mark("lis===1889###sois===78587###eois===78593###lif===103###soif===5437###eoif===5443###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
for(i = 0; AKA_mark("lis===1889###sois===78594###eois===78611###lif===103###soif===5444###eoif===5461###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1889###sois===78594###eois===78611###lif===103###soif===5444###eoif===5461###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (i != numcodes_lld)); ({AKA_mark("lis===1889###sois===78613###eois===78616###lif===103###soif===5463###eoif===5466###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");++i;})) {
        AKA_BLOCK_LOOP_78583++;
        if (AKA_BLOCK_LOOP_78583 > 1000) {
            //break;
        }
      AKA_mark("lis===1890###sois===78627###eois===78642###lif===104###soif===5477###eoif===5492###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");unsigned j = 0; /*amount of repetitions*/
      int AKA_BLOCK_LOOP_78676 = 0;
    while(AKA_mark("lis===1891###sois===78682###eois===78748###lif===105###soif===5532###eoif===5598###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && ((AKA_mark("lis===1891###sois===78682###eois===78706###lif===105###soif===5532###eoif===5556###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (i + j + 1 < numcodes_lld)) && (AKA_mark("lis===1891###sois===78710###eois===78748###lif===105###soif===5560###eoif===5598###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (bitlen_lld[i + j + 1] == bitlen_lld[i])))) {
AKA_mark("lis===1891###sois===78750###eois===78754###lif===105###soif===5600###eoif===5604###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");++j;
}


      if(AKA_mark("lis===1893###sois===78767###eois===78795###lif===107###soif===5617###eoif===5645###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && ((AKA_mark("lis===1893###sois===78767###eois===78785###lif===107###soif===5617###eoif===5635###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (bitlen_lld[i] == 0)) && (AKA_mark("lis===1893###sois===78789###eois===78795###lif===107###soif===5639###eoif===5645###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (j >= 2)))) /*repeat code for zeroes*/ {
        AKA_mark("lis===1894###sois===78835###eois===78839###lif===108###soif===5685###eoif===5689###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");++j; /*include the first zero*/
        if(AKA_mark("lis===1895###sois===78879###eois===78886###lif===109###soif===5729###eoif===5736###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1895###sois===78879###eois===78886###lif===109###soif===5729###eoif===5736###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (j <= 10))) /*repeat code 17 supports max 10 zeroes*/ {
          AKA_mark("lis===1896###sois===78943###eois===78979###lif===110###soif===5793###eoif===5829###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");bitlen_lld_e[numcodes_lld_e++] = 17;
          AKA_mark("lis===1897###sois===78991###eois===79030###lif===111###soif===5841###eoif===5880###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");bitlen_lld_e[numcodes_lld_e++] = j - 3;
        } else /*repeat code 18 supports max 138 zeroes*/ {
          if(AKA_mark("lis===1899###sois===79106###eois===79113###lif===113###soif===5956###eoif===5963###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1899###sois===79106###eois===79113###lif===113###soif===5956###eoif===5963###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (j > 138))) {
AKA_mark("lis===1899###sois===79115###eois===79123###lif===113###soif===5965###eoif===5973###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");j = 138;
}

else {
AKA_mark("lis===-1899-###sois===-79106-###eois===-791067-###lif===-113-###soif===-###eoif===-5963-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
}
          AKA_mark("lis===1900###sois===79135###eois===79171###lif===114###soif===5985###eoif===6021###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");bitlen_lld_e[numcodes_lld_e++] = 18;
          AKA_mark("lis===1901###sois===79183###eois===79223###lif===115###soif===6033###eoif===6073###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");bitlen_lld_e[numcodes_lld_e++] = j - 11;
        }
        AKA_mark("lis===1903###sois===79244###eois===79257###lif===117###soif===6094###eoif===6107###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");i += (j - 1);
      } else {
if(AKA_mark("lis===1904###sois===79275###eois===79281###lif===118###soif===6125###eoif===6131###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1904###sois===79275###eois===79281###lif===118###soif===6125###eoif===6131###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (j >= 3))) /*repeat code for value other than zero*/ {
        AKA_mark("lis===1905###sois===79336###eois===79345###lif===119###soif===6186###eoif===6195###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");size_t k;
        AKA_mark("lis===1906###sois===79355###eois===79392###lif===120###soif===6205###eoif===6242###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");unsigned num = j / 6u, rest = j % 6u;
        AKA_mark("lis===1907###sois===79402###eois===79449###lif===121###soif===6252###eoif===6299###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");bitlen_lld_e[numcodes_lld_e++] = bitlen_lld[i];
        int AKA_BLOCK_LOOP_79459 = 0;
    AKA_mark("lis===1908###sois===79463###eois===79469###lif===122###soif===6313###eoif===6319###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
for(k = 0; AKA_mark("lis===1908###sois===79470###eois===79477###lif===122###soif===6320###eoif===6327###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1908###sois===79470###eois===79477###lif===122###soif===6320###eoif===6327###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (k < num)); ({AKA_mark("lis===1908###sois===79479###eois===79482###lif===122###soif===6329###eoif===6332###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");++k;})) {
        AKA_BLOCK_LOOP_79459++;
        if (AKA_BLOCK_LOOP_79459 > 1000) {
            //break;
        }
          AKA_mark("lis===1909###sois===79497###eois===79533###lif===123###soif===6347###eoif===6383###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");bitlen_lld_e[numcodes_lld_e++] = 16;
          AKA_mark("lis===1910###sois===79545###eois===79584###lif===124###soif===6395###eoif===6434###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");bitlen_lld_e[numcodes_lld_e++] = 6 - 3;
        }
        if(AKA_mark("lis===1912###sois===79608###eois===79617###lif===126###soif===6458###eoif===6467###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1912###sois===79608###eois===79617###lif===126###soif===6458###eoif===6467###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (rest >= 3))) {
          AKA_mark("lis===1913###sois===79632###eois===79668###lif===127###soif===6482###eoif===6518###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");bitlen_lld_e[numcodes_lld_e++] = 16;
          AKA_mark("lis===1914###sois===79680###eois===79722###lif===128###soif===6530###eoif===6572###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");bitlen_lld_e[numcodes_lld_e++] = rest - 3;
        }
        else {
AKA_mark("lis===1916###sois===79748###eois===79758###lif===130###soif===6598###eoif===6608###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");j -= rest;
}

        AKA_mark("lis===1917###sois===79768###eois===79775###lif===131###soif===6618###eoif===6625###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");i += j;
      } else /*too short to benefit from repeat code*/ {
        AKA_mark("lis===1919###sois===79843###eois===79890###lif===133###soif===6693###eoif===6740###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");bitlen_lld_e[numcodes_lld_e++] = bitlen_lld[i];
      }
}

    }

    /*generate tree_cl, the huffmantree of huffmantrees*/
    int AKA_BLOCK_LOOP_79973 = 0;
    AKA_mark("lis===1924###sois===79977###eois===79983###lif===138###soif===6827###eoif===6833###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
for(i = 0; AKA_mark("lis===1924###sois===79984###eois===80003###lif===138###soif===6834###eoif===6853###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1924###sois===79984###eois===80003###lif===138###soif===6834###eoif===6853###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (i != numcodes_lld_e)); ({AKA_mark("lis===1924###sois===80005###eois===80008###lif===138###soif===6855###eoif===6858###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");++i;})) {
        AKA_BLOCK_LOOP_79973++;
        if (AKA_BLOCK_LOOP_79973 > 1000) {
            //break;
        }
      AKA_mark("lis===1925###sois===80019###eois===80053###lif===139###soif===6869###eoif===6903###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");++frequencies_cl[bitlen_lld_e[i]];
      /*after a repeat code come the bits that specify the number of repetitions,
      those don't need to be in the frequencies_cl calculation*/
      if(AKA_mark("lis===1928###sois===80213###eois===80234###lif===142###soif===7063###eoif===7084###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1928###sois===80213###eois===80234###lif===142###soif===7063###eoif===7084###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (bitlen_lld_e[i] >= 16))) {
AKA_mark("lis===1928###sois===80236###eois===80240###lif===142###soif===7086###eoif===7090###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");++i;
}

else {
AKA_mark("lis===-1928-###sois===-80213-###eois===-8021321-###lif===-142-###soif===-###eoif===-7084-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
}
    }

    AKA_mark("lis===1931###sois===80255###eois===80415###lif===145###soif===7105###eoif===7265###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");error = HuffmanTree_makeFromFrequencies(&tree_cl, frequencies_cl,
                                            NUM_CODE_LENGTH_CODES, NUM_CODE_LENGTH_CODES, 7);
    if(AKA_mark("lis===1933###sois===80424###eois===80429###lif===147###soif===7274###eoif===7279###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1933###sois===80424###eois===80429###lif===147###soif===7274###eoif===7279###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (error))) {
AKA_mark("lis===1933###sois===80431###eois===80437###lif===147###soif===7281###eoif===7287###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");break;
}

else {
AKA_mark("lis===-1933-###sois===-80424-###eois===-804245-###lif===-147-###soif===-###eoif===-7279-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
}

    /*compute amount of code-length-code-lengths to output*/
    AKA_mark("lis===1936###sois===80507###eois===80543###lif===150###soif===7357###eoif===7393###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");numcodes_cl = NUM_CODE_LENGTH_CODES;
    /*trim zeros at the end (using CLCL_ORDER), but minimum size must be 4 (see HCLEN below)*/
    int AKA_BLOCK_LOOP_80645 = 0;
    while(AKA_mark("lis===1938###sois===80651###eois===80721###lif===152###soif===7501###eoif===7571###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && ((AKA_mark("lis===1938###sois===80651###eois===80667###lif===152###soif===7501###eoif===7517###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (numcodes_cl > 4u)) && (AKA_mark("lis===1938###sois===80671###eois===80721###lif===152###soif===7521###eoif===7571###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (tree_cl.lengths[CLCL_ORDER[numcodes_cl - 1u]] == 0)))) {
        AKA_BLOCK_LOOP_80645++;
        if (AKA_BLOCK_LOOP_80645 > 1000) {
            //break;
        }
      AKA_mark("lis===1939###sois===80732###eois===80746###lif===153###soif===7582###eoif===7596###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");numcodes_cl--;
    }

    /*
    Write everything into the output

    After the BFINAL and BTYPE, the dynamic block consists out of the following:
    - 5 bits HLIT, 5 bits HDIST, 4 bits HCLEN
    - (HCLEN+4)*3 bits code lengths of code length alphabet
    - HLIT + 257 code lengths of lit/length alphabet (encoded using the code length
      alphabet, + possible repetition codes 16, 17, 18)
    - HDIST + 1 code lengths of distance alphabet (encoded using the code length
      alphabet, + possible repetition codes 16, 17, 18)
    - compressed data
    - 256 (end code)
    */

    /*Write block type*/
    AKA_mark("lis===1957###sois===81361###eois===81390###lif===171###soif===8211###eoif===8240###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");writeBits(writer, BFINAL, 1);
    AKA_mark("lis===1958###sois===81396###eois===81420###lif===172###soif===8246###eoif===8270###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");writeBits(writer, 0, 1); /*first bit of BTYPE "dynamic"*/
    AKA_mark("lis===1959###sois===81459###eois===81483###lif===173###soif===8309###eoif===8333###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");writeBits(writer, 1, 1); /*second bit of BTYPE "dynamic"*/

    /*write the HLIT, HDIST and HCLEN values*/
    /*all three sizes take trimmed ending zeroes into account, done either by HuffmanTree_makeFromFrequencies
    or in the loop for numcodes_cl above, which saves space. */
    AKA_mark("lis===1964###sois===81749###eois===81786###lif===178###soif===8599###eoif===8636###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");HLIT = (unsigned)(numcodes_ll - 257);
    AKA_mark("lis===1965###sois===81792###eois===81827###lif===179###soif===8642###eoif===8677###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");HDIST = (unsigned)(numcodes_d - 1);
    AKA_mark("lis===1966###sois===81833###eois===81869###lif===180###soif===8683###eoif===8719###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");HCLEN = (unsigned)(numcodes_cl - 4);
    AKA_mark("lis===1967###sois===81875###eois===81902###lif===181###soif===8725###eoif===8752###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");writeBits(writer, HLIT, 5);
    AKA_mark("lis===1968###sois===81908###eois===81936###lif===182###soif===8758###eoif===8786###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");writeBits(writer, HDIST, 5);
    AKA_mark("lis===1969###sois===81942###eois===81970###lif===183###soif===8792###eoif===8820###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");writeBits(writer, HCLEN, 4);

    /*write the code lengths of the code length alphabet ("bitlen_cl")*/
    int AKA_BLOCK_LOOP_82052 = 0;
    AKA_mark("lis===1972###sois===82056###eois===82062###lif===186###soif===8906###eoif===8912###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
for(i = 0; AKA_mark("lis===1972###sois===82063###eois===82079###lif===186###soif===8913###eoif===8929###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1972###sois===82063###eois===82079###lif===186###soif===8913###eoif===8929###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (i != numcodes_cl)); ({AKA_mark("lis===1972###sois===82081###eois===82084###lif===186###soif===8931###eoif===8934###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");++i;})) {
AKA_mark("lis===1972###sois===82086###eois===82139###lif===186###soif===8936###eoif===8989###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");writeBits(writer, tree_cl.lengths[CLCL_ORDER[i]], 3);
}


    /*write the lengths of the lit/len AND the dist alphabet*/
    int AKA_BLOCK_LOOP_82211 = 0;
    AKA_mark("lis===1975###sois===82215###eois===82221###lif===189###soif===9065###eoif===9071###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
for(i = 0; AKA_mark("lis===1975###sois===82222###eois===82241###lif===189###soif===9072###eoif===9091###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1975###sois===82222###eois===82241###lif===189###soif===9072###eoif===9091###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (i != numcodes_lld_e)); ({AKA_mark("lis===1975###sois===82243###eois===82246###lif===189###soif===9093###eoif===9096###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");++i;})) {
        AKA_BLOCK_LOOP_82211++;
        if (AKA_BLOCK_LOOP_82211 > 1000) {
            //break;
        }
      AKA_mark("lis===1976###sois===82257###eois===82349###lif===190###soif===9107###eoif===9199###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");writeBitsReversed(writer, tree_cl.codes[bitlen_lld_e[i]], tree_cl.lengths[bitlen_lld_e[i]]);
      /*extra bits of repeat codes*/
      if(AKA_mark("lis===1978###sois===82398###eois===82419###lif===192###soif===9248###eoif===9269###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1978###sois===82398###eois===82419###lif===192###soif===9248###eoif===9269###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (bitlen_lld_e[i] == 16))) {
AKA_mark("lis===1978###sois===82421###eois===82461###lif===192###soif===9271###eoif===9311###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");writeBits(writer, bitlen_lld_e[++i], 2);
}

      else {
if(AKA_mark("lis===1979###sois===82477###eois===82498###lif===193###soif===9327###eoif===9348###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1979###sois===82477###eois===82498###lif===193###soif===9327###eoif===9348###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (bitlen_lld_e[i] == 17))) {
AKA_mark("lis===1979###sois===82500###eois===82540###lif===193###soif===9350###eoif===9390###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");writeBits(writer, bitlen_lld_e[++i], 3);
}

      else {
if(AKA_mark("lis===1980###sois===82556###eois===82577###lif===194###soif===9406###eoif===9427###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1980###sois===82556###eois===82577###lif===194###soif===9406###eoif===9427###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (bitlen_lld_e[i] == 18))) {
AKA_mark("lis===1980###sois===82579###eois===82619###lif===194###soif===9429###eoif===9469###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");writeBits(writer, bitlen_lld_e[++i], 7);
}

else {
AKA_mark("lis===-1980-###sois===-82556-###eois===-8255621-###lif===-194-###soif===-###eoif===-9427-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
}
}

}

    }

    /*write the compressed data symbols*/
    AKA_mark("lis===1984###sois===82677###eois===82733###lif===198###soif===9527###eoif===9583###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");writeLZ77data(writer, &lz77_encoded, &tree_ll, &tree_d);
    /*error: the length of the end code 256 must be larger than 0*/
    if(AKA_mark("lis===1986###sois===82811###eois===82836###lif===200###soif===9661###eoif===9686###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===1986###sois===82811###eois===82836###lif===200###soif===9661###eoif===9686###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (tree_ll.lengths[256] == 0))) {AKA_mark("lis===1986###sois===82838###eois===82853###lif===200###soif===9688###eoif===9703###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");AKA_mark("lis===1986###sois===82838###eois===82853###lif===200###soif===9688###eoif===9703###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");ERROR_BREAK(64)}
else {
AKA_mark("lis===-1986-###sois===-82811-###eois===-8281125-###lif===-200-###soif===-###eoif===-9686-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
};

    /*write the end code*/
    AKA_mark("lis===1989###sois===82890###eois===82958###lif===203###soif===9740###eoif===9808###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");writeBitsReversed(writer, tree_ll.codes[256], tree_ll.lengths[256]);

    AKA_mark("lis===1991###sois===82966###eois===82972###lif===205###soif===9816###eoif===9822###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");break; /*end of error-while*/
  }

  /*cleanup*/
  AKA_mark("lis===1995###sois===83021###eois===83053###lif===209###soif===9871###eoif===9903###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");uivector_cleanup(&lz77_encoded);
  AKA_mark("lis===1996###sois===83057###eois===83087###lif===210###soif===9907###eoif===9937###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");HuffmanTree_cleanup(&tree_ll);
  AKA_mark("lis===1997###sois===83091###eois===83120###lif===211###soif===9941###eoif===9970###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");HuffmanTree_cleanup(&tree_d);
  AKA_mark("lis===1998###sois===83124###eois===83154###lif===212###soif===9974###eoif===10004###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");HuffmanTree_cleanup(&tree_cl);
  AKA_mark("lis===1999###sois===83158###eois===83187###lif===213###soif===10008###eoif===10037###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");lodepng_free(frequencies_ll);
  AKA_mark("lis===2000###sois===83191###eois===83219###lif===214###soif===10041###eoif===10069###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");lodepng_free(frequencies_d);
  AKA_mark("lis===2001###sois===83223###eois===83252###lif===215###soif===10073###eoif===10102###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");lodepng_free(frequencies_cl);
  AKA_mark("lis===2002###sois===83256###eois===83281###lif===216###soif===10106###eoif===10131###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");lodepng_free(bitlen_lld);
  AKA_mark("lis===2003###sois===83285###eois===83312###lif===217###soif===10135###eoif===10162###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");lodepng_free(bitlen_lld_e);

  AKA_mark("lis===2005###sois===83318###eois===83331###lif===219###soif===10168###eoif===10181###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateDynamic(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");return error;
}

/** Instrumented function deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned) */
static unsigned deflateFixed(LodePNGBitWriter* writer, Hash* hash,
                             const unsigned char* data,
                             size_t datapos, size_t dataend,
                             const LodePNGCompressSettings* settings, unsigned final) /* << Aka begin of function unsigned deflateFixed(LodePNGBitWriter* writer, Hash* hash,
                             const unsigned char* data,
                             size_t datapos, size_t dataend,
                             const LodePNGCompressSettings* settings, unsigned final) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.deflateFixed.83354.stub"

  AKA_mark("lis===2012###sois===83616###eois===83636###lif===4###soif===278###eoif===298###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");HuffmanTree tree_ll; /*tree for literal values and length codes*/
  AKA_mark("lis===2013###sois===83685###eois===83704###lif===5###soif===347###eoif===366###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");HuffmanTree tree_d; /*tree for distance codes*/

  AKA_mark("lis===2015###sois===83738###eois===83762###lif===7###soif===400###eoif===424###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");unsigned BFINAL = final;
  AKA_mark("lis===2016###sois===83766###eois===83785###lif===8###soif===428###eoif===447###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");unsigned error = 0;
  AKA_mark("lis===2017###sois===83789###eois===83798###lif===9###soif===451###eoif===460###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");size_t i;

  AKA_mark("lis===2019###sois===83804###eois===83831###lif===11###soif===466###eoif===493###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");HuffmanTree_init(&tree_ll);
  AKA_mark("lis===2020###sois===83835###eois===83861###lif===12###soif===497###eoif===523###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");HuffmanTree_init(&tree_d);

  AKA_mark("lis===2022###sois===83867###eois===83909###lif===14###soif===529###eoif===571###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");error = generateFixedLitLenTree(&tree_ll);
  if(AKA_mark("lis===2023###sois===83916###eois===83922###lif===15###soif===578###eoif===584###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===2023###sois===83916###eois===83922###lif===15###soif===578###eoif===584###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (!error))) {
AKA_mark("lis===2023###sois===83924###eois===83967###lif===15###soif===586###eoif===629###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");error = generateFixedDistanceTree(&tree_d);
}

else {
AKA_mark("lis===-2023-###sois===-83916-###eois===-839166-###lif===-15-###soif===-###eoif===-584-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
}

  if(AKA_mark("lis===2025###sois===83976###eois===83982###lif===17###soif===638###eoif===644###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===2025###sois===83976###eois===83982###lif===17###soif===638###eoif===644###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (!error))) {
    AKA_mark("lis===2026###sois===83991###eois===84020###lif===18###soif===653###eoif===682###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");writeBits(writer, BFINAL, 1);
    AKA_mark("lis===2027###sois===84026###eois===84050###lif===19###soif===688###eoif===712###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");writeBits(writer, 1, 1); /*first bit of BTYPE*/
    AKA_mark("lis===2028###sois===84079###eois===84103###lif===20###soif===741###eoif===765###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");writeBits(writer, 0, 1); /*second bit of BTYPE*/

    if(AKA_mark("lis===2030###sois===84138###eois===84156###lif===22###soif===800###eoif===818###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===2030###sois===84138###eois===84156###lif===22###soif===800###eoif===818###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (settings->use_lz77))) /*LZ77 encoded*/ {
      AKA_mark("lis===2031###sois===84184###eois===84206###lif===23###soif===846###eoif===868###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");uivector lz77_encoded;
      AKA_mark("lis===2032###sois===84214###eois===84243###lif===24###soif===876###eoif===905###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");uivector_init(&lz77_encoded);
      AKA_mark("lis===2033###sois===84251###eois===84428###lif===25###soif===913###eoif===1090###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
                         settings->minmatch, settings->nicematch, settings->lazymatching);
      if(AKA_mark("lis===2035###sois===84439###eois===84445###lif===27###soif===1101###eoif===1107###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===2035###sois===84439###eois===84445###lif===27###soif===1101###eoif===1107###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (!error))) {
AKA_mark("lis===2035###sois===84447###eois===84503###lif===27###soif===1109###eoif===1165###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");writeLZ77data(writer, &lz77_encoded, &tree_ll, &tree_d);
}

else {
AKA_mark("lis===-2035-###sois===-84439-###eois===-844396-###lif===-27-###soif===-###eoif===-1107-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
}
      AKA_mark("lis===2036###sois===84511###eois===84543###lif===28###soif===1173###eoif===1205###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");uivector_cleanup(&lz77_encoded);
    } else /*no LZ77, but still will be Huffman compressed*/ {
      int AKA_BLOCK_LOOP_84615 = 0;
    AKA_mark("lis===2038###sois===84619###eois===84631###lif===30###soif===1281###eoif===1293###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
for(i = datapos; AKA_mark("lis===2038###sois===84632###eois===84643###lif===30###soif===1294###eoif===1305###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===2038###sois===84632###eois===84643###lif===30###soif===1294###eoif===1305###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (i < dataend)); ({AKA_mark("lis===2038###sois===84645###eois===84648###lif===30###soif===1307###eoif===1310###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");++i;})) {
        AKA_BLOCK_LOOP_84615++;
        if (AKA_BLOCK_LOOP_84615 > 1000) {
            //break;
        }
        AKA_mark("lis===2039###sois===84661###eois===84737###lif===31###soif===1323###eoif===1399###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");writeBitsReversed(writer, tree_ll.codes[data[i]], tree_ll.lengths[data[i]]);
      }
    }
    /*add END code*/
    if(AKA_mark("lis===2043###sois===84784###eois===84790###lif===35###soif===1446###eoif===1452###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (AKA_mark("lis===2043###sois===84784###eois===84790###lif===35###soif===1446###eoif===1452###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)") && (!error))) {
AKA_mark("lis===2043###sois===84792###eois===84859###lif===35###soif===1454###eoif===1521###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");writeBitsReversed(writer,tree_ll.codes[256], tree_ll.lengths[256]);
}

else {
AKA_mark("lis===-2043-###sois===-84784-###eois===-847846-###lif===-35-###soif===-###eoif===-1452-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
}
  }
else {
AKA_mark("lis===-2025-###sois===-83976-###eois===-839766-###lif===-17-###soif===-###eoif===-644-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");
}

  /*cleanup*/
  AKA_mark("lis===2047###sois===84885###eois===84915###lif===39###soif===1547###eoif===1577###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");HuffmanTree_cleanup(&tree_ll);
  AKA_mark("lis===2048###sois===84919###eois===84948###lif===40###soif===1581###eoif===1610###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");HuffmanTree_cleanup(&tree_d);

  AKA_mark("lis===2050###sois===84954###eois===84967###lif===42###soif===1616###eoif===1629###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflateFixed(LodePNGBitWriter*,Hash*,unsigned char const*,size_t,size_t,LodePNGCompressSettings const*,unsigned)");return error;
}

/** Instrumented function lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*) */
static unsigned lodepng_deflatev(ucvector* out, const unsigned char* in, size_t insize,
                                 const LodePNGCompressSettings* settings) /* << Aka begin of function unsigned lodepng_deflatev(ucvector* out, const unsigned char* in, size_t insize,
                                 const LodePNGCompressSettings* settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_deflatev.84990.stub"

  AKA_mark("lis===2055###sois===85142###eois===85161###lif===2###soif===168###eoif===187###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");unsigned error = 0;
  AKA_mark("lis===2056###sois===85165###eois===85203###lif===3###soif===191###eoif===229###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");size_t i, blocksize, numdeflateblocks;
  AKA_mark("lis===2057###sois===85207###eois===85217###lif===4###soif===233###eoif===243###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");Hash hash;
  AKA_mark("lis===2058###sois===85221###eois===85245###lif===5###soif===247###eoif===271###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");LodePNGBitWriter writer;

  AKA_mark("lis===2060###sois===85251###eois===85287###lif===7###soif===277###eoif===313###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");LodePNGBitWriter_init(&writer, out);

  if(AKA_mark("lis===2062###sois===85296###eois===85315###lif===9###soif===322###eoif===341###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (AKA_mark("lis===2062###sois===85296###eois===85315###lif===9###soif===322###eoif===341###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (settings->btype > 2))) {
AKA_mark("lis===2062###sois===85317###eois===85327###lif===9###soif===343###eoif===353###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");return 61;
}

  else {
if(AKA_mark("lis===2063###sois===85339###eois===85359###lif===10###soif===365###eoif===385###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (AKA_mark("lis===2063###sois===85339###eois===85359###lif===10###soif===365###eoif===385###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (settings->btype == 0))) {
AKA_mark("lis===2063###sois===85361###eois===85406###lif===10###soif===387###eoif===432###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");return deflateNoCompression(out, in, insize);
}

  else {
if(AKA_mark("lis===2064###sois===85418###eois===85438###lif===11###soif===444###eoif===464###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (AKA_mark("lis===2064###sois===85418###eois===85438###lif===11###soif===444###eoif===464###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (settings->btype == 1))) {
AKA_mark("lis===2064###sois===85440###eois===85459###lif===11###soif===466###eoif===485###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");blocksize = insize;
}

  else /*if(settings->btype == 2)*/ {
    /*on PNGs, deflate blocks of 65-262k seem to give most dense encoding*/
    AKA_mark("lis===2067###sois===85581###eois===85609###lif===14###soif===607###eoif===635###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");blocksize = insize / 8u + 8;
    if(AKA_mark("lis===2068###sois===85618###eois===85635###lif===15###soif===644###eoif===661###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (AKA_mark("lis===2068###sois===85618###eois===85635###lif===15###soif===644###eoif===661###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (blocksize < 65536))) {
AKA_mark("lis===2068###sois===85637###eois===85655###lif===15###soif===663###eoif===681###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");blocksize = 65536;
}

else {
AKA_mark("lis===-2068-###sois===-85618-###eois===-8561817-###lif===-15-###soif===-###eoif===-661-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");
}
    if(AKA_mark("lis===2069###sois===85664###eois===85682###lif===16###soif===690###eoif===708###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (AKA_mark("lis===2069###sois===85664###eois===85682###lif===16###soif===690###eoif===708###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (blocksize > 262144))) {
AKA_mark("lis===2069###sois===85684###eois===85703###lif===16###soif===710###eoif===729###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");blocksize = 262144;
}

else {
AKA_mark("lis===-2069-###sois===-85664-###eois===-8566418-###lif===-16-###soif===-###eoif===-708-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");
}
  }
}

}


  AKA_mark("lis===2072###sois===85714###eois===85770###lif===19###soif===740###eoif===796###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");numdeflateblocks = (insize + blocksize - 1) / blocksize;
  if(AKA_mark("lis===2073###sois===85777###eois===85798###lif===20###soif===803###eoif===824###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (AKA_mark("lis===2073###sois===85777###eois===85798###lif===20###soif===803###eoif===824###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (numdeflateblocks == 0))) {
AKA_mark("lis===2073###sois===85800###eois===85821###lif===20###soif===826###eoif===847###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");numdeflateblocks = 1;
}

else {
AKA_mark("lis===-2073-###sois===-85777-###eois===-8577721-###lif===-20-###soif===-###eoif===-824-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");
}

  AKA_mark("lis===2075###sois===85827###eois===85874###lif===22###soif===853###eoif===900###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");error = hash_init(&hash, settings->windowsize);

  if(AKA_mark("lis===2077###sois===85883###eois===85889###lif===24###soif===909###eoif===915###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (AKA_mark("lis===2077###sois===85883###eois===85889###lif===24###soif===909###eoif===915###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (!error))) {
    int AKA_BLOCK_LOOP_85898 = 0;
    AKA_mark("lis===2078###sois===85902###eois===85908###lif===25###soif===928###eoif===934###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");
for(i = 0; AKA_mark("lis===2078###sois===85909###eois===85940###lif===25###soif===935###eoif===966###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && ((AKA_mark("lis===2078###sois===85909###eois===85930###lif===25###soif===935###eoif===956###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (i != numdeflateblocks)) && (AKA_mark("lis===2078###sois===85934###eois===85940###lif===25###soif===960###eoif===966###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (!error))); ({AKA_mark("lis===2078###sois===85942###eois===85945###lif===25###soif===968###eoif===971###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");++i;})) {
        AKA_BLOCK_LOOP_85898++;
        if (AKA_BLOCK_LOOP_85898 > 1000) {
            //break;
        }
      AKA_mark("lis===2079###sois===85956###eois===86001###lif===26###soif===982###eoif===1027###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");unsigned final = (i == numdeflateblocks - 1);
      AKA_mark("lis===2080###sois===86009###eois===86038###lif===27###soif===1035###eoif===1064###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");size_t start = i * blocksize;
      AKA_mark("lis===2081###sois===86046###eois===86077###lif===28###soif===1072###eoif===1103###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");size_t end = start + blocksize;
      if(AKA_mark("lis===2082###sois===86088###eois===86100###lif===29###soif===1114###eoif===1126###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (AKA_mark("lis===2082###sois===86088###eois===86100###lif===29###soif===1114###eoif===1126###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (end > insize))) {
AKA_mark("lis===2082###sois===86102###eois===86115###lif===29###soif===1128###eoif===1141###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");end = insize;
}

else {
AKA_mark("lis===-2082-###sois===-86088-###eois===-8608812-###lif===-29-###soif===-###eoif===-1126-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");
}

      if(AKA_mark("lis===2084###sois===86128###eois===86148###lif===31###soif===1154###eoif===1174###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (AKA_mark("lis===2084###sois===86128###eois===86148###lif===31###soif===1154###eoif===1174###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (settings->btype == 1))) {
AKA_mark("lis===2084###sois===86150###eois===86220###lif===31###soif===1176###eoif===1246###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");error = deflateFixed(&writer, &hash, in, start, end, settings, final);
}

      else {
if(AKA_mark("lis===2085###sois===86236###eois===86256###lif===32###soif===1262###eoif===1282###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (AKA_mark("lis===2085###sois===86236###eois===86256###lif===32###soif===1262###eoif===1282###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (settings->btype == 2))) {
AKA_mark("lis===2085###sois===86258###eois===86330###lif===32###soif===1284###eoif===1356###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");error = deflateDynamic(&writer, &hash, in, start, end, settings, final);
}

else {
AKA_mark("lis===-2085-###sois===-86236-###eois===-8623620-###lif===-32-###soif===-###eoif===-1282-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");
}
}

    }
  }
else {
AKA_mark("lis===-2077-###sois===-85883-###eois===-858836-###lif===-24-###soif===-###eoif===-915-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");
}

  AKA_mark("lis===2089###sois===86348###eois===86368###lif===36###soif===1374###eoif===1394###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");hash_cleanup(&hash);

  AKA_mark("lis===2091###sois===86374###eois===86387###lif===38###soif===1400###eoif===1413###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflatev(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings const*)");return error;
}

/** Instrumented function lodepng_deflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*) */
unsigned lodepng_deflate(unsigned char** out, size_t* outsize,
                         const unsigned char* in, size_t insize,
                         const LodePNGCompressSettings* settings) /* << Aka begin of function unsigned lodepng_deflate(unsigned char** out, size_t* outsize,
                         const unsigned char* in, size_t insize,
                         const LodePNGCompressSettings* settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_deflate.86403.stub"

  AKA_mark("lis===2097###sois===86595###eois===86638###lif===3###soif===201###eoif===244###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");ucvector v = ucvector_init(*out, *outsize);
  AKA_mark("lis===2098###sois===86642###eois===86702###lif===4###soif===248###eoif===308###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");unsigned error = lodepng_deflatev(&v, in, insize, settings);
  AKA_mark("lis===2099###sois===86706###eois===86720###lif===5###soif===312###eoif===326###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");*out = v.data;
  AKA_mark("lis===2100###sois===86724###eois===86742###lif===6###soif===330###eoif===348###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");*outsize = v.size;
  AKA_mark("lis===2101###sois===86746###eois===86759###lif===7###soif===352###eoif===365###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_deflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");return error;
}

/** Instrumented function deflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*) */
static unsigned deflate(unsigned char** out, size_t* outsize,
                        const unsigned char* in, size_t insize,
                        const LodePNGCompressSettings* settings) /* << Aka begin of function unsigned deflate(unsigned char** out, size_t* outsize,
                        const unsigned char* in, size_t insize,
                        const LodePNGCompressSettings* settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\deflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.deflate.86782.stub"

  if(AKA_mark("lis===2107###sois===86967###eois===86991###lif===3###soif===201###eoif===225###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (AKA_mark("lis===2107###sois===86967###eois===86991###lif===3###soif===201###eoif===225###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (settings->custom_deflate))) {
    AKA_mark("lis===2108###sois===87000###eois===87078###lif===4###soif===234###eoif===312###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");unsigned error = settings->custom_deflate(out, outsize, in, insize, settings);
    /*the custom deflate is allowed to have its own error codes, however, we translate it to code 111*/
    AKA_mark("lis===2110###sois===87189###eois===87212###lif===6###soif===423###eoif===446###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");return error ? 111 : 0;
  } else {
    AKA_mark("lis===2112###sois===87230###eois===87289###lif===8###soif===464###eoif===523###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\deflate(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");return lodepng_deflate(out, outsize, in, insize, settings);
  }
}

#endif /*LODEPNG_COMPILE_DECODER*/

/* ////////////////////////////////////////////////////////////////////////// */
/* / Adler32                                                                / */
/* ////////////////////////////////////////////////////////////////////////// */

/** Instrumented function update_adler32(unsigned,unsigned char const*,unsigned) */
static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len) /* << Aka begin of function unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\update_adler32(unsigned,unsigned char const*,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.update_adler32.87603.stub"

  AKA_mark("lis===2123###sois===87680###eois===87710###lif===1###soif===93###eoif===123###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\update_adler32(unsigned,unsigned char const*,unsigned)");unsigned s1 = adler & 0xffffu;
  AKA_mark("lis===2124###sois===87714###eois===87753###lif===2###soif===127###eoif===166###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\update_adler32(unsigned,unsigned char const*,unsigned)");unsigned s2 = (adler >> 16u) & 0xffffu;

  int AKA_BLOCK_LOOP_87759 = 0;
    while(AKA_mark("lis===2126###sois===87765###eois===87774###lif===4###soif===178###eoif===187###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\update_adler32(unsigned,unsigned char const*,unsigned)") && (AKA_mark("lis===2126###sois===87765###eois===87774###lif===4###soif===178###eoif===187###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\update_adler32(unsigned,unsigned char const*,unsigned)") && (len != 0u))) {
        AKA_BLOCK_LOOP_87759++;
        if (AKA_BLOCK_LOOP_87759 > 1000) {
            //break;
        }
    AKA_mark("lis===2127###sois===87783###eois===87794###lif===5###soif===196###eoif===207###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\update_adler32(unsigned,unsigned char const*,unsigned)");unsigned i;
    /*at least 5552 sums can be done before the sums overflow, saving a lot of module divisions*/
    AKA_mark("lis===2129###sois===87899###eois===87943###lif===7###soif===312###eoif===356###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\update_adler32(unsigned,unsigned char const*,unsigned)");unsigned amount = len > 5552u ? 5552u : len;
    AKA_mark("lis===2130###sois===87949###eois===87963###lif===8###soif===362###eoif===376###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\update_adler32(unsigned,unsigned char const*,unsigned)");len -= amount;
    int AKA_BLOCK_LOOP_87969 = 0;
    AKA_mark("lis===2131###sois===87973###eois===87979###lif===9###soif===386###eoif===392###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\update_adler32(unsigned,unsigned char const*,unsigned)");
for(i = 0; AKA_mark("lis===2131###sois===87980###eois===87991###lif===9###soif===393###eoif===404###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\update_adler32(unsigned,unsigned char const*,unsigned)") && (AKA_mark("lis===2131###sois===87980###eois===87991###lif===9###soif===393###eoif===404###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\update_adler32(unsigned,unsigned char const*,unsigned)") && (i != amount)); ({AKA_mark("lis===2131###sois===87993###eois===87996###lif===9###soif===406###eoif===409###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\update_adler32(unsigned,unsigned char const*,unsigned)");++i;})) {
        AKA_BLOCK_LOOP_87969++;
        if (AKA_BLOCK_LOOP_87969 > 1000) {
            //break;
        }
      AKA_mark("lis===2132###sois===88007###eois===88023###lif===10###soif===420###eoif===436###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\update_adler32(unsigned,unsigned char const*,unsigned)");s1 += (*data++);
      AKA_mark("lis===2133###sois===88031###eois===88040###lif===11###soif===444###eoif===453###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\update_adler32(unsigned,unsigned char const*,unsigned)");s2 += s1;
    }
    AKA_mark("lis===2135###sois===88053###eois===88066###lif===13###soif===466###eoif===479###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\update_adler32(unsigned,unsigned char const*,unsigned)");s1 %= 65521u;
    AKA_mark("lis===2136###sois===88072###eois===88085###lif===14###soif===485###eoif===498###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\update_adler32(unsigned,unsigned char const*,unsigned)");s2 %= 65521u;
  }

  AKA_mark("lis===2139###sois===88096###eois===88120###lif===17###soif===509###eoif===533###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\update_adler32(unsigned,unsigned char const*,unsigned)");return (s2 << 16u) | s1;
}

/*Return the adler32 of the bytes data[0..len-1]*/
/** Instrumented function adler32(unsigned char const*,unsigned) */
static unsigned adler32(const unsigned char* data, unsigned len) /* << Aka begin of function unsigned adler32(const unsigned char* data, unsigned len) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\adler32(unsigned char const*,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.adler32.88195.stub"

  AKA_mark("lis===2144###sois===88249###eois===88286###lif===1###soif===70###eoif===107###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\adler32(unsigned char const*,unsigned)");return update_adler32(1u, data, len);
}

/* ////////////////////////////////////////////////////////////////////////// */
/* / Zlib                                                                   / */
/* ////////////////////////////////////////////////////////////////////////// */

#ifdef LODEPNG_COMPILE_DECODER

/** Instrumented function lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*) */
static unsigned lodepng_zlib_decompressv(ucvector* out,
                                         const unsigned char* in, size_t insize,
                                         const LodePNGDecompressSettings* settings) /* << Aka begin of function unsigned lodepng_zlib_decompressv(ucvector* out,
                                         const unsigned char* in, size_t insize,
                                         const LodePNGDecompressSettings* settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_zlib_decompressv.88591.stub"

  AKA_mark("lis===2156###sois===88803###eois===88822###lif===3###soif===228###eoif===247###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");unsigned error = 0;
  AKA_mark("lis===2157###sois===88826###eois===88852###lif===4###soif===251###eoif===277###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");unsigned CM, CINFO, FDICT;

  if(AKA_mark("lis===2159###sois===88861###eois===88871###lif===6###soif===286###eoif===296###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (AKA_mark("lis===2159###sois===88861###eois===88871###lif===6###soif===286###eoif===296###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (insize < 2))) {
AKA_mark("lis===2159###sois===88873###eois===88883###lif===6###soif===298###eoif===308###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");return 53;
}

else {
AKA_mark("lis===-2159-###sois===-88861-###eois===-8886110-###lif===-6-###soif===-###eoif===-296-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");
} /*error, size of zlib data too small*/
  /*read information from zlib header*/
  if(AKA_mark("lis===2161###sois===88970###eois===89001###lif===8###soif===395###eoif===426###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (AKA_mark("lis===2161###sois===88970###eois===89001###lif===8###soif===395###eoif===426###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && ((in[0] * 256 + in[1]) % 31 != 0))) {
    /*error: 256 * in[0] + in[1] must be a multiple of 31, the FCHECK value is supposed to be made that way*/
    AKA_mark("lis===2163###sois===89121###eois===89131###lif===10###soif===546###eoif===556###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");return 24;
  }
else {
AKA_mark("lis===-2161-###sois===-88970-###eois===-8897031-###lif===-8-###soif===-###eoif===-426-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");
}

  AKA_mark("lis===2166###sois===89142###eois===89158###lif===13###soif===567###eoif===583###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");CM = in[0] & 15;
  AKA_mark("lis===2167###sois===89162###eois===89188###lif===14###soif===587###eoif===613###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");CINFO = (in[0] >> 4) & 15;
  /*FCHECK = in[1] & 31;*/ /*FCHECK is already tested above*/
  AKA_mark("lis===2169###sois===89255###eois===89280###lif===16###soif===680###eoif===705###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");FDICT = (in[1] >> 5) & 1;
  /*FLEVEL = (in[1] >> 6) & 3;*/ /*FLEVEL is not used here*/

  if(AKA_mark("lis===2172###sois===89351###eois===89371###lif===19###soif===776###eoif===796###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && ((AKA_mark("lis===2172###sois===89351###eois===89358###lif===19###soif===776###eoif===783###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (CM != 8)) || (AKA_mark("lis===2172###sois===89362###eois===89371###lif===19###soif===787###eoif===796###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (CINFO > 7)))) {
    /*error: only compression method 8: inflate with sliding window of 32k is supported by the PNG spec*/
    AKA_mark("lis===2174###sois===89487###eois===89497###lif===21###soif===912###eoif===922###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");return 25;
  }
else {
AKA_mark("lis===-2172-###sois===-89351-###eois===-8935120-###lif===-19-###soif===-###eoif===-796-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");
}
  if(AKA_mark("lis===2176###sois===89509###eois===89519###lif===23###soif===934###eoif===944###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (AKA_mark("lis===2176###sois===89509###eois===89519###lif===23###soif===934###eoif===944###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (FDICT != 0))) {
    /*error: the specification of PNG says about the zlib stream:
      "The additional flags shall not specify a preset dictionary."*/
    AKA_mark("lis===2179###sois===89666###eois===89676###lif===26###soif===1091###eoif===1101###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");return 26;
  }
else {
AKA_mark("lis===-2176-###sois===-89509-###eois===-8950910-###lif===-23-###soif===-###eoif===-944-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");
}

  AKA_mark("lis===2182###sois===89687###eois===89739###lif===29###soif===1112###eoif===1164###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");error = inflatev(out, in + 2, insize - 2, settings);
  if(AKA_mark("lis===2183###sois===89746###eois===89751###lif===30###soif===1171###eoif===1176###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (AKA_mark("lis===2183###sois===89746###eois===89751###lif===30###soif===1171###eoif===1176###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (error))) {
AKA_mark("lis===2183###sois===89753###eois===89766###lif===30###soif===1178###eoif===1191###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");return error;
}

else {
AKA_mark("lis===-2183-###sois===-89746-###eois===-897465-###lif===-30-###soif===-###eoif===-1176-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");
}

  if(AKA_mark("lis===2185###sois===89775###eois===89800###lif===32###soif===1200###eoif===1225###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (AKA_mark("lis===2185###sois===89775###eois===89800###lif===32###soif===1200###eoif===1225###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (!settings->ignore_adler32))) {
    AKA_mark("lis===2186###sois===89809###eois===89866###lif===33###soif===1234###eoif===1291###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");unsigned ADLER32 = lodepng_read32bitInt(&in[insize - 4]);
    AKA_mark("lis===2187###sois===89872###eois===89934###lif===34###soif===1297###eoif===1359###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");unsigned checksum = adler32(out->data, (unsigned)(out->size));
    if(AKA_mark("lis===2188###sois===89943###eois===89962###lif===35###soif===1368###eoif===1387###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (AKA_mark("lis===2188###sois===89943###eois===89962###lif===35###soif===1368###eoif===1387###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (checksum != ADLER32))) {
AKA_mark("lis===2188###sois===89964###eois===89974###lif===35###soif===1389###eoif===1399###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");return 58;
}

else {
AKA_mark("lis===-2188-###sois===-89943-###eois===-8994319-###lif===-35-###soif===-###eoif===-1387-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");
} /*error, adler checksum not correct, data must be corrupted*/
  }
else {
AKA_mark("lis===-2185-###sois===-89775-###eois===-8977525-###lif===-32-###soif===-###eoif===-1225-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");
}

  AKA_mark("lis===2191###sois===90047###eois===90056###lif===38###soif===1472###eoif===1481###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompressv(ucvector*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");return 0; /*no error*/
}


/** Instrumented function lodepng_zlib_decompress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGDecompressSettings const*) */
unsigned lodepng_zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
                                 size_t insize, const LodePNGDecompressSettings* settings) /* << Aka begin of function unsigned lodepng_zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
                                 size_t insize, const LodePNGDecompressSettings* settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_zlib_decompress.90087.stub"

  AKA_mark("lis===2197###sois===90271###eois===90314###lif===2###soif===193###eoif===236###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");ucvector v = ucvector_init(*out, *outsize);
  AKA_mark("lis===2198###sois===90318###eois===90386###lif===3###soif===240###eoif===308###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");unsigned error = lodepng_zlib_decompressv(&v, in, insize, settings);
  AKA_mark("lis===2199###sois===90390###eois===90404###lif===4###soif===312###eoif===326###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");*out = v.data;
  AKA_mark("lis===2200###sois===90408###eois===90426###lif===5###soif===330###eoif===348###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");*outsize = v.size;
  AKA_mark("lis===2201###sois===90430###eois===90443###lif===6###soif===352###eoif===365###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_decompress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGDecompressSettings const*)");return error;
}

/*expected_size is expected output size, to avoid intermediate allocations. Set to 0 if not known. */
/** Instrumented function zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*) */
static unsigned zlib_decompress(unsigned char** out, size_t* outsize, size_t expected_size,
                                const unsigned char* in, size_t insize, const LodePNGDecompressSettings* settings) /* << Aka begin of function unsigned zlib_decompress(unsigned char** out, size_t* outsize, size_t expected_size,
                                const unsigned char* in, size_t insize, const LodePNGDecompressSettings* settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.zlib_decompress.90569.stub"

  AKA_mark("lis===2207###sois===90766###eois===90781###lif===2###soif===213###eoif===228###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)");unsigned error;
  if(AKA_mark("lis===2208###sois===90788###eois===90809###lif===3###soif===235###eoif===256###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (AKA_mark("lis===2208###sois===90788###eois===90809###lif===3###soif===235###eoif===256###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (settings->custom_zlib))) {
    AKA_mark("lis===2209###sois===90818###eois===90884###lif===4###soif===265###eoif===331###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)");error = settings->custom_zlib(out, outsize, in, insize, settings);
    if(AKA_mark("lis===2210###sois===90893###eois===90898###lif===5###soif===340###eoif===345###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (AKA_mark("lis===2210###sois===90893###eois===90898###lif===5###soif===340###eoif===345###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (error))) {
      /*the custom zlib is allowed to have its own error codes, however, we translate it to code 110*/
      AKA_mark("lis===2212###sois===91013###eois===91025###lif===7###soif===460###eoif===472###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)");error = 110;
      /*if there's a max output size, and the custom zlib returned error, then indicate that error instead*/
      if(AKA_mark("lis===2214###sois===91146###eois===91211###lif===9###soif===593###eoif===658###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && ((AKA_mark("lis===2214###sois===91146###eois===91171###lif===9###soif===593###eoif===618###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (settings->max_output_size)) && (AKA_mark("lis===2214###sois===91175###eois===91211###lif===9###soif===622###eoif===658###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (*outsize > settings->max_output_size)))) {
AKA_mark("lis===2214###sois===91213###eois===91225###lif===9###soif===660###eoif===672###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)");error = 109;
}

else {
AKA_mark("lis===-2214-###sois===-91146-###eois===-9114665-###lif===-9-###soif===-###eoif===-658-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)");
}
    }
else {
AKA_mark("lis===-2210-###sois===-90893-###eois===-908935-###lif===-5-###soif===-###eoif===-345-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)");
}
  } else {
    AKA_mark("lis===2217###sois===91250###eois===91293###lif===12###soif===697###eoif===740###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)");ucvector v = ucvector_init(*out, *outsize);
    if(AKA_mark("lis===2218###sois===91302###eois===91315###lif===13###soif===749###eoif===762###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (AKA_mark("lis===2218###sois===91302###eois===91315###lif===13###soif===749###eoif===762###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)") && (expected_size))) {
      /*reserve the memory to avoid intermediate reallocations*/
      AKA_mark("lis===2220###sois===91392###eois===91438###lif===15###soif===839###eoif===885###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)");ucvector_resize(&v, *outsize + expected_size);
      AKA_mark("lis===2221###sois===91446###eois===91464###lif===16###soif===893###eoif===911###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)");v.size = *outsize;
    }
else {
AKA_mark("lis===-2218-###sois===-91302-###eois===-9130213-###lif===-13-###soif===-###eoif===-762-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)");
}
    AKA_mark("lis===2223###sois===91477###eois===91536###lif===18###soif===924###eoif===983###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)");error = lodepng_zlib_decompressv(&v, in, insize, settings);
    AKA_mark("lis===2224###sois===91542###eois===91556###lif===19###soif===989###eoif===1003###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)");*out = v.data;
    AKA_mark("lis===2225###sois===91562###eois===91580###lif===20###soif===1009###eoif===1027###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)");*outsize = v.size;
  }
  AKA_mark("lis===2227###sois===91589###eois===91602###lif===22###soif===1036###eoif===1049###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_decompress(unsigned char**,size_t*,size_t,unsigned char const*,size_t,LodePNGDecompressSettings const*)");return error;
}

#endif /*LODEPNG_COMPILE_DECODER*/

#ifdef LODEPNG_COMPILE_ENCODER

/** Instrumented function lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*) */
unsigned lodepng_zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
                               size_t insize, const LodePNGCompressSettings* settings) /* << Aka begin of function unsigned lodepng_zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
                               size_t insize, const LodePNGCompressSettings* settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_zlib_compress.91690.stub"

  AKA_mark("lis===2236###sois===91868###eois===91877###lif===2###soif===187###eoif===196###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");size_t i;
  AKA_mark("lis===2237###sois===91881###eois===91896###lif===3###soif===200###eoif===215###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");unsigned error;
  AKA_mark("lis===2238###sois===91900###eois===91931###lif===4###soif===219###eoif===250###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");unsigned char* deflatedata = 0;
  AKA_mark("lis===2239###sois===91935###eois===91958###lif===5###soif===254###eoif===277###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");size_t deflatesize = 0;

  AKA_mark("lis===2241###sois===91964###eois===92030###lif===7###soif===283###eoif===349###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");error = deflate(&deflatedata, &deflatesize, in, insize, settings);

  AKA_mark("lis===2243###sois===92036###eois===92048###lif===9###soif===355###eoif===367###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");*out = NULL;
  AKA_mark("lis===2244###sois===92052###eois===92065###lif===10###soif===371###eoif===384###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");*outsize = 0;
  if(AKA_mark("lis===2245###sois===92072###eois===92078###lif===11###soif===391###eoif===397###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (AKA_mark("lis===2245###sois===92072###eois===92078###lif===11###soif===391###eoif===397###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (!error))) {
    AKA_mark("lis===2246###sois===92087###eois===92114###lif===12###soif===406###eoif===433###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");*outsize = deflatesize + 6;
    AKA_mark("lis===2247###sois===92120###eois===92168###lif===13###soif===439###eoif===487###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");*out = (unsigned char*)lodepng_malloc(*outsize);
    if(AKA_mark("lis===2248###sois===92177###eois===92182###lif===14###soif===496###eoif===501###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (AKA_mark("lis===2248###sois===92177###eois===92182###lif===14###soif===496###eoif===501###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (!*out))) {
AKA_mark("lis===2248###sois===92184###eois===92195###lif===14###soif===503###eoif===514###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");error = 83;
}

else {
AKA_mark("lis===-2248-###sois===-92177-###eois===-921775-###lif===-14-###soif===-###eoif===-501-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");
} /*alloc fail*/
  }
else {
AKA_mark("lis===-2245-###sois===-92072-###eois===-920726-###lif===-11-###soif===-###eoif===-397-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");
}

  if(AKA_mark("lis===2251###sois===92224###eois===92230###lif===17###soif===543###eoif===549###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (AKA_mark("lis===2251###sois===92224###eois===92230###lif===17###soif===543###eoif===549###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (!error))) {
    AKA_mark("lis===2252###sois===92239###eois===92288###lif===18###soif===558###eoif===607###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");unsigned ADLER32 = adler32(in, (unsigned)insize);
    /*zlib data: 1 byte CMF (CM+CINFO), 1 byte FLG, deflate data, 4 byte ADLER32 checksum of the Decompressed data*/
    AKA_mark("lis===2254###sois===92412###eois===92431###lif===20###soif===731###eoif===750###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");unsigned CMF = 120; /*0b01111000: CM 8, CINFO 7. With CINFO 7, any window size up to 32768 can be used.*/
    AKA_mark("lis===2255###sois===92523###eois===92543###lif===21###soif===842###eoif===862###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");unsigned FLEVEL = 0;
    AKA_mark("lis===2256###sois===92549###eois===92568###lif===22###soif===868###eoif===887###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");unsigned FDICT = 0;
    AKA_mark("lis===2257###sois===92574###eois===92629###lif===23###soif===893###eoif===948###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");unsigned CMFFLG = 256 * CMF + FDICT * 32 + FLEVEL * 64;
    AKA_mark("lis===2258###sois===92635###eois===92670###lif===24###soif===954###eoif===989###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");unsigned FCHECK = 31 - CMFFLG % 31;
    AKA_mark("lis===2259###sois===92676###eois===92693###lif===25###soif===995###eoif===1012###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");CMFFLG += FCHECK;

    AKA_mark("lis===2261###sois===92701###eois===92742###lif===27###soif===1020###eoif===1061###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");(*out)[0] = (unsigned char)(CMFFLG >> 8);
    AKA_mark("lis===2262###sois===92748###eois===92790###lif===28###soif===1067###eoif===1109###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");(*out)[1] = (unsigned char)(CMFFLG & 255);
    int AKA_BLOCK_LOOP_92796 = 0;
    AKA_mark("lis===2263###sois===92800###eois===92806###lif===29###soif===1119###eoif===1125###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");
for(i = 0; AKA_mark("lis===2263###sois===92807###eois===92823###lif===29###soif===1126###eoif===1142###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (AKA_mark("lis===2263###sois===92807###eois===92823###lif===29###soif===1126###eoif===1142###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (i != deflatesize)); ({AKA_mark("lis===2263###sois===92825###eois===92828###lif===29###soif===1144###eoif===1147###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");++i;})) {
AKA_mark("lis===2263###sois===92830###eois===92861###lif===29###soif===1149###eoif===1180###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");(*out)[i + 2] = deflatedata[i];
}

    AKA_mark("lis===2264###sois===92867###eois===92919###lif===30###soif===1186###eoif===1238###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");lodepng_set32bitInt(&(*out)[*outsize - 4], ADLER32);
  }
else {
AKA_mark("lis===-2251-###sois===-92224-###eois===-922246-###lif===-17-###soif===-###eoif===-549-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");
}

  AKA_mark("lis===2267###sois===92930###eois===92956###lif===33###soif===1249###eoif===1275###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");lodepng_free(deflatedata);
  AKA_mark("lis===2268###sois===92960###eois===92973###lif===34###soif===1279###eoif===1292###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");return error;
}

/* compress using the default or custom zlib function */
/** Instrumented function zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*) */
static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
                              size_t insize, const LodePNGCompressSettings* settings) /* << Aka begin of function unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
                              size_t insize, const LodePNGCompressSettings* settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.zlib_compress.93054.stub"

  if(AKA_mark("lis===2274###sois===93226###eois===93247###lif===2###soif===188###eoif===209###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (AKA_mark("lis===2274###sois===93226###eois===93247###lif===2###soif===188###eoif===209###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)") && (settings->custom_zlib))) {
    AKA_mark("lis===2275###sois===93256###eois===93331###lif===3###soif===218###eoif===293###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");unsigned error = settings->custom_zlib(out, outsize, in, insize, settings);
    /*the custom zlib is allowed to have its own error codes, however, we translate it to code 111*/
    AKA_mark("lis===2277###sois===93439###eois===93462###lif===5###soif===401###eoif===424###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");return error ? 111 : 0;
  } else {
    AKA_mark("lis===2279###sois===93480###eois===93545###lif===7###soif===442###eoif===507###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\zlib_compress(unsigned char**,size_t*,unsigned char const*,size_t,LodePNGCompressSettings const*)");return lodepng_zlib_compress(out, outsize, in, insize, settings);
  }
}

#endif /*LODEPNG_COMPILE_ENCODER*/

#else /*no LODEPNG_COMPILE_ZLIB*/

#ifdef LODEPNG_COMPILE_DECODER
static unsigned zlib_decompress(unsigned char** out, size_t* outsize, size_t expected_size,
                                const unsigned char* in, size_t insize, const LodePNGDecompressSettings* settings) {
  if(!settings->custom_zlib) return 87; /*no custom zlib function provided */
  (void)expected_size;
  return settings->custom_zlib(out, outsize, in, insize, settings);
}
#endif /*LODEPNG_COMPILE_DECODER*/
#ifdef LODEPNG_COMPILE_ENCODER
static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
                              size_t insize, const LodePNGCompressSettings* settings) {
  if(!settings->custom_zlib) return 87; /*no custom zlib function provided */
  return settings->custom_zlib(out, outsize, in, insize, settings);
}
#endif /*LODEPNG_COMPILE_ENCODER*/

#endif /*LODEPNG_COMPILE_ZLIB*/

/* ////////////////////////////////////////////////////////////////////////// */

#ifdef LODEPNG_COMPILE_ENCODER

/*this is a good tradeoff between speed and compression ratio*/
#define DEFAULT_WINDOWSIZE 2048

/** Instrumented function lodepng_compress_settings_init(LodePNGCompressSettings*) */
void lodepng_compress_settings_init(LodePNGCompressSettings* settings) /* << Aka begin of function void lodepng_compress_settings_init(LodePNGCompressSettings* settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compress_settings_init(LodePNGCompressSettings*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_compress_settings_init.94748.stub"

  /*compress with dynamic huffman tree (not in the mathematical sense, just not the predefined one)*/
  AKA_mark("lis===2314###sois===94922###eois===94942###lif===2###soif===179###eoif===199###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compress_settings_init(LodePNGCompressSettings*)");settings->btype = 2;
  AKA_mark("lis===2315###sois===94946###eois===94969###lif===3###soif===203###eoif===226###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compress_settings_init(LodePNGCompressSettings*)");settings->use_lz77 = 1;
  AKA_mark("lis===2316###sois===94973###eois===95015###lif===4###soif===230###eoif===272###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compress_settings_init(LodePNGCompressSettings*)");settings->windowsize = DEFAULT_WINDOWSIZE;
  AKA_mark("lis===2317###sois===95019###eois===95042###lif===5###soif===276###eoif===299###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compress_settings_init(LodePNGCompressSettings*)");settings->minmatch = 3;
  AKA_mark("lis===2318###sois===95046###eois===95072###lif===6###soif===303###eoif===329###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compress_settings_init(LodePNGCompressSettings*)");settings->nicematch = 128;
  AKA_mark("lis===2319###sois===95076###eois===95103###lif===7###soif===333###eoif===360###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compress_settings_init(LodePNGCompressSettings*)");settings->lazymatching = 1;

  AKA_mark("lis===2321###sois===95109###eois===95135###lif===9###soif===366###eoif===392###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compress_settings_init(LodePNGCompressSettings*)");settings->custom_zlib = 0;
  AKA_mark("lis===2322###sois===95139###eois===95168###lif===10###soif===396###eoif===425###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compress_settings_init(LodePNGCompressSettings*)");settings->custom_deflate = 0;
  AKA_mark("lis===2323###sois===95172###eois===95201###lif===11###soif===429###eoif===458###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compress_settings_init(LodePNGCompressSettings*)");settings->custom_context = 0;
}

const LodePNGCompressSettings lodepng_default_compress_settings = {2, 1, DEFAULT_WINDOWSIZE, 3, 128, 1, 0, 0, 0};


#endif /*LODEPNG_COMPILE_ENCODER*/

#ifdef LODEPNG_COMPILE_DECODER

/** Instrumented function lodepng_decompress_settings_init(LodePNGDecompressSettings*) */
void lodepng_decompress_settings_init(LodePNGDecompressSettings* settings) /* << Aka begin of function void lodepng_decompress_settings_init(LodePNGDecompressSettings* settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decompress_settings_init(LodePNGDecompressSettings*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_decompress_settings_init.95404.stub"

  AKA_mark("lis===2334###sois===95479###eois===95508###lif===1###soif===80###eoif===109###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decompress_settings_init(LodePNGDecompressSettings*)");settings->ignore_adler32 = 0;
  AKA_mark("lis===2335###sois===95512###eois===95538###lif===2###soif===113###eoif===139###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decompress_settings_init(LodePNGDecompressSettings*)");settings->ignore_nlen = 0;
  AKA_mark("lis===2336###sois===95542###eois===95572###lif===3###soif===143###eoif===173###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decompress_settings_init(LodePNGDecompressSettings*)");settings->max_output_size = 0;

  AKA_mark("lis===2338###sois===95578###eois===95604###lif===5###soif===179###eoif===205###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decompress_settings_init(LodePNGDecompressSettings*)");settings->custom_zlib = 0;
  AKA_mark("lis===2339###sois===95608###eois===95637###lif===6###soif===209###eoif===238###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decompress_settings_init(LodePNGDecompressSettings*)");settings->custom_inflate = 0;
  AKA_mark("lis===2340###sois===95641###eois===95670###lif===7###soif===242###eoif===271###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decompress_settings_init(LodePNGDecompressSettings*)");settings->custom_context = 0;
}

const LodePNGDecompressSettings lodepng_default_decompress_settings = {0, 0, 0, 0, 0, 0};

#endif /*LODEPNG_COMPILE_DECODER*/

/* ////////////////////////////////////////////////////////////////////////// */
/* ////////////////////////////////////////////////////////////////////////// */
/* // End of Zlib related code. Begin of PNG related code.                 // */
/* ////////////////////////////////////////////////////////////////////////// */
/* ////////////////////////////////////////////////////////////////////////// */

#ifdef LODEPNG_COMPILE_PNG

/* ////////////////////////////////////////////////////////////////////////// */
/* / CRC32                                                                  / */
/* ////////////////////////////////////////////////////////////////////////// */


#ifdef LODEPNG_COMPILE_CRC

static const unsigned lodepng_crc32_table0[256] = {
  0x00000000u, 0x77073096u, 0xee0e612cu, 0x990951bau, 0x076dc419u, 0x706af48fu, 0xe963a535u, 0x9e6495a3u,
  0x0edb8832u, 0x79dcb8a4u, 0xe0d5e91eu, 0x97d2d988u, 0x09b64c2bu, 0x7eb17cbdu, 0xe7b82d07u, 0x90bf1d91u,
  0x1db71064u, 0x6ab020f2u, 0xf3b97148u, 0x84be41deu, 0x1adad47du, 0x6ddde4ebu, 0xf4d4b551u, 0x83d385c7u,
  0x136c9856u, 0x646ba8c0u, 0xfd62f97au, 0x8a65c9ecu, 0x14015c4fu, 0x63066cd9u, 0xfa0f3d63u, 0x8d080df5u,
  0x3b6e20c8u, 0x4c69105eu, 0xd56041e4u, 0xa2677172u, 0x3c03e4d1u, 0x4b04d447u, 0xd20d85fdu, 0xa50ab56bu,
  0x35b5a8fau, 0x42b2986cu, 0xdbbbc9d6u, 0xacbcf940u, 0x32d86ce3u, 0x45df5c75u, 0xdcd60dcfu, 0xabd13d59u,
  0x26d930acu, 0x51de003au, 0xc8d75180u, 0xbfd06116u, 0x21b4f4b5u, 0x56b3c423u, 0xcfba9599u, 0xb8bda50fu,
  0x2802b89eu, 0x5f058808u, 0xc60cd9b2u, 0xb10be924u, 0x2f6f7c87u, 0x58684c11u, 0xc1611dabu, 0xb6662d3du,
  0x76dc4190u, 0x01db7106u, 0x98d220bcu, 0xefd5102au, 0x71b18589u, 0x06b6b51fu, 0x9fbfe4a5u, 0xe8b8d433u,
  0x7807c9a2u, 0x0f00f934u, 0x9609a88eu, 0xe10e9818u, 0x7f6a0dbbu, 0x086d3d2du, 0x91646c97u, 0xe6635c01u,
  0x6b6b51f4u, 0x1c6c6162u, 0x856530d8u, 0xf262004eu, 0x6c0695edu, 0x1b01a57bu, 0x8208f4c1u, 0xf50fc457u,
  0x65b0d9c6u, 0x12b7e950u, 0x8bbeb8eau, 0xfcb9887cu, 0x62dd1ddfu, 0x15da2d49u, 0x8cd37cf3u, 0xfbd44c65u,
  0x4db26158u, 0x3ab551ceu, 0xa3bc0074u, 0xd4bb30e2u, 0x4adfa541u, 0x3dd895d7u, 0xa4d1c46du, 0xd3d6f4fbu,
  0x4369e96au, 0x346ed9fcu, 0xad678846u, 0xda60b8d0u, 0x44042d73u, 0x33031de5u, 0xaa0a4c5fu, 0xdd0d7cc9u,
  0x5005713cu, 0x270241aau, 0xbe0b1010u, 0xc90c2086u, 0x5768b525u, 0x206f85b3u, 0xb966d409u, 0xce61e49fu,
  0x5edef90eu, 0x29d9c998u, 0xb0d09822u, 0xc7d7a8b4u, 0x59b33d17u, 0x2eb40d81u, 0xb7bd5c3bu, 0xc0ba6cadu,
  0xedb88320u, 0x9abfb3b6u, 0x03b6e20cu, 0x74b1d29au, 0xead54739u, 0x9dd277afu, 0x04db2615u, 0x73dc1683u,
  0xe3630b12u, 0x94643b84u, 0x0d6d6a3eu, 0x7a6a5aa8u, 0xe40ecf0bu, 0x9309ff9du, 0x0a00ae27u, 0x7d079eb1u,
  0xf00f9344u, 0x8708a3d2u, 0x1e01f268u, 0x6906c2feu, 0xf762575du, 0x806567cbu, 0x196c3671u, 0x6e6b06e7u,
  0xfed41b76u, 0x89d32be0u, 0x10da7a5au, 0x67dd4accu, 0xf9b9df6fu, 0x8ebeeff9u, 0x17b7be43u, 0x60b08ed5u,
  0xd6d6a3e8u, 0xa1d1937eu, 0x38d8c2c4u, 0x4fdff252u, 0xd1bb67f1u, 0xa6bc5767u, 0x3fb506ddu, 0x48b2364bu,
  0xd80d2bdau, 0xaf0a1b4cu, 0x36034af6u, 0x41047a60u, 0xdf60efc3u, 0xa867df55u, 0x316e8eefu, 0x4669be79u,
  0xcb61b38cu, 0xbc66831au, 0x256fd2a0u, 0x5268e236u, 0xcc0c7795u, 0xbb0b4703u, 0x220216b9u, 0x5505262fu,
  0xc5ba3bbeu, 0xb2bd0b28u, 0x2bb45a92u, 0x5cb36a04u, 0xc2d7ffa7u, 0xb5d0cf31u, 0x2cd99e8bu, 0x5bdeae1du,
  0x9b64c2b0u, 0xec63f226u, 0x756aa39cu, 0x026d930au, 0x9c0906a9u, 0xeb0e363fu, 0x72076785u, 0x05005713u,
  0x95bf4a82u, 0xe2b87a14u, 0x7bb12baeu, 0x0cb61b38u, 0x92d28e9bu, 0xe5d5be0du, 0x7cdcefb7u, 0x0bdbdf21u,
  0x86d3d2d4u, 0xf1d4e242u, 0x68ddb3f8u, 0x1fda836eu, 0x81be16cdu, 0xf6b9265bu, 0x6fb077e1u, 0x18b74777u,
  0x88085ae6u, 0xff0f6a70u, 0x66063bcau, 0x11010b5cu, 0x8f659effu, 0xf862ae69u, 0x616bffd3u, 0x166ccf45u,
  0xa00ae278u, 0xd70dd2eeu, 0x4e048354u, 0x3903b3c2u, 0xa7672661u, 0xd06016f7u, 0x4969474du, 0x3e6e77dbu,
  0xaed16a4au, 0xd9d65adcu, 0x40df0b66u, 0x37d83bf0u, 0xa9bcae53u, 0xdebb9ec5u, 0x47b2cf7fu, 0x30b5ffe9u,
  0xbdbdf21cu, 0xcabac28au, 0x53b39330u, 0x24b4a3a6u, 0xbad03605u, 0xcdd70693u, 0x54de5729u, 0x23d967bfu,
  0xb3667a2eu, 0xc4614ab8u, 0x5d681b02u, 0x2a6f2b94u, 0xb40bbe37u, 0xc30c8ea1u, 0x5a05df1bu, 0x2d02ef8du
};

static const unsigned lodepng_crc32_table1[256] = {
  0x00000000u, 0x191b3141u, 0x32366282u, 0x2b2d53c3u, 0x646cc504u, 0x7d77f445u, 0x565aa786u, 0x4f4196c7u,
  0xc8d98a08u, 0xd1c2bb49u, 0xfaefe88au, 0xe3f4d9cbu, 0xacb54f0cu, 0xb5ae7e4du, 0x9e832d8eu, 0x87981ccfu,
  0x4ac21251u, 0x53d92310u, 0x78f470d3u, 0x61ef4192u, 0x2eaed755u, 0x37b5e614u, 0x1c98b5d7u, 0x05838496u,
  0x821b9859u, 0x9b00a918u, 0xb02dfadbu, 0xa936cb9au, 0xe6775d5du, 0xff6c6c1cu, 0xd4413fdfu, 0xcd5a0e9eu,
  0x958424a2u, 0x8c9f15e3u, 0xa7b24620u, 0xbea97761u, 0xf1e8e1a6u, 0xe8f3d0e7u, 0xc3de8324u, 0xdac5b265u,
  0x5d5daeaau, 0x44469febu, 0x6f6bcc28u, 0x7670fd69u, 0x39316baeu, 0x202a5aefu, 0x0b07092cu, 0x121c386du,
  0xdf4636f3u, 0xc65d07b2u, 0xed705471u, 0xf46b6530u, 0xbb2af3f7u, 0xa231c2b6u, 0x891c9175u, 0x9007a034u,
  0x179fbcfbu, 0x0e848dbau, 0x25a9de79u, 0x3cb2ef38u, 0x73f379ffu, 0x6ae848beu, 0x41c51b7du, 0x58de2a3cu,
  0xf0794f05u, 0xe9627e44u, 0xc24f2d87u, 0xdb541cc6u, 0x94158a01u, 0x8d0ebb40u, 0xa623e883u, 0xbf38d9c2u,
  0x38a0c50du, 0x21bbf44cu, 0x0a96a78fu, 0x138d96ceu, 0x5ccc0009u, 0x45d73148u, 0x6efa628bu, 0x77e153cau,
  0xbabb5d54u, 0xa3a06c15u, 0x888d3fd6u, 0x91960e97u, 0xded79850u, 0xc7cca911u, 0xece1fad2u, 0xf5facb93u,
  0x7262d75cu, 0x6b79e61du, 0x4054b5deu, 0x594f849fu, 0x160e1258u, 0x0f152319u, 0x243870dau, 0x3d23419bu,
  0x65fd6ba7u, 0x7ce65ae6u, 0x57cb0925u, 0x4ed03864u, 0x0191aea3u, 0x188a9fe2u, 0x33a7cc21u, 0x2abcfd60u,
  0xad24e1afu, 0xb43fd0eeu, 0x9f12832du, 0x8609b26cu, 0xc94824abu, 0xd05315eau, 0xfb7e4629u, 0xe2657768u,
  0x2f3f79f6u, 0x362448b7u, 0x1d091b74u, 0x04122a35u, 0x4b53bcf2u, 0x52488db3u, 0x7965de70u, 0x607eef31u,
  0xe7e6f3feu, 0xfefdc2bfu, 0xd5d0917cu, 0xcccba03du, 0x838a36fau, 0x9a9107bbu, 0xb1bc5478u, 0xa8a76539u,
  0x3b83984bu, 0x2298a90au, 0x09b5fac9u, 0x10aecb88u, 0x5fef5d4fu, 0x46f46c0eu, 0x6dd93fcdu, 0x74c20e8cu,
  0xf35a1243u, 0xea412302u, 0xc16c70c1u, 0xd8774180u, 0x9736d747u, 0x8e2de606u, 0xa500b5c5u, 0xbc1b8484u,
  0x71418a1au, 0x685abb5bu, 0x4377e898u, 0x5a6cd9d9u, 0x152d4f1eu, 0x0c367e5fu, 0x271b2d9cu, 0x3e001cddu,
  0xb9980012u, 0xa0833153u, 0x8bae6290u, 0x92b553d1u, 0xddf4c516u, 0xc4eff457u, 0xefc2a794u, 0xf6d996d5u,
  0xae07bce9u, 0xb71c8da8u, 0x9c31de6bu, 0x852aef2au, 0xca6b79edu, 0xd37048acu, 0xf85d1b6fu, 0xe1462a2eu,
  0x66de36e1u, 0x7fc507a0u, 0x54e85463u, 0x4df36522u, 0x02b2f3e5u, 0x1ba9c2a4u, 0x30849167u, 0x299fa026u,
  0xe4c5aeb8u, 0xfdde9ff9u, 0xd6f3cc3au, 0xcfe8fd7bu, 0x80a96bbcu, 0x99b25afdu, 0xb29f093eu, 0xab84387fu,
  0x2c1c24b0u, 0x350715f1u, 0x1e2a4632u, 0x07317773u, 0x4870e1b4u, 0x516bd0f5u, 0x7a468336u, 0x635db277u,
  0xcbfad74eu, 0xd2e1e60fu, 0xf9ccb5ccu, 0xe0d7848du, 0xaf96124au, 0xb68d230bu, 0x9da070c8u, 0x84bb4189u,
  0x03235d46u, 0x1a386c07u, 0x31153fc4u, 0x280e0e85u, 0x674f9842u, 0x7e54a903u, 0x5579fac0u, 0x4c62cb81u,
  0x8138c51fu, 0x9823f45eu, 0xb30ea79du, 0xaa1596dcu, 0xe554001bu, 0xfc4f315au, 0xd7626299u, 0xce7953d8u,
  0x49e14f17u, 0x50fa7e56u, 0x7bd72d95u, 0x62cc1cd4u, 0x2d8d8a13u, 0x3496bb52u, 0x1fbbe891u, 0x06a0d9d0u,
  0x5e7ef3ecu, 0x4765c2adu, 0x6c48916eu, 0x7553a02fu, 0x3a1236e8u, 0x230907a9u, 0x0824546au, 0x113f652bu,
  0x96a779e4u, 0x8fbc48a5u, 0xa4911b66u, 0xbd8a2a27u, 0xf2cbbce0u, 0xebd08da1u, 0xc0fdde62u, 0xd9e6ef23u,
  0x14bce1bdu, 0x0da7d0fcu, 0x268a833fu, 0x3f91b27eu, 0x70d024b9u, 0x69cb15f8u, 0x42e6463bu, 0x5bfd777au,
  0xdc656bb5u, 0xc57e5af4u, 0xee530937u, 0xf7483876u, 0xb809aeb1u, 0xa1129ff0u, 0x8a3fcc33u, 0x9324fd72u
};

static const unsigned lodepng_crc32_table2[256] = {
  0x00000000u, 0x01c26a37u, 0x0384d46eu, 0x0246be59u, 0x0709a8dcu, 0x06cbc2ebu, 0x048d7cb2u, 0x054f1685u,
  0x0e1351b8u, 0x0fd13b8fu, 0x0d9785d6u, 0x0c55efe1u, 0x091af964u, 0x08d89353u, 0x0a9e2d0au, 0x0b5c473du,
  0x1c26a370u, 0x1de4c947u, 0x1fa2771eu, 0x1e601d29u, 0x1b2f0bacu, 0x1aed619bu, 0x18abdfc2u, 0x1969b5f5u,
  0x1235f2c8u, 0x13f798ffu, 0x11b126a6u, 0x10734c91u, 0x153c5a14u, 0x14fe3023u, 0x16b88e7au, 0x177ae44du,
  0x384d46e0u, 0x398f2cd7u, 0x3bc9928eu, 0x3a0bf8b9u, 0x3f44ee3cu, 0x3e86840bu, 0x3cc03a52u, 0x3d025065u,
  0x365e1758u, 0x379c7d6fu, 0x35dac336u, 0x3418a901u, 0x3157bf84u, 0x3095d5b3u, 0x32d36beau, 0x331101ddu,
  0x246be590u, 0x25a98fa7u, 0x27ef31feu, 0x262d5bc9u, 0x23624d4cu, 0x22a0277bu, 0x20e69922u, 0x2124f315u,
  0x2a78b428u, 0x2bbade1fu, 0x29fc6046u, 0x283e0a71u, 0x2d711cf4u, 0x2cb376c3u, 0x2ef5c89au, 0x2f37a2adu,
  0x709a8dc0u, 0x7158e7f7u, 0x731e59aeu, 0x72dc3399u, 0x7793251cu, 0x76514f2bu, 0x7417f172u, 0x75d59b45u,
  0x7e89dc78u, 0x7f4bb64fu, 0x7d0d0816u, 0x7ccf6221u, 0x798074a4u, 0x78421e93u, 0x7a04a0cau, 0x7bc6cafdu,
  0x6cbc2eb0u, 0x6d7e4487u, 0x6f38fadeu, 0x6efa90e9u, 0x6bb5866cu, 0x6a77ec5bu, 0x68315202u, 0x69f33835u,
  0x62af7f08u, 0x636d153fu, 0x612bab66u, 0x60e9c151u, 0x65a6d7d4u, 0x6464bde3u, 0x662203bau, 0x67e0698du,
  0x48d7cb20u, 0x4915a117u, 0x4b531f4eu, 0x4a917579u, 0x4fde63fcu, 0x4e1c09cbu, 0x4c5ab792u, 0x4d98dda5u,
  0x46c49a98u, 0x4706f0afu, 0x45404ef6u, 0x448224c1u, 0x41cd3244u, 0x400f5873u, 0x4249e62au, 0x438b8c1du,
  0x54f16850u, 0x55330267u, 0x5775bc3eu, 0x56b7d609u, 0x53f8c08cu, 0x523aaabbu, 0x507c14e2u, 0x51be7ed5u,
  0x5ae239e8u, 0x5b2053dfu, 0x5966ed86u, 0x58a487b1u, 0x5deb9134u, 0x5c29fb03u, 0x5e6f455au, 0x5fad2f6du,
  0xe1351b80u, 0xe0f771b7u, 0xe2b1cfeeu, 0xe373a5d9u, 0xe63cb35cu, 0xe7fed96bu, 0xe5b86732u, 0xe47a0d05u,
  0xef264a38u, 0xeee4200fu, 0xeca29e56u, 0xed60f461u, 0xe82fe2e4u, 0xe9ed88d3u, 0xebab368au, 0xea695cbdu,
  0xfd13b8f0u, 0xfcd1d2c7u, 0xfe976c9eu, 0xff5506a9u, 0xfa1a102cu, 0xfbd87a1bu, 0xf99ec442u, 0xf85cae75u,
  0xf300e948u, 0xf2c2837fu, 0xf0843d26u, 0xf1465711u, 0xf4094194u, 0xf5cb2ba3u, 0xf78d95fau, 0xf64fffcdu,
  0xd9785d60u, 0xd8ba3757u, 0xdafc890eu, 0xdb3ee339u, 0xde71f5bcu, 0xdfb39f8bu, 0xddf521d2u, 0xdc374be5u,
  0xd76b0cd8u, 0xd6a966efu, 0xd4efd8b6u, 0xd52db281u, 0xd062a404u, 0xd1a0ce33u, 0xd3e6706au, 0xd2241a5du,
  0xc55efe10u, 0xc49c9427u, 0xc6da2a7eu, 0xc7184049u, 0xc25756ccu, 0xc3953cfbu, 0xc1d382a2u, 0xc011e895u,
  0xcb4dafa8u, 0xca8fc59fu, 0xc8c97bc6u, 0xc90b11f1u, 0xcc440774u, 0xcd866d43u, 0xcfc0d31au, 0xce02b92du,
  0x91af9640u, 0x906dfc77u, 0x922b422eu, 0x93e92819u, 0x96a63e9cu, 0x976454abu, 0x9522eaf2u, 0x94e080c5u,
  0x9fbcc7f8u, 0x9e7eadcfu, 0x9c381396u, 0x9dfa79a1u, 0x98b56f24u, 0x99770513u, 0x9b31bb4au, 0x9af3d17du,
  0x8d893530u, 0x8c4b5f07u, 0x8e0de15eu, 0x8fcf8b69u, 0x8a809decu, 0x8b42f7dbu, 0x89044982u, 0x88c623b5u,
  0x839a6488u, 0x82580ebfu, 0x801eb0e6u, 0x81dcdad1u, 0x8493cc54u, 0x8551a663u, 0x8717183au, 0x86d5720du,
  0xa9e2d0a0u, 0xa820ba97u, 0xaa6604ceu, 0xaba46ef9u, 0xaeeb787cu, 0xaf29124bu, 0xad6fac12u, 0xacadc625u,
  0xa7f18118u, 0xa633eb2fu, 0xa4755576u, 0xa5b73f41u, 0xa0f829c4u, 0xa13a43f3u, 0xa37cfdaau, 0xa2be979du,
  0xb5c473d0u, 0xb40619e7u, 0xb640a7beu, 0xb782cd89u, 0xb2cddb0cu, 0xb30fb13bu, 0xb1490f62u, 0xb08b6555u,
  0xbbd72268u, 0xba15485fu, 0xb853f606u, 0xb9919c31u, 0xbcde8ab4u, 0xbd1ce083u, 0xbf5a5edau, 0xbe9834edu
};

static const unsigned lodepng_crc32_table3[256] = {
  0x00000000u, 0xb8bc6765u, 0xaa09c88bu, 0x12b5afeeu, 0x8f629757u, 0x37def032u, 0x256b5fdcu, 0x9dd738b9u,
  0xc5b428efu, 0x7d084f8au, 0x6fbde064u, 0xd7018701u, 0x4ad6bfb8u, 0xf26ad8ddu, 0xe0df7733u, 0x58631056u,
  0x5019579fu, 0xe8a530fau, 0xfa109f14u, 0x42acf871u, 0xdf7bc0c8u, 0x67c7a7adu, 0x75720843u, 0xcdce6f26u,
  0x95ad7f70u, 0x2d111815u, 0x3fa4b7fbu, 0x8718d09eu, 0x1acfe827u, 0xa2738f42u, 0xb0c620acu, 0x087a47c9u,
  0xa032af3eu, 0x188ec85bu, 0x0a3b67b5u, 0xb28700d0u, 0x2f503869u, 0x97ec5f0cu, 0x8559f0e2u, 0x3de59787u,
  0x658687d1u, 0xdd3ae0b4u, 0xcf8f4f5au, 0x7733283fu, 0xeae41086u, 0x525877e3u, 0x40edd80du, 0xf851bf68u,
  0xf02bf8a1u, 0x48979fc4u, 0x5a22302au, 0xe29e574fu, 0x7f496ff6u, 0xc7f50893u, 0xd540a77du, 0x6dfcc018u,
  0x359fd04eu, 0x8d23b72bu, 0x9f9618c5u, 0x272a7fa0u, 0xbafd4719u, 0x0241207cu, 0x10f48f92u, 0xa848e8f7u,
  0x9b14583du, 0x23a83f58u, 0x311d90b6u, 0x89a1f7d3u, 0x1476cf6au, 0xaccaa80fu, 0xbe7f07e1u, 0x06c36084u,
  0x5ea070d2u, 0xe61c17b7u, 0xf4a9b859u, 0x4c15df3cu, 0xd1c2e785u, 0x697e80e0u, 0x7bcb2f0eu, 0xc377486bu,
  0xcb0d0fa2u, 0x73b168c7u, 0x6104c729u, 0xd9b8a04cu, 0x446f98f5u, 0xfcd3ff90u, 0xee66507eu, 0x56da371bu,
  0x0eb9274du, 0xb6054028u, 0xa4b0efc6u, 0x1c0c88a3u, 0x81dbb01au, 0x3967d77fu, 0x2bd27891u, 0x936e1ff4u,
  0x3b26f703u, 0x839a9066u, 0x912f3f88u, 0x299358edu, 0xb4446054u, 0x0cf80731u, 0x1e4da8dfu, 0xa6f1cfbau,
  0xfe92dfecu, 0x462eb889u, 0x549b1767u, 0xec277002u, 0x71f048bbu, 0xc94c2fdeu, 0xdbf98030u, 0x6345e755u,
  0x6b3fa09cu, 0xd383c7f9u, 0xc1366817u, 0x798a0f72u, 0xe45d37cbu, 0x5ce150aeu, 0x4e54ff40u, 0xf6e89825u,
  0xae8b8873u, 0x1637ef16u, 0x048240f8u, 0xbc3e279du, 0x21e91f24u, 0x99557841u, 0x8be0d7afu, 0x335cb0cau,
  0xed59b63bu, 0x55e5d15eu, 0x47507eb0u, 0xffec19d5u, 0x623b216cu, 0xda874609u, 0xc832e9e7u, 0x708e8e82u,
  0x28ed9ed4u, 0x9051f9b1u, 0x82e4565fu, 0x3a58313au, 0xa78f0983u, 0x1f336ee6u, 0x0d86c108u, 0xb53aa66du,
  0xbd40e1a4u, 0x05fc86c1u, 0x1749292fu, 0xaff54e4au, 0x322276f3u, 0x8a9e1196u, 0x982bbe78u, 0x2097d91du,
  0x78f4c94bu, 0xc048ae2eu, 0xd2fd01c0u, 0x6a4166a5u, 0xf7965e1cu, 0x4f2a3979u, 0x5d9f9697u, 0xe523f1f2u,
  0x4d6b1905u, 0xf5d77e60u, 0xe762d18eu, 0x5fdeb6ebu, 0xc2098e52u, 0x7ab5e937u, 0x680046d9u, 0xd0bc21bcu,
  0x88df31eau, 0x3063568fu, 0x22d6f961u, 0x9a6a9e04u, 0x07bda6bdu, 0xbf01c1d8u, 0xadb46e36u, 0x15080953u,
  0x1d724e9au, 0xa5ce29ffu, 0xb77b8611u, 0x0fc7e174u, 0x9210d9cdu, 0x2aacbea8u, 0x38191146u, 0x80a57623u,
  0xd8c66675u, 0x607a0110u, 0x72cfaefeu, 0xca73c99bu, 0x57a4f122u, 0xef189647u, 0xfdad39a9u, 0x45115eccu,
  0x764dee06u, 0xcef18963u, 0xdc44268du, 0x64f841e8u, 0xf92f7951u, 0x41931e34u, 0x5326b1dau, 0xeb9ad6bfu,
  0xb3f9c6e9u, 0x0b45a18cu, 0x19f00e62u, 0xa14c6907u, 0x3c9b51beu, 0x842736dbu, 0x96929935u, 0x2e2efe50u,
  0x2654b999u, 0x9ee8defcu, 0x8c5d7112u, 0x34e11677u, 0xa9362eceu, 0x118a49abu, 0x033fe645u, 0xbb838120u,
  0xe3e09176u, 0x5b5cf613u, 0x49e959fdu, 0xf1553e98u, 0x6c820621u, 0xd43e6144u, 0xc68bceaau, 0x7e37a9cfu,
  0xd67f4138u, 0x6ec3265du, 0x7c7689b3u, 0xc4caeed6u, 0x591dd66fu, 0xe1a1b10au, 0xf3141ee4u, 0x4ba87981u,
  0x13cb69d7u, 0xab770eb2u, 0xb9c2a15cu, 0x017ec639u, 0x9ca9fe80u, 0x241599e5u, 0x36a0360bu, 0x8e1c516eu,
  0x866616a7u, 0x3eda71c2u, 0x2c6fde2cu, 0x94d3b949u, 0x090481f0u, 0xb1b8e695u, 0xa30d497bu, 0x1bb12e1eu,
  0x43d23e48u, 0xfb6e592du, 0xe9dbf6c3u, 0x516791a6u, 0xccb0a91fu, 0x740cce7au, 0x66b96194u, 0xde0506f1u
};

static const unsigned lodepng_crc32_table4[256] = {
  0x00000000u, 0x3d6029b0u, 0x7ac05360u, 0x47a07ad0u, 0xf580a6c0u, 0xc8e08f70u, 0x8f40f5a0u, 0xb220dc10u,
  0x30704bc1u, 0x0d106271u, 0x4ab018a1u, 0x77d03111u, 0xc5f0ed01u, 0xf890c4b1u, 0xbf30be61u, 0x825097d1u,
  0x60e09782u, 0x5d80be32u, 0x1a20c4e2u, 0x2740ed52u, 0x95603142u, 0xa80018f2u, 0xefa06222u, 0xd2c04b92u,
  0x5090dc43u, 0x6df0f5f3u, 0x2a508f23u, 0x1730a693u, 0xa5107a83u, 0x98705333u, 0xdfd029e3u, 0xe2b00053u,
  0xc1c12f04u, 0xfca106b4u, 0xbb017c64u, 0x866155d4u, 0x344189c4u, 0x0921a074u, 0x4e81daa4u, 0x73e1f314u,
  0xf1b164c5u, 0xccd14d75u, 0x8b7137a5u, 0xb6111e15u, 0x0431c205u, 0x3951ebb5u, 0x7ef19165u, 0x4391b8d5u,
  0xa121b886u, 0x9c419136u, 0xdbe1ebe6u, 0xe681c256u, 0x54a11e46u, 0x69c137f6u, 0x2e614d26u, 0x13016496u,
  0x9151f347u, 0xac31daf7u, 0xeb91a027u, 0xd6f18997u, 0x64d15587u, 0x59b17c37u, 0x1e1106e7u, 0x23712f57u,
  0x58f35849u, 0x659371f9u, 0x22330b29u, 0x1f532299u, 0xad73fe89u, 0x9013d739u, 0xd7b3ade9u, 0xead38459u,
  0x68831388u, 0x55e33a38u, 0x124340e8u, 0x2f236958u, 0x9d03b548u, 0xa0639cf8u, 0xe7c3e628u, 0xdaa3cf98u,
  0x3813cfcbu, 0x0573e67bu, 0x42d39cabu, 0x7fb3b51bu, 0xcd93690bu, 0xf0f340bbu, 0xb7533a6bu, 0x8a3313dbu,
  0x0863840au, 0x3503adbau, 0x72a3d76au, 0x4fc3fedau, 0xfde322cau, 0xc0830b7au, 0x872371aau, 0xba43581au,
  0x9932774du, 0xa4525efdu, 0xe3f2242du, 0xde920d9du, 0x6cb2d18du, 0x51d2f83du, 0x167282edu, 0x2b12ab5du,
  0xa9423c8cu, 0x9422153cu, 0xd3826fecu, 0xeee2465cu, 0x5cc29a4cu, 0x61a2b3fcu, 0x2602c92cu, 0x1b62e09cu,
  0xf9d2e0cfu, 0xc4b2c97fu, 0x8312b3afu, 0xbe729a1fu, 0x0c52460fu, 0x31326fbfu, 0x7692156fu, 0x4bf23cdfu,
  0xc9a2ab0eu, 0xf4c282beu, 0xb362f86eu, 0x8e02d1deu, 0x3c220dceu, 0x0142247eu, 0x46e25eaeu, 0x7b82771eu,
  0xb1e6b092u, 0x8c869922u, 0xcb26e3f2u, 0xf646ca42u, 0x44661652u, 0x79063fe2u, 0x3ea64532u, 0x03c66c82u,
  0x8196fb53u, 0xbcf6d2e3u, 0xfb56a833u, 0xc6368183u, 0x74165d93u, 0x49767423u, 0x0ed60ef3u, 0x33b62743u,
  0xd1062710u, 0xec660ea0u, 0xabc67470u, 0x96a65dc0u, 0x248681d0u, 0x19e6a860u, 0x5e46d2b0u, 0x6326fb00u,
  0xe1766cd1u, 0xdc164561u, 0x9bb63fb1u, 0xa6d61601u, 0x14f6ca11u, 0x2996e3a1u, 0x6e369971u, 0x5356b0c1u,
  0x70279f96u, 0x4d47b626u, 0x0ae7ccf6u, 0x3787e546u, 0x85a73956u, 0xb8c710e6u, 0xff676a36u, 0xc2074386u,
  0x4057d457u, 0x7d37fde7u, 0x3a978737u, 0x07f7ae87u, 0xb5d77297u, 0x88b75b27u, 0xcf1721f7u, 0xf2770847u,
  0x10c70814u, 0x2da721a4u, 0x6a075b74u, 0x576772c4u, 0xe547aed4u, 0xd8278764u, 0x9f87fdb4u, 0xa2e7d404u,
  0x20b743d5u, 0x1dd76a65u, 0x5a7710b5u, 0x67173905u, 0xd537e515u, 0xe857cca5u, 0xaff7b675u, 0x92979fc5u,
  0xe915e8dbu, 0xd475c16bu, 0x93d5bbbbu, 0xaeb5920bu, 0x1c954e1bu, 0x21f567abu, 0x66551d7bu, 0x5b3534cbu,
  0xd965a31au, 0xe4058aaau, 0xa3a5f07au, 0x9ec5d9cau, 0x2ce505dau, 0x11852c6au, 0x562556bau, 0x6b457f0au,
  0x89f57f59u, 0xb49556e9u, 0xf3352c39u, 0xce550589u, 0x7c75d999u, 0x4115f029u, 0x06b58af9u, 0x3bd5a349u,
  0xb9853498u, 0x84e51d28u, 0xc34567f8u, 0xfe254e48u, 0x4c059258u, 0x7165bbe8u, 0x36c5c138u, 0x0ba5e888u,
  0x28d4c7dfu, 0x15b4ee6fu, 0x521494bfu, 0x6f74bd0fu, 0xdd54611fu, 0xe03448afu, 0xa794327fu, 0x9af41bcfu,
  0x18a48c1eu, 0x25c4a5aeu, 0x6264df7eu, 0x5f04f6ceu, 0xed242adeu, 0xd044036eu, 0x97e479beu, 0xaa84500eu,
  0x4834505du, 0x755479edu, 0x32f4033du, 0x0f942a8du, 0xbdb4f69du, 0x80d4df2du, 0xc774a5fdu, 0xfa148c4du,
  0x78441b9cu, 0x4524322cu, 0x028448fcu, 0x3fe4614cu, 0x8dc4bd5cu, 0xb0a494ecu, 0xf704ee3cu, 0xca64c78cu
};

static const unsigned lodepng_crc32_table5[256] = {
  0x00000000u, 0xcb5cd3a5u, 0x4dc8a10bu, 0x869472aeu, 0x9b914216u, 0x50cd91b3u, 0xd659e31du, 0x1d0530b8u,
  0xec53826du, 0x270f51c8u, 0xa19b2366u, 0x6ac7f0c3u, 0x77c2c07bu, 0xbc9e13deu, 0x3a0a6170u, 0xf156b2d5u,
  0x03d6029bu, 0xc88ad13eu, 0x4e1ea390u, 0x85427035u, 0x9847408du, 0x531b9328u, 0xd58fe186u, 0x1ed33223u,
  0xef8580f6u, 0x24d95353u, 0xa24d21fdu, 0x6911f258u, 0x7414c2e0u, 0xbf481145u, 0x39dc63ebu, 0xf280b04eu,
  0x07ac0536u, 0xccf0d693u, 0x4a64a43du, 0x81387798u, 0x9c3d4720u, 0x57619485u, 0xd1f5e62bu, 0x1aa9358eu,
  0xebff875bu, 0x20a354feu, 0xa6372650u, 0x6d6bf5f5u, 0x706ec54du, 0xbb3216e8u, 0x3da66446u, 0xf6fab7e3u,
  0x047a07adu, 0xcf26d408u, 0x49b2a6a6u, 0x82ee7503u, 0x9feb45bbu, 0x54b7961eu, 0xd223e4b0u, 0x197f3715u,
  0xe82985c0u, 0x23755665u, 0xa5e124cbu, 0x6ebdf76eu, 0x73b8c7d6u, 0xb8e41473u, 0x3e7066ddu, 0xf52cb578u,
  0x0f580a6cu, 0xc404d9c9u, 0x4290ab67u, 0x89cc78c2u, 0x94c9487au, 0x5f959bdfu, 0xd901e971u, 0x125d3ad4u,
  0xe30b8801u, 0x28575ba4u, 0xaec3290au, 0x659ffaafu, 0x789aca17u, 0xb3c619b2u, 0x35526b1cu, 0xfe0eb8b9u,
  0x0c8e08f7u, 0xc7d2db52u, 0x4146a9fcu, 0x8a1a7a59u, 0x971f4ae1u, 0x5c439944u, 0xdad7ebeau, 0x118b384fu,
  0xe0dd8a9au, 0x2b81593fu, 0xad152b91u, 0x6649f834u, 0x7b4cc88cu, 0xb0101b29u, 0x36846987u, 0xfdd8ba22u,
  0x08f40f5au, 0xc3a8dcffu, 0x453cae51u, 0x8e607df4u, 0x93654d4cu, 0x58399ee9u, 0xdeadec47u, 0x15f13fe2u,
  0xe4a78d37u, 0x2ffb5e92u, 0xa96f2c3cu, 0x6233ff99u, 0x7f36cf21u, 0xb46a1c84u, 0x32fe6e2au, 0xf9a2bd8fu,
  0x0b220dc1u, 0xc07ede64u, 0x46eaaccau, 0x8db67f6fu, 0x90b34fd7u, 0x5bef9c72u, 0xdd7beedcu, 0x16273d79u,
  0xe7718facu, 0x2c2d5c09u, 0xaab92ea7u, 0x61e5fd02u, 0x7ce0cdbau, 0xb7bc1e1fu, 0x31286cb1u, 0xfa74bf14u,
  0x1eb014d8u, 0xd5ecc77du, 0x5378b5d3u, 0x98246676u, 0x852156ceu, 0x4e7d856bu, 0xc8e9f7c5u, 0x03b52460u,
  0xf2e396b5u, 0x39bf4510u, 0xbf2b37beu, 0x7477e41bu, 0x6972d4a3u, 0xa22e0706u, 0x24ba75a8u, 0xefe6a60du,
  0x1d661643u, 0xd63ac5e6u, 0x50aeb748u, 0x9bf264edu, 0x86f75455u, 0x4dab87f0u, 0xcb3ff55eu, 0x006326fbu,
  0xf135942eu, 0x3a69478bu, 0xbcfd3525u, 0x77a1e680u, 0x6aa4d638u, 0xa1f8059du, 0x276c7733u, 0xec30a496u,
  0x191c11eeu, 0xd240c24bu, 0x54d4b0e5u, 0x9f886340u, 0x828d53f8u, 0x49d1805du, 0xcf45f2f3u, 0x04192156u,
  0xf54f9383u, 0x3e134026u, 0xb8873288u, 0x73dbe12du, 0x6eded195u, 0xa5820230u, 0x2316709eu, 0xe84aa33bu,
  0x1aca1375u, 0xd196c0d0u, 0x5702b27eu, 0x9c5e61dbu, 0x815b5163u, 0x4a0782c6u, 0xcc93f068u, 0x07cf23cdu,
  0xf6999118u, 0x3dc542bdu, 0xbb513013u, 0x700de3b6u, 0x6d08d30eu, 0xa65400abu, 0x20c07205u, 0xeb9ca1a0u,
  0x11e81eb4u, 0xdab4cd11u, 0x5c20bfbfu, 0x977c6c1au, 0x8a795ca2u, 0x41258f07u, 0xc7b1fda9u, 0x0ced2e0cu,
  0xfdbb9cd9u, 0x36e74f7cu, 0xb0733dd2u, 0x7b2fee77u, 0x662adecfu, 0xad760d6au, 0x2be27fc4u, 0xe0beac61u,
  0x123e1c2fu, 0xd962cf8au, 0x5ff6bd24u, 0x94aa6e81u, 0x89af5e39u, 0x42f38d9cu, 0xc467ff32u, 0x0f3b2c97u,
  0xfe6d9e42u, 0x35314de7u, 0xb3a53f49u, 0x78f9ececu, 0x65fcdc54u, 0xaea00ff1u, 0x28347d5fu, 0xe368aefau,
  0x16441b82u, 0xdd18c827u, 0x5b8cba89u, 0x90d0692cu, 0x8dd55994u, 0x46898a31u, 0xc01df89fu, 0x0b412b3au,
  0xfa1799efu, 0x314b4a4au, 0xb7df38e4u, 0x7c83eb41u, 0x6186dbf9u, 0xaada085cu, 0x2c4e7af2u, 0xe712a957u,
  0x15921919u, 0xdececabcu, 0x585ab812u, 0x93066bb7u, 0x8e035b0fu, 0x455f88aau, 0xc3cbfa04u, 0x089729a1u,
  0xf9c19b74u, 0x329d48d1u, 0xb4093a7fu, 0x7f55e9dau, 0x6250d962u, 0xa90c0ac7u, 0x2f987869u, 0xe4c4abccu
};

static const unsigned lodepng_crc32_table6[256] = {
  0x00000000u, 0xa6770bb4u, 0x979f1129u, 0x31e81a9du, 0xf44f2413u, 0x52382fa7u, 0x63d0353au, 0xc5a73e8eu,
  0x33ef4e67u, 0x959845d3u, 0xa4705f4eu, 0x020754fau, 0xc7a06a74u, 0x61d761c0u, 0x503f7b5du, 0xf64870e9u,
  0x67de9cceu, 0xc1a9977au, 0xf0418de7u, 0x56368653u, 0x9391b8ddu, 0x35e6b369u, 0x040ea9f4u, 0xa279a240u,
  0x5431d2a9u, 0xf246d91du, 0xc3aec380u, 0x65d9c834u, 0xa07ef6bau, 0x0609fd0eu, 0x37e1e793u, 0x9196ec27u,
  0xcfbd399cu, 0x69ca3228u, 0x582228b5u, 0xfe552301u, 0x3bf21d8fu, 0x9d85163bu, 0xac6d0ca6u, 0x0a1a0712u,
  0xfc5277fbu, 0x5a257c4fu, 0x6bcd66d2u, 0xcdba6d66u, 0x081d53e8u, 0xae6a585cu, 0x9f8242c1u, 0x39f54975u,
  0xa863a552u, 0x0e14aee6u, 0x3ffcb47bu, 0x998bbfcfu, 0x5c2c8141u, 0xfa5b8af5u, 0xcbb39068u, 0x6dc49bdcu,
  0x9b8ceb35u, 0x3dfbe081u, 0x0c13fa1cu, 0xaa64f1a8u, 0x6fc3cf26u, 0xc9b4c492u, 0xf85cde0fu, 0x5e2bd5bbu,
  0x440b7579u, 0xe27c7ecdu, 0xd3946450u, 0x75e36fe4u, 0xb044516au, 0x16335adeu, 0x27db4043u, 0x81ac4bf7u,
  0x77e43b1eu, 0xd19330aau, 0xe07b2a37u, 0x460c2183u, 0x83ab1f0du, 0x25dc14b9u, 0x14340e24u, 0xb2430590u,
  0x23d5e9b7u, 0x85a2e203u, 0xb44af89eu, 0x123df32au, 0xd79acda4u, 0x71edc610u, 0x4005dc8du, 0xe672d739u,
  0x103aa7d0u, 0xb64dac64u, 0x87a5b6f9u, 0x21d2bd4du, 0xe47583c3u, 0x42028877u, 0x73ea92eau, 0xd59d995eu,
  0x8bb64ce5u, 0x2dc14751u, 0x1c295dccu, 0xba5e5678u, 0x7ff968f6u, 0xd98e6342u, 0xe86679dfu, 0x4e11726bu,
  0xb8590282u, 0x1e2e0936u, 0x2fc613abu, 0x89b1181fu, 0x4c162691u, 0xea612d25u, 0xdb8937b8u, 0x7dfe3c0cu,
  0xec68d02bu, 0x4a1fdb9fu, 0x7bf7c102u, 0xdd80cab6u, 0x1827f438u, 0xbe50ff8cu, 0x8fb8e511u, 0x29cfeea5u,
  0xdf879e4cu, 0x79f095f8u, 0x48188f65u, 0xee6f84d1u, 0x2bc8ba5fu, 0x8dbfb1ebu, 0xbc57ab76u, 0x1a20a0c2u,
  0x8816eaf2u, 0x2e61e146u, 0x1f89fbdbu, 0xb9fef06fu, 0x7c59cee1u, 0xda2ec555u, 0xebc6dfc8u, 0x4db1d47cu,
  0xbbf9a495u, 0x1d8eaf21u, 0x2c66b5bcu, 0x8a11be08u, 0x4fb68086u, 0xe9c18b32u, 0xd82991afu, 0x7e5e9a1bu,
  0xefc8763cu, 0x49bf7d88u, 0x78576715u, 0xde206ca1u, 0x1b87522fu, 0xbdf0599bu, 0x8c184306u, 0x2a6f48b2u,
  0xdc27385bu, 0x7a5033efu, 0x4bb82972u, 0xedcf22c6u, 0x28681c48u, 0x8e1f17fcu, 0xbff70d61u, 0x198006d5u,
  0x47abd36eu, 0xe1dcd8dau, 0xd034c247u, 0x7643c9f3u, 0xb3e4f77du, 0x1593fcc9u, 0x247be654u, 0x820cede0u,
  0x74449d09u, 0xd23396bdu, 0xe3db8c20u, 0x45ac8794u, 0x800bb91au, 0x267cb2aeu, 0x1794a833u, 0xb1e3a387u,
  0x20754fa0u, 0x86024414u, 0xb7ea5e89u, 0x119d553du, 0xd43a6bb3u, 0x724d6007u, 0x43a57a9au, 0xe5d2712eu,
  0x139a01c7u, 0xb5ed0a73u, 0x840510eeu, 0x22721b5au, 0xe7d525d4u, 0x41a22e60u, 0x704a34fdu, 0xd63d3f49u,
  0xcc1d9f8bu, 0x6a6a943fu, 0x5b828ea2u, 0xfdf58516u, 0x3852bb98u, 0x9e25b02cu, 0xafcdaab1u, 0x09baa105u,
  0xfff2d1ecu, 0x5985da58u, 0x686dc0c5u, 0xce1acb71u, 0x0bbdf5ffu, 0xadcafe4bu, 0x9c22e4d6u, 0x3a55ef62u,
  0xabc30345u, 0x0db408f1u, 0x3c5c126cu, 0x9a2b19d8u, 0x5f8c2756u, 0xf9fb2ce2u, 0xc813367fu, 0x6e643dcbu,
  0x982c4d22u, 0x3e5b4696u, 0x0fb35c0bu, 0xa9c457bfu, 0x6c636931u, 0xca146285u, 0xfbfc7818u, 0x5d8b73acu,
  0x03a0a617u, 0xa5d7ada3u, 0x943fb73eu, 0x3248bc8au, 0xf7ef8204u, 0x519889b0u, 0x6070932du, 0xc6079899u,
  0x304fe870u, 0x9638e3c4u, 0xa7d0f959u, 0x01a7f2edu, 0xc400cc63u, 0x6277c7d7u, 0x539fdd4au, 0xf5e8d6feu,
  0x647e3ad9u, 0xc209316du, 0xf3e12bf0u, 0x55962044u, 0x90311ecau, 0x3646157eu, 0x07ae0fe3u, 0xa1d90457u,
  0x579174beu, 0xf1e67f0au, 0xc00e6597u, 0x66796e23u, 0xa3de50adu, 0x05a95b19u, 0x34414184u, 0x92364a30u
};

static const unsigned lodepng_crc32_table7[256] = {
  0x00000000u, 0xccaa009eu, 0x4225077du, 0x8e8f07e3u, 0x844a0efau, 0x48e00e64u, 0xc66f0987u, 0x0ac50919u,
  0xd3e51bb5u, 0x1f4f1b2bu, 0x91c01cc8u, 0x5d6a1c56u, 0x57af154fu, 0x9b0515d1u, 0x158a1232u, 0xd92012acu,
  0x7cbb312bu, 0xb01131b5u, 0x3e9e3656u, 0xf23436c8u, 0xf8f13fd1u, 0x345b3f4fu, 0xbad438acu, 0x767e3832u,
  0xaf5e2a9eu, 0x63f42a00u, 0xed7b2de3u, 0x21d12d7du, 0x2b142464u, 0xe7be24fau, 0x69312319u, 0xa59b2387u,
  0xf9766256u, 0x35dc62c8u, 0xbb53652bu, 0x77f965b5u, 0x7d3c6cacu, 0xb1966c32u, 0x3f196bd1u, 0xf3b36b4fu,
  0x2a9379e3u, 0xe639797du, 0x68b67e9eu, 0xa41c7e00u, 0xaed97719u, 0x62737787u, 0xecfc7064u, 0x205670fau,
  0x85cd537du, 0x496753e3u, 0xc7e85400u, 0x0b42549eu, 0x01875d87u, 0xcd2d5d19u, 0x43a25afau, 0x8f085a64u,
  0x562848c8u, 0x9a824856u, 0x140d4fb5u, 0xd8a74f2bu, 0xd2624632u, 0x1ec846acu, 0x9047414fu, 0x5ced41d1u,
  0x299dc2edu, 0xe537c273u, 0x6bb8c590u, 0xa712c50eu, 0xadd7cc17u, 0x617dcc89u, 0xeff2cb6au, 0x2358cbf4u,
  0xfa78d958u, 0x36d2d9c6u, 0xb85dde25u, 0x74f7debbu, 0x7e32d7a2u, 0xb298d73cu, 0x3c17d0dfu, 0xf0bdd041u,
  0x5526f3c6u, 0x998cf358u, 0x1703f4bbu, 0xdba9f425u, 0xd16cfd3cu, 0x1dc6fda2u, 0x9349fa41u, 0x5fe3fadfu,
  0x86c3e873u, 0x4a69e8edu, 0xc4e6ef0eu, 0x084cef90u, 0x0289e689u, 0xce23e617u, 0x40ace1f4u, 0x8c06e16au,
  0xd0eba0bbu, 0x1c41a025u, 0x92cea7c6u, 0x5e64a758u, 0x54a1ae41u, 0x980baedfu, 0x1684a93cu, 0xda2ea9a2u,
  0x030ebb0eu, 0xcfa4bb90u, 0x412bbc73u, 0x8d81bcedu, 0x8744b5f4u, 0x4beeb56au, 0xc561b289u, 0x09cbb217u,
  0xac509190u, 0x60fa910eu, 0xee7596edu, 0x22df9673u, 0x281a9f6au, 0xe4b09ff4u, 0x6a3f9817u, 0xa6959889u,
  0x7fb58a25u, 0xb31f8abbu, 0x3d908d58u, 0xf13a8dc6u, 0xfbff84dfu, 0x37558441u, 0xb9da83a2u, 0x7570833cu,
  0x533b85dau, 0x9f918544u, 0x111e82a7u, 0xddb48239u, 0xd7718b20u, 0x1bdb8bbeu, 0x95548c5du, 0x59fe8cc3u,
  0x80de9e6fu, 0x4c749ef1u, 0xc2fb9912u, 0x0e51998cu, 0x04949095u, 0xc83e900bu, 0x46b197e8u, 0x8a1b9776u,
  0x2f80b4f1u, 0xe32ab46fu, 0x6da5b38cu, 0xa10fb312u, 0xabcaba0bu, 0x6760ba95u, 0xe9efbd76u, 0x2545bde8u,
  0xfc65af44u, 0x30cfafdau, 0xbe40a839u, 0x72eaa8a7u, 0x782fa1beu, 0xb485a120u, 0x3a0aa6c3u, 0xf6a0a65du,
  0xaa4de78cu, 0x66e7e712u, 0xe868e0f1u, 0x24c2e06fu, 0x2e07e976u, 0xe2ade9e8u, 0x6c22ee0bu, 0xa088ee95u,
  0x79a8fc39u, 0xb502fca7u, 0x3b8dfb44u, 0xf727fbdau, 0xfde2f2c3u, 0x3148f25du, 0xbfc7f5beu, 0x736df520u,
  0xd6f6d6a7u, 0x1a5cd639u, 0x94d3d1dau, 0x5879d144u, 0x52bcd85du, 0x9e16d8c3u, 0x1099df20u, 0xdc33dfbeu,
  0x0513cd12u, 0xc9b9cd8cu, 0x4736ca6fu, 0x8b9ccaf1u, 0x8159c3e8u, 0x4df3c376u, 0xc37cc495u, 0x0fd6c40bu,
  0x7aa64737u, 0xb60c47a9u, 0x3883404au, 0xf42940d4u, 0xfeec49cdu, 0x32464953u, 0xbcc94eb0u, 0x70634e2eu,
  0xa9435c82u, 0x65e95c1cu, 0xeb665bffu, 0x27cc5b61u, 0x2d095278u, 0xe1a352e6u, 0x6f2c5505u, 0xa386559bu,
  0x061d761cu, 0xcab77682u, 0x44387161u, 0x889271ffu, 0x825778e6u, 0x4efd7878u, 0xc0727f9bu, 0x0cd87f05u,
  0xd5f86da9u, 0x19526d37u, 0x97dd6ad4u, 0x5b776a4au, 0x51b26353u, 0x9d1863cdu, 0x1397642eu, 0xdf3d64b0u,
  0x83d02561u, 0x4f7a25ffu, 0xc1f5221cu, 0x0d5f2282u, 0x079a2b9bu, 0xcb302b05u, 0x45bf2ce6u, 0x89152c78u,
  0x50353ed4u, 0x9c9f3e4au, 0x121039a9u, 0xdeba3937u, 0xd47f302eu, 0x18d530b0u, 0x965a3753u, 0x5af037cdu,
  0xff6b144au, 0x33c114d4u, 0xbd4e1337u, 0x71e413a9u, 0x7b211ab0u, 0xb78b1a2eu, 0x39041dcdu, 0xf5ae1d53u,
  0x2c8e0fffu, 0xe0240f61u, 0x6eab0882u, 0xa201081cu, 0xa8c40105u, 0x646e019bu, 0xeae10678u, 0x264b06e6u
};

/* Computes the cyclic redundancy check as used by PNG chunks*/
/** Instrumented function lodepng_crc32(unsigned char const*,size_t) */
unsigned lodepng_crc32(const unsigned char* data, size_t length) /* << Aka begin of function unsigned lodepng_crc32(const unsigned char* data, size_t length) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_crc32(unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_crc32.124460.stub"

  /*Using the Slicing by Eight algorithm*/
  AKA_mark("lis===2645###sois===124565###eois===124590###lif===2###soif===114###eoif===139###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_crc32(unsigned char const*,size_t)");unsigned r = 0xffffffffu;
  int AKA_BLOCK_LOOP_124594 = 0;
    while(AKA_mark("lis===2646###sois===124600###eois===124611###lif===3###soif===149###eoif===160###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_crc32(unsigned char const*,size_t)") && (AKA_mark("lis===2646###sois===124600###eois===124611###lif===3###soif===149###eoif===160###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_crc32(unsigned char const*,size_t)") && (length >= 8))) {
        AKA_BLOCK_LOOP_124594++;
        if (AKA_BLOCK_LOOP_124594 > 1000) {
            //break;
        }
    AKA_mark("lis===2647###sois===124620###eois===125028###lif===4###soif===169###eoif===577###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_crc32(unsigned char const*,size_t)");r = lodepng_crc32_table7[(data[0] ^ (r & 0xffu))] ^
        lodepng_crc32_table6[(data[1] ^ ((r >> 8) & 0xffu))] ^
        lodepng_crc32_table5[(data[2] ^ ((r >> 16) & 0xffu))] ^
        lodepng_crc32_table4[(data[3] ^ ((r >> 24) & 0xffu))] ^
        lodepng_crc32_table3[data[4]] ^
        lodepng_crc32_table2[data[5]] ^
        lodepng_crc32_table1[data[6]] ^
        lodepng_crc32_table0[data[7]];
    AKA_mark("lis===2655###sois===125034###eois===125044###lif===12###soif===583###eoif===593###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_crc32(unsigned char const*,size_t)");data += 8;
    AKA_mark("lis===2656###sois===125050###eois===125062###lif===13###soif===599###eoif===611###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_crc32(unsigned char const*,size_t)");length -= 8;
  }
  int AKA_BLOCK_LOOP_125071 = 0;
    while(AKA_mark("lis===2658###sois===125077###eois===125085###lif===15###soif===626###eoif===634###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_crc32(unsigned char const*,size_t)") && (AKA_mark("lis===2658###sois===125077###eois===125085###lif===15###soif===626###eoif===634###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_crc32(unsigned char const*,size_t)") && (length--))) {
        AKA_BLOCK_LOOP_125071++;
        if (AKA_BLOCK_LOOP_125071 > 1000) {
            //break;
        }
    AKA_mark("lis===2659###sois===125094###eois===125153###lif===16###soif===643###eoif===702###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_crc32(unsigned char const*,size_t)");r = lodepng_crc32_table0[(r ^ *data++) & 0xffu] ^ (r >> 8);
  }
  AKA_mark("lis===2661###sois===125162###eois===125185###lif===18###soif===711###eoif===734###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_crc32(unsigned char const*,size_t)");return r ^ 0xffffffffu;
}
#else /* LODEPNG_COMPILE_CRC */
/*in this case, the function is only declared here, and must be defined externally
so that it will be linked in.

Example implementation that uses a much smaller lookup table for memory constrained cases:

unsigned lodepng_crc32(const unsigned char* data, size_t length) {
  unsigned r = 0xffffffffu;
  static const unsigned table[16] = {
    0x00000000, 0x1db71064, 0x3b6e20c8, 0x26d930ac, 0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
    0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c, 0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c
  };
  while(length--) {
    r = table[(r ^ *data) & 0xf] ^ (r >> 4);
    r = table[(r ^ (*data >> 4)) & 0xf] ^ (r >> 4);
    data++;
  }
  return r ^ 0xffffffffu;
}
*/
unsigned lodepng_crc32(const unsigned char* data, size_t length);
#endif /* LODEPNG_COMPILE_CRC */

/* ////////////////////////////////////////////////////////////////////////// */
/* / Reading and writing PNG color channel bits                             / */
/* ////////////////////////////////////////////////////////////////////////// */

/* The color channel bits of less-than-8-bit pixels are read with the MSB of bytes first,
so LodePNGBitWriter and LodePNGBitReader can't be used for those. */

/** Instrumented function readBitFromReversedStream(size_t*,unsigned char const*) */
static unsigned char readBitFromReversedStream(size_t* bitpointer, const unsigned char* bitstream) /* << Aka begin of function unsigned char readBitFromReversedStream(size_t* bitpointer, const unsigned char* bitstream) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\readBitFromReversedStream(size_t*,unsigned char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.readBitFromReversedStream.126484.stub"

  AKA_mark("lis===2694###sois===126567###eois===126674###lif===1###soif===104###eoif===211###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readBitFromReversedStream(size_t*,unsigned char const*)");unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);
  AKA_mark("lis===2695###sois===126678###eois===126694###lif===2###soif===215###eoif===231###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readBitFromReversedStream(size_t*,unsigned char const*)");++(*bitpointer);
  AKA_mark("lis===2696###sois===126698###eois===126712###lif===3###soif===235###eoif===249###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readBitFromReversedStream(size_t*,unsigned char const*)");return result;
}

/* TODO: make this faster */
/** Instrumented function readBitsFromReversedStream(size_t*,unsigned char const*,size_t) */
static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits) /* << Aka begin of function unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\readBitsFromReversedStream(size_t*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.readBitsFromReversedStream.126765.stub"

  AKA_mark("lis===2701###sois===126863###eois===126883###lif===1###soif===114###eoif===134###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readBitsFromReversedStream(size_t*,unsigned char const*,size_t)");unsigned result = 0;
  AKA_mark("lis===2702###sois===126887###eois===126896###lif===2###soif===138###eoif===147###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readBitsFromReversedStream(size_t*,unsigned char const*,size_t)");size_t i;
  int AKA_BLOCK_LOOP_126900 = 0;
    AKA_mark("lis===2703###sois===126904###eois===126911###lif===3###soif===155###eoif===162###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readBitsFromReversedStream(size_t*,unsigned char const*,size_t)");
for(i = 0 ; AKA_mark("lis===2703###sois===126912###eois===126921###lif===3###soif===163###eoif===172###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readBitsFromReversedStream(size_t*,unsigned char const*,size_t)") && (AKA_mark("lis===2703###sois===126912###eois===126921###lif===3###soif===163###eoif===172###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readBitsFromReversedStream(size_t*,unsigned char const*,size_t)") && (i < nbits)); ({AKA_mark("lis===2703###sois===126923###eois===126926###lif===3###soif===174###eoif===177###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readBitsFromReversedStream(size_t*,unsigned char const*,size_t)");++i;})) {
        AKA_BLOCK_LOOP_126900++;
        if (AKA_BLOCK_LOOP_126900 > 1000) {
            //break;
        }
    AKA_mark("lis===2704###sois===126935###eois===126949###lif===4###soif===186###eoif===200###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readBitsFromReversedStream(size_t*,unsigned char const*,size_t)");result <<= 1u;
    AKA_mark("lis===2705###sois===126955###eois===127024###lif===5###soif===206###eoif===275###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readBitsFromReversedStream(size_t*,unsigned char const*,size_t)");result |= (unsigned)readBitFromReversedStream(bitpointer, bitstream);
  }
  AKA_mark("lis===2707###sois===127033###eois===127047###lif===7###soif===284###eoif===298###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readBitsFromReversedStream(size_t*,unsigned char const*,size_t)");return result;
}

/** Instrumented function setBitOfReversedStream(size_t*,unsigned char*,unsigned char) */
static void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit) /* << Aka begin of function void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\setBitOfReversedStream(size_t*,unsigned char*,unsigned char)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.setBitOfReversedStream.127066.stub"

  /*the current bit in bitstream may be 0 or 1 for this to work*/
  if(AKA_mark("lis===2712###sois===127229###eois===127237###lif===2###soif===175###eoif===183###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\setBitOfReversedStream(size_t*,unsigned char*,unsigned char)") && (AKA_mark("lis===2712###sois===127229###eois===127237###lif===2###soif===175###eoif===183###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\setBitOfReversedStream(size_t*,unsigned char*,unsigned char)") && (bit == 0))) {
AKA_mark("lis===2712###sois===127239###eois===127328###lif===2###soif===185###eoif===274###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\setBitOfReversedStream(size_t*,unsigned char*,unsigned char)");bitstream[(*bitpointer) >> 3u] &=  (unsigned char)(~(1u << (7u - ((*bitpointer) & 7u))));
}

  else         {
AKA_mark("lis===2713###sois===127345###eois===127416###lif===3###soif===291###eoif===362###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\setBitOfReversedStream(size_t*,unsigned char*,unsigned char)");bitstream[(*bitpointer) >> 3u] |=  (1u << (7u - ((*bitpointer) & 7u)));
}

  AKA_mark("lis===2714###sois===127420###eois===127436###lif===4###soif===366###eoif===382###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\setBitOfReversedStream(size_t*,unsigned char*,unsigned char)");++(*bitpointer);
}

/* ////////////////////////////////////////////////////////////////////////// */
/* / PNG chunks                                                             / */
/* ////////////////////////////////////////////////////////////////////////// */

/** Instrumented function lodepng_chunk_length(unsigned char const*) */
unsigned lodepng_chunk_length(const unsigned char* chunk) /* << Aka begin of function unsigned lodepng_chunk_length(const unsigned char* chunk) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_length(unsigned char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_chunk_length.127700.stub"

  AKA_mark("lis===2722###sois===127754###eois===127789###lif===1###soif===63###eoif===98###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_length(unsigned char const*)");return lodepng_read32bitInt(chunk);
}

/** Instrumented function lodepng_chunk_type(char[5],unsigned char const*) */
void lodepng_chunk_type(char type[5], const unsigned char* chunk) /* << Aka begin of function void lodepng_chunk_type(char type[5], const unsigned char* chunk) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type(char[5],unsigned char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_chunk_type.127801.stub"

  AKA_mark("lis===2726###sois===127867###eois===127878###lif===1###soif===71###eoif===82###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type(char[5],unsigned char const*)");unsigned i;
  int AKA_BLOCK_LOOP_127882 = 0;
    AKA_mark("lis===2727###sois===127886###eois===127892###lif===2###soif===90###eoif===96###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type(char[5],unsigned char const*)");
for(i = 0; AKA_mark("lis===2727###sois===127893###eois===127899###lif===2###soif===97###eoif===103###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type(char[5],unsigned char const*)") && (AKA_mark("lis===2727###sois===127893###eois===127899###lif===2###soif===97###eoif===103###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type(char[5],unsigned char const*)") && (i != 4)); ({AKA_mark("lis===2727###sois===127901###eois===127904###lif===2###soif===105###eoif===108###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type(char[5],unsigned char const*)");++i;})) {
AKA_mark("lis===2727###sois===127906###eois===127935###lif===2###soif===110###eoif===139###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type(char[5],unsigned char const*)");type[i] = (char)chunk[4 + i];
}

  AKA_mark("lis===2728###sois===127939###eois===127951###lif===3###soif===143###eoif===155###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type(char[5],unsigned char const*)");type[4] = 0; /*null termination char*/
}

/** Instrumented function lodepng_chunk_type_equals(unsigned char const*,char const*) */
unsigned char lodepng_chunk_type_equals(const unsigned char* chunk, const char* type) /* << Aka begin of function unsigned char lodepng_chunk_type_equals(const unsigned char* chunk, const char* type) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type_equals(unsigned char const*,char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_chunk_type_equals.127998.stub"

  if(AKA_mark("lis===2732###sois===128078###eois===128103###lif===1###soif===94###eoif===119###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type_equals(unsigned char const*,char const*)") && (AKA_mark("lis===2732###sois===128078###eois===128103###lif===1###soif===94###eoif===119###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type_equals(unsigned char const*,char const*)") && (lodepng_strlen(type) != 4))) {
AKA_mark("lis===2732###sois===128105###eois===128114###lif===1###soif===121###eoif===130###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type_equals(unsigned char const*,char const*)");return 0;
}

else {
AKA_mark("lis===-2732-###sois===-128078-###eois===-12807825-###lif===-1-###soif===-###eoif===-119-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type_equals(unsigned char const*,char const*)");
}
  AKA_mark("lis===2733###sois===128118###eois===128216###lif===2###soif===134###eoif===232###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type_equals(unsigned char const*,char const*)");return (chunk[4] == type[0] && chunk[5] == type[1] && chunk[6] == type[2] && chunk[7] == type[3]);
}

/* chunk type name must exist only out of alphabetic characters a-z or A-Z */
/** Instrumented function lodepng_chunk_type_name_valid(unsigned char const*) */
static unsigned char lodepng_chunk_type_name_valid(const unsigned char* chunk) /* << Aka begin of function unsigned char lodepng_chunk_type_name_valid(const unsigned char* chunk) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type_name_valid(unsigned char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_chunk_type_name_valid.128323.stub"

  AKA_mark("lis===2738###sois===128386###eois===128397###lif===1###soif===84###eoif===95###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type_name_valid(unsigned char const*)");unsigned i;
  int AKA_BLOCK_LOOP_128401 = 0;
    AKA_mark("lis===2739###sois===128405###eois===128411###lif===2###soif===103###eoif===109###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type_name_valid(unsigned char const*)");
for(i = 0; AKA_mark("lis===2739###sois===128412###eois===128418###lif===2###soif===110###eoif===116###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type_name_valid(unsigned char const*)") && (AKA_mark("lis===2739###sois===128412###eois===128418###lif===2###soif===110###eoif===116###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type_name_valid(unsigned char const*)") && (i != 4)); ({AKA_mark("lis===2739###sois===128420###eois===128423###lif===2###soif===118###eoif===121###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type_name_valid(unsigned char const*)");++i;})) {
        AKA_BLOCK_LOOP_128401++;
        if (AKA_BLOCK_LOOP_128401 > 1000) {
            //break;
        }
    AKA_mark("lis===2740###sois===128432###eois===128460###lif===3###soif===130###eoif===158###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type_name_valid(unsigned char const*)");char c = (char)chunk[4 + i];
    if(AKA_mark("lis===2741###sois===128469###eois===128520###lif===4###soif===167###eoif===218###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type_name_valid(unsigned char const*)") && (AKA_mark("lis===2741###sois===128469###eois===128520###lif===4###soif===167###eoif===218###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type_name_valid(unsigned char const*)") && (!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))))) {
      AKA_mark("lis===2742###sois===128531###eois===128540###lif===5###soif===229###eoif===238###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type_name_valid(unsigned char const*)");return 0; /* not valid */
    }
else {
AKA_mark("lis===-2741-###sois===-128469-###eois===-12846951-###lif===-4-###soif===-###eoif===-218-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type_name_valid(unsigned char const*)");
}
  }
  AKA_mark("lis===2745###sois===128572###eois===128581###lif===8###soif===270###eoif===279###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_type_name_valid(unsigned char const*)");return 1; /* valid */
}

/** Instrumented function lodepng_chunk_ancillary(unsigned char const*) */
unsigned char lodepng_chunk_ancillary(const unsigned char* chunk) /* << Aka begin of function unsigned char lodepng_chunk_ancillary(const unsigned char* chunk) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_ancillary(unsigned char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_chunk_ancillary.128614.stub"

  AKA_mark("lis===2749###sois===128671###eois===128700###lif===1###soif===71###eoif===100###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_ancillary(unsigned char const*)");return((chunk[4] & 32) != 0);
}

/** Instrumented function lodepng_chunk_private(unsigned char const*) */
unsigned char lodepng_chunk_private(const unsigned char* chunk) /* << Aka begin of function unsigned char lodepng_chunk_private(const unsigned char* chunk) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_private(unsigned char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_chunk_private.128721.stub"

  AKA_mark("lis===2753###sois===128776###eois===128805###lif===1###soif===69###eoif===98###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_private(unsigned char const*)");return((chunk[5] & 32) != 0);
}

/* this is an error if it is reserved: the third character must be uppercase in the PNG standard,
lowercasing this character is reserved for possible future extension by the spec*/
/** Instrumented function lodepng_chunk_reserved(unsigned char const*) */
static unsigned char lodepng_chunk_reserved(const unsigned char* chunk) /* << Aka begin of function unsigned char lodepng_chunk_reserved(const unsigned char* chunk) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_reserved(unsigned char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_chunk_reserved.129016.stub"

  AKA_mark("lis===2759###sois===129072###eois===129101###lif===1###soif===77###eoif===106###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_reserved(unsigned char const*)");return((chunk[6] & 32) != 0);
}

/** Instrumented function lodepng_chunk_safetocopy(unsigned char const*) */
unsigned char lodepng_chunk_safetocopy(const unsigned char* chunk) /* << Aka begin of function unsigned char lodepng_chunk_safetocopy(const unsigned char* chunk) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_safetocopy(unsigned char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_chunk_safetocopy.129122.stub"

  AKA_mark("lis===2763###sois===129180###eois===129209###lif===1###soif===72###eoif===101###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_safetocopy(unsigned char const*)");return((chunk[7] & 32) != 0);
}

/** Instrumented function lodepng_chunk_data(unsigned char*) */
unsigned char* lodepng_chunk_data(unsigned char* chunk) /* << Aka begin of function unsigned char * lodepng_chunk_data(unsigned char* chunk) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_data(unsigned char*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_chunk_data.129229.stub"

  AKA_mark("lis===2767###sois===129277###eois===129294###lif===1###soif===61###eoif===78###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_data(unsigned char*)");return &chunk[8];
}

/** Instrumented function lodepng_chunk_data_const(unsigned char const*) */
const unsigned char* lodepng_chunk_data_const(const unsigned char* chunk) /* << Aka begin of function const unsigned char * lodepng_chunk_data_const(const unsigned char* chunk) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_data_const(unsigned char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_chunk_data_const.129320.stub"

  AKA_mark("lis===2771###sois===129380###eois===129397###lif===1###soif===79###eoif===96###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_data_const(unsigned char const*)");return &chunk[8];
}

/** Instrumented function lodepng_chunk_check_crc(unsigned char const*) */
unsigned lodepng_chunk_check_crc(const unsigned char* chunk) /* << Aka begin of function unsigned lodepng_chunk_check_crc(const unsigned char* chunk) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_check_crc(unsigned char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_chunk_check_crc.129413.stub"

  AKA_mark("lis===2775###sois===129470###eois===129516###lif===1###soif===66###eoif===112###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_check_crc(unsigned char const*)");unsigned length = lodepng_chunk_length(chunk);
  AKA_mark("lis===2776###sois===129520###eois===129576###lif===2###soif===116###eoif===172###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_check_crc(unsigned char const*)");unsigned CRC = lodepng_read32bitInt(&chunk[length + 8]);
  /*the CRC is taken of the data and the 4 chunk type letters, not the length*/
  AKA_mark("lis===2778###sois===129661###eois===129718###lif===4###soif===257###eoif===314###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_check_crc(unsigned char const*)");unsigned checksum = lodepng_crc32(&chunk[4], length + 4);
  if(AKA_mark("lis===2779###sois===129725###eois===129740###lif===5###soif===321###eoif===336###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_check_crc(unsigned char const*)") && (AKA_mark("lis===2779###sois===129725###eois===129740###lif===5###soif===321###eoif===336###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_check_crc(unsigned char const*)") && (CRC != checksum))) {
AKA_mark("lis===2779###sois===129742###eois===129751###lif===5###soif===338###eoif===347###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_check_crc(unsigned char const*)");return 1;
}

  else {
AKA_mark("lis===2780###sois===129760###eois===129769###lif===6###soif===356###eoif===365###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_check_crc(unsigned char const*)");return 0;
}

}

/** Instrumented function lodepng_chunk_generate_crc(unsigned char*) */
void lodepng_chunk_generate_crc(unsigned char* chunk) /* << Aka begin of function void lodepng_chunk_generate_crc(unsigned char* chunk) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_generate_crc(unsigned char*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_chunk_generate_crc.129781.stub"

  AKA_mark("lis===2784###sois===129835###eois===129881###lif===1###soif===59###eoif===105###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_generate_crc(unsigned char*)");unsigned length = lodepng_chunk_length(chunk);
  AKA_mark("lis===2785###sois===129885###eois===129937###lif===2###soif===109###eoif===161###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_generate_crc(unsigned char*)");unsigned CRC = lodepng_crc32(&chunk[4], length + 4);
  AKA_mark("lis===2786###sois===129941###eois===129986###lif===3###soif===165###eoif===210###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_generate_crc(unsigned char*)");lodepng_set32bitInt(chunk + 8 + length, CRC);
}

/** Instrumented function lodepng_chunk_next(unsigned char*,unsigned char*) */
unsigned char* lodepng_chunk_next(unsigned char* chunk, unsigned char* end) /* << Aka begin of function unsigned char * lodepng_chunk_next(unsigned char* chunk, unsigned char* end) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_chunk_next.130006.stub"

  AKA_mark("lis===2790###sois===130074###eois===130120###lif===1###soif===81###eoif===127###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)");size_t available_size = (size_t)(end - chunk);
  if(AKA_mark("lis===2791###sois===130127###eois===130162###lif===2###soif===134###eoif===169###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)") && ((AKA_mark("lis===2791###sois===130127###eois===130139###lif===2###soif===134###eoif===146###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)") && (chunk >= end)) || (AKA_mark("lis===2791###sois===130143###eois===130162###lif===2###soif===150###eoif===169###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)") && (available_size < 12)))) {
AKA_mark("lis===2791###sois===130164###eois===130175###lif===2###soif===171###eoif===182###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)");return end;
}

else {
AKA_mark("lis===-2791-###sois===-130127-###eois===-13012735-###lif===-2-###soif===-###eoif===-169-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)");
} /*too small to contain a chunk*/
  if(AKA_mark("lis===2792###sois===130215###eois===130376###lif===3###soif===222###eoif===383###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)") && ((((((((AKA_mark("lis===2792###sois===130215###eois===130231###lif===3###soif===222###eoif===238###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)") && (chunk[0] == 0x89)) && (AKA_mark("lis===2792###sois===130235###eois===130251###lif===3###soif===242###eoif===258###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)") && (chunk[1] == 0x50))) && (AKA_mark("lis===2792###sois===130255###eois===130271###lif===3###soif===262###eoif===278###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)") && (chunk[2] == 0x4e))) && (AKA_mark("lis===2792###sois===130275###eois===130291###lif===3###soif===282###eoif===298###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)") && (chunk[3] == 0x47)))
    && (AKA_mark("lis===2793###sois===130300###eois===130316###lif===4###soif===307###eoif===323###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)") && (chunk[4] == 0x0d))) && (AKA_mark("lis===2793###sois===130320###eois===130336###lif===4###soif===327###eoif===343###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)") && (chunk[5] == 0x0a))) && (AKA_mark("lis===2793###sois===130340###eois===130356###lif===4###soif===347###eoif===363###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)") && (chunk[6] == 0x1a))) && (AKA_mark("lis===2793###sois===130360###eois===130376###lif===4###soif===367###eoif===383###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)") && (chunk[7] == 0x0a)))) {
    /* Is PNG magic header at start of PNG file. Jump to first actual chunk. */
    AKA_mark("lis===2795###sois===130466###eois===130483###lif===6###soif===473###eoif===490###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)");return chunk + 8;
  } else {
    AKA_mark("lis===2797###sois===130501###eois===130527###lif===8###soif===508###eoif===534###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)");size_t total_chunk_length;
    if(AKA_mark("lis===2798###sois===130536###eois===130604###lif===9###soif===543###eoif===611###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)") && (AKA_mark("lis===2798###sois===130536###eois===130604###lif===9###soif===543###eoif===611###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)") && (lodepng_addofl(lodepng_chunk_length(chunk), 12, &total_chunk_length)))) {
AKA_mark("lis===2798###sois===130606###eois===130617###lif===9###soif===613###eoif===624###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)");return end;
}

else {
AKA_mark("lis===-2798-###sois===-130536-###eois===-13053668-###lif===-9-###soif===-###eoif===-611-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)");
}
    if(AKA_mark("lis===2799###sois===130626###eois===130661###lif===10###soif===633###eoif===668###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)") && (AKA_mark("lis===2799###sois===130626###eois===130661###lif===10###soif===633###eoif===668###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)") && (total_chunk_length > available_size))) {
AKA_mark("lis===2799###sois===130663###eois===130674###lif===10###soif===670###eoif===681###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)");return end;
}

else {
AKA_mark("lis===-2799-###sois===-130626-###eois===-13062635-###lif===-10-###soif===-###eoif===-668-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)");
} /*outside of range*/
    AKA_mark("lis===2800###sois===130701###eois===130735###lif===11###soif===708###eoif===742###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next(unsigned char*,unsigned char*)");return chunk + total_chunk_length;
  }
}

/** Instrumented function lodepng_chunk_next_const(unsigned char const*,unsigned char const*) */
const unsigned char* lodepng_chunk_next_const(const unsigned char* chunk, const unsigned char* end) /* << Aka begin of function const unsigned char * lodepng_chunk_next_const(const unsigned char* chunk, const unsigned char* end) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_chunk_next_const.130766.stub"

  AKA_mark("lis===2805###sois===130852###eois===130898###lif===1###soif===105###eoif===151###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)");size_t available_size = (size_t)(end - chunk);
  if(AKA_mark("lis===2806###sois===130905###eois===130940###lif===2###soif===158###eoif===193###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)") && ((AKA_mark("lis===2806###sois===130905###eois===130917###lif===2###soif===158###eoif===170###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)") && (chunk >= end)) || (AKA_mark("lis===2806###sois===130921###eois===130940###lif===2###soif===174###eoif===193###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)") && (available_size < 12)))) {
AKA_mark("lis===2806###sois===130942###eois===130953###lif===2###soif===195###eoif===206###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)");return end;
}

else {
AKA_mark("lis===-2806-###sois===-130905-###eois===-13090535-###lif===-2-###soif===-###eoif===-193-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)");
} /*too small to contain a chunk*/
  if(AKA_mark("lis===2807###sois===130993###eois===131154###lif===3###soif===246###eoif===407###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)") && ((((((((AKA_mark("lis===2807###sois===130993###eois===131009###lif===3###soif===246###eoif===262###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)") && (chunk[0] == 0x89)) && (AKA_mark("lis===2807###sois===131013###eois===131029###lif===3###soif===266###eoif===282###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)") && (chunk[1] == 0x50))) && (AKA_mark("lis===2807###sois===131033###eois===131049###lif===3###soif===286###eoif===302###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)") && (chunk[2] == 0x4e))) && (AKA_mark("lis===2807###sois===131053###eois===131069###lif===3###soif===306###eoif===322###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)") && (chunk[3] == 0x47)))
    && (AKA_mark("lis===2808###sois===131078###eois===131094###lif===4###soif===331###eoif===347###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)") && (chunk[4] == 0x0d))) && (AKA_mark("lis===2808###sois===131098###eois===131114###lif===4###soif===351###eoif===367###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)") && (chunk[5] == 0x0a))) && (AKA_mark("lis===2808###sois===131118###eois===131134###lif===4###soif===371###eoif===387###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)") && (chunk[6] == 0x1a))) && (AKA_mark("lis===2808###sois===131138###eois===131154###lif===4###soif===391###eoif===407###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)") && (chunk[7] == 0x0a)))) {
    /* Is PNG magic header at start of PNG file. Jump to first actual chunk. */
    AKA_mark("lis===2810###sois===131244###eois===131261###lif===6###soif===497###eoif===514###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)");return chunk + 8;
  } else {
    AKA_mark("lis===2812###sois===131279###eois===131305###lif===8###soif===532###eoif===558###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)");size_t total_chunk_length;
    if(AKA_mark("lis===2813###sois===131314###eois===131382###lif===9###soif===567###eoif===635###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)") && (AKA_mark("lis===2813###sois===131314###eois===131382###lif===9###soif===567###eoif===635###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)") && (lodepng_addofl(lodepng_chunk_length(chunk), 12, &total_chunk_length)))) {
AKA_mark("lis===2813###sois===131384###eois===131395###lif===9###soif===637###eoif===648###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)");return end;
}

else {
AKA_mark("lis===-2813-###sois===-131314-###eois===-13131468-###lif===-9-###soif===-###eoif===-635-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)");
}
    if(AKA_mark("lis===2814###sois===131404###eois===131439###lif===10###soif===657###eoif===692###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)") && (AKA_mark("lis===2814###sois===131404###eois===131439###lif===10###soif===657###eoif===692###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)") && (total_chunk_length > available_size))) {
AKA_mark("lis===2814###sois===131441###eois===131452###lif===10###soif===694###eoif===705###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)");return end;
}

else {
AKA_mark("lis===-2814-###sois===-131404-###eois===-13140435-###lif===-10-###soif===-###eoif===-692-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)");
} /*outside of range*/
    AKA_mark("lis===2815###sois===131479###eois===131513###lif===11###soif===732###eoif===766###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_next_const(unsigned char const*,unsigned char const*)");return chunk + total_chunk_length;
  }
}

/** Instrumented function lodepng_chunk_find(unsigned char*,unsigned char*,char const[5]) */
unsigned char* lodepng_chunk_find(unsigned char* chunk, unsigned char* end, const char type[5]) /* << Aka begin of function unsigned char * lodepng_chunk_find(unsigned char* chunk, unsigned char* end, const char type[5]) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find(unsigned char*,unsigned char*,char const[5])");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_chunk_find.131538.stub"

  int AKA_BLOCK_LOOP_131626 = 0;
    for(;;) {
        AKA_BLOCK_LOOP_131626++;
        if (AKA_BLOCK_LOOP_131626 > 1000) {
            //break;
        }
    if(AKA_mark("lis===2821###sois===131644###eois===131676###lif===2###soif===119###eoif===151###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find(unsigned char*,unsigned char*,char const[5])") && ((AKA_mark("lis===2821###sois===131644###eois===131656###lif===2###soif===119###eoif===131###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find(unsigned char*,unsigned char*,char const[5])") && (chunk >= end)) || (AKA_mark("lis===2821###sois===131660###eois===131676###lif===2###soif===135###eoif===151###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find(unsigned char*,unsigned char*,char const[5])") && (end - chunk < 12)))) {
AKA_mark("lis===2821###sois===131678###eois===131687###lif===2###soif===153###eoif===162###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find(unsigned char*,unsigned char*,char const[5])");return 0;
}

else {
AKA_mark("lis===-2821-###sois===-131644-###eois===-13164432-###lif===-2-###soif===-###eoif===-151-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find(unsigned char*,unsigned char*,char const[5])");
} /* past file end: chunk + 12 > end */
    if(AKA_mark("lis===2822###sois===131734###eois===131772###lif===3###soif===209###eoif===247###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find(unsigned char*,unsigned char*,char const[5])") && (AKA_mark("lis===2822###sois===131734###eois===131772###lif===3###soif===209###eoif===247###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find(unsigned char*,unsigned char*,char const[5])") && (lodepng_chunk_type_equals(chunk, type)))) {
AKA_mark("lis===2822###sois===131774###eois===131787###lif===3###soif===249###eoif===262###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find(unsigned char*,unsigned char*,char const[5])");return chunk;
}

else {
AKA_mark("lis===-2822-###sois===-131734-###eois===-13173438-###lif===-3-###soif===-###eoif===-247-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find(unsigned char*,unsigned char*,char const[5])");
}
    AKA_mark("lis===2823###sois===131793###eois===131832###lif===4###soif===268###eoif===307###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find(unsigned char*,unsigned char*,char const[5])");chunk = lodepng_chunk_next(chunk, end);
  }
}

/** Instrumented function lodepng_chunk_find_const(unsigned char const*,unsigned char const*,char const[5]) */
const unsigned char* lodepng_chunk_find_const(const unsigned char* chunk, const unsigned char* end, const char type[5]) /* << Aka begin of function const unsigned char * lodepng_chunk_find_const(const unsigned char* chunk, const unsigned char* end, const char type[5]) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find_const(unsigned char const*,unsigned char const*,char const[5])");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_chunk_find_const.131863.stub"

  int AKA_BLOCK_LOOP_131969 = 0;
    for(;;) {
        AKA_BLOCK_LOOP_131969++;
        if (AKA_BLOCK_LOOP_131969 > 1000) {
            //break;
        }
    if(AKA_mark("lis===2829###sois===131987###eois===132019###lif===2###soif===143###eoif===175###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find_const(unsigned char const*,unsigned char const*,char const[5])") && ((AKA_mark("lis===2829###sois===131987###eois===131999###lif===2###soif===143###eoif===155###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find_const(unsigned char const*,unsigned char const*,char const[5])") && (chunk >= end)) || (AKA_mark("lis===2829###sois===132003###eois===132019###lif===2###soif===159###eoif===175###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find_const(unsigned char const*,unsigned char const*,char const[5])") && (end - chunk < 12)))) {
AKA_mark("lis===2829###sois===132021###eois===132030###lif===2###soif===177###eoif===186###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find_const(unsigned char const*,unsigned char const*,char const[5])");return 0;
}

else {
AKA_mark("lis===-2829-###sois===-131987-###eois===-13198732-###lif===-2-###soif===-###eoif===-175-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find_const(unsigned char const*,unsigned char const*,char const[5])");
} /* past file end: chunk + 12 > end */
    if(AKA_mark("lis===2830###sois===132077###eois===132115###lif===3###soif===233###eoif===271###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find_const(unsigned char const*,unsigned char const*,char const[5])") && (AKA_mark("lis===2830###sois===132077###eois===132115###lif===3###soif===233###eoif===271###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find_const(unsigned char const*,unsigned char const*,char const[5])") && (lodepng_chunk_type_equals(chunk, type)))) {
AKA_mark("lis===2830###sois===132117###eois===132130###lif===3###soif===273###eoif===286###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find_const(unsigned char const*,unsigned char const*,char const[5])");return chunk;
}

else {
AKA_mark("lis===-2830-###sois===-132077-###eois===-13207738-###lif===-3-###soif===-###eoif===-271-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find_const(unsigned char const*,unsigned char const*,char const[5])");
}
    AKA_mark("lis===2831###sois===132136###eois===132181###lif===4###soif===292###eoif===337###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_find_const(unsigned char const*,unsigned char const*,char const[5])");chunk = lodepng_chunk_next_const(chunk, end);
  }
}

/** Instrumented function lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*) */
unsigned lodepng_chunk_append(unsigned char** out, size_t* outsize, const unsigned char* chunk) /* << Aka begin of function unsigned lodepng_chunk_append(unsigned char** out, size_t* outsize, const unsigned char* chunk) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_chunk_append.132202.stub"

  AKA_mark("lis===2836###sois===132294###eois===132305###lif===1###soif===101###eoif===112###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");unsigned i;
  AKA_mark("lis===2837###sois===132309###eois===132347###lif===2###soif===116###eoif===154###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");size_t total_chunk_length, new_length;
  AKA_mark("lis===2838###sois===132351###eois===132391###lif===3###soif===158###eoif===198###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");unsigned char *chunk_start, *new_buffer;

  if(AKA_mark("lis===2840###sois===132400###eois===132437###lif===5###soif===207###eoif===244###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)") && (AKA_mark("lis===2840###sois===132400###eois===132437###lif===5###soif===207###eoif===244###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)") && (!lodepng_chunk_type_name_valid(chunk)))) {
    AKA_mark("lis===2841###sois===132446###eois===132457###lif===6###soif===253###eoif===264###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");return 121; /* invalid chunk type name */
  }
else {
AKA_mark("lis===-2840-###sois===-132400-###eois===-13240037-###lif===-5-###soif===-###eoif===-244-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");
}
  if(AKA_mark("lis===2843###sois===132499###eois===132528###lif===8###soif===306###eoif===335###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)") && (AKA_mark("lis===2843###sois===132499###eois===132528###lif===8###soif===306###eoif===335###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)") && (lodepng_chunk_reserved(chunk)))) {
    AKA_mark("lis===2844###sois===132537###eois===132548###lif===9###soif===344###eoif===355###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");return 122; /* invalid third lowercase character */
  }
else {
AKA_mark("lis===-2843-###sois===-132499-###eois===-13249929-###lif===-8-###soif===-###eoif===-335-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");
}

  if(AKA_mark("lis===2847###sois===132602###eois===132670###lif===12###soif===409###eoif===477###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)") && (AKA_mark("lis===2847###sois===132602###eois===132670###lif===12###soif===409###eoif===477###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)") && (lodepng_addofl(lodepng_chunk_length(chunk), 12, &total_chunk_length)))) {
AKA_mark("lis===2847###sois===132672###eois===132682###lif===12###soif===479###eoif===489###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");return 77;
}

else {
AKA_mark("lis===-2847-###sois===-132602-###eois===-13260268-###lif===-12-###soif===-###eoif===-477-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");
}
  if(AKA_mark("lis===2848###sois===132689###eois===132746###lif===13###soif===496###eoif===553###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)") && (AKA_mark("lis===2848###sois===132689###eois===132746###lif===13###soif===496###eoif===553###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)") && (lodepng_addofl(*outsize, total_chunk_length, &new_length)))) {
AKA_mark("lis===2848###sois===132748###eois===132758###lif===13###soif===555###eoif===565###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");return 77;
}

else {
AKA_mark("lis===-2848-###sois===-132689-###eois===-13268957-###lif===-13-###soif===-###eoif===-553-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");
}

  AKA_mark("lis===2850###sois===132764###eois===132827###lif===15###soif===571###eoif===634###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
  if(AKA_mark("lis===2851###sois===132834###eois===132845###lif===16###soif===641###eoif===652###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)") && (AKA_mark("lis===2851###sois===132834###eois===132845###lif===16###soif===641###eoif===652###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)") && (!new_buffer))) {
AKA_mark("lis===2851###sois===132847###eois===132857###lif===16###soif===654###eoif===664###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");return 83;
}

else {
AKA_mark("lis===-2851-###sois===-132834-###eois===-13283411-###lif===-16-###soif===-###eoif===-652-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");
} /*alloc fail*/
  AKA_mark("lis===2852###sois===132876###eois===132896###lif===17###soif===683###eoif===703###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");(*out) = new_buffer;
  AKA_mark("lis===2853###sois===132900###eois===132924###lif===18###soif===707###eoif===731###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");(*outsize) = new_length;
  AKA_mark("lis===2854###sois===132928###eois===132983###lif===19###soif===735###eoif===790###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");chunk_start = &(*out)[new_length - total_chunk_length];

  int AKA_BLOCK_LOOP_132989 = 0;
    AKA_mark("lis===2856###sois===132993###eois===132999###lif===21###soif===800###eoif===806###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");
for(i = 0; AKA_mark("lis===2856###sois===133000###eois===133023###lif===21###soif===807###eoif===830###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)") && (AKA_mark("lis===2856###sois===133000###eois===133023###lif===21###soif===807###eoif===830###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)") && (i != total_chunk_length)); ({AKA_mark("lis===2856###sois===133025###eois===133028###lif===21###soif===832###eoif===835###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");++i;})) {
AKA_mark("lis===2856###sois===133030###eois===133056###lif===21###soif===837###eoif===863###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");chunk_start[i] = chunk[i];
}


  AKA_mark("lis===2858###sois===133062###eois===133071###lif===23###soif===869###eoif===878###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_append(unsigned char**,size_t*,unsigned char const*)");return 0;
}

/*Sets length and name and allocates the space for data and crc but does not
set data or crc yet. Returns the start of the chunk in chunk. The start of
the data is at chunk + 8. To finalize chunk, add the data, then use
lodepng_chunk_generate_crc */
/** Instrumented function lodepng_chunk_init(unsigned char**,ucvector*,size_t,char const*) */
static unsigned lodepng_chunk_init(unsigned char** chunk,
                                   ucvector* out,
                                   size_t length, const char* type) /* << Aka begin of function unsigned lodepng_chunk_init(unsigned char** chunk,
                                   ucvector* out,
                                   size_t length, const char* type) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_init(unsigned char**,ucvector*,size_t,char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_chunk_init.133348.stub"

  AKA_mark("lis===2868###sois===133515###eois===133545###lif===3###soif===183###eoif===213###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_init(unsigned char**,ucvector*,size_t,char const*)");size_t new_length = out->size;
  if(AKA_mark("lis===2869###sois===133552###eois===133599###lif===4###soif===220###eoif===267###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_init(unsigned char**,ucvector*,size_t,char const*)") && (AKA_mark("lis===2869###sois===133552###eois===133599###lif===4###soif===220###eoif===267###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_init(unsigned char**,ucvector*,size_t,char const*)") && (lodepng_addofl(new_length, length, &new_length)))) {
AKA_mark("lis===2869###sois===133601###eois===133611###lif===4###soif===269###eoif===279###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_init(unsigned char**,ucvector*,size_t,char const*)");return 77;
}

else {
AKA_mark("lis===-2869-###sois===-133552-###eois===-13355247-###lif===-4-###soif===-###eoif===-267-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_init(unsigned char**,ucvector*,size_t,char const*)");
}
  if(AKA_mark("lis===2870###sois===133618###eois===133661###lif===5###soif===286###eoif===329###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_init(unsigned char**,ucvector*,size_t,char const*)") && (AKA_mark("lis===2870###sois===133618###eois===133661###lif===5###soif===286###eoif===329###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_init(unsigned char**,ucvector*,size_t,char const*)") && (lodepng_addofl(new_length, 12, &new_length)))) {
AKA_mark("lis===2870###sois===133663###eois===133673###lif===5###soif===331###eoif===341###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_init(unsigned char**,ucvector*,size_t,char const*)");return 77;
}

else {
AKA_mark("lis===-2870-###sois===-133618-###eois===-13361843-###lif===-5-###soif===-###eoif===-329-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_init(unsigned char**,ucvector*,size_t,char const*)");
}
  if(AKA_mark("lis===2871###sois===133680###eois===133713###lif===6###soif===348###eoif===381###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_init(unsigned char**,ucvector*,size_t,char const*)") && (AKA_mark("lis===2871###sois===133680###eois===133713###lif===6###soif===348###eoif===381###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_init(unsigned char**,ucvector*,size_t,char const*)") && (!ucvector_resize(out, new_length)))) {
AKA_mark("lis===2871###sois===133715###eois===133725###lif===6###soif===383###eoif===393###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_init(unsigned char**,ucvector*,size_t,char const*)");return 83;
}

else {
AKA_mark("lis===-2871-###sois===-133680-###eois===-13368033-###lif===-6-###soif===-###eoif===-381-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_init(unsigned char**,ucvector*,size_t,char const*)");
} /*alloc fail*/
  AKA_mark("lis===2872###sois===133744###eois===133791###lif===7###soif===412###eoif===459###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_init(unsigned char**,ucvector*,size_t,char const*)");*chunk = out->data + new_length - length - 12u;

  /*1: length*/
  AKA_mark("lis===2875###sois===133814###eois===133860###lif===10###soif===482###eoif===528###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_init(unsigned char**,ucvector*,size_t,char const*)");lodepng_set32bitInt(*chunk, (unsigned)length);

  /*2: chunk name (4 letters)*/
  AKA_mark("lis===2878###sois===133899###eois===133935###lif===13###soif===567###eoif===603###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_init(unsigned char**,ucvector*,size_t,char const*)");lodepng_memcpy(*chunk + 4, type, 4);

  AKA_mark("lis===2880###sois===133941###eois===133950###lif===15###soif===609###eoif===618###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_init(unsigned char**,ucvector*,size_t,char const*)");return 0;
}

/* like lodepng_chunk_create but with custom allocsize */
/** Instrumented function lodepng_chunk_createv(ucvector*,size_t,char const*,unsigned char const*) */
static unsigned lodepng_chunk_createv(ucvector* out,
                                      size_t length, const char* type, const unsigned char* data) /* << Aka begin of function unsigned lodepng_chunk_createv(ucvector* out,
                                      size_t length, const char* type, const unsigned char* data) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_createv(ucvector*,size_t,char const*,unsigned char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_chunk_createv.134032.stub"

  AKA_mark("lis===2886###sois===134173###eois===134194###lif===2###soif===157###eoif===178###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_createv(ucvector*,size_t,char const*,unsigned char const*)");unsigned char* chunk;
  AKA_mark("lis===2887###sois===134198###eois===134262###lif===3###soif===182###eoif===246###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_createv(ucvector*,size_t,char const*,unsigned char const*)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, length, type));

  /*3: the data*/
  AKA_mark("lis===2890###sois===134288###eois===134328###lif===6###soif===272###eoif===312###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_createv(ucvector*,size_t,char const*,unsigned char const*)");lodepng_memcpy(chunk + 8, data, length);

  /*4: CRC (of the chunkname characters and the data)*/
  AKA_mark("lis===2893###sois===134391###eois===134425###lif===9###soif===375###eoif===409###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_createv(ucvector*,size_t,char const*,unsigned char const*)");lodepng_chunk_generate_crc(chunk);

  AKA_mark("lis===2895###sois===134431###eois===134440###lif===11###soif===415###eoif===424###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_createv(ucvector*,size_t,char const*,unsigned char const*)");return 0;
}

/** Instrumented function lodepng_chunk_create(unsigned char**,size_t*,size_t,char const*,unsigned char const*) */
unsigned lodepng_chunk_create(unsigned char** out, size_t* outsize,
                              size_t length, const char* type, const unsigned char* data) /* << Aka begin of function unsigned lodepng_chunk_create(unsigned char** out, size_t* outsize,
                              size_t length, const char* type, const unsigned char* data) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_create(unsigned char**,size_t*,size_t,char const*,unsigned char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_chunk_create.134456.stub"

  AKA_mark("lis===2900###sois===134611###eois===134654###lif===2###soif===164###eoif===207###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_create(unsigned char**,size_t*,size_t,char const*,unsigned char const*)");ucvector v = ucvector_init(*out, *outsize);
  AKA_mark("lis===2901###sois===134658###eois===134721###lif===3###soif===211###eoif===274###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_create(unsigned char**,size_t*,size_t,char const*,unsigned char const*)");unsigned error = lodepng_chunk_createv(&v, length, type, data);
  AKA_mark("lis===2902###sois===134725###eois===134739###lif===4###soif===278###eoif===292###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_create(unsigned char**,size_t*,size_t,char const*,unsigned char const*)");*out = v.data;
  AKA_mark("lis===2903###sois===134743###eois===134761###lif===5###soif===296###eoif===314###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_create(unsigned char**,size_t*,size_t,char const*,unsigned char const*)");*outsize = v.size;
  AKA_mark("lis===2904###sois===134765###eois===134778###lif===6###soif===318###eoif===331###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_chunk_create(unsigned char**,size_t*,size_t,char const*,unsigned char const*)");return error;
}

/* ////////////////////////////////////////////////////////////////////////// */
/* / Color types, channels, bits                                            / */
/* ////////////////////////////////////////////////////////////////////////// */

/*checks if the colortype is valid and the bitdepth bd is allowed for this colortype.
Return value is a LodePNG error code.*/
/** Instrumented function checkColorValidity(LodePNGColorType,unsigned) */
static unsigned checkColorValidity(LodePNGColorType colortype, unsigned bd) /* << Aka begin of function unsigned checkColorValidity(LodePNGColorType colortype, unsigned bd) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.checkColorValidity.135177.stub"

  AKA_mark("lis===2914###sois===135249###eois===135258###lif===1###soif===88###eoif===97###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");switch(colortype) {
    case LCT_GREY: if (colortype == LCT_GREY)
AKA_mark("lis===2915###sois===135267###eois===135281###lif===2###soif===106###eoif===120###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");
       if(AKA_mark("lis===2915###sois===135291###eois===135346###lif===2###soif===130###eoif===185###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)") && (AKA_mark("lis===2915###sois===135291###eois===135346###lif===2###soif===130###eoif===185###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)") && (!(bd == 1 || bd == 2 || bd == 4 || bd == 8 || bd == 16)))) {
AKA_mark("lis===2915###sois===135348###eois===135358###lif===2###soif===187###eoif===197###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");return 37;
}

else {
AKA_mark("lis===-2915-###sois===-135291-###eois===-13529155-###lif===-2-###soif===-###eoif===-185-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");
} AKA_mark("lis===2915###sois===135359###eois===135365###lif===2###soif===198###eoif===204###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");break;
    case LCT_RGB: if (colortype == LCT_RGB)
AKA_mark("lis===2916###sois===135371###eois===135384###lif===3###soif===210###eoif===223###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");
        if(AKA_mark("lis===2916###sois===135395###eois===135450###lif===3###soif===234###eoif===289###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)") && (AKA_mark("lis===2916###sois===135395###eois===135450###lif===3###soif===234###eoif===289###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)") && (!(                                 bd == 8 || bd == 16)))) {
AKA_mark("lis===2916###sois===135452###eois===135462###lif===3###soif===291###eoif===301###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");return 37;
}

else {
AKA_mark("lis===-2916-###sois===-135395-###eois===-13539555-###lif===-3-###soif===-###eoif===-289-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");
} AKA_mark("lis===2916###sois===135463###eois===135469###lif===3###soif===302###eoif===308###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");break;
    case LCT_PALETTE: if (colortype == LCT_PALETTE)
AKA_mark("lis===2917###sois===135475###eois===135492###lif===4###soif===314###eoif===331###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");
    if(AKA_mark("lis===2917###sois===135499###eois===135554###lif===4###soif===338###eoif===393###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)") && (AKA_mark("lis===2917###sois===135499###eois===135554###lif===4###soif===338###eoif===393###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)") && (!(bd == 1 || bd == 2 || bd == 4 || bd == 8            )))) {
AKA_mark("lis===2917###sois===135556###eois===135566###lif===4###soif===395###eoif===405###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");return 37;
}

else {
AKA_mark("lis===-2917-###sois===-135499-###eois===-13549955-###lif===-4-###soif===-###eoif===-393-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");
} AKA_mark("lis===2917###sois===135567###eois===135573###lif===4###soif===406###eoif===412###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");break;
    case LCT_GREY_ALPHA: if (colortype == LCT_GREY_ALPHA)
AKA_mark("lis===2918###sois===135579###eois===135599###lif===5###soif===418###eoif===438###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");
 if(AKA_mark("lis===2918###sois===135603###eois===135658###lif===5###soif===442###eoif===497###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)") && (AKA_mark("lis===2918###sois===135603###eois===135658###lif===5###soif===442###eoif===497###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)") && (!(                                 bd == 8 || bd == 16)))) {
AKA_mark("lis===2918###sois===135660###eois===135670###lif===5###soif===499###eoif===509###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");return 37;
}

else {
AKA_mark("lis===-2918-###sois===-135603-###eois===-13560355-###lif===-5-###soif===-###eoif===-497-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");
} AKA_mark("lis===2918###sois===135671###eois===135677###lif===5###soif===510###eoif===516###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");break;
    case LCT_RGBA: if (colortype == LCT_RGBA)
AKA_mark("lis===2919###sois===135683###eois===135697###lif===6###soif===522###eoif===536###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");
       if(AKA_mark("lis===2919###sois===135707###eois===135762###lif===6###soif===546###eoif===601###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)") && (AKA_mark("lis===2919###sois===135707###eois===135762###lif===6###soif===546###eoif===601###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)") && (!(                                 bd == 8 || bd == 16)))) {
AKA_mark("lis===2919###sois===135764###eois===135774###lif===6###soif===603###eoif===613###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");return 37;
}

else {
AKA_mark("lis===-2919-###sois===-135707-###eois===-13570755-###lif===-6-###soif===-###eoif===-601-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");
} AKA_mark("lis===2919###sois===135775###eois===135781###lif===6###soif===614###eoif===620###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");break;
    case LCT_MAX_OCTET_VALUE: if (colortype == LCT_MAX_OCTET_VALUE)
AKA_mark("lis===2920###sois===135787###eois===135812###lif===7###soif===626###eoif===651###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");
 AKA_mark("lis===2920###sois===135813###eois===135823###lif===7###soif===652###eoif===662###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");return 31; /* invalid color type */
    default: if (colortype != LCT_GREY && colortype != LCT_RGB && colortype != LCT_PALETTE && colortype != LCT_GREY_ALPHA && colortype != LCT_RGBA && colortype != LCT_MAX_OCTET_VALUE)
AKA_mark("lis===2921###sois===135854###eois===135862###lif===8###soif===693###eoif===701###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");
 AKA_mark("lis===2921###sois===135863###eois===135873###lif===8###soif===702###eoif===712###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");return 31; /* invalid color type */
  }
  AKA_mark("lis===2923###sois===135907###eois===135916###lif===10###soif===746###eoif===755###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\checkColorValidity(LodePNGColorType,unsigned)");return 0; /*allowed color type / bits combination*/
}

/** Instrumented function getNumColorChannels(LodePNGColorType) */
static unsigned getNumColorChannels(LodePNGColorType colortype) /* << Aka begin of function unsigned getNumColorChannels(LodePNGColorType colortype) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\getNumColorChannels(LodePNGColorType)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.getNumColorChannels.135981.stub"

  AKA_mark("lis===2927###sois===136041###eois===136050###lif===1###soif===76###eoif===85###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getNumColorChannels(LodePNGColorType)");switch(colortype) {
    case LCT_GREY: if (colortype == LCT_GREY)
AKA_mark("lis===2928###sois===136059###eois===136073###lif===2###soif===94###eoif===108###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getNumColorChannels(LodePNGColorType)");
 AKA_mark("lis===2928###sois===136074###eois===136083###lif===2###soif===109###eoif===118###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getNumColorChannels(LodePNGColorType)");return 1;
    case LCT_RGB: if (colortype == LCT_RGB)
AKA_mark("lis===2929###sois===136089###eois===136102###lif===3###soif===124###eoif===137###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getNumColorChannels(LodePNGColorType)");
 AKA_mark("lis===2929###sois===136103###eois===136112###lif===3###soif===138###eoif===147###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getNumColorChannels(LodePNGColorType)");return 3;
    case LCT_PALETTE: if (colortype == LCT_PALETTE)
AKA_mark("lis===2930###sois===136118###eois===136135###lif===4###soif===153###eoif===170###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getNumColorChannels(LodePNGColorType)");
 AKA_mark("lis===2930###sois===136136###eois===136145###lif===4###soif===171###eoif===180###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getNumColorChannels(LodePNGColorType)");return 1;
    case LCT_GREY_ALPHA: if (colortype == LCT_GREY_ALPHA)
AKA_mark("lis===2931###sois===136151###eois===136171###lif===5###soif===186###eoif===206###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getNumColorChannels(LodePNGColorType)");
 AKA_mark("lis===2931###sois===136172###eois===136181###lif===5###soif===207###eoif===216###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getNumColorChannels(LodePNGColorType)");return 2;
    case LCT_RGBA: if (colortype == LCT_RGBA)
AKA_mark("lis===2932###sois===136187###eois===136201###lif===6###soif===222###eoif===236###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getNumColorChannels(LodePNGColorType)");
 AKA_mark("lis===2932###sois===136202###eois===136211###lif===6###soif===237###eoif===246###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getNumColorChannels(LodePNGColorType)");return 4;
    case LCT_MAX_OCTET_VALUE: if (colortype == LCT_MAX_OCTET_VALUE)
AKA_mark("lis===2933###sois===136217###eois===136242###lif===7###soif===252###eoif===277###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getNumColorChannels(LodePNGColorType)");
 AKA_mark("lis===2933###sois===136243###eois===136252###lif===7###soif===278###eoif===287###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getNumColorChannels(LodePNGColorType)");return 0; /* invalid color type */
    default: if (colortype != LCT_GREY && colortype != LCT_RGB && colortype != LCT_PALETTE && colortype != LCT_GREY_ALPHA && colortype != LCT_RGBA && colortype != LCT_MAX_OCTET_VALUE)
AKA_mark("lis===2934###sois===136283###eois===136291###lif===8###soif===318###eoif===326###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getNumColorChannels(LodePNGColorType)");
 AKA_mark("lis===2934###sois===136292###eois===136301###lif===8###soif===327###eoif===336###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getNumColorChannels(LodePNGColorType)");return 0; /*invalid color type*/
  }
}

/** Instrumented function lodepng_get_bpp_lct(LodePNGColorType,unsigned) */
static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth) /* << Aka begin of function unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_get_bpp_lct(LodePNGColorType,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_get_bpp_lct.136352.stub"

  /*bits per pixel is amount of channels * bits per channel*/
  AKA_mark("lis===2940###sois===136487###eois===136536###lif===2###soif===151###eoif===200###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_get_bpp_lct(LodePNGColorType,unsigned)");return getNumColorChannels(colortype) * bitdepth;
}

/* ////////////////////////////////////////////////////////////////////////// */

/** Instrumented function lodepng_color_mode_init(LodePNGColorMode*) */
void lodepng_color_mode_init(LodePNGColorMode* info) /* << Aka begin of function void lodepng_color_mode_init(LodePNGColorMode* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_init(LodePNGColorMode*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_color_mode_init.136632.stub"

  AKA_mark("lis===2946###sois===136685###eois===136707###lif===1###soif===58###eoif===80###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_init(LodePNGColorMode*)");info->key_defined = 0;
  AKA_mark("lis===2947###sois===136711###eois===136755###lif===2###soif===84###eoif===128###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_init(LodePNGColorMode*)");info->key_r = info->key_g = info->key_b = 0;
  AKA_mark("lis===2948###sois===136759###eois===136786###lif===3###soif===132###eoif===159###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_init(LodePNGColorMode*)");info->colortype = LCT_RGBA;
  AKA_mark("lis===2949###sois===136790###eois===136809###lif===4###soif===163###eoif===182###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_init(LodePNGColorMode*)");info->bitdepth = 8;
  AKA_mark("lis===2950###sois===136813###eois===136831###lif===5###soif===186###eoif===204###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_init(LodePNGColorMode*)");info->palette = 0;
  AKA_mark("lis===2951###sois===136835###eois===136857###lif===6###soif===208###eoif===230###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_init(LodePNGColorMode*)");info->palettesize = 0;
}

/*allocates palette memory if needed, and initializes all colors to black*/
/** Instrumented function lodepng_color_mode_alloc_palette(LodePNGColorMode*) */
static void lodepng_color_mode_alloc_palette(LodePNGColorMode* info) /* << Aka begin of function void lodepng_color_mode_alloc_palette(LodePNGColorMode* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_alloc_palette(LodePNGColorMode*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_color_mode_alloc_palette.136953.stub"

  AKA_mark("lis===2956###sois===137015###eois===137024###lif===1###soif===74###eoif===83###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_alloc_palette(LodePNGColorMode*)");size_t i;
  /*if the palette is already allocated, it will have size 1024 so no reallocation needed in that case*/
  /*the palette must have room for up to 256 colors with 4 bytes each.*/
  if(AKA_mark("lis===2959###sois===137211###eois===137225###lif===4###soif===270###eoif===284###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_alloc_palette(LodePNGColorMode*)") && (AKA_mark("lis===2959###sois===137211###eois===137225###lif===4###soif===270###eoif===284###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_alloc_palette(LodePNGColorMode*)") && (!info->palette))) {
AKA_mark("lis===2959###sois===137227###eois===137280###lif===4###soif===286###eoif===339###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_alloc_palette(LodePNGColorMode*)");info->palette = (unsigned char*)lodepng_malloc(1024);
}

else {
AKA_mark("lis===-2959-###sois===-137211-###eois===-13721114-###lif===-4-###soif===-###eoif===-284-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_alloc_palette(LodePNGColorMode*)");
}
  if(AKA_mark("lis===2960###sois===137287###eois===137301###lif===5###soif===346###eoif===360###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_alloc_palette(LodePNGColorMode*)") && (AKA_mark("lis===2960###sois===137287###eois===137301###lif===5###soif===346###eoif===360###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_alloc_palette(LodePNGColorMode*)") && (!info->palette))) {
AKA_mark("lis===2960###sois===137303###eois===137310###lif===5###soif===362###eoif===369###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_alloc_palette(LodePNGColorMode*)");return;
}

else {
AKA_mark("lis===-2960-###sois===-137287-###eois===-13728714-###lif===-5-###soif===-###eoif===-360-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_alloc_palette(LodePNGColorMode*)");
} /*alloc fail*/
  int AKA_BLOCK_LOOP_137329 = 0;
    AKA_mark("lis===2961###sois===137333###eois===137339###lif===6###soif===392###eoif===398###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_alloc_palette(LodePNGColorMode*)");
for(i = 0; AKA_mark("lis===2961###sois===137340###eois===137348###lif===6###soif===399###eoif===407###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_alloc_palette(LodePNGColorMode*)") && (AKA_mark("lis===2961###sois===137340###eois===137348###lif===6###soif===399###eoif===407###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_alloc_palette(LodePNGColorMode*)") && (i != 256)); ({AKA_mark("lis===2961###sois===137350###eois===137353###lif===6###soif===409###eoif===412###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_alloc_palette(LodePNGColorMode*)");++i;})) {
        AKA_BLOCK_LOOP_137329++;
        if (AKA_BLOCK_LOOP_137329 > 1000) {
            //break;
        }
    /*Initialize all unused colors with black, the value used for invalid palette indices.
    This is an error according to the PNG spec, but common PNG decoders make it black instead.
    That makes color conversion slightly faster due to no error handling needed.*/
    AKA_mark("lis===2965###sois===137634###eois===137663###lif===10###soif===693###eoif===722###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_alloc_palette(LodePNGColorMode*)");info->palette[i * 4 + 0] = 0;
    AKA_mark("lis===2966###sois===137669###eois===137698###lif===11###soif===728###eoif===757###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_alloc_palette(LodePNGColorMode*)");info->palette[i * 4 + 1] = 0;
    AKA_mark("lis===2967###sois===137704###eois===137733###lif===12###soif===763###eoif===792###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_alloc_palette(LodePNGColorMode*)");info->palette[i * 4 + 2] = 0;
    AKA_mark("lis===2968###sois===137739###eois===137770###lif===13###soif===798###eoif===829###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_alloc_palette(LodePNGColorMode*)");info->palette[i * 4 + 3] = 255;
  }
}

/** Instrumented function lodepng_color_mode_cleanup(LodePNGColorMode*) */
void lodepng_color_mode_cleanup(LodePNGColorMode* info) /* << Aka begin of function void lodepng_color_mode_cleanup(LodePNGColorMode* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_cleanup(LodePNGColorMode*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_color_mode_cleanup.137787.stub"

  AKA_mark("lis===2973###sois===137843###eois===137871###lif===1###soif===61###eoif===89###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_cleanup(LodePNGColorMode*)");lodepng_palette_clear(info);
}

/** Instrumented function lodepng_color_mode_copy(LodePNGColorMode*,LodePNGColorMode const*) */
unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source) /* << Aka begin of function unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_copy(LodePNGColorMode*,LodePNGColorMode const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_color_mode_copy.137887.stub"

  AKA_mark("lis===2977###sois===137972###eois===138005###lif===1###soif===94###eoif===127###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_copy(LodePNGColorMode*,LodePNGColorMode const*)");lodepng_color_mode_cleanup(dest);
  AKA_mark("lis===2978###sois===138009###eois===138064###lif===2###soif===131###eoif===186###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_copy(LodePNGColorMode*,LodePNGColorMode const*)");lodepng_memcpy(dest, source, sizeof(LodePNGColorMode));
  if(AKA_mark("lis===2979###sois===138071###eois===138086###lif===3###soif===193###eoif===208###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_copy(LodePNGColorMode*,LodePNGColorMode const*)") && (AKA_mark("lis===2979###sois===138071###eois===138086###lif===3###soif===193###eoif===208###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_copy(LodePNGColorMode*,LodePNGColorMode const*)") && (source->palette))) {
    AKA_mark("lis===2980###sois===138095###eois===138148###lif===4###soif===217###eoif===270###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_copy(LodePNGColorMode*,LodePNGColorMode const*)");dest->palette = (unsigned char*)lodepng_malloc(1024);
    if(AKA_mark("lis===2981###sois===138157###eois===138194###lif===5###soif===279###eoif===316###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_copy(LodePNGColorMode*,LodePNGColorMode const*)") && ((AKA_mark("lis===2981###sois===138157###eois===138171###lif===5###soif===279###eoif===293###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_copy(LodePNGColorMode*,LodePNGColorMode const*)") && (!dest->palette)) && (AKA_mark("lis===2981###sois===138175###eois===138194###lif===5###soif===297###eoif===316###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_copy(LodePNGColorMode*,LodePNGColorMode const*)") && (source->palettesize)))) {
AKA_mark("lis===2981###sois===138196###eois===138206###lif===5###soif===318###eoif===328###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_copy(LodePNGColorMode*,LodePNGColorMode const*)");return 83;
}

else {
AKA_mark("lis===-2981-###sois===-138157-###eois===-13815737-###lif===-5-###soif===-###eoif===-316-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_copy(LodePNGColorMode*,LodePNGColorMode const*)");
} /*alloc fail*/
    AKA_mark("lis===2982###sois===138227###eois===138299###lif===6###soif===349###eoif===421###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_copy(LodePNGColorMode*,LodePNGColorMode const*)");lodepng_memcpy(dest->palette, source->palette, source->palettesize * 4);
  }
else {
AKA_mark("lis===-2979-###sois===-138071-###eois===-13807115-###lif===-3-###soif===-###eoif===-208-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_copy(LodePNGColorMode*,LodePNGColorMode const*)");
}
  AKA_mark("lis===2984###sois===138308###eois===138317###lif===8###soif===430###eoif===439###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_copy(LodePNGColorMode*,LodePNGColorMode const*)");return 0;
}

/** Instrumented function lodepng_color_mode_make(LodePNGColorType,unsigned) */
LodePNGColorMode lodepng_color_mode_make(LodePNGColorType colortype, unsigned bitdepth) /* << Aka begin of function LodePNGColorMode lodepng_color_mode_make(LodePNGColorType colortype, unsigned bitdepth) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_make(LodePNGColorType,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_color_mode_make.138341.stub"

  AKA_mark("lis===2988###sois===138417###eois===138441###lif===1###soif===93###eoif===117###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_make(LodePNGColorType,unsigned)");LodePNGColorMode result;
  AKA_mark("lis===2989###sois===138445###eois===138478###lif===2###soif===121###eoif===154###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_make(LodePNGColorType,unsigned)");lodepng_color_mode_init(&result);
  AKA_mark("lis===2990###sois===138482###eois===138511###lif===3###soif===158###eoif===187###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_make(LodePNGColorType,unsigned)");result.colortype = colortype;
  AKA_mark("lis===2991###sois===138515###eois===138542###lif===4###soif===191###eoif===218###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_make(LodePNGColorType,unsigned)");result.bitdepth = bitdepth;
  AKA_mark("lis===2992###sois===138546###eois===138560###lif===5###soif===222###eoif===236###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_make(LodePNGColorType,unsigned)");return result;
}

/** Instrumented function lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*) */
static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b) /* << Aka begin of function int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_color_mode_equal.138578.stub"

  AKA_mark("lis===2996###sois===138662###eois===138671###lif===1###soif===95###eoif===104###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");size_t i;
  if(AKA_mark("lis===2997###sois===138678###eois===138706###lif===2###soif===111###eoif===139###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)") && (AKA_mark("lis===2997###sois===138678###eois===138706###lif===2###soif===111###eoif===139###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)") && (a->colortype != b->colortype))) {
AKA_mark("lis===2997###sois===138708###eois===138717###lif===2###soif===141###eoif===150###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");return 0;
}

else {
AKA_mark("lis===-2997-###sois===-138678-###eois===-13867828-###lif===-2-###soif===-###eoif===-139-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");
}
  if(AKA_mark("lis===2998###sois===138724###eois===138750###lif===3###soif===157###eoif===183###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)") && (AKA_mark("lis===2998###sois===138724###eois===138750###lif===3###soif===157###eoif===183###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)") && (a->bitdepth != b->bitdepth))) {
AKA_mark("lis===2998###sois===138752###eois===138761###lif===3###soif===185###eoif===194###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");return 0;
}

else {
AKA_mark("lis===-2998-###sois===-138724-###eois===-13872426-###lif===-3-###soif===-###eoif===-183-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");
}
  if(AKA_mark("lis===2999###sois===138768###eois===138800###lif===4###soif===201###eoif===233###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)") && (AKA_mark("lis===2999###sois===138768###eois===138800###lif===4###soif===201###eoif===233###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)") && (a->key_defined != b->key_defined))) {
AKA_mark("lis===2999###sois===138802###eois===138811###lif===4###soif===235###eoif===244###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");return 0;
}

else {
AKA_mark("lis===-2999-###sois===-138768-###eois===-13876832-###lif===-4-###soif===-###eoif===-233-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");
}
  if(AKA_mark("lis===3000###sois===138818###eois===138832###lif===5###soif===251###eoif===265###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)") && (AKA_mark("lis===3000###sois===138818###eois===138832###lif===5###soif===251###eoif===265###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)") && (a->key_defined))) {
    if(AKA_mark("lis===3001###sois===138844###eois===138864###lif===6###soif===277###eoif===297###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)") && (AKA_mark("lis===3001###sois===138844###eois===138864###lif===6###soif===277###eoif===297###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)") && (a->key_r != b->key_r))) {
AKA_mark("lis===3001###sois===138866###eois===138875###lif===6###soif===299###eoif===308###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");return 0;
}

else {
AKA_mark("lis===-3001-###sois===-138844-###eois===-13884420-###lif===-6-###soif===-###eoif===-297-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");
}
    if(AKA_mark("lis===3002###sois===138884###eois===138904###lif===7###soif===317###eoif===337###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)") && (AKA_mark("lis===3002###sois===138884###eois===138904###lif===7###soif===317###eoif===337###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)") && (a->key_g != b->key_g))) {
AKA_mark("lis===3002###sois===138906###eois===138915###lif===7###soif===339###eoif===348###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");return 0;
}

else {
AKA_mark("lis===-3002-###sois===-138884-###eois===-13888420-###lif===-7-###soif===-###eoif===-337-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");
}
    if(AKA_mark("lis===3003###sois===138924###eois===138944###lif===8###soif===357###eoif===377###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)") && (AKA_mark("lis===3003###sois===138924###eois===138944###lif===8###soif===357###eoif===377###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)") && (a->key_b != b->key_b))) {
AKA_mark("lis===3003###sois===138946###eois===138955###lif===8###soif===379###eoif===388###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");return 0;
}

else {
AKA_mark("lis===-3003-###sois===-138924-###eois===-13892420-###lif===-8-###soif===-###eoif===-377-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");
}
  }
else {
AKA_mark("lis===-3000-###sois===-138818-###eois===-13881814-###lif===-5-###soif===-###eoif===-265-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");
}
  if(AKA_mark("lis===3005###sois===138967###eois===138999###lif===10###soif===400###eoif===432###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)") && (AKA_mark("lis===3005###sois===138967###eois===138999###lif===10###soif===400###eoif===432###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)") && (a->palettesize != b->palettesize))) {
AKA_mark("lis===3005###sois===139001###eois===139010###lif===10###soif===434###eoif===443###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");return 0;
}

else {
AKA_mark("lis===-3005-###sois===-138967-###eois===-13896732-###lif===-10-###soif===-###eoif===-432-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");
}
  int AKA_BLOCK_LOOP_139014 = 0;
    AKA_mark("lis===3006###sois===139018###eois===139024###lif===11###soif===451###eoif===457###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3006###sois===139025###eois===139048###lif===11###soif===458###eoif===481###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)") && (AKA_mark("lis===3006###sois===139025###eois===139048###lif===11###soif===458###eoif===481###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)") && (i != a->palettesize * 4)); ({AKA_mark("lis===3006###sois===139050###eois===139053###lif===11###soif===483###eoif===486###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");++i;})) {
        AKA_BLOCK_LOOP_139014++;
        if (AKA_BLOCK_LOOP_139014 > 1000) {
            //break;
        }
    if(AKA_mark("lis===3007###sois===139065###eois===139095###lif===12###soif===498###eoif===528###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)") && (AKA_mark("lis===3007###sois===139065###eois===139095###lif===12###soif===498###eoif===528###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)") && (a->palette[i] != b->palette[i]))) {
AKA_mark("lis===3007###sois===139097###eois===139106###lif===12###soif===530###eoif===539###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");return 0;
}

else {
AKA_mark("lis===-3007-###sois===-139065-###eois===-13906530-###lif===-12-###soif===-###eoif===-528-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");
}
  }
  AKA_mark("lis===3009###sois===139115###eois===139124###lif===14###soif===548###eoif===557###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_mode_equal(LodePNGColorMode const*,LodePNGColorMode const*)");return 1;
}

/** Instrumented function lodepng_palette_clear(LodePNGColorMode*) */
void lodepng_palette_clear(LodePNGColorMode* info) /* << Aka begin of function void lodepng_palette_clear(LodePNGColorMode* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_clear(LodePNGColorMode*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_palette_clear.139136.stub"

  if(AKA_mark("lis===3013###sois===139190###eois===139203###lif===1###soif===59###eoif===72###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_clear(LodePNGColorMode*)") && (AKA_mark("lis===3013###sois===139190###eois===139203###lif===1###soif===59###eoif===72###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_clear(LodePNGColorMode*)") && (info->palette))) {
AKA_mark("lis===3013###sois===139205###eois===139233###lif===1###soif===74###eoif===102###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_clear(LodePNGColorMode*)");lodepng_free(info->palette);
}

else {
AKA_mark("lis===-3013-###sois===-139190-###eois===-13919013-###lif===-1-###soif===-###eoif===-72-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_clear(LodePNGColorMode*)");
}
  AKA_mark("lis===3014###sois===139237###eois===139255###lif===2###soif===106###eoif===124###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_clear(LodePNGColorMode*)");info->palette = 0;
  AKA_mark("lis===3015###sois===139259###eois===139281###lif===3###soif===128###eoif===150###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_clear(LodePNGColorMode*)");info->palettesize = 0;
}

/** Instrumented function lodepng_palette_add(LodePNGColorMode*,unsigned char,unsigned char,unsigned char,unsigned char) */
unsigned lodepng_palette_add(LodePNGColorMode* info,
                             unsigned char r, unsigned char g, unsigned char b, unsigned char a) /* << Aka begin of function unsigned lodepng_palette_add(LodePNGColorMode* info,
                             unsigned char r, unsigned char g, unsigned char b, unsigned char a) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_add(LodePNGColorMode*,unsigned char,unsigned char,unsigned char,unsigned char)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_palette_add.139297.stub"

  if(AKA_mark("lis===3020###sois===139447###eois===139461###lif===2###soif===159###eoif===173###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_add(LodePNGColorMode*,unsigned char,unsigned char,unsigned char,unsigned char)") && (AKA_mark("lis===3020###sois===139447###eois===139461###lif===2###soif===159###eoif===173###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_add(LodePNGColorMode*,unsigned char,unsigned char,unsigned char,unsigned char)") && (!info->palette))) /*allocate palette if empty*/ {
    AKA_mark("lis===3021###sois===139500###eois===139539###lif===3###soif===212###eoif===251###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_add(LodePNGColorMode*,unsigned char,unsigned char,unsigned char,unsigned char)");lodepng_color_mode_alloc_palette(info);
    if(AKA_mark("lis===3022###sois===139548###eois===139562###lif===4###soif===260###eoif===274###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_add(LodePNGColorMode*,unsigned char,unsigned char,unsigned char,unsigned char)") && (AKA_mark("lis===3022###sois===139548###eois===139562###lif===4###soif===260###eoif===274###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_add(LodePNGColorMode*,unsigned char,unsigned char,unsigned char,unsigned char)") && (!info->palette))) {
AKA_mark("lis===3022###sois===139564###eois===139574###lif===4###soif===276###eoif===286###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_add(LodePNGColorMode*,unsigned char,unsigned char,unsigned char,unsigned char)");return 83;
}

else {
AKA_mark("lis===-3022-###sois===-139548-###eois===-13954814-###lif===-4-###soif===-###eoif===-274-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_add(LodePNGColorMode*,unsigned char,unsigned char,unsigned char,unsigned char)");
} /*alloc fail*/
  }
else {
AKA_mark("lis===-3020-###sois===-139447-###eois===-13944714-###lif===-2-###soif===-###eoif===-173-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_add(LodePNGColorMode*,unsigned char,unsigned char,unsigned char,unsigned char)");
}
  if(AKA_mark("lis===3024###sois===139601###eois===139625###lif===6###soif===313###eoif===337###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_add(LodePNGColorMode*,unsigned char,unsigned char,unsigned char,unsigned char)") && (AKA_mark("lis===3024###sois===139601###eois===139625###lif===6###soif===313###eoif===337###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_add(LodePNGColorMode*,unsigned char,unsigned char,unsigned char,unsigned char)") && (info->palettesize >= 256))) {
    AKA_mark("lis===3025###sois===139634###eois===139645###lif===7###soif===346###eoif===357###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_add(LodePNGColorMode*,unsigned char,unsigned char,unsigned char,unsigned char)");return 108; /*too many palette values*/
  }
else {
AKA_mark("lis===-3024-###sois===-139601-###eois===-13960124-###lif===-6-###soif===-###eoif===-337-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_add(LodePNGColorMode*,unsigned char,unsigned char,unsigned char,unsigned char)");
}
  AKA_mark("lis===3027###sois===139682###eois===139727###lif===9###soif===394###eoif===439###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_add(LodePNGColorMode*,unsigned char,unsigned char,unsigned char,unsigned char)");info->palette[4 * info->palettesize + 0] = r;
  AKA_mark("lis===3028###sois===139731###eois===139776###lif===10###soif===443###eoif===488###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_add(LodePNGColorMode*,unsigned char,unsigned char,unsigned char,unsigned char)");info->palette[4 * info->palettesize + 1] = g;
  AKA_mark("lis===3029###sois===139780###eois===139825###lif===11###soif===492###eoif===537###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_add(LodePNGColorMode*,unsigned char,unsigned char,unsigned char,unsigned char)");info->palette[4 * info->palettesize + 2] = b;
  AKA_mark("lis===3030###sois===139829###eois===139874###lif===12###soif===541###eoif===586###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_add(LodePNGColorMode*,unsigned char,unsigned char,unsigned char,unsigned char)");info->palette[4 * info->palettesize + 3] = a;
  AKA_mark("lis===3031###sois===139878###eois===139898###lif===13###soif===590###eoif===610###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_add(LodePNGColorMode*,unsigned char,unsigned char,unsigned char,unsigned char)");++info->palettesize;
  AKA_mark("lis===3032###sois===139902###eois===139911###lif===14###soif===614###eoif===623###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_palette_add(LodePNGColorMode*,unsigned char,unsigned char,unsigned char,unsigned char)");return 0;
}

/*calculate bits per pixel out of colortype and bitdepth*/
/** Instrumented function lodepng_get_bpp(LodePNGColorMode const*) */
unsigned lodepng_get_bpp(const LodePNGColorMode* info) /* << Aka begin of function unsigned lodepng_get_bpp(const LodePNGColorMode* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_get_bpp(LodePNGColorMode const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_get_bpp.139987.stub"

  AKA_mark("lis===3037###sois===140038###eois===140098###lif===1###soif===60###eoif===120###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_get_bpp(LodePNGColorMode const*)");return lodepng_get_bpp_lct(info->colortype, info->bitdepth);
}

/** Instrumented function lodepng_get_channels(LodePNGColorMode const*) */
unsigned lodepng_get_channels(const LodePNGColorMode* info) /* << Aka begin of function unsigned lodepng_get_channels(const LodePNGColorMode* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_get_channels(LodePNGColorMode const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_get_channels.140114.stub"

  AKA_mark("lis===3041###sois===140170###eois===140214###lif===1###soif===65###eoif===109###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_get_channels(LodePNGColorMode const*)");return getNumColorChannels(info->colortype);
}

/** Instrumented function lodepng_is_greyscale_type(LodePNGColorMode const*) */
unsigned lodepng_is_greyscale_type(const LodePNGColorMode* info) /* << Aka begin of function unsigned lodepng_is_greyscale_type(const LodePNGColorMode* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_is_greyscale_type(LodePNGColorMode const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_is_greyscale_type.140230.stub"

  AKA_mark("lis===3045###sois===140291###eois===140363###lif===1###soif===70###eoif===142###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_is_greyscale_type(LodePNGColorMode const*)");return info->colortype == LCT_GREY || info->colortype == LCT_GREY_ALPHA;
}

/** Instrumented function lodepng_is_alpha_type(LodePNGColorMode const*) */
unsigned lodepng_is_alpha_type(const LodePNGColorMode* info) /* << Aka begin of function unsigned lodepng_is_alpha_type(const LodePNGColorMode* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_is_alpha_type(LodePNGColorMode const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_is_alpha_type.140379.stub"

  AKA_mark("lis===3049###sois===140436###eois===140470###lif===1###soif===66###eoif===100###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_is_alpha_type(LodePNGColorMode const*)");return (info->colortype & 4) != 0; /*4 or 6*/
}

/** Instrumented function lodepng_is_palette_type(LodePNGColorMode const*) */
unsigned lodepng_is_palette_type(const LodePNGColorMode* info) /* << Aka begin of function unsigned lodepng_is_palette_type(const LodePNGColorMode* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_is_palette_type(LodePNGColorMode const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_is_palette_type.140497.stub"

  AKA_mark("lis===3053###sois===140556###eois===140594###lif===1###soif===68###eoif===106###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_is_palette_type(LodePNGColorMode const*)");return info->colortype == LCT_PALETTE;
}

/** Instrumented function lodepng_has_palette_alpha(LodePNGColorMode const*) */
unsigned lodepng_has_palette_alpha(const LodePNGColorMode* info) /* << Aka begin of function unsigned lodepng_has_palette_alpha(const LodePNGColorMode* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_has_palette_alpha(LodePNGColorMode const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_has_palette_alpha.140610.stub"

  AKA_mark("lis===3057###sois===140671###eois===140680###lif===1###soif===70###eoif===79###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_has_palette_alpha(LodePNGColorMode const*)");size_t i;
  int AKA_BLOCK_LOOP_140684 = 0;
    AKA_mark("lis===3058###sois===140688###eois===140694###lif===2###soif===87###eoif===93###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_has_palette_alpha(LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3058###sois===140695###eois===140717###lif===2###soif===94###eoif===116###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_has_palette_alpha(LodePNGColorMode const*)") && (AKA_mark("lis===3058###sois===140695###eois===140717###lif===2###soif===94###eoif===116###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_has_palette_alpha(LodePNGColorMode const*)") && (i != info->palettesize)); ({AKA_mark("lis===3058###sois===140719###eois===140722###lif===2###soif===118###eoif===121###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_has_palette_alpha(LodePNGColorMode const*)");++i;})) {
        AKA_BLOCK_LOOP_140684++;
        if (AKA_BLOCK_LOOP_140684 > 1000) {
            //break;
        }
    if(AKA_mark("lis===3059###sois===140734###eois===140764###lif===3###soif===133###eoif===163###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_has_palette_alpha(LodePNGColorMode const*)") && (AKA_mark("lis===3059###sois===140734###eois===140764###lif===3###soif===133###eoif===163###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_has_palette_alpha(LodePNGColorMode const*)") && (info->palette[i * 4 + 3] < 255))) {
AKA_mark("lis===3059###sois===140766###eois===140775###lif===3###soif===165###eoif===174###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_has_palette_alpha(LodePNGColorMode const*)");return 1;
}

else {
AKA_mark("lis===-3059-###sois===-140734-###eois===-14073430-###lif===-3-###soif===-###eoif===-163-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_has_palette_alpha(LodePNGColorMode const*)");
}
  }
  AKA_mark("lis===3061###sois===140784###eois===140793###lif===5###soif===183###eoif===192###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_has_palette_alpha(LodePNGColorMode const*)");return 0;
}

/** Instrumented function lodepng_can_have_alpha(LodePNGColorMode const*) */
unsigned lodepng_can_have_alpha(const LodePNGColorMode* info) /* << Aka begin of function unsigned lodepng_can_have_alpha(const LodePNGColorMode* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_can_have_alpha(LodePNGColorMode const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_can_have_alpha.140809.stub"

  AKA_mark("lis===3065###sois===140867###eois===140972###lif===1###soif===67###eoif===172###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_can_have_alpha(LodePNGColorMode const*)");return info->key_defined
      || lodepng_is_alpha_type(info)
      || lodepng_has_palette_alpha(info);
}

/** Instrumented function lodepng_get_raw_size_lct(unsigned,unsigned,LodePNGColorType,unsigned) */
static size_t lodepng_get_raw_size_lct(unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth) /* << Aka begin of function size_t lodepng_get_raw_size_lct(unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_get_raw_size_lct(unsigned,unsigned,LodePNGColorType,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_get_raw_size_lct.140993.stub"

  AKA_mark("lis===3071###sois===141094###eois===141148###lif===1###soif===115###eoif===169###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_get_raw_size_lct(unsigned,unsigned,LodePNGColorType,unsigned)");size_t bpp = lodepng_get_bpp_lct(colortype, bitdepth);
  AKA_mark("lis===3072###sois===141152###eois===141185###lif===2###soif===173###eoif===206###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_get_raw_size_lct(unsigned,unsigned,LodePNGColorType,unsigned)");size_t n = (size_t)w * (size_t)h;
  AKA_mark("lis===3073###sois===141189###eois===141242###lif===3###soif===210###eoif===263###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_get_raw_size_lct(unsigned,unsigned,LodePNGColorType,unsigned)");return ((n / 8u) * bpp) + ((n & 7u) * bpp + 7u) / 8u;
}

/** Instrumented function lodepng_get_raw_size(unsigned,unsigned,LodePNGColorMode const*) */
size_t lodepng_get_raw_size(unsigned w, unsigned h, const LodePNGColorMode* color) /* << Aka begin of function size_t lodepng_get_raw_size(unsigned w, unsigned h, const LodePNGColorMode* color) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_get_raw_size(unsigned,unsigned,LodePNGColorMode const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_get_raw_size.141256.stub"

  AKA_mark("lis===3077###sois===141337###eois===141410###lif===1###soif===88###eoif===161###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_get_raw_size(unsigned,unsigned,LodePNGColorMode const*)");return lodepng_get_raw_size_lct(w, h, color->colortype, color->bitdepth);
}


#ifdef LODEPNG_COMPILE_PNG

/*in an idat chunk, each scanline is a multiple of 8 bits, unlike the lodepng output buffer,
and in addition has one extra byte per line: the filter byte. So this gives a larger
result than lodepng_get_raw_size. Set h to 1 to get the size of 1 row including filter byte. */
/** Instrumented function lodepng_get_raw_size_idat(unsigned,unsigned,unsigned) */
static size_t lodepng_get_raw_size_idat(unsigned w, unsigned h, unsigned bpp) /* << Aka begin of function size_t lodepng_get_raw_size_idat(unsigned w, unsigned h, unsigned bpp) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_get_raw_size_idat(unsigned,unsigned,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_get_raw_size_idat.141740.stub"

  /* + 1 for the filter byte, and possibly plus padding bits per line. */
  /* Ignoring casts, the expression is equal to (w * bpp + 7) / 8 + 1, but avoids overflow of w * bpp */
  AKA_mark("lis===3089###sois===141990###eois===142063###lif===3###soif===264###eoif===337###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_get_raw_size_idat(unsigned,unsigned,unsigned)");size_t line = ((size_t)(w / 8u) * bpp) + 1u + ((w & 7u) * bpp + 7u) / 8u;
  AKA_mark("lis===3090###sois===142067###eois===142091###lif===4###soif===341###eoif===365###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_get_raw_size_idat(unsigned,unsigned,unsigned)");return (size_t)h * line;
}

#ifdef LODEPNG_COMPILE_DECODER
/*Safely checks whether size_t overflow can be caused due to amount of pixels.
This check is overcautious rather than precise. If this check indicates no overflow,
you can safely compute in a size_t (but not an unsigned):
-(size_t)w * (size_t)h * 8
-amount of bytes in IDAT (including filter, padding and Adam7 bytes)
-amount of bytes in raw color model
Returns 1 if overflow possible, 0 if not.
*/
/** Instrumented function lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*) */
static int lodepng_pixel_overflow(unsigned w, unsigned h,
                                  const LodePNGColorMode* pngcolor, const LodePNGColorMode* rawcolor) /* << Aka begin of function int lodepng_pixel_overflow(unsigned w, unsigned h,
                                  const LodePNGColorMode* pngcolor, const LodePNGColorMode* rawcolor) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_pixel_overflow.142548.stub"

  AKA_mark("lis===3104###sois===142703###eois===142782###lif===2###soif===166###eoif===245###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");size_t bpp = LODEPNG_MAX(lodepng_get_bpp(pngcolor), lodepng_get_bpp(rawcolor));
  AKA_mark("lis===3105###sois===142786###eois===142810###lif===3###soif===249###eoif===273###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");size_t numpixels, total;
  AKA_mark("lis===3106###sois===142814###eois===142826###lif===4###soif===277###eoif===289###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");size_t line; /* bytes per line in worst case */

  if(AKA_mark("lis===3108###sois===142870###eois===142918###lif===6###soif===333###eoif===381###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (AKA_mark("lis===3108###sois===142870###eois===142918###lif===6###soif===333###eoif===381###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (lodepng_mulofl((size_t)w, (size_t)h, &numpixels)))) {
AKA_mark("lis===3108###sois===142920###eois===142929###lif===6###soif===383###eoif===392###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");return 1;
}

else {
AKA_mark("lis===-3108-###sois===-142870-###eois===-14287048-###lif===-6-###soif===-###eoif===-381-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");
}
  if(AKA_mark("lis===3109###sois===142936###eois===142972###lif===7###soif===399###eoif===435###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (AKA_mark("lis===3109###sois===142936###eois===142972###lif===7###soif===399###eoif===435###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (lodepng_mulofl(numpixels, 8, &total)))) {
AKA_mark("lis===3109###sois===142974###eois===142983###lif===7###soif===437###eoif===446###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");return 1;
}

else {
AKA_mark("lis===-3109-###sois===-142936-###eois===-14293636-###lif===-7-###soif===-###eoif===-435-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");
} /* bit pointer with 8-bit color, or 8 bytes per channel color */

  /* Bytes per scanline with the expression "(w / 8u) * bpp) + ((w & 7u) * bpp + 7u) / 8u" */
  if(AKA_mark("lis===3112###sois===143152###eois===143196###lif===10###soif===615###eoif===659###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (AKA_mark("lis===3112###sois===143152###eois===143196###lif===10###soif===615###eoif===659###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (lodepng_mulofl((size_t)(w / 8u), bpp, &line)))) {
AKA_mark("lis===3112###sois===143198###eois===143207###lif===10###soif===661###eoif===670###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");return 1;
}

else {
AKA_mark("lis===-3112-###sois===-143152-###eois===-14315244-###lif===-10-###soif===-###eoif===-659-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");
}
  if(AKA_mark("lis===3113###sois===143214###eois===143269###lif===11###soif===677###eoif===732###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (AKA_mark("lis===3113###sois===143214###eois===143269###lif===11###soif===677###eoif===732###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (lodepng_addofl(line, ((w & 7u) * bpp + 7u) / 8u, &line)))) {
AKA_mark("lis===3113###sois===143271###eois===143280###lif===11###soif===734###eoif===743###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");return 1;
}

else {
AKA_mark("lis===-3113-###sois===-143214-###eois===-14321455-###lif===-11-###soif===-###eoif===-732-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");
}

  if(AKA_mark("lis===3115###sois===143289###eois===143319###lif===13###soif===752###eoif===782###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (AKA_mark("lis===3115###sois===143289###eois===143319###lif===13###soif===752###eoif===782###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (lodepng_addofl(line, 5, &line)))) {
AKA_mark("lis===3115###sois===143321###eois===143330###lif===13###soif===784###eoif===793###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");return 1;
}

else {
AKA_mark("lis===-3115-###sois===-143289-###eois===-14328930-###lif===-13-###soif===-###eoif===-782-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");
} /* 5 bytes overhead per line: 1 filterbyte, 4 for Adam7 worst case */
  if(AKA_mark("lis===3116###sois===143407###eois===143438###lif===14###soif===870###eoif===901###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (AKA_mark("lis===3116###sois===143407###eois===143438###lif===14###soif===870###eoif===901###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (lodepng_mulofl(line, h, &total)))) {
AKA_mark("lis===3116###sois===143440###eois===143449###lif===14###soif===903###eoif===912###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");return 1;
}

else {
AKA_mark("lis===-3116-###sois===-143407-###eois===-14340731-###lif===-14-###soif===-###eoif===-901-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");
} /* Total bytes in worst case */

  AKA_mark("lis===3118###sois===143487###eois===143496###lif===16###soif===950###eoif===959###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_pixel_overflow(unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");return 0; /* no overflow */
}
#endif /*LODEPNG_COMPILE_DECODER*/
#endif /*LODEPNG_COMPILE_PNG*/

#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS

/** Instrumented function LodePNGUnknownChunks_init(LodePNGInfo*) */
static void LodePNGUnknownChunks_init(LodePNGInfo* info) /* << Aka begin of function void LodePNGUnknownChunks_init(LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_init(LodePNGInfo*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.LodePNGUnknownChunks_init.143644.stub"

  AKA_mark("lis===3126###sois===143694###eois===143705###lif===1###soif===62###eoif===73###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_init(LodePNGInfo*)");unsigned i;
  int AKA_BLOCK_LOOP_143709 = 0;
    AKA_mark("lis===3127###sois===143713###eois===143719###lif===2###soif===81###eoif===87###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_init(LodePNGInfo*)");
for(i = 0; AKA_mark("lis===3127###sois===143720###eois===143726###lif===2###soif===88###eoif===94###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_init(LodePNGInfo*)") && (AKA_mark("lis===3127###sois===143720###eois===143726###lif===2###soif===88###eoif===94###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_init(LodePNGInfo*)") && (i != 3)); ({AKA_mark("lis===3127###sois===143728###eois===143731###lif===2###soif===96###eoif===99###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_init(LodePNGInfo*)");++i;})) {
AKA_mark("lis===3127###sois===143733###eois===143766###lif===2###soif===101###eoif===134###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_init(LodePNGInfo*)");info->unknown_chunks_data[i] = 0;
}

  int AKA_BLOCK_LOOP_143770 = 0;
    AKA_mark("lis===3128###sois===143774###eois===143780###lif===3###soif===142###eoif===148###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_init(LodePNGInfo*)");
for(i = 0; AKA_mark("lis===3128###sois===143781###eois===143787###lif===3###soif===149###eoif===155###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_init(LodePNGInfo*)") && (AKA_mark("lis===3128###sois===143781###eois===143787###lif===3###soif===149###eoif===155###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_init(LodePNGInfo*)") && (i != 3)); ({AKA_mark("lis===3128###sois===143789###eois===143792###lif===3###soif===157###eoif===160###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_init(LodePNGInfo*)");++i;})) {
AKA_mark("lis===3128###sois===143794###eois===143827###lif===3###soif===162###eoif===195###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_init(LodePNGInfo*)");info->unknown_chunks_size[i] = 0;
}

}

/** Instrumented function LodePNGUnknownChunks_cleanup(LodePNGInfo*) */
static void LodePNGUnknownChunks_cleanup(LodePNGInfo* info) /* << Aka begin of function void LodePNGUnknownChunks_cleanup(LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_cleanup(LodePNGInfo*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.LodePNGUnknownChunks_cleanup.143846.stub"

  AKA_mark("lis===3132###sois===143899###eois===143910###lif===1###soif===65###eoif===76###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_cleanup(LodePNGInfo*)");unsigned i;
  int AKA_BLOCK_LOOP_143914 = 0;
    AKA_mark("lis===3133###sois===143918###eois===143924###lif===2###soif===84###eoif===90###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_cleanup(LodePNGInfo*)");
for(i = 0; AKA_mark("lis===3133###sois===143925###eois===143931###lif===2###soif===91###eoif===97###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_cleanup(LodePNGInfo*)") && (AKA_mark("lis===3133###sois===143925###eois===143931###lif===2###soif===91###eoif===97###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_cleanup(LodePNGInfo*)") && (i != 3)); ({AKA_mark("lis===3133###sois===143933###eois===143936###lif===2###soif===99###eoif===102###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_cleanup(LodePNGInfo*)");++i;})) {
AKA_mark("lis===3133###sois===143938###eois===143981###lif===2###soif===104###eoif===147###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_cleanup(LodePNGInfo*)");lodepng_free(info->unknown_chunks_data[i]);
}

}

/** Instrumented function LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*) */
static unsigned LodePNGUnknownChunks_copy(LodePNGInfo* dest, const LodePNGInfo* src) /* << Aka begin of function unsigned LodePNGUnknownChunks_copy(LodePNGInfo* dest, const LodePNGInfo* src) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.LodePNGUnknownChunks_copy.144004.stub"

  AKA_mark("lis===3137###sois===144078###eois===144089###lif===1###soif===90###eoif===101###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)");unsigned i;

  AKA_mark("lis===3139###sois===144095###eois===144130###lif===3###soif===107###eoif===142###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)");LodePNGUnknownChunks_cleanup(dest);

  int AKA_BLOCK_LOOP_144136 = 0;
    AKA_mark("lis===3141###sois===144140###eois===144146###lif===5###soif===152###eoif===158###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)");
for(i = 0; AKA_mark("lis===3141###sois===144147###eois===144153###lif===5###soif===159###eoif===165###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)") && (AKA_mark("lis===3141###sois===144147###eois===144153###lif===5###soif===159###eoif===165###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)") && (i != 3)); ({AKA_mark("lis===3141###sois===144155###eois===144158###lif===5###soif===167###eoif===170###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)");++i;})) {
        AKA_BLOCK_LOOP_144136++;
        if (AKA_BLOCK_LOOP_144136 > 1000) {
            //break;
        }
    AKA_mark("lis===3142###sois===144167###eois===144176###lif===6###soif===179###eoif===188###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)");size_t j;
    AKA_mark("lis===3143###sois===144182###eois===144241###lif===7###soif===194###eoif===253###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)");dest->unknown_chunks_size[i] = src->unknown_chunks_size[i];
    AKA_mark("lis===3144###sois===144247###eois===144338###lif===8###soif===259###eoif===350###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)");dest->unknown_chunks_data[i] = (unsigned char*)lodepng_malloc(src->unknown_chunks_size[i]);
    if(AKA_mark("lis===3145###sois===144347###eois===144408###lif===9###soif===359###eoif===420###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)") && ((AKA_mark("lis===3145###sois===144347###eois===144376###lif===9###soif===359###eoif===388###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)") && (!dest->unknown_chunks_data[i])) && (AKA_mark("lis===3145###sois===144380###eois===144408###lif===9###soif===392###eoif===420###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)") && (dest->unknown_chunks_size[i])))) {
AKA_mark("lis===3145###sois===144410###eois===144420###lif===9###soif===422###eoif===432###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)");return 83;
}

else {
AKA_mark("lis===-3145-###sois===-144347-###eois===-14434761-###lif===-9-###soif===-###eoif===-420-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)");
} /*alloc fail*/
    int AKA_BLOCK_LOOP_144441 = 0;
    AKA_mark("lis===3146###sois===144445###eois===144451###lif===10###soif===457###eoif===463###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)");
for(j = 0; AKA_mark("lis===3146###sois===144452###eois===144483###lif===10###soif===464###eoif===495###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)") && (AKA_mark("lis===3146###sois===144452###eois===144483###lif===10###soif===464###eoif===495###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)") && (j < src->unknown_chunks_size[i])); ({AKA_mark("lis===3146###sois===144485###eois===144488###lif===10###soif===497###eoif===500###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)");++j;})) {
        AKA_BLOCK_LOOP_144441++;
        if (AKA_BLOCK_LOOP_144441 > 1000) {
            //break;
        }
      AKA_mark("lis===3147###sois===144499###eois===144564###lif===11###soif===511###eoif===576###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)");dest->unknown_chunks_data[i][j] = src->unknown_chunks_data[i][j];
    }
  }

  AKA_mark("lis===3151###sois===144582###eois===144591###lif===15###soif===594###eoif===603###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGUnknownChunks_copy(LodePNGInfo*,LodePNGInfo const*)");return 0;
}

/******************************************************************************/

/** Instrumented function LodePNGText_init(LodePNGInfo*) */
static void LodePNGText_init(LodePNGInfo* info) /* << Aka begin of function void LodePNGText_init(LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_init(LodePNGInfo*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.LodePNGText_init.144694.stub"

  AKA_mark("lis===3157###sois===144735###eois===144754###lif===1###soif===53###eoif===72###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_init(LodePNGInfo*)");info->text_num = 0;
  AKA_mark("lis===3158###sois===144758###eois===144781###lif===2###soif===76###eoif===99###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_init(LodePNGInfo*)");info->text_keys = NULL;
  AKA_mark("lis===3159###sois===144785###eois===144811###lif===3###soif===103###eoif===129###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_init(LodePNGInfo*)");info->text_strings = NULL;
}

/** Instrumented function LodePNGText_cleanup(LodePNGInfo*) */
static void LodePNGText_cleanup(LodePNGInfo* info) /* << Aka begin of function void LodePNGText_cleanup(LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_cleanup(LodePNGInfo*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.LodePNGText_cleanup.144830.stub"

  AKA_mark("lis===3163###sois===144874###eois===144883###lif===1###soif===56###eoif===65###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_cleanup(LodePNGInfo*)");size_t i;
  int AKA_BLOCK_LOOP_144887 = 0;
    AKA_mark("lis===3164###sois===144891###eois===144897###lif===2###soif===73###eoif===79###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_cleanup(LodePNGInfo*)");
for(i = 0; AKA_mark("lis===3164###sois===144898###eois===144917###lif===2###soif===80###eoif===99###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_cleanup(LodePNGInfo*)") && (AKA_mark("lis===3164###sois===144898###eois===144917###lif===2###soif===80###eoif===99###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_cleanup(LodePNGInfo*)") && (i != info->text_num)); ({AKA_mark("lis===3164###sois===144919###eois===144922###lif===2###soif===101###eoif===104###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_cleanup(LodePNGInfo*)");++i;})) {
        AKA_BLOCK_LOOP_144887++;
        if (AKA_BLOCK_LOOP_144887 > 1000) {
            //break;
        }
    AKA_mark("lis===3165###sois===144931###eois===144967###lif===3###soif===113###eoif===149###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_cleanup(LodePNGInfo*)");string_cleanup(&info->text_keys[i]);
    AKA_mark("lis===3166###sois===144973###eois===145012###lif===4###soif===155###eoif===194###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_cleanup(LodePNGInfo*)");string_cleanup(&info->text_strings[i]);
  }
  AKA_mark("lis===3168###sois===145021###eois===145051###lif===6###soif===203###eoif===233###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_cleanup(LodePNGInfo*)");lodepng_free(info->text_keys);
  AKA_mark("lis===3169###sois===145055###eois===145088###lif===7###soif===237###eoif===270###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_cleanup(LodePNGInfo*)");lodepng_free(info->text_strings);
}

/** Instrumented function LodePNGText_copy(LodePNGInfo*,LodePNGInfo const*) */
static unsigned LodePNGText_copy(LodePNGInfo* dest, const LodePNGInfo* source) /* << Aka begin of function unsigned LodePNGText_copy(LodePNGInfo* dest, const LodePNGInfo* source) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_copy(LodePNGInfo*,LodePNGInfo const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.LodePNGText_copy.145111.stub"

  AKA_mark("lis===3173###sois===145179###eois===145192###lif===1###soif===84###eoif===97###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_copy(LodePNGInfo*,LodePNGInfo const*)");size_t i = 0;
  AKA_mark("lis===3174###sois===145196###eois===145219###lif===2###soif===101###eoif===124###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_copy(LodePNGInfo*,LodePNGInfo const*)");dest->text_keys = NULL;
  AKA_mark("lis===3175###sois===145223###eois===145249###lif===3###soif===128###eoif===154###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_copy(LodePNGInfo*,LodePNGInfo const*)");dest->text_strings = NULL;
  AKA_mark("lis===3176###sois===145253###eois===145272###lif===4###soif===158###eoif===177###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_copy(LodePNGInfo*,LodePNGInfo const*)");dest->text_num = 0;
  int AKA_BLOCK_LOOP_145276 = 0;
    AKA_mark("lis===3177###sois===145280###eois===145286###lif===5###soif===185###eoif===191###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_copy(LodePNGInfo*,LodePNGInfo const*)");
for(i = 0; AKA_mark("lis===3177###sois===145287###eois===145308###lif===5###soif===192###eoif===213###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_copy(LodePNGInfo*,LodePNGInfo const*)") && (AKA_mark("lis===3177###sois===145287###eois===145308###lif===5###soif===192###eoif===213###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_copy(LodePNGInfo*,LodePNGInfo const*)") && (i != source->text_num)); ({AKA_mark("lis===3177###sois===145310###eois===145313###lif===5###soif===215###eoif===218###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_copy(LodePNGInfo*,LodePNGInfo const*)");++i;})) {
        AKA_BLOCK_LOOP_145276++;
        if (AKA_BLOCK_LOOP_145276 > 1000) {
            //break;
        }
    AKA_mark("lis===3178###sois===145322###eois===145410###lif===6###soif===227###eoif===315###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_copy(LodePNGInfo*,LodePNGInfo const*)");CERROR_TRY_RETURN(lodepng_add_text(dest, source->text_keys[i], source->text_strings[i]));
  }
  AKA_mark("lis===3180###sois===145420###eois===145429###lif===8###soif===325###eoif===334###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGText_copy(LodePNGInfo*,LodePNGInfo const*)");return 0;
}

/** Instrumented function lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t) */
static unsigned lodepng_add_text_sized(LodePNGInfo* info, const char* key, const char* str, size_t size) /* << Aka begin of function unsigned lodepng_add_text_sized(LodePNGInfo* info, const char* key, const char* str, size_t size) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_add_text_sized.145452.stub"

  AKA_mark("lis===3184###sois===145546###eois===145645###lif===1###soif===110###eoif===209###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)");char** new_keys = (char**)(lodepng_realloc(info->text_keys, sizeof(char*) * (info->text_num + 1)));
  AKA_mark("lis===3185###sois===145649###eois===145754###lif===2###soif===213###eoif===318###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)");char** new_strings = (char**)(lodepng_realloc(info->text_strings, sizeof(char*) * (info->text_num + 1)));

  if(AKA_mark("lis===3187###sois===145763###eois===145771###lif===4###soif===327###eoif===335###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)") && (AKA_mark("lis===3187###sois===145763###eois===145771###lif===4###soif===327###eoif===335###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)") && (new_keys))) {
AKA_mark("lis===3187###sois===145773###eois===145800###lif===4###soif===337###eoif===364###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)");info->text_keys = new_keys;
}

else {
AKA_mark("lis===-3187-###sois===-145763-###eois===-1457638-###lif===-4-###soif===-###eoif===-335-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)");
}
  if(AKA_mark("lis===3188###sois===145807###eois===145818###lif===5###soif===371###eoif===382###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)") && (AKA_mark("lis===3188###sois===145807###eois===145818###lif===5###soif===371###eoif===382###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)") && (new_strings))) {
AKA_mark("lis===3188###sois===145820###eois===145853###lif===5###soif===384###eoif===417###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)");info->text_strings = new_strings;
}

else {
AKA_mark("lis===-3188-###sois===-145807-###eois===-14580711-###lif===-5-###soif===-###eoif===-382-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)");
}

  if(AKA_mark("lis===3190###sois===145862###eois===145887###lif===7###soif===426###eoif===451###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)") && ((AKA_mark("lis===3190###sois===145862###eois===145871###lif===7###soif===426###eoif===435###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)") && (!new_keys)) || (AKA_mark("lis===3190###sois===145875###eois===145887###lif===7###soif===439###eoif===451###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)") && (!new_strings)))) {
AKA_mark("lis===3190###sois===145889###eois===145899###lif===7###soif===453###eoif===463###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)");return 83;
}

else {
AKA_mark("lis===-3190-###sois===-145862-###eois===-14586225-###lif===-7-###soif===-###eoif===-451-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)");
} /*alloc fail*/

  AKA_mark("lis===3192###sois===145920###eois===145937###lif===9###soif===484###eoif===501###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)");++info->text_num;
  AKA_mark("lis===3193###sois===145941###eois===145997###lif===10###soif===505###eoif===561###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)");info->text_keys[info->text_num - 1] = alloc_string(key);
  AKA_mark("lis===3194###sois===146001###eois===146072###lif===11###soif===565###eoif===636###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)");info->text_strings[info->text_num - 1] = alloc_string_sized(str, size);
  if(AKA_mark("lis===3195###sois===146079###eois===146158###lif===12###soif===643###eoif===722###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)") && ((AKA_mark("lis===3195###sois===146079###eois===146115###lif===12###soif===643###eoif===679###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)") && (!info->text_keys[info->text_num - 1])) || (AKA_mark("lis===3195###sois===146119###eois===146158###lif===12###soif===683###eoif===722###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)") && (!info->text_strings[info->text_num - 1])))) {
AKA_mark("lis===3195###sois===146160###eois===146170###lif===12###soif===724###eoif===734###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)");return 83;
}

else {
AKA_mark("lis===-3195-###sois===-146079-###eois===-14607979-###lif===-12-###soif===-###eoif===-722-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)");
} /*alloc fail*/

  AKA_mark("lis===3197###sois===146191###eois===146200###lif===14###soif===755###eoif===764###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text_sized(LodePNGInfo*,char const*,char const*,size_t)");return 0;
}

/** Instrumented function lodepng_add_text(LodePNGInfo*,char const*,char const*) */
unsigned lodepng_add_text(LodePNGInfo* info, const char* key, const char* str) /* << Aka begin of function unsigned lodepng_add_text(LodePNGInfo* info, const char* key, const char* str) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text(LodePNGInfo*,char const*,char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_add_text.146216.stub"

  AKA_mark("lis===3201###sois===146291###eois===146358###lif===1###soif===84###eoif===151###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_text(LodePNGInfo*,char const*,char const*)");return lodepng_add_text_sized(info, key, str, lodepng_strlen(str));
}

/** Instrumented function lodepng_clear_text(LodePNGInfo*) */
void lodepng_clear_text(LodePNGInfo* info) /* << Aka begin of function void lodepng_clear_text(LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_clear_text(LodePNGInfo*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_clear_text.146370.stub"

  AKA_mark("lis===3205###sois===146413###eois===146439###lif===1###soif===48###eoif===74###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_clear_text(LodePNGInfo*)");LodePNGText_cleanup(info);
}

/******************************************************************************/

/** Instrumented function LodePNGIText_init(LodePNGInfo*) */
static void LodePNGIText_init(LodePNGInfo* info) /* << Aka begin of function void LodePNGIText_init(LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_init(LodePNGInfo*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.LodePNGIText_init.146542.stub"

  AKA_mark("lis===3211###sois===146584###eois===146604###lif===1###soif===54###eoif===74###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_init(LodePNGInfo*)");info->itext_num = 0;
  AKA_mark("lis===3212###sois===146608###eois===146632###lif===2###soif===78###eoif===102###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_init(LodePNGInfo*)");info->itext_keys = NULL;
  AKA_mark("lis===3213###sois===146636###eois===146664###lif===3###soif===106###eoif===134###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_init(LodePNGInfo*)");info->itext_langtags = NULL;
  AKA_mark("lis===3214###sois===146668###eois===146697###lif===4###soif===138###eoif===167###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_init(LodePNGInfo*)");info->itext_transkeys = NULL;
  AKA_mark("lis===3215###sois===146701###eois===146728###lif===5###soif===171###eoif===198###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_init(LodePNGInfo*)");info->itext_strings = NULL;
}

/** Instrumented function LodePNGIText_cleanup(LodePNGInfo*) */
static void LodePNGIText_cleanup(LodePNGInfo* info) /* << Aka begin of function void LodePNGIText_cleanup(LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_cleanup(LodePNGInfo*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.LodePNGIText_cleanup.146747.stub"

  AKA_mark("lis===3219###sois===146792###eois===146801###lif===1###soif===57###eoif===66###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_cleanup(LodePNGInfo*)");size_t i;
  int AKA_BLOCK_LOOP_146805 = 0;
    AKA_mark("lis===3220###sois===146809###eois===146815###lif===2###soif===74###eoif===80###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_cleanup(LodePNGInfo*)");
for(i = 0; AKA_mark("lis===3220###sois===146816###eois===146836###lif===2###soif===81###eoif===101###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_cleanup(LodePNGInfo*)") && (AKA_mark("lis===3220###sois===146816###eois===146836###lif===2###soif===81###eoif===101###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_cleanup(LodePNGInfo*)") && (i != info->itext_num)); ({AKA_mark("lis===3220###sois===146838###eois===146841###lif===2###soif===103###eoif===106###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_cleanup(LodePNGInfo*)");++i;})) {
        AKA_BLOCK_LOOP_146805++;
        if (AKA_BLOCK_LOOP_146805 > 1000) {
            //break;
        }
    AKA_mark("lis===3221###sois===146850###eois===146887###lif===3###soif===115###eoif===152###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_cleanup(LodePNGInfo*)");string_cleanup(&info->itext_keys[i]);
    AKA_mark("lis===3222###sois===146893###eois===146934###lif===4###soif===158###eoif===199###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_cleanup(LodePNGInfo*)");string_cleanup(&info->itext_langtags[i]);
    AKA_mark("lis===3223###sois===146940###eois===146982###lif===5###soif===205###eoif===247###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_cleanup(LodePNGInfo*)");string_cleanup(&info->itext_transkeys[i]);
    AKA_mark("lis===3224###sois===146988###eois===147028###lif===6###soif===253###eoif===293###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_cleanup(LodePNGInfo*)");string_cleanup(&info->itext_strings[i]);
  }
  AKA_mark("lis===3226###sois===147037###eois===147068###lif===8###soif===302###eoif===333###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_cleanup(LodePNGInfo*)");lodepng_free(info->itext_keys);
  AKA_mark("lis===3227###sois===147072###eois===147107###lif===9###soif===337###eoif===372###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_cleanup(LodePNGInfo*)");lodepng_free(info->itext_langtags);
  AKA_mark("lis===3228###sois===147111###eois===147147###lif===10###soif===376###eoif===412###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_cleanup(LodePNGInfo*)");lodepng_free(info->itext_transkeys);
  AKA_mark("lis===3229###sois===147151###eois===147185###lif===11###soif===416###eoif===450###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_cleanup(LodePNGInfo*)");lodepng_free(info->itext_strings);
}

/** Instrumented function LodePNGIText_copy(LodePNGInfo*,LodePNGInfo const*) */
static unsigned LodePNGIText_copy(LodePNGInfo* dest, const LodePNGInfo* source) /* << Aka begin of function unsigned LodePNGIText_copy(LodePNGInfo* dest, const LodePNGInfo* source) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_copy(LodePNGInfo*,LodePNGInfo const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.LodePNGIText_copy.147208.stub"

  AKA_mark("lis===3233###sois===147277###eois===147290###lif===1###soif===85###eoif===98###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_copy(LodePNGInfo*,LodePNGInfo const*)");size_t i = 0;
  AKA_mark("lis===3234###sois===147294###eois===147318###lif===2###soif===102###eoif===126###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_copy(LodePNGInfo*,LodePNGInfo const*)");dest->itext_keys = NULL;
  AKA_mark("lis===3235###sois===147322###eois===147350###lif===3###soif===130###eoif===158###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_copy(LodePNGInfo*,LodePNGInfo const*)");dest->itext_langtags = NULL;
  AKA_mark("lis===3236###sois===147354###eois===147383###lif===4###soif===162###eoif===191###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_copy(LodePNGInfo*,LodePNGInfo const*)");dest->itext_transkeys = NULL;
  AKA_mark("lis===3237###sois===147387###eois===147414###lif===5###soif===195###eoif===222###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_copy(LodePNGInfo*,LodePNGInfo const*)");dest->itext_strings = NULL;
  AKA_mark("lis===3238###sois===147418###eois===147438###lif===6###soif===226###eoif===246###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_copy(LodePNGInfo*,LodePNGInfo const*)");dest->itext_num = 0;
  int AKA_BLOCK_LOOP_147442 = 0;
    AKA_mark("lis===3239###sois===147446###eois===147452###lif===7###soif===254###eoif===260###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_copy(LodePNGInfo*,LodePNGInfo const*)");
for(i = 0; AKA_mark("lis===3239###sois===147453###eois===147475###lif===7###soif===261###eoif===283###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_copy(LodePNGInfo*,LodePNGInfo const*)") && (AKA_mark("lis===3239###sois===147453###eois===147475###lif===7###soif===261###eoif===283###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_copy(LodePNGInfo*,LodePNGInfo const*)") && (i != source->itext_num)); ({AKA_mark("lis===3239###sois===147477###eois===147480###lif===7###soif===285###eoif===288###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_copy(LodePNGInfo*,LodePNGInfo const*)");++i;})) {
        AKA_BLOCK_LOOP_147442++;
        if (AKA_BLOCK_LOOP_147442 > 1000) {
            //break;
        }
    AKA_mark("lis===3240###sois===147489###eois===147676###lif===8###soif===297###eoif===484###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_copy(LodePNGInfo*,LodePNGInfo const*)");CERROR_TRY_RETURN(lodepng_add_itext(dest, source->itext_keys[i], source->itext_langtags[i],
                                        source->itext_transkeys[i], source->itext_strings[i]));
  }
  AKA_mark("lis===3243###sois===147686###eois===147695###lif===11###soif===494###eoif===503###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\LodePNGIText_copy(LodePNGInfo*,LodePNGInfo const*)");return 0;
}

/** Instrumented function lodepng_clear_itext(LodePNGInfo*) */
void lodepng_clear_itext(LodePNGInfo* info) /* << Aka begin of function void lodepng_clear_itext(LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_clear_itext(LodePNGInfo*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_clear_itext.147707.stub"

  AKA_mark("lis===3247###sois===147751###eois===147778###lif===1###soif===49###eoif===76###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_clear_itext(LodePNGInfo*)");LodePNGIText_cleanup(info);
}

/** Instrumented function lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t) */
static unsigned lodepng_add_itext_sized(LodePNGInfo* info, const char* key, const char* langtag,
                                        const char* transkey, const char* str, size_t size) /* << Aka begin of function unsigned lodepng_add_itext_sized(LodePNGInfo* info, const char* key, const char* langtag,
                                        const char* transkey, const char* str, size_t size) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_add_itext_sized.147801.stub"

  AKA_mark("lis===3252###sois===147980###eois===148081###lif===2###soif===195###eoif===296###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");char** new_keys = (char**)(lodepng_realloc(info->itext_keys, sizeof(char*) * (info->itext_num + 1)));
  AKA_mark("lis===3253###sois===148085###eois===148194###lif===3###soif===300###eoif===409###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");char** new_langtags = (char**)(lodepng_realloc(info->itext_langtags, sizeof(char*) * (info->itext_num + 1)));
  AKA_mark("lis===3254###sois===148198###eois===148309###lif===4###soif===413###eoif===524###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");char** new_transkeys = (char**)(lodepng_realloc(info->itext_transkeys, sizeof(char*) * (info->itext_num + 1)));
  AKA_mark("lis===3255###sois===148313###eois===148420###lif===5###soif===528###eoif===635###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");char** new_strings = (char**)(lodepng_realloc(info->itext_strings, sizeof(char*) * (info->itext_num + 1)));

  if(AKA_mark("lis===3257###sois===148429###eois===148437###lif===7###soif===644###eoif===652###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)") && (AKA_mark("lis===3257###sois===148429###eois===148437###lif===7###soif===644###eoif===652###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)") && (new_keys))) {
AKA_mark("lis===3257###sois===148439###eois===148467###lif===7###soif===654###eoif===682###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");info->itext_keys = new_keys;
}

else {
AKA_mark("lis===-3257-###sois===-148429-###eois===-1484298-###lif===-7-###soif===-###eoif===-652-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");
}
  if(AKA_mark("lis===3258###sois===148474###eois===148486###lif===8###soif===689###eoif===701###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)") && (AKA_mark("lis===3258###sois===148474###eois===148486###lif===8###soif===689###eoif===701###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)") && (new_langtags))) {
AKA_mark("lis===3258###sois===148488###eois===148524###lif===8###soif===703###eoif===739###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");info->itext_langtags = new_langtags;
}

else {
AKA_mark("lis===-3258-###sois===-148474-###eois===-14847412-###lif===-8-###soif===-###eoif===-701-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");
}
  if(AKA_mark("lis===3259###sois===148531###eois===148544###lif===9###soif===746###eoif===759###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)") && (AKA_mark("lis===3259###sois===148531###eois===148544###lif===9###soif===746###eoif===759###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)") && (new_transkeys))) {
AKA_mark("lis===3259###sois===148546###eois===148584###lif===9###soif===761###eoif===799###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");info->itext_transkeys = new_transkeys;
}

else {
AKA_mark("lis===-3259-###sois===-148531-###eois===-14853113-###lif===-9-###soif===-###eoif===-759-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");
}
  if(AKA_mark("lis===3260###sois===148591###eois===148602###lif===10###soif===806###eoif===817###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)") && (AKA_mark("lis===3260###sois===148591###eois===148602###lif===10###soif===806###eoif===817###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)") && (new_strings))) {
AKA_mark("lis===3260###sois===148604###eois===148638###lif===10###soif===819###eoif===853###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");info->itext_strings = new_strings;
}

else {
AKA_mark("lis===-3260-###sois===-148591-###eois===-14859111-###lif===-10-###soif===-###eoif===-817-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");
}

  if(AKA_mark("lis===3262###sois===148647###eois===148707###lif===12###soif===862###eoif===922###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)") && ((((AKA_mark("lis===3262###sois===148647###eois===148656###lif===12###soif===862###eoif===871###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)") && (!new_keys)) || (AKA_mark("lis===3262###sois===148660###eois===148673###lif===12###soif===875###eoif===888###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)") && (!new_langtags))) || (AKA_mark("lis===3262###sois===148677###eois===148691###lif===12###soif===892###eoif===906###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)") && (!new_transkeys))) || (AKA_mark("lis===3262###sois===148695###eois===148707###lif===12###soif===910###eoif===922###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)") && (!new_strings)))) {
AKA_mark("lis===3262###sois===148709###eois===148719###lif===12###soif===924###eoif===934###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");return 83;
}

else {
AKA_mark("lis===-3262-###sois===-148647-###eois===-14864760-###lif===-12-###soif===-###eoif===-922-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");
} /*alloc fail*/

  AKA_mark("lis===3264###sois===148740###eois===148758###lif===14###soif===955###eoif===973###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");++info->itext_num;

  AKA_mark("lis===3266###sois===148764###eois===148822###lif===16###soif===979###eoif===1037###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");info->itext_keys[info->itext_num - 1] = alloc_string(key);
  AKA_mark("lis===3267###sois===148826###eois===148892###lif===17###soif===1041###eoif===1107###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");info->itext_langtags[info->itext_num - 1] = alloc_string(langtag);
  AKA_mark("lis===3268###sois===148896###eois===148964###lif===18###soif===1111###eoif===1179###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");info->itext_transkeys[info->itext_num - 1] = alloc_string(transkey);
  AKA_mark("lis===3269###sois===148968###eois===149041###lif===19###soif===1183###eoif===1256###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");info->itext_strings[info->itext_num - 1] = alloc_string_sized(str, size);

  AKA_mark("lis===3271###sois===149047###eois===149056###lif===21###soif===1262###eoif===1271###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext_sized(LodePNGInfo*,char const*,char const*,char const*,char const*,size_t)");return 0;
}

/** Instrumented function lodepng_add_itext(LodePNGInfo*,char const*,char const*,char const*,char const*) */
unsigned lodepng_add_itext(LodePNGInfo* info, const char* key, const char* langtag,
                           const char* transkey, const char* str) /* << Aka begin of function unsigned lodepng_add_itext(LodePNGInfo* info, const char* key, const char* langtag,
                           const char* transkey, const char* str) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext(LodePNGInfo*,char const*,char const*,char const*,char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_add_itext.149072.stub"

  AKA_mark("lis===3276###sois===149219###eois===149306###lif===2###soif===156###eoif===243###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_add_itext(LodePNGInfo*,char const*,char const*,char const*,char const*)");return lodepng_add_itext_sized(info, key, langtag, transkey, str, lodepng_strlen(str));
}

/** Instrumented function lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned) */
unsigned lodepng_set_icc(LodePNGInfo* info, const char* name, const unsigned char* profile, unsigned profile_size) /* << Aka begin of function unsigned lodepng_set_icc(LodePNGInfo* info, const char* name, const unsigned char* profile, unsigned profile_size) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_set_icc.149322.stub"

  if(AKA_mark("lis===3280###sois===149436###eois===149454###lif===1###soif===123###eoif===141###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)") && (AKA_mark("lis===3280###sois===149436###eois===149454###lif===1###soif===123###eoif===141###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)") && (info->iccp_defined))) {
AKA_mark("lis===3280###sois===149456###eois===149480###lif===1###soif===143###eoif===167###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)");lodepng_clear_icc(info);
}

else {
AKA_mark("lis===-3280-###sois===-149436-###eois===-14943618-###lif===-1-###soif===-###eoif===-141-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)");
}

  if(AKA_mark("lis===3282###sois===149489###eois===149506###lif===3###soif===176###eoif===193###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)") && (AKA_mark("lis===3282###sois===149489###eois===149506###lif===3###soif===176###eoif===193###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)") && (profile_size == 0))) {
AKA_mark("lis===3282###sois===149508###eois===149519###lif===3###soif===195###eoif===206###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)");return 100;
}

else {
AKA_mark("lis===-3282-###sois===-149489-###eois===-14948917-###lif===-3-###soif===-###eoif===-193-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)");
} /*invalid ICC profile size*/

  AKA_mark("lis===3284###sois===149554###eois===149591###lif===5###soif===241###eoif===278###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)");info->iccp_name = alloc_string(name);
  if(AKA_mark("lis===3285###sois===149598###eois===149614###lif===6###soif===285###eoif===301###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)") && (AKA_mark("lis===3285###sois===149598###eois===149614###lif===6###soif===285###eoif===301###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)") && (!info->iccp_name))) {
AKA_mark("lis===3285###sois===149616###eois===149626###lif===6###soif===303###eoif===313###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)");return 83;
}

else {
AKA_mark("lis===-3285-###sois===-149598-###eois===-14959816-###lif===-6-###soif===-###eoif===-301-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)");
} /*alloc fail*/

  AKA_mark("lis===3287###sois===149647###eois===149713###lif===8###soif===334###eoif===400###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)");info->iccp_profile = (unsigned char*)lodepng_malloc(profile_size);
  if(AKA_mark("lis===3288###sois===149720###eois===149739###lif===9###soif===407###eoif===426###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)") && (AKA_mark("lis===3288###sois===149720###eois===149739###lif===9###soif===407###eoif===426###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)") && (!info->iccp_profile))) {
    AKA_mark("lis===3289###sois===149748###eois===149778###lif===10###soif===435###eoif===465###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)");lodepng_free(info->iccp_name);
    AKA_mark("lis===3290###sois===149784###eois===149794###lif===11###soif===471###eoif===481###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)");return 83; /*alloc fail*/
  }
else {
AKA_mark("lis===-3288-###sois===-149720-###eois===-14972019-###lif===-9-###soif===-###eoif===-426-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)");
}

  AKA_mark("lis===3293###sois===149820###eois===149878###lif===14###soif===507###eoif===565###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)");lodepng_memcpy(info->iccp_profile, profile, profile_size);
  AKA_mark("lis===3294###sois===149882###eois===149921###lif===15###soif===569###eoif===608###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)");info->iccp_profile_size = profile_size;
  AKA_mark("lis===3295###sois===149925###eois===149948###lif===16###soif===612###eoif===635###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)");info->iccp_defined = 1;

  AKA_mark("lis===3297###sois===149954###eois===149963###lif===18###soif===641###eoif===650###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_icc(LodePNGInfo*,char const*,unsigned char const*,unsigned)");return 0; /*ok*/
}

/** Instrumented function lodepng_clear_icc(LodePNGInfo*) */
void lodepng_clear_icc(LodePNGInfo* info) /* << Aka begin of function void lodepng_clear_icc(LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_clear_icc(LodePNGInfo*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_clear_icc.149982.stub"

  AKA_mark("lis===3301###sois===150024###eois===150057###lif===1###soif===47###eoif===80###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_clear_icc(LodePNGInfo*)");string_cleanup(&info->iccp_name);
  AKA_mark("lis===3302###sois===150061###eois===150094###lif===2###soif===84###eoif===117###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_clear_icc(LodePNGInfo*)");lodepng_free(info->iccp_profile);
  AKA_mark("lis===3303###sois===150098###eois===150124###lif===3###soif===121###eoif===147###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_clear_icc(LodePNGInfo*)");info->iccp_profile = NULL;
  AKA_mark("lis===3304###sois===150128###eois===150156###lif===4###soif===151###eoif===179###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_clear_icc(LodePNGInfo*)");info->iccp_profile_size = 0;
  AKA_mark("lis===3305###sois===150160###eois===150183###lif===5###soif===183###eoif===206###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_clear_icc(LodePNGInfo*)");info->iccp_defined = 0;
}

/** Instrumented function lodepng_set_exif(LodePNGInfo*,unsigned char const*,unsigned) */
unsigned lodepng_set_exif(LodePNGInfo* info, const unsigned char* exif, unsigned exif_size) /* << Aka begin of function unsigned lodepng_set_exif(LodePNGInfo* info, const unsigned char* exif, unsigned exif_size) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_exif(LodePNGInfo*,unsigned char const*,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_set_exif.150199.stub"

  if(AKA_mark("lis===3309###sois===150290###eois===150308###lif===1###soif===100###eoif===118###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_exif(LodePNGInfo*,unsigned char const*,unsigned)") && (AKA_mark("lis===3309###sois===150290###eois===150308###lif===1###soif===100###eoif===118###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_exif(LodePNGInfo*,unsigned char const*,unsigned)") && (info->exif_defined))) {
AKA_mark("lis===3309###sois===150310###eois===150335###lif===1###soif===120###eoif===145###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_exif(LodePNGInfo*,unsigned char const*,unsigned)");lodepng_clear_exif(info);
}

else {
AKA_mark("lis===-3309-###sois===-150290-###eois===-15029018-###lif===-1-###soif===-###eoif===-118-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_exif(LodePNGInfo*,unsigned char const*,unsigned)");
}
  AKA_mark("lis===3310###sois===150339###eois===150394###lif===2###soif===149###eoif===204###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_exif(LodePNGInfo*,unsigned char const*,unsigned)");info->exif = (unsigned char*)lodepng_malloc(exif_size);

  if(AKA_mark("lis===3312###sois===150403###eois===150414###lif===4###soif===213###eoif===224###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_exif(LodePNGInfo*,unsigned char const*,unsigned)") && (AKA_mark("lis===3312###sois===150403###eois===150414###lif===4###soif===213###eoif===224###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_exif(LodePNGInfo*,unsigned char const*,unsigned)") && (!info->exif))) {
AKA_mark("lis===3312###sois===150416###eois===150426###lif===4###soif===226###eoif===236###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_exif(LodePNGInfo*,unsigned char const*,unsigned)");return 83;
}

else {
AKA_mark("lis===-3312-###sois===-150403-###eois===-15040311-###lif===-4-###soif===-###eoif===-224-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_exif(LodePNGInfo*,unsigned char const*,unsigned)");
} /*alloc fail*/

  AKA_mark("lis===3314###sois===150447###eois===150491###lif===6###soif===257###eoif===301###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_exif(LodePNGInfo*,unsigned char const*,unsigned)");lodepng_memcpy(info->exif, exif, exif_size);
  AKA_mark("lis===3315###sois===150495###eois===150523###lif===7###soif===305###eoif===333###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_exif(LodePNGInfo*,unsigned char const*,unsigned)");info->exif_size = exif_size;
  AKA_mark("lis===3316###sois===150527###eois===150550###lif===8###soif===337###eoif===360###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_exif(LodePNGInfo*,unsigned char const*,unsigned)");info->exif_defined = 1;

  AKA_mark("lis===3318###sois===150556###eois===150565###lif===10###soif===366###eoif===375###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_set_exif(LodePNGInfo*,unsigned char const*,unsigned)");return 0; /*ok*/
}

/** Instrumented function lodepng_clear_exif(LodePNGInfo*) */
void lodepng_clear_exif(LodePNGInfo* info) /* << Aka begin of function void lodepng_clear_exif(LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_clear_exif(LodePNGInfo*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_clear_exif.150584.stub"

  AKA_mark("lis===3322###sois===150627###eois===150652###lif===1###soif===48###eoif===73###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_clear_exif(LodePNGInfo*)");lodepng_free(info->exif);
  AKA_mark("lis===3323###sois===150656###eois===150674###lif===2###soif===77###eoif===95###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_clear_exif(LodePNGInfo*)");info->exif = NULL;
  AKA_mark("lis===3324###sois===150678###eois===150698###lif===3###soif===99###eoif===119###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_clear_exif(LodePNGInfo*)");info->exif_size = 0;
  AKA_mark("lis===3325###sois===150702###eois===150725###lif===4###soif===123###eoif===146###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_clear_exif(LodePNGInfo*)");info->exif_defined = 0;
}
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/

/** Instrumented function lodepng_info_init(LodePNGInfo*) */
void lodepng_info_init(LodePNGInfo* info) /* << Aka begin of function void lodepng_info_init(LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_info_init.150782.stub"

  AKA_mark("lis===3330###sois===150824###eois===150862###lif===1###soif===47###eoif===85###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");lodepng_color_mode_init(&info->color);
  AKA_mark("lis===3331###sois===150866###eois===150893###lif===2###soif===89###eoif===116###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->interlace_method = 0;
  AKA_mark("lis===3332###sois===150897###eois===150926###lif===3###soif===120###eoif===149###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->compression_method = 0;
  AKA_mark("lis===3333###sois===150930###eois===150954###lif===4###soif===153###eoif===177###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->filter_method = 0;
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
  AKA_mark("lis===3335###sois===150999###eois===151028###lif===6###soif===222###eoif===251###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->background_defined = 0;
  AKA_mark("lis===3336###sois===151032###eois===151097###lif===7###soif===255###eoif===320###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->background_r = info->background_g = info->background_b = 0;

  AKA_mark("lis===3338###sois===151103###eois===151126###lif===9###soif===326###eoif===349###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");LodePNGText_init(info);
  AKA_mark("lis===3339###sois===151130###eois===151154###lif===10###soif===353###eoif===377###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");LodePNGIText_init(info);

  AKA_mark("lis===3341###sois===151160###eois===151183###lif===12###soif===383###eoif===406###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->time_defined = 0;
  AKA_mark("lis===3342###sois===151187###eois===151210###lif===13###soif===410###eoif===433###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->phys_defined = 0;

  AKA_mark("lis===3344###sois===151216###eois===151239###lif===15###soif===439###eoif===462###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->gama_defined = 0;
  AKA_mark("lis===3345###sois===151243###eois===151266###lif===16###soif===466###eoif===489###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->chrm_defined = 0;
  AKA_mark("lis===3346###sois===151270###eois===151293###lif===17###soif===493###eoif===516###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->srgb_defined = 0;
  AKA_mark("lis===3347###sois===151297###eois===151320###lif===18###soif===520###eoif===543###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->iccp_defined = 0;
  AKA_mark("lis===3348###sois===151324###eois===151347###lif===19###soif===547###eoif===570###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->iccp_name = NULL;
  AKA_mark("lis===3349###sois===151351###eois===151377###lif===20###soif===574###eoif===600###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->iccp_profile = NULL;
  AKA_mark("lis===3350###sois===151381###eois===151404###lif===21###soif===604###eoif===627###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->cicp_defined = 0;
  AKA_mark("lis===3351###sois===151408###eois===151439###lif===22###soif===631###eoif===662###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->cicp_color_primaries = 0;
  AKA_mark("lis===3352###sois===151443###eois===151476###lif===23###soif===666###eoif===699###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->cicp_transfer_function = 0;
  AKA_mark("lis===3353###sois===151480###eois===151515###lif===24###soif===703###eoif===738###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->cicp_matrix_coefficients = 0;
  AKA_mark("lis===3354###sois===151519###eois===151556###lif===25###soif===742###eoif===779###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->cicp_video_full_range_flag = 0;
  AKA_mark("lis===3355###sois===151560###eois===151583###lif===26###soif===783###eoif===806###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->mdcv_defined = 0;
  AKA_mark("lis===3356###sois===151587###eois===151608###lif===27###soif===810###eoif===831###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->mdcv_red_x = 0;
  AKA_mark("lis===3357###sois===151612###eois===151633###lif===28###soif===835###eoif===856###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->mdcv_red_y = 0;
  AKA_mark("lis===3358###sois===151637###eois===151660###lif===29###soif===860###eoif===883###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->mdcv_green_x = 0;
  AKA_mark("lis===3359###sois===151664###eois===151687###lif===30###soif===887###eoif===910###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->mdcv_green_y = 0;
  AKA_mark("lis===3360###sois===151691###eois===151713###lif===31###soif===914###eoif===936###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->mdcv_blue_x = 0;
  AKA_mark("lis===3361###sois===151717###eois===151739###lif===32###soif===940###eoif===962###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->mdcv_blue_y = 0;
  AKA_mark("lis===3362###sois===151743###eois===151766###lif===33###soif===966###eoif===989###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->mdcv_white_x = 0;
  AKA_mark("lis===3363###sois===151770###eois===151793###lif===34###soif===993###eoif===1016###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->mdcv_white_y = 0;
  AKA_mark("lis===3364###sois===151797###eois===151826###lif===35###soif===1020###eoif===1049###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->mdcv_max_luminance = 0;
  AKA_mark("lis===3365###sois===151830###eois===151859###lif===36###soif===1053###eoif===1082###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->mdcv_min_luminance = 0;
  AKA_mark("lis===3366###sois===151863###eois===151886###lif===37###soif===1086###eoif===1109###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->clli_defined = 0;
  AKA_mark("lis===3367###sois===151890###eois===151913###lif===38###soif===1113###eoif===1136###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->clli_max_cll = 0;
  AKA_mark("lis===3368###sois===151917###eois===151941###lif===39###soif===1140###eoif===1164###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->clli_max_fall = 0;

  AKA_mark("lis===3370###sois===151947###eois===151970###lif===41###soif===1170###eoif===1193###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->exif_defined = 0;
  AKA_mark("lis===3371###sois===151974###eois===151992###lif===42###soif===1197###eoif===1215###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->exif = NULL;
  AKA_mark("lis===3372###sois===151996###eois===152016###lif===43###soif===1219###eoif===1239###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->exif_size = 0;

  AKA_mark("lis===3374###sois===152022###eois===152045###lif===45###soif===1245###eoif===1268###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->sbit_defined = 0;
  AKA_mark("lis===3375###sois===152049###eois===152111###lif===46###soif===1272###eoif===1334###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");info->sbit_r = info->sbit_g = info->sbit_b = info->sbit_a = 0;

  AKA_mark("lis===3377###sois===152117###eois===152149###lif===48###soif===1340###eoif===1372###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_init(LodePNGInfo*)");LodePNGUnknownChunks_init(info);
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
}

/** Instrumented function lodepng_info_cleanup(LodePNGInfo*) */
void lodepng_info_cleanup(LodePNGInfo* info) /* << Aka begin of function void lodepng_info_cleanup(LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_cleanup(LodePNGInfo*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_info_cleanup.152206.stub"

  AKA_mark("lis===3382###sois===152251###eois===152292###lif===1###soif===50###eoif===91###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_cleanup(LodePNGInfo*)");lodepng_color_mode_cleanup(&info->color);
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
  AKA_mark("lis===3384###sois===152337###eois===152363###lif===3###soif===136###eoif===162###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_cleanup(LodePNGInfo*)");LodePNGText_cleanup(info);
  AKA_mark("lis===3385###sois===152367###eois===152394###lif===4###soif===166###eoif===193###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_cleanup(LodePNGInfo*)");LodePNGIText_cleanup(info);

  AKA_mark("lis===3387###sois===152400###eois===152424###lif===6###soif===199###eoif===223###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_cleanup(LodePNGInfo*)");lodepng_clear_icc(info);
  AKA_mark("lis===3388###sois===152428###eois===152453###lif===7###soif===227###eoif===252###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_cleanup(LodePNGInfo*)");lodepng_clear_exif(info);

  AKA_mark("lis===3390###sois===152459###eois===152494###lif===9###soif===258###eoif===293###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_cleanup(LodePNGInfo*)");LodePNGUnknownChunks_cleanup(info);
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
}

/** Instrumented function lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*) */
unsigned lodepng_info_copy(LodePNGInfo* dest, const LodePNGInfo* source) /* << Aka begin of function unsigned lodepng_info_copy(LodePNGInfo* dest, const LodePNGInfo* source) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_info_copy.152555.stub"

  AKA_mark("lis===3395###sois===152624###eois===152651###lif===1###soif===78###eoif===105###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*)");lodepng_info_cleanup(dest);
  AKA_mark("lis===3396###sois===152655###eois===152705###lif===2###soif===109###eoif===159###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*)");lodepng_memcpy(dest, source, sizeof(LodePNGInfo));
  AKA_mark("lis===3397###sois===152709###eois===152747###lif===3###soif===163###eoif===201###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*)");lodepng_color_mode_init(&dest->color);
  AKA_mark("lis===3398###sois===152751###eois===152823###lif===4###soif===205###eoif===277###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*)");CERROR_TRY_RETURN(lodepng_color_mode_copy(&dest->color, &source->color));

#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
  AKA_mark("lis===3401###sois===152871###eois===152920###lif===7###soif===325###eoif===374###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*)");CERROR_TRY_RETURN(LodePNGText_copy(dest, source));
  AKA_mark("lis===3402###sois===152925###eois===152975###lif===8###soif===379###eoif===429###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*)");CERROR_TRY_RETURN(LodePNGIText_copy(dest, source));
  if(AKA_mark("lis===3403###sois===152983###eois===153003###lif===9###soif===437###eoif===457###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*)") && (AKA_mark("lis===3403###sois===152983###eois===153003###lif===9###soif===437###eoif===457###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*)") && (source->iccp_defined))) {
    AKA_mark("lis===3404###sois===153012###eois===153035###lif===10###soif===466###eoif===489###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*)");dest->iccp_defined = 0; /*the memcpy above set this to 1 while it shouldn't*/
    AKA_mark("lis===3405###sois===153095###eois===153203###lif===11###soif===549###eoif===657###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*)");CERROR_TRY_RETURN(lodepng_set_icc(dest, source->iccp_name, source->iccp_profile, source->iccp_profile_size));
  }
else {
AKA_mark("lis===-3403-###sois===-152983-###eois===-15298320-###lif===-9-###soif===-###eoif===-457-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*)");
}
  if(AKA_mark("lis===3407###sois===153216###eois===153236###lif===13###soif===670###eoif===690###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*)") && (AKA_mark("lis===3407###sois===153216###eois===153236###lif===13###soif===670###eoif===690###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*)") && (source->exif_defined))) {
    AKA_mark("lis===3408###sois===153245###eois===153268###lif===14###soif===699###eoif===722###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*)");dest->exif_defined = 0; /*the memcpy above set this to 1 while it shouldn't*/
    AKA_mark("lis===3409###sois===153328###eois===153402###lif===15###soif===782###eoif===856###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*)");CERROR_TRY_RETURN(lodepng_set_exif(dest, source->exif, source->exif_size));
  }
else {
AKA_mark("lis===-3407-###sois===-153216-###eois===-15321620-###lif===-13-###soif===-###eoif===-690-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*)");
}

  AKA_mark("lis===3412###sois===153414###eois===153446###lif===18###soif===868###eoif===900###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*)");LodePNGUnknownChunks_init(dest);
  AKA_mark("lis===3413###sois===153450###eois===153508###lif===19###soif===904###eoif===962###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*)");CERROR_TRY_RETURN(LodePNGUnknownChunks_copy(dest, source));
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
  AKA_mark("lis===3415###sois===153558###eois===153567###lif===21###soif===1012###eoif===1021###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_info_copy(LodePNGInfo*,LodePNGInfo const*)");return 0;
}

/* ////////////////////////////////////////////////////////////////////////// */

/*index: bitgroup index, bits: bitgroup size(1, 2 or 4), in: bitgroup value, out: octet array to add bits to*/
/** Instrumented function addColorBits(unsigned char*,size_t,unsigned,unsigned) */
static void addColorBits(unsigned char* out, size_t index, unsigned bits, unsigned in) /* << Aka begin of function void addColorBits(unsigned char* out, size_t index, unsigned bits, unsigned in) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addColorBits(unsigned char*,size_t,unsigned,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addColorBits.153782.stub"

  AKA_mark("lis===3422###sois===153862###eois===153909###lif===1###soif===92###eoif===139###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addColorBits(unsigned char*,size_t,unsigned,unsigned)");unsigned m = bits == 1 ? 7 : bits == 2 ? 3 : 1; /*8 / bits - 1*/
  /*p = the partial index in the byte, e.g. with 4 palettebits it is 0 for first half or 1 for second half*/
  AKA_mark("lis===3424###sois===154040###eois===154063###lif===3###soif===270###eoif===293###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addColorBits(unsigned char*,size_t,unsigned,unsigned)");unsigned p = index & m;
  AKA_mark("lis===3425###sois===154067###eois===154091###lif===4###soif===297###eoif===321###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addColorBits(unsigned char*,size_t,unsigned,unsigned)");in &= (1u << bits) - 1u; /*filter out any other bits of the input value*/
  AKA_mark("lis===3426###sois===154144###eois===154172###lif===5###soif===374###eoif===402###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addColorBits(unsigned char*,size_t,unsigned,unsigned)");in = in << (bits * (m - p));
  if(AKA_mark("lis===3427###sois===154179###eois===154185###lif===6###soif===409###eoif===415###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addColorBits(unsigned char*,size_t,unsigned,unsigned)") && (AKA_mark("lis===3427###sois===154179###eois===154185###lif===6###soif===409###eoif===415###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addColorBits(unsigned char*,size_t,unsigned,unsigned)") && (p == 0))) {
AKA_mark("lis===3427###sois===154187###eois===154215###lif===6###soif===417###eoif===445###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addColorBits(unsigned char*,size_t,unsigned,unsigned)");out[index * bits / 8u] = in;
}

  else {
AKA_mark("lis===3428###sois===154224###eois===154253###lif===7###soif===454###eoif===483###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addColorBits(unsigned char*,size_t,unsigned,unsigned)");out[index * bits / 8u] |= in;
}

}

typedef struct ColorTree ColorTree;

/*
One node of a color tree
This is the data structure used to count the number of unique colors and to get a palette
index for a color. It's like an octree, but because the alpha channel is used too, each
node has 16 instead of 8 children.
*/
struct ColorTree {
  ColorTree* children[16]; /*up to 16 pointers to ColorTree of next level*/
  int index; /*the payload. Only has a meaningful value if this is in the last level*/
};

/** Instrumented function color_tree_init(ColorTree*) */
static void color_tree_init(ColorTree* tree) /* << Aka begin of function void color_tree_init(ColorTree* tree) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_init(ColorTree*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.color_tree_init.154752.stub"

  AKA_mark("lis===3445###sois===154790###eois===154854###lif===1###soif===50###eoif===114###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_init(ColorTree*)");lodepng_memset(tree->children, 0, 16 * sizeof(*tree->children));
  AKA_mark("lis===3446###sois===154858###eois===154875###lif===2###soif===118###eoif===135###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_init(ColorTree*)");tree->index = -1;
}

/** Instrumented function color_tree_cleanup(ColorTree*) */
static void color_tree_cleanup(ColorTree* tree) /* << Aka begin of function void color_tree_cleanup(ColorTree* tree) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_cleanup(ColorTree*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.color_tree_cleanup.154894.stub"

  AKA_mark("lis===3450###sois===154935###eois===154941###lif===1###soif===53###eoif===59###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_cleanup(ColorTree*)");int i;
  int AKA_BLOCK_LOOP_154945 = 0;
    AKA_mark("lis===3451###sois===154949###eois===154955###lif===2###soif===67###eoif===73###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_cleanup(ColorTree*)");
for(i = 0; AKA_mark("lis===3451###sois===154956###eois===154963###lif===2###soif===74###eoif===81###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_cleanup(ColorTree*)") && (AKA_mark("lis===3451###sois===154956###eois===154963###lif===2###soif===74###eoif===81###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_cleanup(ColorTree*)") && (i != 16)); ({AKA_mark("lis===3451###sois===154965###eois===154968###lif===2###soif===83###eoif===86###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_cleanup(ColorTree*)");++i;})) {
        AKA_BLOCK_LOOP_154945++;
        if (AKA_BLOCK_LOOP_154945 > 1000) {
            //break;
        }
    if(AKA_mark("lis===3452###sois===154980###eois===154997###lif===3###soif===98###eoif===115###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_cleanup(ColorTree*)") && (AKA_mark("lis===3452###sois===154980###eois===154997###lif===3###soif===98###eoif===115###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_cleanup(ColorTree*)") && (tree->children[i]))) {
      AKA_mark("lis===3453###sois===155008###eois===155046###lif===4###soif===126###eoif===164###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_cleanup(ColorTree*)");color_tree_cleanup(tree->children[i]);
      AKA_mark("lis===3454###sois===155054###eois===155086###lif===5###soif===172###eoif===204###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_cleanup(ColorTree*)");lodepng_free(tree->children[i]);
    }
else {
AKA_mark("lis===-3452-###sois===-154980-###eois===-15498017-###lif===-3-###soif===-###eoif===-115-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_cleanup(ColorTree*)");
}
  }
}

/*returns -1 if color not present, its index otherwise*/
/** Instrumented function color_tree_get(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char) */
static int color_tree_get(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a) /* << Aka begin of function int color_tree_get(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_get(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.color_tree_get.155174.stub"

  AKA_mark("lis===3461###sois===155279###eois===155291###lif===1###soif===116###eoif===128###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_get(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");int bit = 0;
  int AKA_BLOCK_LOOP_155295 = 0;
    AKA_mark("lis===3462###sois===155299###eois===155307###lif===2###soif===136###eoif===144###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_get(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");
for(bit = 0; AKA_mark("lis===3462###sois===155308###eois===155315###lif===2###soif===145###eoif===152###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_get(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (AKA_mark("lis===3462###sois===155308###eois===155315###lif===2###soif===145###eoif===152###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_get(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (bit < 8)); ({AKA_mark("lis===3462###sois===155317###eois===155322###lif===2###soif===154###eoif===159###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_get(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");++bit;})) {
        AKA_BLOCK_LOOP_155295++;
        if (AKA_BLOCK_LOOP_155295 > 1000) {
            //break;
        }
    AKA_mark("lis===3463###sois===155331###eois===155429###lif===3###soif===168###eoif===266###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_get(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
    if(AKA_mark("lis===3464###sois===155438###eois===155456###lif===4###soif===275###eoif===293###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_get(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (AKA_mark("lis===3464###sois===155438###eois===155456###lif===4###soif===275###eoif===293###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_get(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (!tree->children[i]))) {
AKA_mark("lis===3464###sois===155458###eois===155468###lif===4###soif===295###eoif===305###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_get(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");return -1;
}

    else {
AKA_mark("lis===3465###sois===155479###eois===155504###lif===5###soif===316###eoif===341###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_get(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");tree = tree->children[i];
}

  }
  AKA_mark("lis===3467###sois===155513###eois===155544###lif===7###soif===350###eoif===381###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_get(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");return tree ? tree->index : -1;
}

#ifdef LODEPNG_COMPILE_ENCODER
/** Instrumented function color_tree_has(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char) */
static int color_tree_has(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a) /* << Aka begin of function int color_tree_has(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_has(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.color_tree_has.155594.stub"

  AKA_mark("lis===3472###sois===155699###eois===155744###lif===1###soif===116###eoif===161###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_has(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");return color_tree_get(tree, r, g, b, a) >= 0;
}
#endif /*LODEPNG_COMPILE_ENCODER*/

/*color is not allowed to already exist.
Index should be >= 0 (it's signed to be compatible with using -1 for "doesn't exist")
Returns error code, or 0 if ok*/
/** Instrumented function color_tree_add(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char,unsigned) */
static unsigned color_tree_add(ColorTree* tree,
                               unsigned char r, unsigned char g, unsigned char b, unsigned char a, unsigned index) /* << Aka begin of function unsigned color_tree_add(ColorTree* tree,
                               unsigned char r, unsigned char g, unsigned char b, unsigned char a, unsigned index) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_add(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.color_tree_add.155966.stub"

  AKA_mark("lis===3481###sois===156119###eois===156127###lif===2###soif===169###eoif===177###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_add(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char,unsigned)");int bit;
  int AKA_BLOCK_LOOP_156131 = 0;
    AKA_mark("lis===3482###sois===156135###eois===156143###lif===3###soif===185###eoif===193###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_add(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char,unsigned)");
for(bit = 0; AKA_mark("lis===3482###sois===156144###eois===156151###lif===3###soif===194###eoif===201###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_add(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char,unsigned)") && (AKA_mark("lis===3482###sois===156144###eois===156151###lif===3###soif===194###eoif===201###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_add(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char,unsigned)") && (bit < 8)); ({AKA_mark("lis===3482###sois===156153###eois===156158###lif===3###soif===203###eoif===208###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_add(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char,unsigned)");++bit;})) {
        AKA_BLOCK_LOOP_156131++;
        if (AKA_BLOCK_LOOP_156131 > 1000) {
            //break;
        }
    AKA_mark("lis===3483###sois===156167###eois===156265###lif===4###soif===217###eoif===315###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_add(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char,unsigned)");int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
    if(AKA_mark("lis===3484###sois===156274###eois===156292###lif===5###soif===324###eoif===342###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_add(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char,unsigned)") && (AKA_mark("lis===3484###sois===156274###eois===156292###lif===5###soif===324###eoif===342###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_add(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char,unsigned)") && (!tree->children[i]))) {
      AKA_mark("lis===3485###sois===156303###eois===156369###lif===6###soif===353###eoif===419###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_add(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char,unsigned)");tree->children[i] = (ColorTree*)lodepng_malloc(sizeof(ColorTree));
      if(AKA_mark("lis===3486###sois===156380###eois===156398###lif===7###soif===430###eoif===448###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_add(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char,unsigned)") && (AKA_mark("lis===3486###sois===156380###eois===156398###lif===7###soif===430###eoif===448###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_add(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char,unsigned)") && (!tree->children[i]))) {
AKA_mark("lis===3486###sois===156400###eois===156410###lif===7###soif===450###eoif===460###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_add(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char,unsigned)");return 83;
}

else {
AKA_mark("lis===-3486-###sois===-156380-###eois===-15638018-###lif===-7-###soif===-###eoif===-448-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_add(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char,unsigned)");
} /*alloc fail*/
      AKA_mark("lis===3487###sois===156433###eois===156468###lif===8###soif===483###eoif===518###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_add(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char,unsigned)");color_tree_init(tree->children[i]);
    }
else {
AKA_mark("lis===-3484-###sois===-156274-###eois===-15627418-###lif===-5-###soif===-###eoif===-342-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_add(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char,unsigned)");
}
    AKA_mark("lis===3489###sois===156481###eois===156506###lif===10###soif===531###eoif===556###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_add(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char,unsigned)");tree = tree->children[i];
  }
  AKA_mark("lis===3491###sois===156515###eois===156540###lif===12###soif===565###eoif===590###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_add(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char,unsigned)");tree->index = (int)index;
  AKA_mark("lis===3492###sois===156544###eois===156553###lif===13###soif===594###eoif===603###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\color_tree_add(ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char,unsigned)");return 0;
}

/*put a pixel, given its RGBA color, into image of any color type*/
/** Instrumented function rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char) */
static unsigned rgba8ToPixel(unsigned char* out, size_t i,
                             const LodePNGColorMode* mode, ColorTree* tree /*for palette*/,
                             unsigned char r, unsigned char g, unsigned char b, unsigned char a) /* << Aka begin of function unsigned rgba8ToPixel(unsigned char* out, size_t i,
                             const LodePNGColorMode* mode, ColorTree* tree ,
                             unsigned char r, unsigned char g, unsigned char b, unsigned char a) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.rgba8ToPixel.156645.stub"

  if(AKA_mark("lis===3499###sois===156887###eois===156914###lif===3###soif===258###eoif===285###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (AKA_mark("lis===3499###sois===156887###eois===156914###lif===3###soif===258###eoif===285###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (mode->colortype == LCT_GREY))) {
    AKA_mark("lis===3500###sois===156923###eois===156946###lif===4###soif===294###eoif===317###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");unsigned char gray = r; /*((unsigned short)r + g + b) / 3u;*/
    if(AKA_mark("lis===3501###sois===156993###eois===157012###lif===5###soif===364###eoif===383###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (AKA_mark("lis===3501###sois===156993###eois===157012###lif===5###soif===364###eoif===383###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (mode->bitdepth == 8))) {
AKA_mark("lis===3501###sois===157014###eois===157028###lif===5###soif===385###eoif===399###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i] = gray;
}

    else {
if(AKA_mark("lis===3502###sois===157042###eois===157062###lif===6###soif===413###eoif===433###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (AKA_mark("lis===3502###sois===157042###eois===157062###lif===6###soif===413###eoif===433###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (mode->bitdepth == 16))) {
AKA_mark("lis===3502###sois===157064###eois===157103###lif===6###soif===435###eoif===474###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i * 2 + 0] = out[i * 2 + 1] = gray;
}

    else {
      /*take the most significant bits of gray*/
      AKA_mark("lis===3505###sois===157173###eois===157254###lif===9###soif===544###eoif===625###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");gray = ((unsigned)gray >> (8u - mode->bitdepth)) & ((1u << mode->bitdepth) - 1u);
      AKA_mark("lis===3506###sois===157262###eois===157305###lif===10###soif===633###eoif===676###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");addColorBits(out, i, mode->bitdepth, gray);
    }
}

  } else {
if(AKA_mark("lis===3508###sois===157326###eois===157352###lif===12###soif===697###eoif===723###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (AKA_mark("lis===3508###sois===157326###eois===157352###lif===12###soif===697###eoif===723###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (mode->colortype == LCT_RGB))) {
    if(AKA_mark("lis===3509###sois===157364###eois===157383###lif===13###soif===735###eoif===754###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (AKA_mark("lis===3509###sois===157364###eois===157383###lif===13###soif===735###eoif===754###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (mode->bitdepth == 8))) {
      AKA_mark("lis===3510###sois===157394###eois===157413###lif===14###soif===765###eoif===784###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i * 3 + 0] = r;
      AKA_mark("lis===3511###sois===157421###eois===157440###lif===15###soif===792###eoif===811###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i * 3 + 1] = g;
      AKA_mark("lis===3512###sois===157448###eois===157467###lif===16###soif===819###eoif===838###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i * 3 + 2] = b;
    } else {
      AKA_mark("lis===3514###sois===157489###eois===157525###lif===18###soif===860###eoif===896###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i * 6 + 0] = out[i * 6 + 1] = r;
      AKA_mark("lis===3515###sois===157533###eois===157569###lif===19###soif===904###eoif===940###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i * 6 + 2] = out[i * 6 + 3] = g;
      AKA_mark("lis===3516###sois===157577###eois===157613###lif===20###soif===948###eoif===984###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i * 6 + 4] = out[i * 6 + 5] = b;
    }
  } else {
if(AKA_mark("lis===3518###sois===157634###eois===157664###lif===22###soif===1005###eoif===1035###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (AKA_mark("lis===3518###sois===157634###eois===157664###lif===22###soif===1005###eoif===1035###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (mode->colortype == LCT_PALETTE))) {
    AKA_mark("lis===3519###sois===157673###eois===157718###lif===23###soif===1044###eoif===1089###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");int index = color_tree_get(tree, r, g, b, a);
    if(AKA_mark("lis===3520###sois===157727###eois===157736###lif===24###soif===1098###eoif===1107###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (AKA_mark("lis===3520###sois===157727###eois===157736###lif===24###soif===1098###eoif===1107###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (index < 0))) {
AKA_mark("lis===3520###sois===157738###eois===157748###lif===24###soif===1109###eoif===1119###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");return 82;
}

else {
AKA_mark("lis===-3520-###sois===-157727-###eois===-1577279-###lif===-24-###soif===-###eoif===-1107-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");
} /*color not in palette*/
    if(AKA_mark("lis===3521###sois===157782###eois===157801###lif===25###soif===1153###eoif===1172###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (AKA_mark("lis===3521###sois===157782###eois===157801###lif===25###soif===1153###eoif===1172###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (mode->bitdepth == 8))) {
AKA_mark("lis===3521###sois===157803###eois===157818###lif===25###soif===1174###eoif===1189###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i] = index;
}

    else {
AKA_mark("lis===3522###sois===157829###eois===157883###lif===26###soif===1200###eoif===1254###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");addColorBits(out, i, mode->bitdepth, (unsigned)index);
}

  } else {
if(AKA_mark("lis===3523###sois===157897###eois===157930###lif===27###soif===1268###eoif===1301###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (AKA_mark("lis===3523###sois===157897###eois===157930###lif===27###soif===1268###eoif===1301###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (mode->colortype == LCT_GREY_ALPHA))) {
    AKA_mark("lis===3524###sois===157939###eois===157962###lif===28###soif===1310###eoif===1333###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");unsigned char gray = r; /*((unsigned short)r + g + b) / 3u;*/
    if(AKA_mark("lis===3525###sois===158009###eois===158028###lif===29###soif===1380###eoif===1399###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (AKA_mark("lis===3525###sois===158009###eois===158028###lif===29###soif===1380###eoif===1399###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (mode->bitdepth == 8))) {
      AKA_mark("lis===3526###sois===158039###eois===158061###lif===30###soif===1410###eoif===1432###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i * 2 + 0] = gray;
      AKA_mark("lis===3527###sois===158069###eois===158088###lif===31###soif===1440###eoif===1459###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i * 2 + 1] = a;
    } else {
if(AKA_mark("lis===3528###sois===158104###eois===158124###lif===32###soif===1475###eoif===1495###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (AKA_mark("lis===3528###sois===158104###eois===158124###lif===32###soif===1475###eoif===1495###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (mode->bitdepth == 16))) {
      AKA_mark("lis===3529###sois===158135###eois===158174###lif===33###soif===1506###eoif===1545###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i * 4 + 0] = out[i * 4 + 1] = gray;
      AKA_mark("lis===3530###sois===158182###eois===158218###lif===34###soif===1553###eoif===1589###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i * 4 + 2] = out[i * 4 + 3] = a;
    }
else {
AKA_mark("lis===-3528-###sois===-158104-###eois===-15810420-###lif===-32-###soif===-###eoif===-1495-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");
}
}

  } else {
if(AKA_mark("lis===3532###sois===158239###eois===158266###lif===36###soif===1610###eoif===1637###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (AKA_mark("lis===3532###sois===158239###eois===158266###lif===36###soif===1610###eoif===1637###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (mode->colortype == LCT_RGBA))) {
    if(AKA_mark("lis===3533###sois===158278###eois===158297###lif===37###soif===1649###eoif===1668###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (AKA_mark("lis===3533###sois===158278###eois===158297###lif===37###soif===1649###eoif===1668###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)") && (mode->bitdepth == 8))) {
      AKA_mark("lis===3534###sois===158308###eois===158327###lif===38###soif===1679###eoif===1698###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i * 4 + 0] = r;
      AKA_mark("lis===3535###sois===158335###eois===158354###lif===39###soif===1706###eoif===1725###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i * 4 + 1] = g;
      AKA_mark("lis===3536###sois===158362###eois===158381###lif===40###soif===1733###eoif===1752###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i * 4 + 2] = b;
      AKA_mark("lis===3537###sois===158389###eois===158408###lif===41###soif===1760###eoif===1779###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i * 4 + 3] = a;
    } else {
      AKA_mark("lis===3539###sois===158430###eois===158466###lif===43###soif===1801###eoif===1837###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i * 8 + 0] = out[i * 8 + 1] = r;
      AKA_mark("lis===3540###sois===158474###eois===158510###lif===44###soif===1845###eoif===1881###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i * 8 + 2] = out[i * 8 + 3] = g;
      AKA_mark("lis===3541###sois===158518###eois===158554###lif===45###soif===1889###eoif===1925###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i * 8 + 4] = out[i * 8 + 5] = b;
      AKA_mark("lis===3542###sois===158562###eois===158598###lif===46###soif===1933###eoif===1969###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");out[i * 8 + 6] = out[i * 8 + 7] = a;
    }
  }
else {
AKA_mark("lis===-3532-###sois===-158239-###eois===-15823927-###lif===-36-###soif===-###eoif===-1637-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");
}
}

}

}

}


  AKA_mark("lis===3546###sois===158616###eois===158625###lif===50###soif===1987###eoif===1996###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba8ToPixel(unsigned char*,size_t,LodePNGColorMode const*,ColorTree*,unsigned char,unsigned char,unsigned char,unsigned char)");return 0; /*no error*/
}

/*put a pixel, given its RGBA16 color, into image of any color 16-bitdepth type*/
/** Instrumented function rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short) */
static void rgba16ToPixel(unsigned char* out, size_t i,
                         const LodePNGColorMode* mode,
                         unsigned short r, unsigned short g, unsigned short b, unsigned short a) /* << Aka begin of function void rgba16ToPixel(unsigned char* out, size_t i,
                         const LodePNGColorMode* mode,
                         unsigned short r, unsigned short g, unsigned short b, unsigned short a) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.rgba16ToPixel.158740.stub"

  if(AKA_mark("lis===3553###sois===158946###eois===158973###lif===3###soif===218###eoif===245###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)") && (AKA_mark("lis===3553###sois===158946###eois===158973###lif===3###soif===218###eoif===245###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)") && (mode->colortype == LCT_GREY))) {
    AKA_mark("lis===3554###sois===158982###eois===159006###lif===4###soif===254###eoif===278###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");unsigned short gray = r; /*((unsigned)r + g + b) / 3u;*/
    AKA_mark("lis===3555###sois===159044###eois===159079###lif===5###soif===316###eoif===351###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");out[i * 2 + 0] = (gray >> 8) & 255;
    AKA_mark("lis===3556###sois===159085###eois===159113###lif===6###soif===357###eoif===385###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");out[i * 2 + 1] = gray & 255;
  } else {
if(AKA_mark("lis===3557###sois===159127###eois===159153###lif===7###soif===399###eoif===425###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)") && (AKA_mark("lis===3557###sois===159127###eois===159153###lif===7###soif===399###eoif===425###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)") && (mode->colortype == LCT_RGB))) {
    AKA_mark("lis===3558###sois===159162###eois===159194###lif===8###soif===434###eoif===466###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");out[i * 6 + 0] = (r >> 8) & 255;
    AKA_mark("lis===3559###sois===159200###eois===159225###lif===9###soif===472###eoif===497###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");out[i * 6 + 1] = r & 255;
    AKA_mark("lis===3560###sois===159231###eois===159263###lif===10###soif===503###eoif===535###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");out[i * 6 + 2] = (g >> 8) & 255;
    AKA_mark("lis===3561###sois===159269###eois===159294###lif===11###soif===541###eoif===566###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");out[i * 6 + 3] = g & 255;
    AKA_mark("lis===3562###sois===159300###eois===159332###lif===12###soif===572###eoif===604###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");out[i * 6 + 4] = (b >> 8) & 255;
    AKA_mark("lis===3563###sois===159338###eois===159363###lif===13###soif===610###eoif===635###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");out[i * 6 + 5] = b & 255;
  } else {
if(AKA_mark("lis===3564###sois===159377###eois===159410###lif===14###soif===649###eoif===682###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)") && (AKA_mark("lis===3564###sois===159377###eois===159410###lif===14###soif===649###eoif===682###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)") && (mode->colortype == LCT_GREY_ALPHA))) {
    AKA_mark("lis===3565###sois===159419###eois===159443###lif===15###soif===691###eoif===715###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");unsigned short gray = r; /*((unsigned)r + g + b) / 3u;*/
    AKA_mark("lis===3566###sois===159481###eois===159516###lif===16###soif===753###eoif===788###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");out[i * 4 + 0] = (gray >> 8) & 255;
    AKA_mark("lis===3567###sois===159522###eois===159550###lif===17###soif===794###eoif===822###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");out[i * 4 + 1] = gray & 255;
    AKA_mark("lis===3568###sois===159556###eois===159588###lif===18###soif===828###eoif===860###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");out[i * 4 + 2] = (a >> 8) & 255;
    AKA_mark("lis===3569###sois===159594###eois===159619###lif===19###soif===866###eoif===891###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");out[i * 4 + 3] = a & 255;
  } else {
if(AKA_mark("lis===3570###sois===159633###eois===159660###lif===20###soif===905###eoif===932###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)") && (AKA_mark("lis===3570###sois===159633###eois===159660###lif===20###soif===905###eoif===932###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)") && (mode->colortype == LCT_RGBA))) {
    AKA_mark("lis===3571###sois===159669###eois===159701###lif===21###soif===941###eoif===973###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");out[i * 8 + 0] = (r >> 8) & 255;
    AKA_mark("lis===3572###sois===159707###eois===159732###lif===22###soif===979###eoif===1004###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");out[i * 8 + 1] = r & 255;
    AKA_mark("lis===3573###sois===159738###eois===159770###lif===23###soif===1010###eoif===1042###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");out[i * 8 + 2] = (g >> 8) & 255;
    AKA_mark("lis===3574###sois===159776###eois===159801###lif===24###soif===1048###eoif===1073###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");out[i * 8 + 3] = g & 255;
    AKA_mark("lis===3575###sois===159807###eois===159839###lif===25###soif===1079###eoif===1111###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");out[i * 8 + 4] = (b >> 8) & 255;
    AKA_mark("lis===3576###sois===159845###eois===159870###lif===26###soif===1117###eoif===1142###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");out[i * 8 + 5] = b & 255;
    AKA_mark("lis===3577###sois===159876###eois===159908###lif===27###soif===1148###eoif===1180###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");out[i * 8 + 6] = (a >> 8) & 255;
    AKA_mark("lis===3578###sois===159914###eois===159939###lif===28###soif===1186###eoif===1211###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");out[i * 8 + 7] = a & 255;
  }
else {
AKA_mark("lis===-3570-###sois===-159633-###eois===-15963327-###lif===-20-###soif===-###eoif===-932-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\rgba16ToPixel(unsigned char*,size_t,LodePNGColorMode const*,unsigned short,unsigned short,unsigned short,unsigned short)");
}
}

}

}

}

/*Get RGBA8 color of pixel with index i (y * width + x) from the raw image with given color type.*/
/** Instrumented function getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*) */
static void getPixelColorRGBA8(unsigned char* r, unsigned char* g,
                               unsigned char* b, unsigned char* a,
                               const unsigned char* in, size_t i,
                               const LodePNGColorMode* mode) /* << Aka begin of function void getPixelColorRGBA8(unsigned char* r, unsigned char* g,
                               unsigned char* b, unsigned char* a,
                               const unsigned char* in, size_t i,
                               const LodePNGColorMode* mode) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.getPixelColorRGBA8.160064.stub"

  if(AKA_mark("lis===3587###sois===160324###eois===160351###lif===4###soif===272###eoif===299###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (AKA_mark("lis===3587###sois===160324###eois===160351###lif===4###soif===272###eoif===299###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->colortype == LCT_GREY))) {
    if(AKA_mark("lis===3588###sois===160363###eois===160382###lif===5###soif===311###eoif===330###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (AKA_mark("lis===3588###sois===160363###eois===160382###lif===5###soif===311###eoif===330###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->bitdepth == 8))) {
      AKA_mark("lis===3589###sois===160393###eois===160414###lif===6###soif===341###eoif===362###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*r = *g = *b = in[i];
      if(AKA_mark("lis===3590###sois===160425###eois===160463###lif===7###soif===373###eoif===411###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && ((AKA_mark("lis===3590###sois===160425###eois===160442###lif===7###soif===373###eoif===390###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->key_defined)) && (AKA_mark("lis===3590###sois===160446###eois===160463###lif===7###soif===394###eoif===411###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (*r == mode->key_r)))) {
AKA_mark("lis===3590###sois===160465###eois===160472###lif===7###soif===413###eoif===420###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = 0;
}

      else {
AKA_mark("lis===3591###sois===160485###eois===160494###lif===8###soif===433###eoif===442###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = 255;
}

    } else {
if(AKA_mark("lis===3592###sois===160510###eois===160530###lif===9###soif===458###eoif===478###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (AKA_mark("lis===3592###sois===160510###eois===160530###lif===9###soif===458###eoif===478###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->bitdepth == 16))) {
      AKA_mark("lis===3593###sois===160541###eois===160570###lif===10###soif===489###eoif===518###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*r = *g = *b = in[i * 2 + 0];
      if(AKA_mark("lis===3594###sois===160581###eois===160653###lif===11###soif===529###eoif===601###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && ((AKA_mark("lis===3594###sois===160581###eois===160598###lif===11###soif===529###eoif===546###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->key_defined)) && (AKA_mark("lis===3594###sois===160602###eois===160653###lif===11###soif===550###eoif===601###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r)))) {
AKA_mark("lis===3594###sois===160655###eois===160662###lif===11###soif===603###eoif===610###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = 0;
}

      else {
AKA_mark("lis===3595###sois===160675###eois===160684###lif===12###soif===623###eoif===632###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = 255;
}

    } else {
      AKA_mark("lis===3597###sois===160706###eois===160755###lif===14###soif===654###eoif===703###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
      AKA_mark("lis===3598###sois===160809###eois===160839###lif===15###soif===757###eoif===787###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");size_t j = i * mode->bitdepth;
      AKA_mark("lis===3599###sois===160847###eois===160915###lif===16###soif===795###eoif===863###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
      AKA_mark("lis===3600###sois===160923###eois===160962###lif===17###soif===871###eoif===910###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*r = *g = *b = (value * 255) / highest;
      if(AKA_mark("lis===3601###sois===160973###eois===161014###lif===18###soif===921###eoif===962###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && ((AKA_mark("lis===3601###sois===160973###eois===160990###lif===18###soif===921###eoif===938###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->key_defined)) && (AKA_mark("lis===3601###sois===160994###eois===161014###lif===18###soif===942###eoif===962###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (value == mode->key_r)))) {
AKA_mark("lis===3601###sois===161016###eois===161023###lif===18###soif===964###eoif===971###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = 0;
}

      else {
AKA_mark("lis===3602###sois===161036###eois===161045###lif===19###soif===984###eoif===993###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = 255;
}

    }
}

  } else {
if(AKA_mark("lis===3604###sois===161066###eois===161092###lif===21###soif===1014###eoif===1040###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (AKA_mark("lis===3604###sois===161066###eois===161092###lif===21###soif===1014###eoif===1040###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->colortype == LCT_RGB))) {
    if(AKA_mark("lis===3605###sois===161104###eois===161123###lif===22###soif===1052###eoif===1071###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (AKA_mark("lis===3605###sois===161104###eois===161123###lif===22###soif===1052###eoif===1071###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->bitdepth == 8))) {
      AKA_mark("lis===3606###sois===161134###eois===161153###lif===23###soif===1082###eoif===1101###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*r = in[i * 3 + 0]; AKA_mark("lis===3606###sois===161154###eois===161173###lif===23###soif===1102###eoif===1121###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*g = in[i * 3 + 1]; AKA_mark("lis===3606###sois===161174###eois===161193###lif===23###soif===1122###eoif===1141###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*b = in[i * 3 + 2];
      if(AKA_mark("lis===3607###sois===161204###eois===161284###lif===24###soif===1152###eoif===1232###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && ((((AKA_mark("lis===3607###sois===161204###eois===161221###lif===24###soif===1152###eoif===1169###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->key_defined)) && (AKA_mark("lis===3607###sois===161225###eois===161242###lif===24###soif===1173###eoif===1190###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (*r == mode->key_r))) && (AKA_mark("lis===3607###sois===161246###eois===161263###lif===24###soif===1194###eoif===1211###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (*g == mode->key_g))) && (AKA_mark("lis===3607###sois===161267###eois===161284###lif===24###soif===1215###eoif===1232###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (*b == mode->key_b)))) {
AKA_mark("lis===3607###sois===161286###eois===161293###lif===24###soif===1234###eoif===1241###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = 0;
}

      else {
AKA_mark("lis===3608###sois===161306###eois===161315###lif===25###soif===1254###eoif===1263###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = 255;
}

    } else {
      AKA_mark("lis===3610###sois===161337###eois===161356###lif===27###soif===1285###eoif===1304###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*r = in[i * 6 + 0];
      AKA_mark("lis===3611###sois===161364###eois===161383###lif===28###soif===1312###eoif===1331###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*g = in[i * 6 + 2];
      AKA_mark("lis===3612###sois===161391###eois===161410###lif===29###soif===1339###eoif===1358###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*b = in[i * 6 + 4];
      if(AKA_mark("lis===3613###sois===161421###eois===161623###lif===30###soif===1369###eoif===1571###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && ((((AKA_mark("lis===3613###sois===161421###eois===161438###lif===30###soif===1369###eoif===1386###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->key_defined)) && (AKA_mark("lis===3613###sois===161442###eois===161493###lif===30###soif===1390###eoif===1441###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r)))
         && (AKA_mark("lis===3614###sois===161507###eois===161558###lif===31###soif===1455###eoif===1506###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g)))
         && (AKA_mark("lis===3615###sois===161572###eois===161623###lif===32###soif===1520###eoif===1571###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b)))) {
AKA_mark("lis===3615###sois===161625###eois===161632###lif===32###soif===1573###eoif===1580###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = 0;
}

      else {
AKA_mark("lis===3616###sois===161645###eois===161654###lif===33###soif===1593###eoif===1602###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = 255;
}

    }
  } else {
if(AKA_mark("lis===3618###sois===161675###eois===161705###lif===35###soif===1623###eoif===1653###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (AKA_mark("lis===3618###sois===161675###eois===161705###lif===35###soif===1623###eoif===1653###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->colortype == LCT_PALETTE))) {
    AKA_mark("lis===3619###sois===161714###eois===161729###lif===36###soif===1662###eoif===1677###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");unsigned index;
    if(AKA_mark("lis===3620###sois===161738###eois===161757###lif===37###soif===1686###eoif===1705###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (AKA_mark("lis===3620###sois===161738###eois===161757###lif===37###soif===1686###eoif===1705###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->bitdepth == 8))) {
AKA_mark("lis===3620###sois===161759###eois===161773###lif===37###soif===1707###eoif===1721###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");index = in[i];
}

    else {
      AKA_mark("lis===3622###sois===161793###eois===161823###lif===39###soif===1741###eoif===1771###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");size_t j = i * mode->bitdepth;
      AKA_mark("lis===3623###sois===161831###eois===161890###lif===40###soif===1779###eoif===1838###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");index = readBitsFromReversedStream(&j, in, mode->bitdepth);
    }
    /*out of bounds of palette not checked: see lodepng_color_mode_alloc_palette.*/
    AKA_mark("lis===3626###sois===161988###eois===162022###lif===43###soif===1936###eoif===1970###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*r = mode->palette[index * 4 + 0];
    AKA_mark("lis===3627###sois===162028###eois===162062###lif===44###soif===1976###eoif===2010###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*g = mode->palette[index * 4 + 1];
    AKA_mark("lis===3628###sois===162068###eois===162102###lif===45###soif===2016###eoif===2050###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*b = mode->palette[index * 4 + 2];
    AKA_mark("lis===3629###sois===162108###eois===162142###lif===46###soif===2056###eoif===2090###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = mode->palette[index * 4 + 3];
  } else {
if(AKA_mark("lis===3630###sois===162156###eois===162189###lif===47###soif===2104###eoif===2137###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (AKA_mark("lis===3630###sois===162156###eois===162189###lif===47###soif===2104###eoif===2137###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->colortype == LCT_GREY_ALPHA))) {
    if(AKA_mark("lis===3631###sois===162201###eois===162220###lif===48###soif===2149###eoif===2168###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (AKA_mark("lis===3631###sois===162201###eois===162220###lif===48###soif===2149###eoif===2168###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->bitdepth == 8))) {
      AKA_mark("lis===3632###sois===162231###eois===162260###lif===49###soif===2179###eoif===2208###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*r = *g = *b = in[i * 2 + 0];
      AKA_mark("lis===3633###sois===162268###eois===162287###lif===50###soif===2216###eoif===2235###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = in[i * 2 + 1];
    } else {
      AKA_mark("lis===3635###sois===162309###eois===162338###lif===52###soif===2257###eoif===2286###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*r = *g = *b = in[i * 4 + 0];
      AKA_mark("lis===3636###sois===162346###eois===162365###lif===53###soif===2294###eoif===2313###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = in[i * 4 + 2];
    }
  } else {
if(AKA_mark("lis===3638###sois===162386###eois===162413###lif===55###soif===2334###eoif===2361###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (AKA_mark("lis===3638###sois===162386###eois===162413###lif===55###soif===2334###eoif===2361###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->colortype == LCT_RGBA))) {
    if(AKA_mark("lis===3639###sois===162425###eois===162444###lif===56###soif===2373###eoif===2392###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (AKA_mark("lis===3639###sois===162425###eois===162444###lif===56###soif===2373###eoif===2392###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->bitdepth == 8))) {
      AKA_mark("lis===3640###sois===162455###eois===162474###lif===57###soif===2403###eoif===2422###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*r = in[i * 4 + 0];
      AKA_mark("lis===3641###sois===162482###eois===162501###lif===58###soif===2430###eoif===2449###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*g = in[i * 4 + 1];
      AKA_mark("lis===3642###sois===162509###eois===162528###lif===59###soif===2457###eoif===2476###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*b = in[i * 4 + 2];
      AKA_mark("lis===3643###sois===162536###eois===162555###lif===60###soif===2484###eoif===2503###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = in[i * 4 + 3];
    } else {
      AKA_mark("lis===3645###sois===162577###eois===162596###lif===62###soif===2525###eoif===2544###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*r = in[i * 8 + 0];
      AKA_mark("lis===3646###sois===162604###eois===162623###lif===63###soif===2552###eoif===2571###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*g = in[i * 8 + 2];
      AKA_mark("lis===3647###sois===162631###eois===162650###lif===64###soif===2579###eoif===2598###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*b = in[i * 8 + 4];
      AKA_mark("lis===3648###sois===162658###eois===162677###lif===65###soif===2606###eoif===2625###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = in[i * 8 + 6];
    }
  }
else {
AKA_mark("lis===-3638-###sois===-162386-###eois===-16238627-###lif===-55-###soif===-###eoif===-2361-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA8(unsigned char*,unsigned char*,unsigned char*,unsigned char*,unsigned char const*,size_t,LodePNGColorMode const*)");
}
}

}

}

}

}

/*Similar to getPixelColorRGBA8, but with all the for loops inside of the color
mode test cases, optimized to convert the colors much faster, when converting
to the common case of RGBA with 8 bit per channel. buffer must be RGBA with
enough memory.*/
/** Instrumented function getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*) */
static void getPixelColorsRGBA8(unsigned char* LODEPNG_RESTRICT buffer, size_t numpixels,
                                const unsigned char* LODEPNG_RESTRICT in,
                                const LodePNGColorMode* mode) /* << Aka begin of function void getPixelColorsRGBA8(unsigned char* LODEPNG_RESTRICT buffer, size_t numpixels,
                                const unsigned char* LODEPNG_RESTRICT in,
                                const LodePNGColorMode* mode) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.getPixelColorsRGBA8.162963.stub"

  AKA_mark("lis===3660###sois===163184###eois===163210###lif===3###soif===233###eoif===259###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");unsigned num_channels = 4;
  AKA_mark("lis===3661###sois===163214###eois===163223###lif===4###soif===263###eoif===272###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");size_t i;
  if(AKA_mark("lis===3662###sois===163230###eois===163257###lif===5###soif===279###eoif===306###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3662###sois===163230###eois===163257###lif===5###soif===279###eoif===306###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->colortype == LCT_GREY))) {
    if(AKA_mark("lis===3663###sois===163269###eois===163288###lif===6###soif===318###eoif===337###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3663###sois===163269###eois===163288###lif===6###soif===318###eoif===337###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->bitdepth == 8))) {
      int AKA_BLOCK_LOOP_163299 = 0;
    AKA_mark("lis===3664###sois===163303###eois===163309###lif===7###soif===352###eoif===358###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3664###sois===163310###eois===163324###lif===7###soif===359###eoif===373###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3664###sois===163310###eois===163324###lif===7###soif===359###eoif===373###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3664###sois===163326###eois===163353###lif===7###soif===375###eoif===402###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_163299++;
        if (AKA_BLOCK_LOOP_163299 > 1000) {
            //break;
        }
        AKA_mark("lis===3665###sois===163366###eois===163408###lif===8###soif===415###eoif===457###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[0] = buffer[1] = buffer[2] = in[i];
        AKA_mark("lis===3666###sois===163418###eois===163434###lif===9###soif===467###eoif===483###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[3] = 255;
      }
      if(AKA_mark("lis===3668###sois===163454###eois===163471###lif===11###soif===503###eoif===520###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3668###sois===163454###eois===163471###lif===11###soif===503###eoif===520###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->key_defined))) {
        AKA_mark("lis===3669###sois===163484###eois===163519###lif===12###soif===533###eoif===568###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer -= numpixels * num_channels;
        int AKA_BLOCK_LOOP_163529 = 0;
    AKA_mark("lis===3670###sois===163533###eois===163539###lif===13###soif===582###eoif===588###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3670###sois===163540###eois===163554###lif===13###soif===589###eoif===603###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3670###sois===163540###eois===163554###lif===13###soif===589###eoif===603###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3670###sois===163556###eois===163583###lif===13###soif===605###eoif===632###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_163529++;
        if (AKA_BLOCK_LOOP_163529 > 1000) {
            //break;
        }
          if(AKA_mark("lis===3671###sois===163601###eois===163625###lif===14###soif===650###eoif===674###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3671###sois===163601###eois===163625###lif===14###soif===650###eoif===674###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (buffer[0] == mode->key_r))) {
AKA_mark("lis===3671###sois===163627###eois===163641###lif===14###soif===676###eoif===690###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[3] = 0;
}

else {
AKA_mark("lis===-3671-###sois===-163601-###eois===-16360124-###lif===-14-###soif===-###eoif===-674-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
}
        }
      }
else {
AKA_mark("lis===-3668-###sois===-163454-###eois===-16345417-###lif===-11-###soif===-###eoif===-520-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
}
    } else {
if(AKA_mark("lis===3674###sois===163677###eois===163697###lif===17###soif===726###eoif===746###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3674###sois===163677###eois===163697###lif===17###soif===726###eoif===746###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->bitdepth == 16))) {
      int AKA_BLOCK_LOOP_163708 = 0;
    AKA_mark("lis===3675###sois===163712###eois===163718###lif===18###soif===761###eoif===767###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3675###sois===163719###eois===163733###lif===18###soif===768###eoif===782###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3675###sois===163719###eois===163733###lif===18###soif===768###eoif===782###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3675###sois===163735###eois===163762###lif===18###soif===784###eoif===811###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_163708++;
        if (AKA_BLOCK_LOOP_163708 > 1000) {
            //break;
        }
        AKA_mark("lis===3676###sois===163775###eois===163821###lif===19###soif===824###eoif===870###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[0] = buffer[1] = buffer[2] = in[i * 2];
        AKA_mark("lis===3677###sois===163831###eois===163926###lif===20###soif===880###eoif===975###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[3] = mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r ? 0 : 255;
      }
    } else {
      AKA_mark("lis===3680###sois===163957###eois===164006###lif===23###soif===1006###eoif===1055###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
      AKA_mark("lis===3681###sois===164060###eois===164073###lif===24###soif===1109###eoif===1122###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");size_t j = 0;
      int AKA_BLOCK_LOOP_164081 = 0;
    AKA_mark("lis===3682###sois===164085###eois===164091###lif===25###soif===1134###eoif===1140###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3682###sois===164092###eois===164106###lif===25###soif===1141###eoif===1155###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3682###sois===164092###eois===164106###lif===25###soif===1141###eoif===1155###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3682###sois===164108###eois===164135###lif===25###soif===1157###eoif===1184###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_164081++;
        if (AKA_BLOCK_LOOP_164081 > 1000) {
            //break;
        }
        AKA_mark("lis===3683###sois===164148###eois===164216###lif===26###soif===1197###eoif===1265###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
        AKA_mark("lis===3684###sois===164226###eois===164286###lif===27###soif===1275###eoif===1335###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[0] = buffer[1] = buffer[2] = (value * 255) / highest;
        AKA_mark("lis===3685###sois===164296###eois===164360###lif===28###soif===1345###eoif===1409###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[3] = mode->key_defined && value == mode->key_r ? 0 : 255;
      }
    }
}

  } else {
if(AKA_mark("lis===3688###sois===164390###eois===164416###lif===31###soif===1439###eoif===1465###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3688###sois===164390###eois===164416###lif===31###soif===1439###eoif===1465###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->colortype == LCT_RGB))) {
    if(AKA_mark("lis===3689###sois===164428###eois===164447###lif===32###soif===1477###eoif===1496###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3689###sois===164428###eois===164447###lif===32###soif===1477###eoif===1496###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->bitdepth == 8))) {
      int AKA_BLOCK_LOOP_164458 = 0;
    AKA_mark("lis===3690###sois===164462###eois===164468###lif===33###soif===1511###eoif===1517###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3690###sois===164469###eois===164483###lif===33###soif===1518###eoif===1532###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3690###sois===164469###eois===164483###lif===33###soif===1518###eoif===1532###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3690###sois===164485###eois===164512###lif===33###soif===1534###eoif===1561###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_164458++;
        if (AKA_BLOCK_LOOP_164458 > 1000) {
            //break;
        }
        AKA_mark("lis===3691###sois===164525###eois===164563###lif===34###soif===1574###eoif===1612###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");lodepng_memcpy(buffer, &in[i * 3], 3);
        AKA_mark("lis===3692###sois===164573###eois===164589###lif===35###soif===1622###eoif===1638###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[3] = 255;
      }
      if(AKA_mark("lis===3694###sois===164609###eois===164626###lif===37###soif===1658###eoif===1675###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3694###sois===164609###eois===164626###lif===37###soif===1658###eoif===1675###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->key_defined))) {
        AKA_mark("lis===3695###sois===164639###eois===164674###lif===38###soif===1688###eoif===1723###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer -= numpixels * num_channels;
        int AKA_BLOCK_LOOP_164684 = 0;
    AKA_mark("lis===3696###sois===164688###eois===164694###lif===39###soif===1737###eoif===1743###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3696###sois===164695###eois===164709###lif===39###soif===1744###eoif===1758###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3696###sois===164695###eois===164709###lif===39###soif===1744###eoif===1758###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3696###sois===164711###eois===164738###lif===39###soif===1760###eoif===1787###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_164684++;
        if (AKA_BLOCK_LOOP_164684 > 1000) {
            //break;
        }
          if(AKA_mark("lis===3697###sois===164756###eois===164835###lif===40###soif===1805###eoif===1884###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (((AKA_mark("lis===3697###sois===164756###eois===164780###lif===40###soif===1805###eoif===1829###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (buffer[0] == mode->key_r)) && (AKA_mark("lis===3697###sois===164784###eois===164807###lif===40###soif===1833###eoif===1856###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (buffer[1]== mode->key_g))) && (AKA_mark("lis===3697###sois===164811###eois===164835###lif===40###soif===1860###eoif===1884###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (buffer[2] == mode->key_b)))) {
AKA_mark("lis===3697###sois===164837###eois===164851###lif===40###soif===1886###eoif===1900###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[3] = 0;
}

else {
AKA_mark("lis===-3697-###sois===-164756-###eois===-16475679-###lif===-40-###soif===-###eoif===-1884-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
}
        }
      }
else {
AKA_mark("lis===-3694-###sois===-164609-###eois===-16460917-###lif===-37-###soif===-###eoif===-1675-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
}
    } else {
      int AKA_BLOCK_LOOP_164893 = 0;
    AKA_mark("lis===3701###sois===164897###eois===164903###lif===44###soif===1946###eoif===1952###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3701###sois===164904###eois===164918###lif===44###soif===1953###eoif===1967###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3701###sois===164904###eois===164918###lif===44###soif===1953###eoif===1967###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3701###sois===164920###eois===164947###lif===44###soif===1969###eoif===1996###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_164893++;
        if (AKA_BLOCK_LOOP_164893 > 1000) {
            //break;
        }
        AKA_mark("lis===3702###sois===164960###eois===164986###lif===45###soif===2009###eoif===2035###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[0] = in[i * 6 + 0];
        AKA_mark("lis===3703###sois===164996###eois===165022###lif===46###soif===2045###eoif===2071###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[1] = in[i * 6 + 2];
        AKA_mark("lis===3704###sois===165032###eois===165058###lif===47###soif===2081###eoif===2107###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[2] = in[i * 6 + 4];
        AKA_mark("lis===3705###sois===165068###eois===165309###lif===48###soif===2117###eoif===2358###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[3] = mode->key_defined
           && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
           && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
           && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b ? 0 : 255;
      }
    }
  } else {
if(AKA_mark("lis===3711###sois===165339###eois===165369###lif===54###soif===2388###eoif===2418###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3711###sois===165339###eois===165369###lif===54###soif===2388###eoif===2418###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->colortype == LCT_PALETTE))) {
    if(AKA_mark("lis===3712###sois===165381###eois===165400###lif===55###soif===2430###eoif===2449###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3712###sois===165381###eois===165400###lif===55###soif===2430###eoif===2449###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->bitdepth == 8))) {
      int AKA_BLOCK_LOOP_165411 = 0;
    AKA_mark("lis===3713###sois===165415###eois===165421###lif===56###soif===2464###eoif===2470###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3713###sois===165422###eois===165436###lif===56###soif===2471###eoif===2485###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3713###sois===165422###eois===165436###lif===56###soif===2471###eoif===2485###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3713###sois===165438###eois===165465###lif===56###soif===2487###eoif===2514###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_165411++;
        if (AKA_BLOCK_LOOP_165411 > 1000) {
            //break;
        }
        AKA_mark("lis===3714###sois===165478###eois===165501###lif===57###soif===2527###eoif===2550###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");unsigned index = in[i];
        /*out of bounds of palette not checked: see lodepng_color_mode_alloc_palette.*/
        AKA_mark("lis===3716###sois===165600###eois===165653###lif===59###soif===2649###eoif===2702###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");lodepng_memcpy(buffer, &mode->palette[index * 4], 4);
      }
    } else {
      AKA_mark("lis===3719###sois===165684###eois===165697###lif===62###soif===2733###eoif===2746###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");size_t j = 0;
      int AKA_BLOCK_LOOP_165705 = 0;
    AKA_mark("lis===3720###sois===165709###eois===165715###lif===63###soif===2758###eoif===2764###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3720###sois===165716###eois===165730###lif===63###soif===2765###eoif===2779###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3720###sois===165716###eois===165730###lif===63###soif===2765###eoif===2779###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3720###sois===165732###eois===165759###lif===63###soif===2781###eoif===2808###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_165705++;
        if (AKA_BLOCK_LOOP_165705 > 1000) {
            //break;
        }
        AKA_mark("lis===3721###sois===165772###eois===165840###lif===64###soif===2821###eoif===2889###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");unsigned index = readBitsFromReversedStream(&j, in, mode->bitdepth);
        /*out of bounds of palette not checked: see lodepng_color_mode_alloc_palette.*/
        AKA_mark("lis===3723###sois===165939###eois===165992###lif===66###soif===2988###eoif===3041###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");lodepng_memcpy(buffer, &mode->palette[index * 4], 4);
      }
    }
  } else {
if(AKA_mark("lis===3726###sois===166022###eois===166055###lif===69###soif===3071###eoif===3104###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3726###sois===166022###eois===166055###lif===69###soif===3071###eoif===3104###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->colortype == LCT_GREY_ALPHA))) {
    if(AKA_mark("lis===3727###sois===166067###eois===166086###lif===70###soif===3116###eoif===3135###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3727###sois===166067###eois===166086###lif===70###soif===3116###eoif===3135###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->bitdepth == 8))) {
      int AKA_BLOCK_LOOP_166097 = 0;
    AKA_mark("lis===3728###sois===166101###eois===166107###lif===71###soif===3150###eoif===3156###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3728###sois===166108###eois===166122###lif===71###soif===3157###eoif===3171###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3728###sois===166108###eois===166122###lif===71###soif===3157###eoif===3171###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3728###sois===166124###eois===166151###lif===71###soif===3173###eoif===3200###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_166097++;
        if (AKA_BLOCK_LOOP_166097 > 1000) {
            //break;
        }
        AKA_mark("lis===3729###sois===166164###eois===166214###lif===72###soif===3213###eoif===3263###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[0] = buffer[1] = buffer[2] = in[i * 2 + 0];
        AKA_mark("lis===3730###sois===166224###eois===166250###lif===73###soif===3273###eoif===3299###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[3] = in[i * 2 + 1];
      }
    } else {
      int AKA_BLOCK_LOOP_166281 = 0;
    AKA_mark("lis===3733###sois===166285###eois===166291###lif===76###soif===3334###eoif===3340###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3733###sois===166292###eois===166306###lif===76###soif===3341###eoif===3355###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3733###sois===166292###eois===166306###lif===76###soif===3341###eoif===3355###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3733###sois===166308###eois===166335###lif===76###soif===3357###eoif===3384###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_166281++;
        if (AKA_BLOCK_LOOP_166281 > 1000) {
            //break;
        }
        AKA_mark("lis===3734###sois===166348###eois===166398###lif===77###soif===3397###eoif===3447###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[0] = buffer[1] = buffer[2] = in[i * 4 + 0];
        AKA_mark("lis===3735###sois===166408###eois===166434###lif===78###soif===3457###eoif===3483###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[3] = in[i * 4 + 2];
      }
    }
  } else {
if(AKA_mark("lis===3738###sois===166464###eois===166491###lif===81###soif===3513###eoif===3540###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3738###sois===166464###eois===166491###lif===81###soif===3513###eoif===3540###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->colortype == LCT_RGBA))) {
    if(AKA_mark("lis===3739###sois===166503###eois===166522###lif===82###soif===3552###eoif===3571###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3739###sois===166503###eois===166522###lif===82###soif===3552###eoif===3571###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->bitdepth == 8))) {
      AKA_mark("lis===3740###sois===166533###eois===166575###lif===83###soif===3582###eoif===3624###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");lodepng_memcpy(buffer, in, numpixels * 4);
    } else {
      int AKA_BLOCK_LOOP_166597 = 0;
    AKA_mark("lis===3742###sois===166601###eois===166607###lif===85###soif===3650###eoif===3656###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3742###sois===166608###eois===166622###lif===85###soif===3657###eoif===3671###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3742###sois===166608###eois===166622###lif===85###soif===3657###eoif===3671###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3742###sois===166624###eois===166651###lif===85###soif===3673###eoif===3700###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_166597++;
        if (AKA_BLOCK_LOOP_166597 > 1000) {
            //break;
        }
        AKA_mark("lis===3743###sois===166664###eois===166690###lif===86###soif===3713###eoif===3739###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[0] = in[i * 8 + 0];
        AKA_mark("lis===3744###sois===166700###eois===166726###lif===87###soif===3749###eoif===3775###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[1] = in[i * 8 + 2];
        AKA_mark("lis===3745###sois===166736###eois===166762###lif===88###soif===3785###eoif===3811###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[2] = in[i * 8 + 4];
        AKA_mark("lis===3746###sois===166772###eois===166798###lif===89###soif===3821###eoif===3847###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[3] = in[i * 8 + 6];
      }
    }
  }
else {
AKA_mark("lis===-3738-###sois===-166464-###eois===-16646427-###lif===-81-###soif===-###eoif===-3540-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGBA8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
}
}

}

}

}

}

/*Similar to getPixelColorsRGBA8, but with 3-channel RGB output.*/
/** Instrumented function getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*) */
static void getPixelColorsRGB8(unsigned char* LODEPNG_RESTRICT buffer, size_t numpixels,
                               const unsigned char* LODEPNG_RESTRICT in,
                               const LodePNGColorMode* mode) /* << Aka begin of function void getPixelColorsRGB8(unsigned char* LODEPNG_RESTRICT buffer, size_t numpixels,
                               const unsigned char* LODEPNG_RESTRICT in,
                               const LodePNGColorMode* mode) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.getPixelColorsRGB8.166906.stub"

  AKA_mark("lis===3756###sois===167124###eois===167156###lif===3###soif===230###eoif===262###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");const unsigned num_channels = 3;
  AKA_mark("lis===3757###sois===167160###eois===167169###lif===4###soif===266###eoif===275###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");size_t i;
  if(AKA_mark("lis===3758###sois===167176###eois===167203###lif===5###soif===282###eoif===309###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3758###sois===167176###eois===167203###lif===5###soif===282###eoif===309###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->colortype == LCT_GREY))) {
    if(AKA_mark("lis===3759###sois===167215###eois===167234###lif===6###soif===321###eoif===340###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3759###sois===167215###eois===167234###lif===6###soif===321###eoif===340###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->bitdepth == 8))) {
      int AKA_BLOCK_LOOP_167245 = 0;
    AKA_mark("lis===3760###sois===167249###eois===167255###lif===7###soif===355###eoif===361###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3760###sois===167256###eois===167270###lif===7###soif===362###eoif===376###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3760###sois===167256###eois===167270###lif===7###soif===362###eoif===376###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3760###sois===167272###eois===167299###lif===7###soif===378###eoif===405###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_167245++;
        if (AKA_BLOCK_LOOP_167245 > 1000) {
            //break;
        }
        AKA_mark("lis===3761###sois===167312###eois===167354###lif===8###soif===418###eoif===460###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[0] = buffer[1] = buffer[2] = in[i];
      }
    } else {
if(AKA_mark("lis===3763###sois===167379###eois===167399###lif===10###soif===485###eoif===505###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3763###sois===167379###eois===167399###lif===10###soif===485###eoif===505###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->bitdepth == 16))) {
      int AKA_BLOCK_LOOP_167410 = 0;
    AKA_mark("lis===3764###sois===167414###eois===167420###lif===11###soif===520###eoif===526###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3764###sois===167421###eois===167435###lif===11###soif===527###eoif===541###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3764###sois===167421###eois===167435###lif===11###soif===527###eoif===541###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3764###sois===167437###eois===167464###lif===11###soif===543###eoif===570###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_167410++;
        if (AKA_BLOCK_LOOP_167410 > 1000) {
            //break;
        }
        AKA_mark("lis===3765###sois===167477###eois===167523###lif===12###soif===583###eoif===629###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[0] = buffer[1] = buffer[2] = in[i * 2];
      }
    } else {
      AKA_mark("lis===3768###sois===167554###eois===167603###lif===15###soif===660###eoif===709###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
      AKA_mark("lis===3769###sois===167657###eois===167670###lif===16###soif===763###eoif===776###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");size_t j = 0;
      int AKA_BLOCK_LOOP_167678 = 0;
    AKA_mark("lis===3770###sois===167682###eois===167688###lif===17###soif===788###eoif===794###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3770###sois===167689###eois===167703###lif===17###soif===795###eoif===809###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3770###sois===167689###eois===167703###lif===17###soif===795###eoif===809###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3770###sois===167705###eois===167732###lif===17###soif===811###eoif===838###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_167678++;
        if (AKA_BLOCK_LOOP_167678 > 1000) {
            //break;
        }
        AKA_mark("lis===3771###sois===167745###eois===167813###lif===18###soif===851###eoif===919###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
        AKA_mark("lis===3772###sois===167823###eois===167883###lif===19###soif===929###eoif===989###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[0] = buffer[1] = buffer[2] = (value * 255) / highest;
      }
    }
}

  } else {
if(AKA_mark("lis===3775###sois===167913###eois===167939###lif===22###soif===1019###eoif===1045###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3775###sois===167913###eois===167939###lif===22###soif===1019###eoif===1045###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->colortype == LCT_RGB))) {
    if(AKA_mark("lis===3776###sois===167951###eois===167970###lif===23###soif===1057###eoif===1076###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3776###sois===167951###eois===167970###lif===23###soif===1057###eoif===1076###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->bitdepth == 8))) {
      AKA_mark("lis===3777###sois===167981###eois===168023###lif===24###soif===1087###eoif===1129###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");lodepng_memcpy(buffer, in, numpixels * 3);
    } else {
      int AKA_BLOCK_LOOP_168045 = 0;
    AKA_mark("lis===3779###sois===168049###eois===168055###lif===26###soif===1155###eoif===1161###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3779###sois===168056###eois===168070###lif===26###soif===1162###eoif===1176###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3779###sois===168056###eois===168070###lif===26###soif===1162###eoif===1176###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3779###sois===168072###eois===168099###lif===26###soif===1178###eoif===1205###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_168045++;
        if (AKA_BLOCK_LOOP_168045 > 1000) {
            //break;
        }
        AKA_mark("lis===3780###sois===168112###eois===168138###lif===27###soif===1218###eoif===1244###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[0] = in[i * 6 + 0];
        AKA_mark("lis===3781###sois===168148###eois===168174###lif===28###soif===1254###eoif===1280###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[1] = in[i * 6 + 2];
        AKA_mark("lis===3782###sois===168184###eois===168210###lif===29###soif===1290###eoif===1316###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[2] = in[i * 6 + 4];
      }
    }
  } else {
if(AKA_mark("lis===3785###sois===168240###eois===168270###lif===32###soif===1346###eoif===1376###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3785###sois===168240###eois===168270###lif===32###soif===1346###eoif===1376###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->colortype == LCT_PALETTE))) {
    if(AKA_mark("lis===3786###sois===168282###eois===168301###lif===33###soif===1388###eoif===1407###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3786###sois===168282###eois===168301###lif===33###soif===1388###eoif===1407###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->bitdepth == 8))) {
      int AKA_BLOCK_LOOP_168312 = 0;
    AKA_mark("lis===3787###sois===168316###eois===168322###lif===34###soif===1422###eoif===1428###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3787###sois===168323###eois===168337###lif===34###soif===1429###eoif===1443###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3787###sois===168323###eois===168337###lif===34###soif===1429###eoif===1443###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3787###sois===168339###eois===168366###lif===34###soif===1445###eoif===1472###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_168312++;
        if (AKA_BLOCK_LOOP_168312 > 1000) {
            //break;
        }
        AKA_mark("lis===3788###sois===168379###eois===168402###lif===35###soif===1485###eoif===1508###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");unsigned index = in[i];
        /*out of bounds of palette not checked: see lodepng_color_mode_alloc_palette.*/
        AKA_mark("lis===3790###sois===168501###eois===168554###lif===37###soif===1607###eoif===1660###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");lodepng_memcpy(buffer, &mode->palette[index * 4], 3);
      }
    } else {
      AKA_mark("lis===3793###sois===168585###eois===168598###lif===40###soif===1691###eoif===1704###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");size_t j = 0;
      int AKA_BLOCK_LOOP_168606 = 0;
    AKA_mark("lis===3794###sois===168610###eois===168616###lif===41###soif===1716###eoif===1722###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3794###sois===168617###eois===168631###lif===41###soif===1723###eoif===1737###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3794###sois===168617###eois===168631###lif===41###soif===1723###eoif===1737###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3794###sois===168633###eois===168660###lif===41###soif===1739###eoif===1766###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_168606++;
        if (AKA_BLOCK_LOOP_168606 > 1000) {
            //break;
        }
        AKA_mark("lis===3795###sois===168673###eois===168741###lif===42###soif===1779###eoif===1847###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");unsigned index = readBitsFromReversedStream(&j, in, mode->bitdepth);
        /*out of bounds of palette not checked: see lodepng_color_mode_alloc_palette.*/
        AKA_mark("lis===3797###sois===168840###eois===168893###lif===44###soif===1946###eoif===1999###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");lodepng_memcpy(buffer, &mode->palette[index * 4], 3);
      }
    }
  } else {
if(AKA_mark("lis===3800###sois===168923###eois===168956###lif===47###soif===2029###eoif===2062###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3800###sois===168923###eois===168956###lif===47###soif===2029###eoif===2062###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->colortype == LCT_GREY_ALPHA))) {
    if(AKA_mark("lis===3801###sois===168968###eois===168987###lif===48###soif===2074###eoif===2093###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3801###sois===168968###eois===168987###lif===48###soif===2074###eoif===2093###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->bitdepth == 8))) {
      int AKA_BLOCK_LOOP_168998 = 0;
    AKA_mark("lis===3802###sois===169002###eois===169008###lif===49###soif===2108###eoif===2114###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3802###sois===169009###eois===169023###lif===49###soif===2115###eoif===2129###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3802###sois===169009###eois===169023###lif===49###soif===2115###eoif===2129###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3802###sois===169025###eois===169052###lif===49###soif===2131###eoif===2158###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_168998++;
        if (AKA_BLOCK_LOOP_168998 > 1000) {
            //break;
        }
        AKA_mark("lis===3803###sois===169065###eois===169115###lif===50###soif===2171###eoif===2221###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[0] = buffer[1] = buffer[2] = in[i * 2 + 0];
      }
    } else {
      int AKA_BLOCK_LOOP_169146 = 0;
    AKA_mark("lis===3806###sois===169150###eois===169156###lif===53###soif===2256###eoif===2262###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3806###sois===169157###eois===169171###lif===53###soif===2263###eoif===2277###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3806###sois===169157###eois===169171###lif===53###soif===2263###eoif===2277###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3806###sois===169173###eois===169200###lif===53###soif===2279###eoif===2306###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_169146++;
        if (AKA_BLOCK_LOOP_169146 > 1000) {
            //break;
        }
        AKA_mark("lis===3807###sois===169213###eois===169263###lif===54###soif===2319###eoif===2369###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[0] = buffer[1] = buffer[2] = in[i * 4 + 0];
      }
    }
  } else {
if(AKA_mark("lis===3810###sois===169293###eois===169320###lif===57###soif===2399###eoif===2426###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3810###sois===169293###eois===169320###lif===57###soif===2399###eoif===2426###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->colortype == LCT_RGBA))) {
    if(AKA_mark("lis===3811###sois===169332###eois===169351###lif===58###soif===2438###eoif===2457###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3811###sois===169332###eois===169351###lif===58###soif===2438###eoif===2457###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (mode->bitdepth == 8))) {
      int AKA_BLOCK_LOOP_169362 = 0;
    AKA_mark("lis===3812###sois===169366###eois===169372###lif===59###soif===2472###eoif===2478###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3812###sois===169373###eois===169387###lif===59###soif===2479###eoif===2493###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3812###sois===169373###eois===169387###lif===59###soif===2479###eoif===2493###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3812###sois===169389###eois===169416###lif===59###soif===2495###eoif===2522###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_169362++;
        if (AKA_BLOCK_LOOP_169362 > 1000) {
            //break;
        }
        AKA_mark("lis===3813###sois===169429###eois===169467###lif===60###soif===2535###eoif===2573###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");lodepng_memcpy(buffer, &in[i * 4], 3);
      }
    } else {
      int AKA_BLOCK_LOOP_169498 = 0;
    AKA_mark("lis===3816###sois===169502###eois===169508###lif===63###soif===2608###eoif===2614###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3816###sois===169509###eois===169523###lif===63###soif===2615###eoif===2629###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (AKA_mark("lis===3816###sois===169509###eois===169523###lif===63###soif===2615###eoif===2629###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===3816###sois===169525###eois===169552###lif===63###soif===2631###eoif===2658###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");++i, buffer += num_channels;})) {
        AKA_BLOCK_LOOP_169498++;
        if (AKA_BLOCK_LOOP_169498 > 1000) {
            //break;
        }
        AKA_mark("lis===3817###sois===169565###eois===169591###lif===64###soif===2671###eoif===2697###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[0] = in[i * 8 + 0];
        AKA_mark("lis===3818###sois===169601###eois===169627###lif===65###soif===2707###eoif===2733###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[1] = in[i * 8 + 2];
        AKA_mark("lis===3819###sois===169637###eois===169663###lif===66###soif===2743###eoif===2769###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");buffer[2] = in[i * 8 + 4];
      }
    }
  }
else {
AKA_mark("lis===-3810-###sois===-169293-###eois===-16929327-###lif===-57-###soif===-###eoif===-2426-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorsRGB8(unsigned char*,size_t,unsigned char const*,LodePNGColorMode const*)");
}
}

}

}

}

}

/*Get RGBA16 color of pixel with index i (y * width + x) from the raw image with
given color type, but the given color type must be 16-bit itself.*/
/** Instrumented function getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*) */
static void getPixelColorRGBA16(unsigned short* r, unsigned short* g, unsigned short* b, unsigned short* a,
                                const unsigned char* in, size_t i, const LodePNGColorMode* mode) /* << Aka begin of function void getPixelColorRGBA16(unsigned short* r, unsigned short* g, unsigned short* b, unsigned short* a,
                                const unsigned char* in, size_t i, const LodePNGColorMode* mode) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.getPixelColorRGBA16.169854.stub"

  if(AKA_mark("lis===3829###sois===170056###eois===170083###lif===2###soif===214###eoif===241###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)") && (AKA_mark("lis===3829###sois===170056###eois===170083###lif===2###soif===214###eoif===241###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->colortype == LCT_GREY))) {
    AKA_mark("lis===3830###sois===170092###eois===170143###lif===3###soif===250###eoif===301###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)");*r = *g = *b = 256 * in[i * 2 + 0] + in[i * 2 + 1];
    if(AKA_mark("lis===3831###sois===170152###eois===170224###lif===4###soif===310###eoif===382###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)") && ((AKA_mark("lis===3831###sois===170152###eois===170169###lif===4###soif===310###eoif===327###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->key_defined)) && (AKA_mark("lis===3831###sois===170173###eois===170224###lif===4###soif===331###eoif===382###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)") && (256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r)))) {
AKA_mark("lis===3831###sois===170226###eois===170233###lif===4###soif===384###eoif===391###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = 0;
}

    else {
AKA_mark("lis===3832###sois===170244###eois===170255###lif===5###soif===402###eoif===413###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = 65535;
}

  } else {
if(AKA_mark("lis===3833###sois===170269###eois===170295###lif===6###soif===427###eoif===453###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)") && (AKA_mark("lis===3833###sois===170269###eois===170295###lif===6###soif===427###eoif===453###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->colortype == LCT_RGB))) {
    AKA_mark("lis===3834###sois===170304###eois===170346###lif===7###soif===462###eoif===504###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)");*r = 256u * in[i * 6 + 0] + in[i * 6 + 1];
    AKA_mark("lis===3835###sois===170352###eois===170394###lif===8###soif===510###eoif===552###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)");*g = 256u * in[i * 6 + 2] + in[i * 6 + 3];
    AKA_mark("lis===3836###sois===170400###eois===170442###lif===9###soif===558###eoif===600###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)");*b = 256u * in[i * 6 + 4] + in[i * 6 + 5];
    if(AKA_mark("lis===3837###sois===170451###eois===170657###lif===10###soif===609###eoif===815###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)") && ((((AKA_mark("lis===3837###sois===170451###eois===170468###lif===10###soif===609###eoif===626###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->key_defined))
       && (AKA_mark("lis===3838###sois===170480###eois===170531###lif===11###soif===638###eoif===689###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)") && (256u * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r)))
       && (AKA_mark("lis===3839###sois===170543###eois===170594###lif===12###soif===701###eoif===752###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)") && (256u * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g)))
       && (AKA_mark("lis===3840###sois===170606###eois===170657###lif===13###soif===764###eoif===815###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)") && (256u * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b)))) {
AKA_mark("lis===3840###sois===170659###eois===170666###lif===13###soif===817###eoif===824###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = 0;
}

    else {
AKA_mark("lis===3841###sois===170677###eois===170688###lif===14###soif===835###eoif===846###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = 65535;
}

  } else {
if(AKA_mark("lis===3842###sois===170702###eois===170735###lif===15###soif===860###eoif===893###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)") && (AKA_mark("lis===3842###sois===170702###eois===170735###lif===15###soif===860###eoif===893###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->colortype == LCT_GREY_ALPHA))) {
    AKA_mark("lis===3843###sois===170744###eois===170796###lif===16###soif===902###eoif===954###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)");*r = *g = *b = 256u * in[i * 4 + 0] + in[i * 4 + 1];
    AKA_mark("lis===3844###sois===170802###eois===170844###lif===17###soif===960###eoif===1002###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = 256u * in[i * 4 + 2] + in[i * 4 + 3];
  } else {
if(AKA_mark("lis===3845###sois===170858###eois===170885###lif===18###soif===1016###eoif===1043###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)") && (AKA_mark("lis===3845###sois===170858###eois===170885###lif===18###soif===1016###eoif===1043###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)") && (mode->colortype == LCT_RGBA))) {
    AKA_mark("lis===3846###sois===170894###eois===170936###lif===19###soif===1052###eoif===1094###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)");*r = 256u * in[i * 8 + 0] + in[i * 8 + 1];
    AKA_mark("lis===3847###sois===170942###eois===170984###lif===20###soif===1100###eoif===1142###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)");*g = 256u * in[i * 8 + 2] + in[i * 8 + 3];
    AKA_mark("lis===3848###sois===170990###eois===171032###lif===21###soif===1148###eoif===1190###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)");*b = 256u * in[i * 8 + 4] + in[i * 8 + 5];
    AKA_mark("lis===3849###sois===171038###eois===171080###lif===22###soif===1196###eoif===1238###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)");*a = 256u * in[i * 8 + 6] + in[i * 8 + 7];
  }
else {
AKA_mark("lis===-3845-###sois===-170858-###eois===-17085827-###lif===-18-###soif===-###eoif===-1043-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getPixelColorRGBA16(unsigned short*,unsigned short*,unsigned short*,unsigned short*,unsigned char const*,size_t,LodePNGColorMode const*)");
}
}

}

}

}

/** Instrumented function lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned) */
unsigned lodepng_convert(unsigned char* out, const unsigned char* in,
                         const LodePNGColorMode* mode_out, const LodePNGColorMode* mode_in,
                         unsigned w, unsigned h) /* << Aka begin of function unsigned lodepng_convert(unsigned char* out, const unsigned char* in,
                         const LodePNGColorMode* mode_out, const LodePNGColorMode* mode_in,
                         unsigned w, unsigned h) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_convert.171101.stub"

  AKA_mark("lis===3856###sois===171310###eois===171319###lif===3###soif===218###eoif===227###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");size_t i;
  AKA_mark("lis===3857###sois===171323###eois===171338###lif===4###soif===231###eoif===246###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");ColorTree tree;
  AKA_mark("lis===3858###sois===171342###eois===171383###lif===5###soif===250###eoif===291###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");size_t numpixels = (size_t)w * (size_t)h;
  AKA_mark("lis===3859###sois===171387###eois===171406###lif===6###soif===295###eoif===314###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");unsigned error = 0;

  if(AKA_mark("lis===3861###sois===171415###eois===171469###lif===8###soif===323###eoif===377###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && ((AKA_mark("lis===3861###sois===171415###eois===171448###lif===8###soif===323###eoif===356###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (mode_in->colortype == LCT_PALETTE)) && (AKA_mark("lis===3861###sois===171452###eois===171469###lif===8###soif===360###eoif===377###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (!mode_in->palette)))) {
    AKA_mark("lis===3862###sois===171478###eois===171489###lif===9###soif===386###eoif===397###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");return 107; /* error: must provide palette if input mode is palette */
  }
else {
AKA_mark("lis===-3861-###sois===-171415-###eois===-17141554-###lif===-8-###soif===-###eoif===-377-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");
}

  if(AKA_mark("lis===3865###sois===171562###eois===171605###lif===12###soif===470###eoif===513###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (AKA_mark("lis===3865###sois===171562###eois===171605###lif===12###soif===470###eoif===513###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (lodepng_color_mode_equal(mode_out, mode_in)))) {
    AKA_mark("lis===3866###sois===171614###eois===171668###lif===13###soif===522###eoif===576###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");size_t numbytes = lodepng_get_raw_size(w, h, mode_in);
    AKA_mark("lis===3867###sois===171674###eois===171708###lif===14###soif===582###eoif===616###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");lodepng_memcpy(out, in, numbytes);
    AKA_mark("lis===3868###sois===171714###eois===171723###lif===15###soif===622###eoif===631###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");return 0;
  }
else {
AKA_mark("lis===-3865-###sois===-171562-###eois===-17156243-###lif===-12-###soif===-###eoif===-513-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");
}

  if(AKA_mark("lis===3871###sois===171737###eois===171771###lif===18###soif===645###eoif===679###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (AKA_mark("lis===3871###sois===171737###eois===171771###lif===18###soif===645###eoif===679###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (mode_out->colortype == LCT_PALETTE))) {
    AKA_mark("lis===3872###sois===171780###eois===171823###lif===19###soif===688###eoif===731###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");size_t palettesize = mode_out->palettesize;
    AKA_mark("lis===3873###sois===171829###eois===171878###lif===20###soif===737###eoif===786###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");const unsigned char* palette = mode_out->palette;
    AKA_mark("lis===3874###sois===171884###eois===171934###lif===21###soif===792###eoif===842###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");size_t palsize = (size_t)1u << mode_out->bitdepth;
    /*if the user specified output palette but did not give the values, assume
    they want the values of the input color type (assuming that one is palette).
    Note that we never create a new palette ourselves.*/
    if(AKA_mark("lis===3878###sois===172163###eois===172179###lif===25###soif===1071###eoif===1087###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (AKA_mark("lis===3878###sois===172163###eois===172179###lif===25###soif===1071###eoif===1087###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (palettesize == 0))) {
      AKA_mark("lis===3879###sois===172190###eois===172225###lif===26###soif===1098###eoif===1133###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");palettesize = mode_in->palettesize;
      AKA_mark("lis===3880###sois===172233###eois===172260###lif===27###soif===1141###eoif===1168###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");palette = mode_in->palette;
      /*if the input was also palette with same bitdepth, then the color types are also
      equal, so copy literally. This to preserve the exact indices that were in the PNG
      even in case there are duplicate colors in the palette.*/
      if(AKA_mark("lis===3884###sois===172514###eois===172590###lif===31###soif===1422###eoif===1498###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && ((AKA_mark("lis===3884###sois===172514###eois===172547###lif===31###soif===1422###eoif===1455###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (mode_in->colortype == LCT_PALETTE)) && (AKA_mark("lis===3884###sois===172551###eois===172590###lif===31###soif===1459###eoif===1498###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (mode_in->bitdepth == mode_out->bitdepth)))) {
        AKA_mark("lis===3885###sois===172603###eois===172657###lif===32###soif===1511###eoif===1565###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");size_t numbytes = lodepng_get_raw_size(w, h, mode_in);
        AKA_mark("lis===3886###sois===172667###eois===172701###lif===33###soif===1575###eoif===1609###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");lodepng_memcpy(out, in, numbytes);
        AKA_mark("lis===3887###sois===172711###eois===172720###lif===34###soif===1619###eoif===1628###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");return 0;
      }
else {
AKA_mark("lis===-3884-###sois===-172514-###eois===-17251476-###lif===-31-###soif===-###eoif===-1498-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");
}
    }
else {
AKA_mark("lis===-3878-###sois===-172163-###eois===-17216316-###lif===-25-###soif===-###eoif===-1087-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");
}
    if(AKA_mark("lis===3890###sois===172745###eois===172766###lif===37###soif===1653###eoif===1674###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (AKA_mark("lis===3890###sois===172745###eois===172766###lif===37###soif===1653###eoif===1674###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (palettesize < palsize))) {
AKA_mark("lis===3890###sois===172768###eois===172790###lif===37###soif===1676###eoif===1698###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");palsize = palettesize;
}

else {
AKA_mark("lis===-3890-###sois===-172745-###eois===-17274521-###lif===-37-###soif===-###eoif===-1674-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");
}
    AKA_mark("lis===3891###sois===172796###eois===172819###lif===38###soif===1704###eoif===1727###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");color_tree_init(&tree);
    int AKA_BLOCK_LOOP_172825 = 0;
    AKA_mark("lis===3892###sois===172829###eois===172835###lif===39###soif===1737###eoif===1743###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");
for(i = 0; AKA_mark("lis===3892###sois===172836###eois===172848###lif===39###soif===1744###eoif===1756###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (AKA_mark("lis===3892###sois===172836###eois===172848###lif===39###soif===1744###eoif===1756###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (i != palsize)); ({AKA_mark("lis===3892###sois===172850###eois===172853###lif===39###soif===1758###eoif===1761###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");++i;})) {
        AKA_BLOCK_LOOP_172825++;
        if (AKA_BLOCK_LOOP_172825 > 1000) {
            //break;
        }
      AKA_mark("lis===3893###sois===172864###eois===172905###lif===40###soif===1772###eoif===1813###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");const unsigned char* p = &palette[i * 4];
      AKA_mark("lis===3894###sois===172913###eois===172980###lif===41###soif===1821###eoif===1888###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");error = color_tree_add(&tree, p[0], p[1], p[2], p[3], (unsigned)i);
      if(AKA_mark("lis===3895###sois===172991###eois===172996###lif===42###soif===1899###eoif===1904###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (AKA_mark("lis===3895###sois===172991###eois===172996###lif===42###soif===1899###eoif===1904###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (error))) {
AKA_mark("lis===3895###sois===172998###eois===173004###lif===42###soif===1906###eoif===1912###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");break;
}

else {
AKA_mark("lis===-3895-###sois===-172991-###eois===-1729915-###lif===-42-###soif===-###eoif===-1904-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");
}
    }
  }
else {
AKA_mark("lis===-3871-###sois===-171737-###eois===-17173734-###lif===-18-###soif===-###eoif===-679-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");
}

  if(AKA_mark("lis===3899###sois===173025###eois===173031###lif===46###soif===1933###eoif===1939###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (AKA_mark("lis===3899###sois===173025###eois===173031###lif===46###soif===1933###eoif===1939###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (!error))) {
    if(AKA_mark("lis===3900###sois===173043###eois===173094###lif===47###soif===1951###eoif===2002###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && ((AKA_mark("lis===3900###sois===173043###eois===173066###lif===47###soif===1951###eoif===1974###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (mode_in->bitdepth == 16)) && (AKA_mark("lis===3900###sois===173070###eois===173094###lif===47###soif===1978###eoif===2002###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (mode_out->bitdepth == 16)))) {
      int AKA_BLOCK_LOOP_173105 = 0;
    AKA_mark("lis===3901###sois===173109###eois===173115###lif===48###soif===2017###eoif===2023###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");
for(i = 0; AKA_mark("lis===3901###sois===173116###eois===173130###lif===48###soif===2024###eoif===2038###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (AKA_mark("lis===3901###sois===173116###eois===173130###lif===48###soif===2024###eoif===2038###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (i != numpixels)); ({AKA_mark("lis===3901###sois===173132###eois===173135###lif===48###soif===2040###eoif===2043###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");++i;})) {
        AKA_BLOCK_LOOP_173105++;
        if (AKA_BLOCK_LOOP_173105 > 1000) {
            //break;
        }
        AKA_mark("lis===3902###sois===173148###eois===173190###lif===49###soif===2056###eoif===2098###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");unsigned short r = 0, g = 0, b = 0, a = 0;
        AKA_mark("lis===3903###sois===173200###eois===173252###lif===50###soif===2108###eoif===2160###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode_in);
        AKA_mark("lis===3904###sois===173262###eois===173306###lif===51###soif===2170###eoif===2214###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");rgba16ToPixel(out, i, mode_out, r, g, b, a);
      }
    } else {
if(AKA_mark("lis===3906###sois===173331###eois===173389###lif===53###soif===2239###eoif===2297###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && ((AKA_mark("lis===3906###sois===173331###eois===173354###lif===53###soif===2239###eoif===2262###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (mode_out->bitdepth == 8)) && (AKA_mark("lis===3906###sois===173358###eois===173389###lif===53###soif===2266###eoif===2297###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (mode_out->colortype == LCT_RGBA)))) {
      AKA_mark("lis===3907###sois===173400###eois===173449###lif===54###soif===2308###eoif===2357###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");getPixelColorsRGBA8(out, numpixels, in, mode_in);
    } else {
if(AKA_mark("lis===3908###sois===173465###eois===173522###lif===55###soif===2373###eoif===2430###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && ((AKA_mark("lis===3908###sois===173465###eois===173488###lif===55###soif===2373###eoif===2396###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (mode_out->bitdepth == 8)) && (AKA_mark("lis===3908###sois===173492###eois===173522###lif===55###soif===2400###eoif===2430###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (mode_out->colortype == LCT_RGB)))) {
      AKA_mark("lis===3909###sois===173533###eois===173581###lif===56###soif===2441###eoif===2489###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");getPixelColorsRGB8(out, numpixels, in, mode_in);
    } else {
      AKA_mark("lis===3911###sois===173603###eois===173644###lif===58###soif===2511###eoif===2552###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");unsigned char r = 0, g = 0, b = 0, a = 0;
      int AKA_BLOCK_LOOP_173652 = 0;
    AKA_mark("lis===3912###sois===173656###eois===173662###lif===59###soif===2564###eoif===2570###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");
for(i = 0; AKA_mark("lis===3912###sois===173663###eois===173677###lif===59###soif===2571###eoif===2585###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (AKA_mark("lis===3912###sois===173663###eois===173677###lif===59###soif===2571###eoif===2585###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (i != numpixels)); ({AKA_mark("lis===3912###sois===173679###eois===173682###lif===59###soif===2587###eoif===2590###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");++i;})) {
        AKA_BLOCK_LOOP_173652++;
        if (AKA_BLOCK_LOOP_173652 > 1000) {
            //break;
        }
        AKA_mark("lis===3913###sois===173695###eois===173746###lif===60###soif===2603###eoif===2654###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode_in);
        AKA_mark("lis===3914###sois===173756###eois===173814###lif===61###soif===2664###eoif===2722###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");error = rgba8ToPixel(out, i, mode_out, &tree, r, g, b, a);
        if(AKA_mark("lis===3915###sois===173827###eois===173832###lif===62###soif===2735###eoif===2740###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (AKA_mark("lis===3915###sois===173827###eois===173832###lif===62###soif===2735###eoif===2740###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (error))) {
AKA_mark("lis===3915###sois===173834###eois===173840###lif===62###soif===2742###eoif===2748###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");break;
}

else {
AKA_mark("lis===-3915-###sois===-173827-###eois===-1738275-###lif===-62-###soif===-###eoif===-2740-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");
}
      }
    }
}

}

  }
else {
AKA_mark("lis===-3899-###sois===-173025-###eois===-1730256-###lif===-46-###soif===-###eoif===-1939-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");
}

  if(AKA_mark("lis===3920###sois===173870###eois===173904###lif===67###soif===2778###eoif===2812###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (AKA_mark("lis===3920###sois===173870###eois===173904###lif===67###soif===2778###eoif===2812###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)") && (mode_out->colortype == LCT_PALETTE))) {
    AKA_mark("lis===3921###sois===173913###eois===173939###lif===68###soif===2821###eoif===2847###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");color_tree_cleanup(&tree);
  }
else {
AKA_mark("lis===-3920-###sois===-173870-###eois===-17387034-###lif===-67-###soif===-###eoif===-2812-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");
}

  AKA_mark("lis===3924###sois===173950###eois===173963###lif===71###soif===2858###eoif===2871###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert(unsigned char*,unsigned char const*,LodePNGColorMode const*,LodePNGColorMode const*,unsigned,unsigned)");return error;
}


/* Converts a single rgb color without alpha from one type to another, color bits truncated to
their bitdepth. In case of single channel (gray or palette), only the r channel is used. Slow
function, do not use to process all pixels of an image. Alpha channel not supported on purpose:
this is for bKGD, supporting alpha may prevent it from finding a color in the palette, from the
specification it looks like bKGD should ignore the alpha values of the palette since it can use
any palette index but doesn't have an alpha channel. Idem with ignoring color key. */
/** Instrumented function lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*) */
unsigned lodepng_convert_rgb(
    unsigned* r_out, unsigned* g_out, unsigned* b_out,
    unsigned r_in, unsigned g_in, unsigned b_in,
    const LodePNGColorMode* mode_out, const LodePNGColorMode* mode_in) /* << Aka begin of function unsigned lodepng_convert_rgb(
    unsigned* r_out, unsigned* g_out, unsigned* b_out,
    unsigned r_in, unsigned g_in, unsigned b_in,
    const LodePNGColorMode* mode_out, const LodePNGColorMode* mode_in) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_convert_rgb.174550.stub"

  AKA_mark("lis===3938###sois===174754###eois===174783###lif===4###soif===213###eoif===242###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");unsigned r = 0, g = 0, b = 0;
  AKA_mark("lis===3939###sois===174787###eois===174843###lif===5###soif===246###eoif===302###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");unsigned mul = 65535 / ((1u << mode_in->bitdepth) - 1u); /*65535, 21845, 4369, 257, 1*/
  AKA_mark("lis===3940###sois===174878###eois===174919###lif===6###soif===337###eoif===378###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");unsigned shift = 16 - mode_out->bitdepth;

  if(AKA_mark("lis===3942###sois===174928###eois===174998###lif===8###soif===387###eoif===457###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && ((AKA_mark("lis===3942###sois===174928###eois===174958###lif===8###soif===387###eoif===417###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (mode_in->colortype == LCT_GREY)) || (AKA_mark("lis===3942###sois===174962###eois===174998###lif===8###soif===421###eoif===457###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (mode_in->colortype == LCT_GREY_ALPHA)))) {
    AKA_mark("lis===3943###sois===175007###eois===175030###lif===9###soif===466###eoif===489###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");r = g = b = r_in * mul;
  } else {
if(AKA_mark("lis===3944###sois===175044###eois===175107###lif===10###soif===503###eoif===566###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && ((AKA_mark("lis===3944###sois===175044###eois===175073###lif===10###soif===503###eoif===532###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (mode_in->colortype == LCT_RGB)) || (AKA_mark("lis===3944###sois===175077###eois===175107###lif===10###soif===536###eoif===566###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (mode_in->colortype == LCT_RGBA)))) {
    AKA_mark("lis===3945###sois===175116###eois===175131###lif===11###soif===575###eoif===590###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");r = r_in * mul;
    AKA_mark("lis===3946###sois===175137###eois===175152###lif===12###soif===596###eoif===611###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");g = g_in * mul;
    AKA_mark("lis===3947###sois===175158###eois===175173###lif===13###soif===617###eoif===632###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");b = b_in * mul;
  } else {
if(AKA_mark("lis===3948###sois===175187###eois===175220###lif===14###soif===646###eoif===679###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (AKA_mark("lis===3948###sois===175187###eois===175220###lif===14###soif===646###eoif===679###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (mode_in->colortype == LCT_PALETTE))) {
    if(AKA_mark("lis===3949###sois===175232###eois===175260###lif===15###soif===691###eoif===719###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (AKA_mark("lis===3949###sois===175232###eois===175260###lif===15###soif===691###eoif===719###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (r_in >= mode_in->palettesize))) {
AKA_mark("lis===3949###sois===175262###eois===175272###lif===15###soif===721###eoif===731###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");return 82;
}

else {
AKA_mark("lis===-3949-###sois===-175232-###eois===-17523228-###lif===-15-###soif===-###eoif===-719-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");
}
    AKA_mark("lis===3950###sois===175278###eois===175320###lif===16###soif===737###eoif===779###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");r = mode_in->palette[r_in * 4 + 0] * 257u;
    AKA_mark("lis===3951###sois===175326###eois===175368###lif===17###soif===785###eoif===827###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");g = mode_in->palette[r_in * 4 + 1] * 257u;
    AKA_mark("lis===3952###sois===175374###eois===175416###lif===18###soif===833###eoif===875###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");b = mode_in->palette[r_in * 4 + 2] * 257u;
  } else {
    AKA_mark("lis===3954###sois===175434###eois===175444###lif===20###soif===893###eoif===903###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");return 31;
  }
}

}


  /* now convert to output format */
  if(AKA_mark("lis===3958###sois===175496###eois===175568###lif===24###soif===955###eoif===1027###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && ((AKA_mark("lis===3958###sois===175496###eois===175527###lif===24###soif===955###eoif===986###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (mode_out->colortype == LCT_GREY)) || (AKA_mark("lis===3958###sois===175531###eois===175568###lif===24###soif===990###eoif===1027###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (mode_out->colortype == LCT_GREY_ALPHA)))) {
    AKA_mark("lis===3959###sois===175577###eois===175598###lif===25###soif===1036###eoif===1057###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");*r_out = r >> shift ;
  } else {
if(AKA_mark("lis===3960###sois===175612###eois===175677###lif===26###soif===1071###eoif===1136###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && ((AKA_mark("lis===3960###sois===175612###eois===175642###lif===26###soif===1071###eoif===1101###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (mode_out->colortype == LCT_RGB)) || (AKA_mark("lis===3960###sois===175646###eois===175677###lif===26###soif===1105###eoif===1136###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (mode_out->colortype == LCT_RGBA)))) {
    AKA_mark("lis===3961###sois===175686###eois===175707###lif===27###soif===1145###eoif===1166###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");*r_out = r >> shift ;
    AKA_mark("lis===3962###sois===175713###eois===175734###lif===28###soif===1172###eoif===1193###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");*g_out = g >> shift ;
    AKA_mark("lis===3963###sois===175740###eois===175761###lif===29###soif===1199###eoif===1220###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");*b_out = b >> shift ;
  } else {
if(AKA_mark("lis===3964###sois===175775###eois===175809###lif===30###soif===1234###eoif===1268###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (AKA_mark("lis===3964###sois===175775###eois===175809###lif===30###soif===1234###eoif===1268###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (mode_out->colortype == LCT_PALETTE))) {
    AKA_mark("lis===3965###sois===175818###eois===175829###lif===31###soif===1277###eoif===1288###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");unsigned i;
    /* a 16-bit color cannot be in the palette */
    if(AKA_mark("lis===3967###sois===175889###eois===175960###lif===33###soif===1348###eoif===1419###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (((AKA_mark("lis===3967###sois===175889###eois===175910###lif===33###soif===1348###eoif===1369###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && ((r >> 8) != (r & 255))) || (AKA_mark("lis===3967###sois===175914###eois===175935###lif===33###soif===1373###eoif===1394###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && ((g >> 8) != (g & 255)))) || (AKA_mark("lis===3967###sois===175939###eois===175960###lif===33###soif===1398###eoif===1419###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && ((b >> 8) != (b & 255))))) {
AKA_mark("lis===3967###sois===175962###eois===175972###lif===33###soif===1421###eoif===1431###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");return 82;
}

else {
AKA_mark("lis===-3967-###sois===-175889-###eois===-17588971-###lif===-33-###soif===-###eoif===-1419-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");
}
    int AKA_BLOCK_LOOP_175978 = 0;
    AKA_mark("lis===3968###sois===175982###eois===175988###lif===34###soif===1441###eoif===1447###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===3968###sois===175989###eois===176014###lif===34###soif===1448###eoif===1473###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (AKA_mark("lis===3968###sois===175989###eois===176014###lif===34###soif===1448###eoif===1473###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (i < mode_out->palettesize)); ({AKA_mark("lis===3968###sois===176016###eois===176019###lif===34###soif===1475###eoif===1478###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");i++;})) {
        AKA_BLOCK_LOOP_175978++;
        if (AKA_BLOCK_LOOP_175978 > 1000) {
            //break;
        }
      AKA_mark("lis===3969###sois===176030###eois===176049###lif===35###soif===1489###eoif===1508###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");unsigned j = i * 4;
      if(AKA_mark("lis===3970###sois===176060###eois===176187###lif===36###soif===1519###eoif===1646###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && (((AKA_mark("lis===3970###sois===176060###eois===176096###lif===36###soif===1519###eoif===1555###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && ((r >> 8) == mode_out->palette[j + 0])) && (AKA_mark("lis===3970###sois===176100###eois===176136###lif===36###soif===1559###eoif===1595###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && ((g >> 8) == mode_out->palette[j + 1]))) &&
          (AKA_mark("lis===3971###sois===176151###eois===176187###lif===37###soif===1610###eoif===1646###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)") && ((b >> 8) == mode_out->palette[j + 2])))) {
        AKA_mark("lis===3972###sois===176200###eois===176211###lif===38###soif===1659###eoif===1670###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");*r_out = i;
        AKA_mark("lis===3973###sois===176221###eois===176230###lif===39###soif===1680###eoif===1689###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");return 0;
      }
else {
AKA_mark("lis===-3970-###sois===-176060-###eois===-176060127-###lif===-36-###soif===-###eoif===-1646-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");
}
    }
    AKA_mark("lis===3976###sois===176252###eois===176262###lif===42###soif===1711###eoif===1721###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");return 82;
  } else {
    AKA_mark("lis===3978###sois===176280###eois===176290###lif===44###soif===1739###eoif===1749###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");return 31;
  }
}

}


  AKA_mark("lis===3981###sois===176301###eois===176310###lif===47###soif===1760###eoif===1769###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_convert_rgb(unsigned*,unsigned*,unsigned*,unsigned,unsigned,unsigned,LodePNGColorMode const*,LodePNGColorMode const*)");return 0;
}

#ifdef LODEPNG_COMPILE_ENCODER

/** Instrumented function lodepng_color_stats_init(LodePNGColorStats*) */
void lodepng_color_stats_init(LodePNGColorStats* stats) /* << Aka begin of function void lodepng_color_stats_init(LodePNGColorStats* stats) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_init(LodePNGColorStats*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_color_stats_init.176356.stub"

  /*stats*/
  AKA_mark("lis===3988###sois===176425###eois===176444###lif===2###soif===74###eoif===93###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_init(LodePNGColorStats*)");stats->colored = 0;
  AKA_mark("lis===3989###sois===176448###eois===176463###lif===3###soif===97###eoif===112###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_init(LodePNGColorStats*)");stats->key = 0;
  AKA_mark("lis===3990###sois===176467###eois===176514###lif===4###soif===116###eoif===163###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_init(LodePNGColorStats*)");stats->key_r = stats->key_g = stats->key_b = 0;
  AKA_mark("lis===3991###sois===176518###eois===176535###lif===5###soif===167###eoif===184###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_init(LodePNGColorStats*)");stats->alpha = 0;
  AKA_mark("lis===3992###sois===176539###eois===176560###lif===6###soif===188###eoif===209###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_init(LodePNGColorStats*)");stats->numcolors = 0;
  AKA_mark("lis===3993###sois===176564###eois===176580###lif===7###soif===213###eoif===229###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_init(LodePNGColorStats*)");stats->bits = 1;
  AKA_mark("lis===3994###sois===176584###eois===176605###lif===8###soif===233###eoif===254###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_init(LodePNGColorStats*)");stats->numpixels = 0;
  /*settings*/
  AKA_mark("lis===3996###sois===176625###eois===176650###lif===10###soif===274###eoif===299###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_init(LodePNGColorStats*)");stats->allow_palette = 1;
  AKA_mark("lis===3997###sois===176654###eois===176681###lif===11###soif===303###eoif===330###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_init(LodePNGColorStats*)");stats->allow_greyscale = 1;
}

/*function used for debug purposes with C++*/
/*void printColorStats(LodePNGColorStats* p) {
  std::cout << "colored: " << (int)p->colored << ", ";
  std::cout << "key: " << (int)p->key << ", ";
  std::cout << "key_r: " << (int)p->key_r << ", ";
  std::cout << "key_g: " << (int)p->key_g << ", ";
  std::cout << "key_b: " << (int)p->key_b << ", ";
  std::cout << "alpha: " << (int)p->alpha << ", ";
  std::cout << "numcolors: " << (int)p->numcolors << ", ";
  std::cout << "bits: " << (int)p->bits << std::endl;
}*/

/*Returns how many bits needed to represent given value (max 8 bit)*/
/** Instrumented function getValueRequiredBits(unsigned char) */
static unsigned getValueRequiredBits(unsigned char value) /* << Aka begin of function unsigned getValueRequiredBits(unsigned char value) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\getValueRequiredBits(unsigned char)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.getValueRequiredBits.177304.stub"

  if(AKA_mark("lis===4014###sois===177354###eois===177380###lif===1###soif===66###eoif===92###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getValueRequiredBits(unsigned char)") && ((AKA_mark("lis===4014###sois===177354###eois===177364###lif===1###soif===66###eoif===76###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getValueRequiredBits(unsigned char)") && (value == 0)) || (AKA_mark("lis===4014###sois===177368###eois===177380###lif===1###soif===80###eoif===92###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getValueRequiredBits(unsigned char)") && (value == 255)))) {
AKA_mark("lis===4014###sois===177382###eois===177391###lif===1###soif===94###eoif===103###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getValueRequiredBits(unsigned char)");return 1;
}

else {
AKA_mark("lis===-4014-###sois===-177354-###eois===-17735426-###lif===-1-###soif===-###eoif===-92-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getValueRequiredBits(unsigned char)");
}
  /*The scaling of 2-bit and 4-bit values uses multiples of 85 and 17*/
  if(AKA_mark("lis===4016###sois===177471###eois===177486###lif===3###soif===183###eoif===198###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getValueRequiredBits(unsigned char)") && (AKA_mark("lis===4016###sois===177471###eois===177486###lif===3###soif===183###eoif===198###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getValueRequiredBits(unsigned char)") && (value % 17 == 0))) {
AKA_mark("lis===4016###sois===177488###eois===177519###lif===3###soif===200###eoif===231###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getValueRequiredBits(unsigned char)");return value % 85 == 0 ? 2 : 4;
}

else {
AKA_mark("lis===-4016-###sois===-177471-###eois===-17747115-###lif===-3-###soif===-###eoif===-198-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getValueRequiredBits(unsigned char)");
}
  AKA_mark("lis===4017###sois===177523###eois===177532###lif===4###soif===235###eoif===244###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\getValueRequiredBits(unsigned char)");return 8;
}

/*stats must already have been inited. */
/** Instrumented function lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*) */
unsigned lodepng_compute_color_stats(LodePNGColorStats* stats,
                                     const unsigned char* in, unsigned w, unsigned h,
                                     const LodePNGColorMode* mode_in) /* << Aka begin of function unsigned lodepng_compute_color_stats(LodePNGColorStats* stats,
                                     const unsigned char* in, unsigned w, unsigned h,
                                     const LodePNGColorMode* mode_in) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_compute_color_stats.177591.stub"

  AKA_mark("lis===4024###sois===177808###eois===177817###lif===3###soif===226###eoif===235###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");size_t i;
  AKA_mark("lis===4025###sois===177821###eois===177836###lif===4###soif===239###eoif===254###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");ColorTree tree;
  AKA_mark("lis===4026###sois===177840###eois===177881###lif===5###soif===258###eoif===299###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");size_t numpixels = (size_t)w * (size_t)h;
  AKA_mark("lis===4027###sois===177885###eois===177904###lif===6###soif===303###eoif===322###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");unsigned error = 0;

  /* mark things as done already if it would be impossible to have a more expensive case */
  AKA_mark("lis===4030###sois===178003###eois===178070###lif===9###soif===421###eoif===488###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");unsigned colored_done = lodepng_is_greyscale_type(mode_in) ? 1 : 0;
  AKA_mark("lis===4031###sois===178074###eois===178136###lif===10###soif===492###eoif===554###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");unsigned alpha_done = lodepng_can_have_alpha(mode_in) ? 0 : 1;
  AKA_mark("lis===4032###sois===178140###eois===178168###lif===11###soif===558###eoif===586###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");unsigned numcolors_done = 0;
  AKA_mark("lis===4033###sois===178172###eois===178212###lif===12###soif===590###eoif===630###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");unsigned bpp = lodepng_get_bpp(mode_in);
  AKA_mark("lis===4034###sois===178216###eois===178276###lif===13###soif===634###eoif===694###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");unsigned bits_done = (stats->bits == 1 && bpp == 1) ? 1 : 0;
  AKA_mark("lis===4035###sois===178280###eois===178301###lif===14###soif===698###eoif===719###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");unsigned sixteen = 0; /* whether the input image is 16 bit */
  AKA_mark("lis===4036###sois===178345###eois===178373###lif===15###soif===763###eoif===791###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");unsigned maxnumcolors = 257;
  if(AKA_mark("lis===4037###sois===178380###eois===178388###lif===16###soif===798###eoif===806###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4037###sois===178380###eois===178388###lif===16###soif===798###eoif===806###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (bpp <= 8))) {
AKA_mark("lis===4037###sois===178390###eois===178454###lif===16###soif===808###eoif===872###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");maxnumcolors = LODEPNG_MIN(257, stats->numcolors + (1u << bpp));
}

else {
AKA_mark("lis===-4037-###sois===-178380-###eois===-1783808-###lif===-16-###soif===-###eoif===-806-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}

  AKA_mark("lis===4039###sois===178460###eois===178490###lif===18###soif===878###eoif===908###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->numpixels += numpixels;

  /*if palette not allowed, no need to compute numcolors*/
  if(AKA_mark("lis===4042###sois===178559###eois===178580###lif===21###soif===977###eoif===998###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4042###sois===178559###eois===178580###lif===21###soif===977###eoif===998###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (!stats->allow_palette))) {
AKA_mark("lis===4042###sois===178582###eois===178601###lif===21###soif===1000###eoif===1019###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");numcolors_done = 1;
}

else {
AKA_mark("lis===-4042-###sois===-178559-###eois===-17855921-###lif===-21-###soif===-###eoif===-998-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}

  AKA_mark("lis===4044###sois===178607###eois===178630###lif===23###soif===1025###eoif===1048###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");color_tree_init(&tree);

  /*If the stats was already filled in from previous data, fill its palette in tree
  and mark things as done already if we know they are the most expensive case already*/
  if(AKA_mark("lis===4048###sois===178813###eois===178825###lif===27###soif===1231###eoif===1243###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4048###sois===178813###eois===178825###lif===27###soif===1231###eoif===1243###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (stats->alpha))) {
AKA_mark("lis===4048###sois===178827###eois===178842###lif===27###soif===1245###eoif===1260###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");alpha_done = 1;
}

else {
AKA_mark("lis===-4048-###sois===-178813-###eois===-17881312-###lif===-27-###soif===-###eoif===-1243-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}
  if(AKA_mark("lis===4049###sois===178849###eois===178863###lif===28###soif===1267###eoif===1281###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4049###sois===178849###eois===178863###lif===28###soif===1267###eoif===1281###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (stats->colored))) {
AKA_mark("lis===4049###sois===178865###eois===178882###lif===28###soif===1283###eoif===1300###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");colored_done = 1;
}

else {
AKA_mark("lis===-4049-###sois===-178849-###eois===-17884914-###lif===-28-###soif===-###eoif===-1281-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}
  if(AKA_mark("lis===4050###sois===178889###eois===178906###lif===29###soif===1307###eoif===1324###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4050###sois===178889###eois===178906###lif===29###soif===1307###eoif===1324###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (stats->bits == 16))) {
AKA_mark("lis===4050###sois===178908###eois===178927###lif===29###soif===1326###eoif===1345###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");numcolors_done = 1;
}

else {
AKA_mark("lis===-4050-###sois===-178889-###eois===-17888917-###lif===-29-###soif===-###eoif===-1324-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}
  if(AKA_mark("lis===4051###sois===178934###eois===178952###lif===30###soif===1352###eoif===1370###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4051###sois===178934###eois===178952###lif===30###soif===1352###eoif===1370###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (stats->bits >= bpp))) {
AKA_mark("lis===4051###sois===178954###eois===178968###lif===30###soif===1372###eoif===1386###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");bits_done = 1;
}

else {
AKA_mark("lis===-4051-###sois===-178934-###eois===-17893418-###lif===-30-###soif===-###eoif===-1370-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}
  if(AKA_mark("lis===4052###sois===178975###eois===179007###lif===31###soif===1393###eoif===1425###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4052###sois===178975###eois===179007###lif===31###soif===1393###eoif===1425###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (stats->numcolors >= maxnumcolors))) {
AKA_mark("lis===4052###sois===179009###eois===179028###lif===31###soif===1427###eoif===1446###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");numcolors_done = 1;
}

else {
AKA_mark("lis===-4052-###sois===-178975-###eois===-17897532-###lif===-31-###soif===-###eoif===-1425-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}

  if(AKA_mark("lis===4054###sois===179037###eois===179052###lif===33###soif===1455###eoif===1470###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4054###sois===179037###eois===179052###lif===33###soif===1455###eoif===1470###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (!numcolors_done))) {
    int AKA_BLOCK_LOOP_179061 = 0;
    AKA_mark("lis===4055###sois===179065###eois===179071###lif===34###soif===1483###eoif===1489###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===4055###sois===179072###eois===179092###lif===34###soif===1490###eoif===1510###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4055###sois===179072###eois===179092###lif===34###soif===1490###eoif===1510###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (i < stats->numcolors)); ({AKA_mark("lis===4055###sois===179094###eois===179097###lif===34###soif===1512###eoif===1515###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");i++;})) {
        AKA_BLOCK_LOOP_179061++;
        if (AKA_BLOCK_LOOP_179061 > 1000) {
            //break;
        }
      AKA_mark("lis===4056###sois===179108###eois===179160###lif===35###soif===1526###eoif===1578###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");const unsigned char* color = &stats->palette[i * 4];
      AKA_mark("lis===4057###sois===179168###eois===179251###lif===36###soif===1586###eoif===1669###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");error = color_tree_add(&tree, color[0], color[1], color[2], color[3], (unsigned)i);
      if(AKA_mark("lis===4058###sois===179262###eois===179267###lif===37###soif===1680###eoif===1685###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4058###sois===179262###eois===179267###lif===37###soif===1680###eoif===1685###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (error))) {
AKA_mark("lis===4058###sois===179269###eois===179282###lif===37###soif===1687###eoif===1700###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");goto cleanup;
}

else {
AKA_mark("lis===-4058-###sois===-179262-###eois===-1792625-###lif===-37-###soif===-###eoif===-1685-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}
    }
  }
else {
AKA_mark("lis===-4054-###sois===-179037-###eois===-17903715-###lif===-33-###soif===-###eoif===-1470-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}

  /*Check if the 16-bit input is truly 16-bit*/
  if(AKA_mark("lis===4063###sois===179352###eois===179387###lif===42###soif===1770###eoif===1805###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && ((AKA_mark("lis===4063###sois===179352###eois===179375###lif===42###soif===1770###eoif===1793###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (mode_in->bitdepth == 16)) && (AKA_mark("lis===4063###sois===179379###eois===179387###lif===42###soif===1797###eoif===1805###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (!sixteen)))) {
    AKA_mark("lis===4064###sois===179396###eois===179438###lif===43###soif===1814###eoif===1856###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");unsigned short r = 0, g = 0, b = 0, a = 0;
    int AKA_BLOCK_LOOP_179444 = 0;
    AKA_mark("lis===4065###sois===179448###eois===179454###lif===44###soif===1866###eoif===1872###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===4065###sois===179455###eois===179469###lif===44###soif===1873###eoif===1887###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4065###sois===179455###eois===179469###lif===44###soif===1873###eoif===1887###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===4065###sois===179471###eois===179474###lif===44###soif===1889###eoif===1892###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");++i;})) {
        AKA_BLOCK_LOOP_179444++;
        if (AKA_BLOCK_LOOP_179444 > 1000) {
            //break;
        }
      AKA_mark("lis===4066###sois===179485###eois===179537###lif===45###soif===1903###eoif===1955###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode_in);
      if(AKA_mark("lis===4067###sois===179548###eois===179686###lif===46###soif===1966###eoif===2104###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && ((((AKA_mark("lis===4067###sois===179548###eois===179577###lif===46###soif===1966###eoif===1995###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && ((r & 255) != ((r >> 8) & 255))) || (AKA_mark("lis===4067###sois===179581###eois===179610###lif===46###soif===1999###eoif===2028###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && ((g & 255) != ((g >> 8) & 255)))) ||
         (AKA_mark("lis===4068###sois===179624###eois===179653###lif===47###soif===2042###eoif===2071###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && ((b & 255) != ((b >> 8) & 255)))) || (AKA_mark("lis===4068###sois===179657###eois===179686###lif===47###soif===2075###eoif===2104###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && ((a & 255) != ((a >> 8) & 255))))) /*first and second byte differ*/ {
        AKA_mark("lis===4069###sois===179732###eois===179749###lif===48###soif===2150###eoif===2167###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->bits = 16;
        AKA_mark("lis===4070###sois===179759###eois===179771###lif===49###soif===2177###eoif===2189###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");sixteen = 1;
        AKA_mark("lis===4071###sois===179781###eois===179795###lif===50###soif===2199###eoif===2213###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");bits_done = 1;
        AKA_mark("lis===4072###sois===179805###eois===179824###lif===51###soif===2223###eoif===2242###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");numcolors_done = 1; /*counting colors no longer useful, palette doesn't support 16-bit*/
        AKA_mark("lis===4073###sois===179903###eois===179909###lif===52###soif===2321###eoif===2327###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");break;
      }
else {
AKA_mark("lis===-4067-###sois===-179548-###eois===-179548138-###lif===-46-###soif===-###eoif===-2104-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}
    }
  }
else {
AKA_mark("lis===-4063-###sois===-179352-###eois===-17935235-###lif===-42-###soif===-###eoif===-1805-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}

  if(AKA_mark("lis===4078###sois===179939###eois===179946###lif===57###soif===2357###eoif===2364###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4078###sois===179939###eois===179946###lif===57###soif===2357###eoif===2364###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (sixteen))) {
    AKA_mark("lis===4079###sois===179955###eois===179997###lif===58###soif===2373###eoif===2415###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");unsigned short r = 0, g = 0, b = 0, a = 0;

    int AKA_BLOCK_LOOP_180005 = 0;
    AKA_mark("lis===4081###sois===180009###eois===180015###lif===60###soif===2427###eoif===2433###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===4081###sois===180016###eois===180030###lif===60###soif===2434###eoif===2448###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4081###sois===180016###eois===180030###lif===60###soif===2434###eoif===2448###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===4081###sois===180032###eois===180035###lif===60###soif===2450###eoif===2453###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");++i;})) {
        AKA_BLOCK_LOOP_180005++;
        if (AKA_BLOCK_LOOP_180005 > 1000) {
            //break;
        }
      AKA_mark("lis===4082###sois===180046###eois===180098###lif===61###soif===2464###eoif===2516###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode_in);

      if(AKA_mark("lis===4084###sois===180111###eois===180146###lif===63###soif===2529###eoif===2564###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && ((AKA_mark("lis===4084###sois===180111###eois===180124###lif===63###soif===2529###eoif===2542###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (!colored_done)) && (((AKA_mark("lis===4084###sois===180129###eois===180135###lif===63###soif===2547###eoif===2553###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (r != g)) || (AKA_mark("lis===4084###sois===180139###eois===180145###lif===63###soif===2557###eoif===2563###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (r != b)))))) {
        AKA_mark("lis===4085###sois===180159###eois===180178###lif===64###soif===2577###eoif===2596###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->colored = 1;
        AKA_mark("lis===4086###sois===180188###eois===180205###lif===65###soif===2606###eoif===2623###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");colored_done = 1;
      }
else {
AKA_mark("lis===-4084-###sois===-180111-###eois===-18011135-###lif===-63-###soif===-###eoif===-2564-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}

      if(AKA_mark("lis===4089###sois===180227###eois===180238###lif===68###soif===2645###eoif===2656###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4089###sois===180227###eois===180238###lif===68###soif===2645###eoif===2656###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (!alpha_done))) {
        AKA_mark("lis===4090###sois===180251###eois===180333###lif===69###soif===2669###eoif===2751###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");unsigned matchkey = (r == stats->key_r && g == stats->key_g && b == stats->key_b);
        if(AKA_mark("lis===4091###sois===180346###eois===180397###lif===70###soif===2764###eoif===2815###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && ((AKA_mark("lis===4091###sois===180346###eois===180356###lif===70###soif===2764###eoif===2774###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (a != 65535)) && (((AKA_mark("lis===4091###sois===180361###eois===180367###lif===70###soif===2779###eoif===2785###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (a != 0)) || (((AKA_mark("lis===4091###sois===180372###eois===180382###lif===70###soif===2790###eoif===2800###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (stats->key)) && (AKA_mark("lis===4091###sois===180386###eois===180395###lif===70###soif===2804###eoif===2813###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (!matchkey)))))))) {
          AKA_mark("lis===4092###sois===180412###eois===180429###lif===71###soif===2830###eoif===2847###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->alpha = 1;
          AKA_mark("lis===4093###sois===180441###eois===180456###lif===72###soif===2859###eoif===2874###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->key = 0;
          AKA_mark("lis===4094###sois===180468###eois===180483###lif===73###soif===2886###eoif===2901###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");alpha_done = 1;
        } else {
if(AKA_mark("lis===4095###sois===180503###eois===180541###lif===74###soif===2921###eoif===2959###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (((AKA_mark("lis===4095###sois===180503###eois===180509###lif===74###soif===2921###eoif===2927###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (a == 0)) && (AKA_mark("lis===4095###sois===180513###eois===180526###lif===74###soif===2931###eoif===2944###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (!stats->alpha))) && (AKA_mark("lis===4095###sois===180530###eois===180541###lif===74###soif===2948###eoif===2959###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (!stats->key)))) {
          AKA_mark("lis===4096###sois===180556###eois===180571###lif===75###soif===2974###eoif===2989###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->key = 1;
          AKA_mark("lis===4097###sois===180583###eois===180600###lif===76###soif===3001###eoif===3018###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->key_r = r;
          AKA_mark("lis===4098###sois===180612###eois===180629###lif===77###soif===3030###eoif===3047###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->key_g = g;
          AKA_mark("lis===4099###sois===180641###eois===180658###lif===78###soif===3059###eoif===3076###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->key_b = b;
        } else {
if(AKA_mark("lis===4100###sois===180678###eois===180714###lif===79###soif===3096###eoif===3132###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (((AKA_mark("lis===4100###sois===180678###eois===180688###lif===79###soif===3096###eoif===3106###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (a == 65535)) && (AKA_mark("lis===4100###sois===180692###eois===180702###lif===79###soif===3110###eoif===3120###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (stats->key))) && (AKA_mark("lis===4100###sois===180706###eois===180714###lif===79###soif===3124###eoif===3132###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (matchkey)))) {
          /* Color key cannot be used if an opaque pixel also has that RGB color. */
          AKA_mark("lis===4102###sois===180815###eois===180832###lif===81###soif===3233###eoif===3250###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->alpha = 1;
          AKA_mark("lis===4103###sois===180844###eois===180859###lif===82###soif===3262###eoif===3277###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->key = 0;
          AKA_mark("lis===4104###sois===180871###eois===180886###lif===83###soif===3289###eoif===3304###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");alpha_done = 1;
        }
else {
AKA_mark("lis===-4100-###sois===-180678-###eois===-18067836-###lif===-79-###soif===-###eoif===-3132-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}
}

}

      }
else {
AKA_mark("lis===-4089-###sois===-180227-###eois===-18022711-###lif===-68-###soif===-###eoif===-2656-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}
      if(AKA_mark("lis===4107###sois===180917###eois===180974###lif===86###soif===3335###eoif===3392###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && ((((AKA_mark("lis===4107###sois===180917###eois===180927###lif===86###soif===3335###eoif===3345###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (alpha_done)) && (AKA_mark("lis===4107###sois===180931###eois===180945###lif===86###soif===3349###eoif===3363###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (numcolors_done))) && (AKA_mark("lis===4107###sois===180949###eois===180961###lif===86###soif===3367###eoif===3379###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (colored_done))) && (AKA_mark("lis===4107###sois===180965###eois===180974###lif===86###soif===3383###eoif===3392###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (bits_done)))) {
AKA_mark("lis===4107###sois===180976###eois===180982###lif===86###soif===3394###eoif===3400###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");break;
}

else {
AKA_mark("lis===-4107-###sois===-180917-###eois===-18091757-###lif===-86-###soif===-###eoif===-3392-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}
    }

    if(AKA_mark("lis===4110###sois===181000###eois===181027###lif===89###soif===3418###eoif===3445###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && ((AKA_mark("lis===4110###sois===181000###eois===181010###lif===89###soif===3418###eoif===3428###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (stats->key)) && (AKA_mark("lis===4110###sois===181014###eois===181027###lif===89###soif===3432###eoif===3445###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (!stats->alpha)))) {
      int AKA_BLOCK_LOOP_181038 = 0;
    AKA_mark("lis===4111###sois===181042###eois===181048###lif===90###soif===3460###eoif===3466###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===4111###sois===181049###eois===181063###lif===90###soif===3467###eoif===3481###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4111###sois===181049###eois===181063###lif===90###soif===3467###eoif===3481###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===4111###sois===181065###eois===181068###lif===90###soif===3483###eoif===3486###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");++i;})) {
        AKA_BLOCK_LOOP_181038++;
        if (AKA_BLOCK_LOOP_181038 > 1000) {
            //break;
        }
        AKA_mark("lis===4112###sois===181081###eois===181133###lif===91###soif===3499###eoif===3551###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode_in);
        if(AKA_mark("lis===4113###sois===181146###eois===181215###lif===92###soif===3564###eoif===3633###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && ((((AKA_mark("lis===4113###sois===181146###eois===181152###lif===92###soif===3564###eoif===3570###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (a != 0)) && (AKA_mark("lis===4113###sois===181156###eois===181173###lif===92###soif===3574###eoif===3591###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (r == stats->key_r))) && (AKA_mark("lis===4113###sois===181177###eois===181194###lif===92###soif===3595###eoif===3612###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (g == stats->key_g))) && (AKA_mark("lis===4113###sois===181198###eois===181215###lif===92###soif===3616###eoif===3633###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (b == stats->key_b)))) {
          /* Color key cannot be used if an opaque pixel also has that RGB color. */
          AKA_mark("lis===4115###sois===181316###eois===181333###lif===94###soif===3734###eoif===3751###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->alpha = 1;
          AKA_mark("lis===4116###sois===181345###eois===181360###lif===95###soif===3763###eoif===3778###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->key = 0;
          AKA_mark("lis===4117###sois===181372###eois===181387###lif===96###soif===3790###eoif===3805###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");alpha_done = 1;
        }
else {
AKA_mark("lis===-4113-###sois===-181146-###eois===-18114669-###lif===-92-###soif===-###eoif===-3633-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}
      }
    }
else {
AKA_mark("lis===-4110-###sois===-181000-###eois===-18100027-###lif===-89-###soif===-###eoif===-3445-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}
  } else /* < 16-bit */ {
    AKA_mark("lis===4122###sois===181447###eois===181488###lif===101###soif===3865###eoif===3906###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");unsigned char r = 0, g = 0, b = 0, a = 0;
    AKA_mark("lis===4123###sois===181494###eois===181539###lif===102###soif===3912###eoif===3957###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");unsigned char pr = 0, pg = 0, pb = 0, pa = 0;
    int AKA_BLOCK_LOOP_181545 = 0;
    AKA_mark("lis===4124###sois===181549###eois===181555###lif===103###soif===3967###eoif===3973###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===4124###sois===181556###eois===181570###lif===103###soif===3974###eoif===3988###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4124###sois===181556###eois===181570###lif===103###soif===3974###eoif===3988###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===4124###sois===181572###eois===181575###lif===103###soif===3990###eoif===3993###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");++i;})) {
        AKA_BLOCK_LOOP_181545++;
        if (AKA_BLOCK_LOOP_181545 > 1000) {
            //break;
        }
      AKA_mark("lis===4125###sois===181586###eois===181637###lif===104###soif===4004###eoif===4055###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode_in);

      /*skip if color same as before, this speeds up large non-photographic
      images with many same colors by avoiding 'color_tree_has' below */
      if(AKA_mark("lis===4129###sois===181801###eois===181851###lif===108###soif===4219###eoif===4269###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (((((AKA_mark("lis===4129###sois===181801###eois===181807###lif===108###soif===4219###eoif===4225###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (i != 0)) && (AKA_mark("lis===4129###sois===181811###eois===181818###lif===108###soif===4229###eoif===4236###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (r == pr))) && (AKA_mark("lis===4129###sois===181822###eois===181829###lif===108###soif===4240###eoif===4247###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (g == pg))) && (AKA_mark("lis===4129###sois===181833###eois===181840###lif===108###soif===4251###eoif===4258###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (b == pb))) && (AKA_mark("lis===4129###sois===181844###eois===181851###lif===108###soif===4262###eoif===4269###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (a == pa)))) {
AKA_mark("lis===4129###sois===181853###eois===181862###lif===108###soif===4271###eoif===4280###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");continue;
}

else {
AKA_mark("lis===-4129-###sois===-181801-###eois===-18180150-###lif===-108-###soif===-###eoif===-4269-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}
      AKA_mark("lis===4130###sois===181870###eois===181877###lif===109###soif===4288###eoif===4295###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");pr = r;
      AKA_mark("lis===4131###sois===181885###eois===181892###lif===110###soif===4303###eoif===4310###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");pg = g;
      AKA_mark("lis===4132###sois===181900###eois===181907###lif===111###soif===4318###eoif===4325###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");pb = b;
      AKA_mark("lis===4133###sois===181915###eois===181922###lif===112###soif===4333###eoif===4340###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");pa = a;

      if(AKA_mark("lis===4135###sois===181935###eois===181964###lif===114###soif===4353###eoif===4382###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && ((AKA_mark("lis===4135###sois===181935###eois===181945###lif===114###soif===4353###eoif===4363###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (!bits_done)) && (AKA_mark("lis===4135###sois===181949###eois===181964###lif===114###soif===4367###eoif===4382###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (stats->bits < 8)))) {
        /*only r is checked, < 8 bits is only relevant for grayscale*/
        AKA_mark("lis===4137###sois===182049###eois===182089###lif===116###soif===4467###eoif===4507###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");unsigned bits = getValueRequiredBits(r);
        if(AKA_mark("lis===4138###sois===182102###eois===182120###lif===117###soif===4520###eoif===4538###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4138###sois===182102###eois===182120###lif===117###soif===4520###eoif===4538###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (bits > stats->bits))) {
AKA_mark("lis===4138###sois===182122###eois===182141###lif===117###soif===4540###eoif===4559###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->bits = bits;
}

else {
AKA_mark("lis===-4138-###sois===-182102-###eois===-18210218-###lif===-117-###soif===-###eoif===-4538-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}
      }
else {
AKA_mark("lis===-4135-###sois===-181935-###eois===-18193529-###lif===-114-###soif===-###eoif===-4382-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}
      AKA_mark("lis===4140###sois===182158###eois===182191###lif===119###soif===4576###eoif===4609###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");bits_done = (stats->bits >= bpp);

      if(AKA_mark("lis===4142###sois===182204###eois===182239###lif===121###soif===4622###eoif===4657###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && ((AKA_mark("lis===4142###sois===182204###eois===182217###lif===121###soif===4622###eoif===4635###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (!colored_done)) && (((AKA_mark("lis===4142###sois===182222###eois===182228###lif===121###soif===4640###eoif===4646###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (r != g)) || (AKA_mark("lis===4142###sois===182232###eois===182238###lif===121###soif===4650###eoif===4656###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (r != b)))))) {
        AKA_mark("lis===4143###sois===182252###eois===182271###lif===122###soif===4670###eoif===4689###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->colored = 1;
        AKA_mark("lis===4144###sois===182281###eois===182298###lif===123###soif===4699###eoif===4716###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");colored_done = 1;
        if(AKA_mark("lis===4145###sois===182311###eois===182326###lif===124###soif===4729###eoif===4744###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4145###sois===182311###eois===182326###lif===124###soif===4729###eoif===4744###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (stats->bits < 8))) {
AKA_mark("lis===4145###sois===182328###eois===182344###lif===124###soif===4746###eoif===4762###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->bits = 8;
}

else {
AKA_mark("lis===-4145-###sois===-182311-###eois===-18231115-###lif===-124-###soif===-###eoif===-4744-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
} /*PNG has no colored modes with less than 8-bit per channel*/
      }
else {
AKA_mark("lis===-4142-###sois===-182204-###eois===-18220435-###lif===-121-###soif===-###eoif===-4657-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}

      if(AKA_mark("lis===4148###sois===182428###eois===182439###lif===127###soif===4846###eoif===4857###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4148###sois===182428###eois===182439###lif===127###soif===4846###eoif===4857###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (!alpha_done))) {
        AKA_mark("lis===4149###sois===182452###eois===182534###lif===128###soif===4870###eoif===4952###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");unsigned matchkey = (r == stats->key_r && g == stats->key_g && b == stats->key_b);
        if(AKA_mark("lis===4150###sois===182547###eois===182596###lif===129###soif===4965###eoif===5014###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && ((AKA_mark("lis===4150###sois===182547###eois===182555###lif===129###soif===4965###eoif===4973###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (a != 255)) && (((AKA_mark("lis===4150###sois===182560###eois===182566###lif===129###soif===4978###eoif===4984###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (a != 0)) || (((AKA_mark("lis===4150###sois===182571###eois===182581###lif===129###soif===4989###eoif===4999###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (stats->key)) && (AKA_mark("lis===4150###sois===182585###eois===182594###lif===129###soif===5003###eoif===5012###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (!matchkey)))))))) {
          AKA_mark("lis===4151###sois===182611###eois===182628###lif===130###soif===5029###eoif===5046###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->alpha = 1;
          AKA_mark("lis===4152###sois===182640###eois===182655###lif===131###soif===5058###eoif===5073###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->key = 0;
          AKA_mark("lis===4153###sois===182667###eois===182682###lif===132###soif===5085###eoif===5100###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");alpha_done = 1;
          if(AKA_mark("lis===4154###sois===182697###eois===182712###lif===133###soif===5115###eoif===5130###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4154###sois===182697###eois===182712###lif===133###soif===5115###eoif===5130###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (stats->bits < 8))) {
AKA_mark("lis===4154###sois===182714###eois===182730###lif===133###soif===5132###eoif===5148###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->bits = 8;
}

else {
AKA_mark("lis===-4154-###sois===-182697-###eois===-18269715-###lif===-133-###soif===-###eoif===-5130-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
} /*PNG has no alphachannel modes with less than 8-bit per channel*/
        } else {
if(AKA_mark("lis===4155###sois===182817###eois===182855###lif===134###soif===5235###eoif===5273###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (((AKA_mark("lis===4155###sois===182817###eois===182823###lif===134###soif===5235###eoif===5241###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (a == 0)) && (AKA_mark("lis===4155###sois===182827###eois===182840###lif===134###soif===5245###eoif===5258###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (!stats->alpha))) && (AKA_mark("lis===4155###sois===182844###eois===182855###lif===134###soif===5262###eoif===5273###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (!stats->key)))) {
          AKA_mark("lis===4156###sois===182870###eois===182885###lif===135###soif===5288###eoif===5303###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->key = 1;
          AKA_mark("lis===4157###sois===182897###eois===182914###lif===136###soif===5315###eoif===5332###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->key_r = r;
          AKA_mark("lis===4158###sois===182926###eois===182943###lif===137###soif===5344###eoif===5361###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->key_g = g;
          AKA_mark("lis===4159###sois===182955###eois===182972###lif===138###soif===5373###eoif===5390###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->key_b = b;
        } else {
if(AKA_mark("lis===4160###sois===182992###eois===183026###lif===139###soif===5410###eoif===5444###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (((AKA_mark("lis===4160###sois===182992###eois===183000###lif===139###soif===5410###eoif===5418###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (a == 255)) && (AKA_mark("lis===4160###sois===183004###eois===183014###lif===139###soif===5422###eoif===5432###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (stats->key))) && (AKA_mark("lis===4160###sois===183018###eois===183026###lif===139###soif===5436###eoif===5444###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (matchkey)))) {
          /* Color key cannot be used if an opaque pixel also has that RGB color. */
          AKA_mark("lis===4162###sois===183127###eois===183144###lif===141###soif===5545###eoif===5562###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->alpha = 1;
          AKA_mark("lis===4163###sois===183156###eois===183171###lif===142###soif===5574###eoif===5589###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->key = 0;
          AKA_mark("lis===4164###sois===183183###eois===183198###lif===143###soif===5601###eoif===5616###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");alpha_done = 1;
          if(AKA_mark("lis===4165###sois===183213###eois===183228###lif===144###soif===5631###eoif===5646###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4165###sois===183213###eois===183228###lif===144###soif===5631###eoif===5646###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (stats->bits < 8))) {
AKA_mark("lis===4165###sois===183230###eois===183246###lif===144###soif===5648###eoif===5664###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->bits = 8;
}

else {
AKA_mark("lis===-4165-###sois===-183213-###eois===-18321315-###lif===-144-###soif===-###eoif===-5646-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
} /*PNG has no alphachannel modes with less than 8-bit per channel*/
        }
else {
AKA_mark("lis===-4160-###sois===-182992-###eois===-18299234-###lif===-139-###soif===-###eoif===-5444-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}
}

}

      }
else {
AKA_mark("lis===-4148-###sois===-182428-###eois===-18242811-###lif===-127-###soif===-###eoif===-4857-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}

      if(AKA_mark("lis===4169###sois===183346###eois===183361###lif===148###soif===5764###eoif===5779###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4169###sois===183346###eois===183361###lif===148###soif===5764###eoif===5779###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (!numcolors_done))) {
        if(AKA_mark("lis===4170###sois===183377###eois===183411###lif===149###soif===5795###eoif===5829###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4170###sois===183377###eois===183411###lif===149###soif===5795###eoif===5829###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (!color_tree_has(&tree, r, g, b, a)))) {
          AKA_mark("lis===4171###sois===183426###eois===183486###lif===150###soif===5844###eoif===5904###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");error = color_tree_add(&tree, r, g, b, a, stats->numcolors);
          if(AKA_mark("lis===4172###sois===183501###eois===183506###lif===151###soif===5919###eoif===5924###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4172###sois===183501###eois===183506###lif===151###soif===5919###eoif===5924###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (error))) {
AKA_mark("lis===4172###sois===183508###eois===183521###lif===151###soif===5926###eoif===5939###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");goto cleanup;
}

else {
AKA_mark("lis===-4172-###sois===-183501-###eois===-1835015-###lif===-151-###soif===-###eoif===-5924-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}
          if(AKA_mark("lis===4173###sois===183536###eois===183558###lif===152###soif===5954###eoif===5976###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4173###sois===183536###eois===183558###lif===152###soif===5954###eoif===5976###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (stats->numcolors < 256))) {
            AKA_mark("lis===4174###sois===183575###eois===183609###lif===153###soif===5993###eoif===6027###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");unsigned char* p = stats->palette;
            AKA_mark("lis===4175###sois===183623###eois===183653###lif===154###soif===6041###eoif===6071###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");unsigned n = stats->numcolors;
            AKA_mark("lis===4176###sois===183667###eois===183684###lif===155###soif===6085###eoif===6102###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");p[n * 4 + 0] = r;
            AKA_mark("lis===4177###sois===183698###eois===183715###lif===156###soif===6116###eoif===6133###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");p[n * 4 + 1] = g;
            AKA_mark("lis===4178###sois===183729###eois===183746###lif===157###soif===6147###eoif===6164###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");p[n * 4 + 2] = b;
            AKA_mark("lis===4179###sois===183760###eois===183777###lif===158###soif===6178###eoif===6195###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");p[n * 4 + 3] = a;
          }
else {
AKA_mark("lis===-4173-###sois===-183536-###eois===-18353622-###lif===-152-###soif===-###eoif===-5976-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}
          AKA_mark("lis===4181###sois===183802###eois===183821###lif===160###soif===6220###eoif===6239###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");++stats->numcolors;
          AKA_mark("lis===4182###sois===183833###eois===183883###lif===161###soif===6251###eoif===6301###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");numcolors_done = stats->numcolors >= maxnumcolors;
        }
else {
AKA_mark("lis===-4170-###sois===-183377-###eois===-18337734-###lif===-149-###soif===-###eoif===-5829-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}
      }
else {
AKA_mark("lis===-4169-###sois===-183346-###eois===-18334615-###lif===-148-###soif===-###eoif===-5779-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}

      if(AKA_mark("lis===4186###sois===183916###eois===183973###lif===165###soif===6334###eoif===6391###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && ((((AKA_mark("lis===4186###sois===183916###eois===183926###lif===165###soif===6334###eoif===6344###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (alpha_done)) && (AKA_mark("lis===4186###sois===183930###eois===183944###lif===165###soif===6348###eoif===6362###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (numcolors_done))) && (AKA_mark("lis===4186###sois===183948###eois===183960###lif===165###soif===6366###eoif===6378###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (colored_done))) && (AKA_mark("lis===4186###sois===183964###eois===183973###lif===165###soif===6382###eoif===6391###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (bits_done)))) {
AKA_mark("lis===4186###sois===183975###eois===183981###lif===165###soif===6393###eoif===6399###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");break;
}

else {
AKA_mark("lis===-4186-###sois===-183916-###eois===-18391657-###lif===-165-###soif===-###eoif===-6391-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}
    }

    if(AKA_mark("lis===4189###sois===183999###eois===184026###lif===168###soif===6417###eoif===6444###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && ((AKA_mark("lis===4189###sois===183999###eois===184009###lif===168###soif===6417###eoif===6427###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (stats->key)) && (AKA_mark("lis===4189###sois===184013###eois===184026###lif===168###soif===6431###eoif===6444###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (!stats->alpha)))) {
      int AKA_BLOCK_LOOP_184037 = 0;
    AKA_mark("lis===4190###sois===184041###eois===184047###lif===169###soif===6459###eoif===6465###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===4190###sois===184048###eois===184062###lif===169###soif===6466###eoif===6480###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4190###sois===184048###eois===184062###lif===169###soif===6466###eoif===6480###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (i != numpixels)); ({AKA_mark("lis===4190###sois===184064###eois===184067###lif===169###soif===6482###eoif===6485###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");++i;})) {
        AKA_BLOCK_LOOP_184037++;
        if (AKA_BLOCK_LOOP_184037 > 1000) {
            //break;
        }
        AKA_mark("lis===4191###sois===184080###eois===184131###lif===170###soif===6498###eoif===6549###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode_in);
        if(AKA_mark("lis===4192###sois===184144###eois===184213###lif===171###soif===6562###eoif===6631###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && ((((AKA_mark("lis===4192###sois===184144###eois===184150###lif===171###soif===6562###eoif===6568###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (a != 0)) && (AKA_mark("lis===4192###sois===184154###eois===184171###lif===171###soif===6572###eoif===6589###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (r == stats->key_r))) && (AKA_mark("lis===4192###sois===184175###eois===184192###lif===171###soif===6593###eoif===6610###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (g == stats->key_g))) && (AKA_mark("lis===4192###sois===184196###eois===184213###lif===171###soif===6614###eoif===6631###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (b == stats->key_b)))) {
          /* Color key cannot be used if an opaque pixel also has that RGB color. */
          AKA_mark("lis===4194###sois===184314###eois===184331###lif===173###soif===6732###eoif===6749###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->alpha = 1;
          AKA_mark("lis===4195###sois===184343###eois===184358###lif===174###soif===6761###eoif===6776###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->key = 0;
          AKA_mark("lis===4196###sois===184370###eois===184385###lif===175###soif===6788###eoif===6803###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");alpha_done = 1;
          if(AKA_mark("lis===4197###sois===184400###eois===184415###lif===176###soif===6818###eoif===6833###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (AKA_mark("lis===4197###sois===184400###eois===184415###lif===176###soif===6818###eoif===6833###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)") && (stats->bits < 8))) {
AKA_mark("lis===4197###sois===184417###eois===184433###lif===176###soif===6835###eoif===6851###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->bits = 8;
}

else {
AKA_mark("lis===-4197-###sois===-184400-###eois===-18440015-###lif===-176-###soif===-###eoif===-6833-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
} /*PNG has no alphachannel modes with less than 8-bit per channel*/
        }
else {
AKA_mark("lis===-4192-###sois===-184144-###eois===-18414469-###lif===-171-###soif===-###eoif===-6631-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}
      }
    }
else {
AKA_mark("lis===-4189-###sois===-183999-###eois===-18399927-###lif===-168-###soif===-###eoif===-6444-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");
}

    /*make the stats's key always 16-bit for consistency - repeat each byte twice*/
    AKA_mark("lis===4203###sois===184620###eois===184656###lif===182###soif===7038###eoif===7074###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->key_r += (stats->key_r << 8);
    AKA_mark("lis===4204###sois===184662###eois===184698###lif===183###soif===7080###eoif===7116###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->key_g += (stats->key_g << 8);
    AKA_mark("lis===4205###sois===184704###eois===184740###lif===184###soif===7122###eoif===7158###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");stats->key_b += (stats->key_b << 8);
  }

cleanup:
  AKA_mark("lis===4209###sois===184761###eois===184787###lif===188###soif===7179###eoif===7205###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");color_tree_cleanup(&tree);
  AKA_mark("lis===4210###sois===184791###eois===184804###lif===189###soif===7209###eoif===7222###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_compute_color_stats(LodePNGColorStats*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*)");return error;
}

#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
/*Adds a single color to the color stats. The stats must already have been inited. The color must be given as 16-bit
(with 2 bytes repeating for 8-bit and 65535 for opaque alpha channel). This function is expensive, do not call it for
all pixels of an image but only for a few additional values. */
/** Instrumented function lodepng_color_stats_add(LodePNGColorStats*,unsigned,unsigned,unsigned,unsigned) */
static unsigned lodepng_color_stats_add(LodePNGColorStats* stats,
                                        unsigned r, unsigned g, unsigned b, unsigned a) /* << Aka begin of function unsigned lodepng_color_stats_add(LodePNGColorStats* stats,
                                        unsigned r, unsigned g, unsigned b, unsigned a) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_add(LodePNGColorStats*,unsigned,unsigned,unsigned,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_color_stats_add.185170.stub"

  AKA_mark("lis===4219###sois===185314###eois===185333###lif===2###soif===160###eoif===179###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_add(LodePNGColorStats*,unsigned,unsigned,unsigned,unsigned)");unsigned error = 0;
  AKA_mark("lis===4220###sois===185337###eois===185360###lif===3###soif===183###eoif===206###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_add(LodePNGColorStats*,unsigned,unsigned,unsigned,unsigned)");unsigned char image[8];
  AKA_mark("lis===4221###sois===185364###eois===185386###lif===4###soif===210###eoif===232###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_add(LodePNGColorStats*,unsigned,unsigned,unsigned,unsigned)");LodePNGColorMode mode;
  AKA_mark("lis===4222###sois===185390###eois===185421###lif===5###soif===236###eoif===267###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_add(LodePNGColorStats*,unsigned,unsigned,unsigned,unsigned)");lodepng_color_mode_init(&mode);
  AKA_mark("lis===4223###sois===185425###eois===185443###lif===6###soif===271###eoif===289###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_add(LodePNGColorStats*,unsigned,unsigned,unsigned,unsigned)");image[0] = r >> 8; AKA_mark("lis===4223###sois===185444###eois===185457###lif===6###soif===290###eoif===303###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_add(LodePNGColorStats*,unsigned,unsigned,unsigned,unsigned)");image[1] = r; AKA_mark("lis===4223###sois===185458###eois===185476###lif===6###soif===304###eoif===322###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_add(LodePNGColorStats*,unsigned,unsigned,unsigned,unsigned)");image[2] = g >> 8; AKA_mark("lis===4223###sois===185477###eois===185490###lif===6###soif===323###eoif===336###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_add(LodePNGColorStats*,unsigned,unsigned,unsigned,unsigned)");image[3] = g;
  AKA_mark("lis===4224###sois===185494###eois===185512###lif===7###soif===340###eoif===358###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_add(LodePNGColorStats*,unsigned,unsigned,unsigned,unsigned)");image[4] = b >> 8; AKA_mark("lis===4224###sois===185513###eois===185526###lif===7###soif===359###eoif===372###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_add(LodePNGColorStats*,unsigned,unsigned,unsigned,unsigned)");image[5] = b; AKA_mark("lis===4224###sois===185527###eois===185545###lif===7###soif===373###eoif===391###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_add(LodePNGColorStats*,unsigned,unsigned,unsigned,unsigned)");image[6] = a >> 8; AKA_mark("lis===4224###sois===185546###eois===185559###lif===7###soif===392###eoif===405###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_add(LodePNGColorStats*,unsigned,unsigned,unsigned,unsigned)");image[7] = a;
  AKA_mark("lis===4225###sois===185563###eois===185582###lif===8###soif===409###eoif===428###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_add(LodePNGColorStats*,unsigned,unsigned,unsigned,unsigned)");mode.bitdepth = 16;
  AKA_mark("lis===4226###sois===185586###eois===185612###lif===9###soif===432###eoif===458###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_add(LodePNGColorStats*,unsigned,unsigned,unsigned,unsigned)");mode.colortype = LCT_RGBA;
  AKA_mark("lis===4227###sois===185616###eois===185679###lif===10###soif===462###eoif===525###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_add(LodePNGColorStats*,unsigned,unsigned,unsigned,unsigned)");error = lodepng_compute_color_stats(stats, image, 1, 1, &mode);
  AKA_mark("lis===4228###sois===185683###eois===185717###lif===11###soif===529###eoif===563###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_add(LodePNGColorStats*,unsigned,unsigned,unsigned,unsigned)");lodepng_color_mode_cleanup(&mode);
  AKA_mark("lis===4229###sois===185721###eois===185734###lif===12###soif===567###eoif===580###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_color_stats_add(LodePNGColorStats*,unsigned,unsigned,unsigned,unsigned)");return error;
}
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/

/*Computes a minimal PNG color model that can contain all colors as indicated by the stats.
The stats should be computed with lodepng_compute_color_stats.
mode_in is raw color profile of the image the stats were computed on, to copy palette order from when relevant.
Minimal PNG color model means the color type and bit depth that gives smallest amount of bits in the output image,
e.g. gray if only grayscale pixels, palette if less than 256 colors, color key if only single transparent color, ...
This is used if auto_convert is enabled (it is by default).
*/
/** Instrumented function auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*) */
static unsigned auto_choose_color(LodePNGColorMode* mode_out,
                                  const LodePNGColorMode* mode_in,
                                  const LodePNGColorStats* stats) /* << Aka begin of function unsigned auto_choose_color(LodePNGColorMode* mode_out,
                                  const LodePNGColorMode* mode_in,
                                  const LodePNGColorStats* stats) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.auto_choose_color.186371.stub"

  AKA_mark("lis===4243###sois===186557###eois===186576###lif===3###soif===202###eoif===221###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");unsigned error = 0;
  AKA_mark("lis===4244###sois===186580###eois===186601###lif===4###soif===225###eoif===246###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");unsigned palettebits;
  AKA_mark("lis===4245###sois===186605###eois===186617###lif===5###soif===250###eoif===262###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");size_t i, n;
  AKA_mark("lis===4246###sois===186621###eois===186657###lif===6###soif===266###eoif===302###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");size_t numpixels = stats->numpixels;
  AKA_mark("lis===4247###sois===186661###eois===186690###lif===7###soif===306###eoif===335###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");unsigned palette_ok, gray_ok;

  AKA_mark("lis===4249###sois===186696###eois===186726###lif===9###soif===341###eoif===371###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");unsigned alpha = stats->alpha;
  AKA_mark("lis===4250###sois===186730###eois===186756###lif===10###soif===375###eoif===401###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");unsigned key = stats->key;
  AKA_mark("lis===4251###sois===186760###eois===186788###lif===11###soif===405###eoif===433###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");unsigned bits = stats->bits;

  AKA_mark("lis===4253###sois===186794###eois===186820###lif===13###soif===439###eoif===465###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");mode_out->key_defined = 0;

  if(AKA_mark("lis===4255###sois===186829###eois===186851###lif===15###soif===474###eoif===496###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && ((AKA_mark("lis===4255###sois===186829###eois===186832###lif===15###soif===474###eoif===477###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (key)) && (AKA_mark("lis===4255###sois===186836###eois===186851###lif===15###soif===481###eoif===496###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (numpixels <= 16)))) {
    AKA_mark("lis===4256###sois===186860###eois===186870###lif===16###soif===505###eoif===515###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");alpha = 1; /*too few pixels to justify tRNS chunk overhead*/
    AKA_mark("lis===4257###sois===186926###eois===186934###lif===17###soif===571###eoif===579###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");key = 0;
    if(AKA_mark("lis===4258###sois===186943###eois===186951###lif===18###soif===588###eoif===596###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (AKA_mark("lis===4258###sois===186943###eois===186951###lif===18###soif===588###eoif===596###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (bits < 8))) {
AKA_mark("lis===4258###sois===186953###eois===186962###lif===18###soif===598###eoif===607###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");bits = 8;
}

else {
AKA_mark("lis===-4258-###sois===-186943-###eois===-1869438-###lif===-18-###soif===-###eoif===-596-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");
} /*PNG has no alphachannel modes with less than 8-bit per channel*/
  }
else {
AKA_mark("lis===-4255-###sois===-186829-###eois===-18682922-###lif===-15-###soif===-###eoif===-496-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");
}

  AKA_mark("lis===4261###sois===187040###eois===187066###lif===21###soif===685###eoif===711###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");gray_ok = !stats->colored;
  if(AKA_mark("lis===4262###sois===187073###eois===187096###lif===22###soif===718###eoif===741###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (AKA_mark("lis===4262###sois===187073###eois===187096###lif===22###soif===718###eoif===741###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (!stats->allow_greyscale))) {
AKA_mark("lis===4262###sois===187098###eois===187110###lif===22###soif===743###eoif===755###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");gray_ok = 0;
}

else {
AKA_mark("lis===-4262-###sois===-187073-###eois===-18707323-###lif===-22-###soif===-###eoif===-741-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");
}
  if(AKA_mark("lis===4263###sois===187117###eois===187137###lif===23###soif===762###eoif===782###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && ((AKA_mark("lis===4263###sois===187117###eois===187125###lif===23###soif===762###eoif===770###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (!gray_ok)) && (AKA_mark("lis===4263###sois===187129###eois===187137###lif===23###soif===774###eoif===782###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (bits < 8)))) {
AKA_mark("lis===4263###sois===187139###eois===187148###lif===23###soif===784###eoif===793###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");bits = 8;
}

else {
AKA_mark("lis===-4263-###sois===-187117-###eois===-18711720-###lif===-23-###soif===-###eoif===-782-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");
}

  AKA_mark("lis===4265###sois===187154###eois===187175###lif===25###soif===799###eoif===820###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");n = stats->numcolors;
  AKA_mark("lis===4266###sois===187179###eois===187239###lif===26###soif===824###eoif===884###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");palettebits = n <= 2 ? 1 : (n <= 4 ? 2 : (n <= 16 ? 4 : 8));
  AKA_mark("lis===4267###sois===187243###eois===187288###lif===27###soif===888###eoif===933###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");palette_ok = n <= 256 && bits <= 8 && n != 0; /*n==0 means likely numcolors wasn't computed*/
  if(AKA_mark("lis===4268###sois===187343###eois===187360###lif===28###soif===988###eoif===1005###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (AKA_mark("lis===4268###sois===187343###eois===187360###lif===28###soif===988###eoif===1005###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (numpixels < n * 2))) {
AKA_mark("lis===4268###sois===187362###eois===187377###lif===28###soif===1007###eoif===1022###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");palette_ok = 0;
}

else {
AKA_mark("lis===-4268-###sois===-187343-###eois===-18734317-###lif===-28-###soif===-###eoif===-1005-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");
} /*don't add palette overhead if image has only a few pixels*/
  if(AKA_mark("lis===4269###sois===187446###eois===187486###lif===29###soif===1091###eoif===1131###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (((AKA_mark("lis===4269###sois===187446###eois===187453###lif===29###soif===1091###eoif===1098###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (gray_ok)) && (AKA_mark("lis===4269###sois===187457###eois===187463###lif===29###soif===1102###eoif===1108###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (!alpha))) && (AKA_mark("lis===4269###sois===187467###eois===187486###lif===29###soif===1112###eoif===1131###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (bits <= palettebits)))) {
AKA_mark("lis===4269###sois===187488###eois===187503###lif===29###soif===1133###eoif===1148###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");palette_ok = 0;
}

else {
AKA_mark("lis===-4269-###sois===-187446-###eois===-18744640-###lif===-29-###soif===-###eoif===-1131-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");
} /*gray is less overhead*/
  if(AKA_mark("lis===4270###sois===187536###eois===187557###lif===30###soif===1181###eoif===1202###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (AKA_mark("lis===4270###sois===187536###eois===187557###lif===30###soif===1181###eoif===1202###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (!stats->allow_palette))) {
AKA_mark("lis===4270###sois===187559###eois===187574###lif===30###soif===1204###eoif===1219###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");palette_ok = 0;
}

else {
AKA_mark("lis===-4270-###sois===-187536-###eois===-18753621-###lif===-30-###soif===-###eoif===-1202-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");
}

  if(AKA_mark("lis===4272###sois===187583###eois===187593###lif===32###soif===1228###eoif===1238###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (AKA_mark("lis===4272###sois===187583###eois===187593###lif===32###soif===1228###eoif===1238###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (palette_ok))) {
    AKA_mark("lis===4273###sois===187602###eois===187642###lif===33###soif===1247###eoif===1287###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");const unsigned char* p = stats->palette;
    AKA_mark("lis===4274###sois===187648###eois===187680###lif===34###soif===1293###eoif===1325###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");lodepng_palette_clear(mode_out); /*remove potential earlier palette*/
    int AKA_BLOCK_LOOP_187723 = 0;
    AKA_mark("lis===4275###sois===187727###eois===187733###lif===35###soif===1372###eoif===1378###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");
for(i = 0; AKA_mark("lis===4275###sois===187734###eois===187755###lif===35###soif===1379###eoif===1400###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (AKA_mark("lis===4275###sois===187734###eois===187755###lif===35###soif===1379###eoif===1400###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (i != stats->numcolors)); ({AKA_mark("lis===4275###sois===187757###eois===187760###lif===35###soif===1402###eoif===1405###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");++i;})) {
        AKA_BLOCK_LOOP_187723++;
        if (AKA_BLOCK_LOOP_187723 > 1000) {
            //break;
        }
      AKA_mark("lis===4276###sois===187771###eois===187865###lif===36###soif===1416###eoif===1510###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");error = lodepng_palette_add(mode_out, p[i * 4 + 0], p[i * 4 + 1], p[i * 4 + 2], p[i * 4 + 3]);
      if(AKA_mark("lis===4277###sois===187876###eois===187881###lif===37###soif===1521###eoif===1526###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (AKA_mark("lis===4277###sois===187876###eois===187881###lif===37###soif===1521###eoif===1526###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (error))) {
AKA_mark("lis===4277###sois===187883###eois===187889###lif===37###soif===1528###eoif===1534###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");break;
}

else {
AKA_mark("lis===-4277-###sois===-187876-###eois===-1878765-###lif===-37-###soif===-###eoif===-1526-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");
}
    }

    AKA_mark("lis===4280###sois===187904###eois===187938###lif===40###soif===1549###eoif===1583###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");mode_out->colortype = LCT_PALETTE;
    AKA_mark("lis===4281###sois===187944###eois===187977###lif===41###soif===1589###eoif===1622###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");mode_out->bitdepth = palettebits;

    if(AKA_mark("lis===4283###sois===187988###eois===188122###lif===43###soif===1633###eoif===1767###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (((AKA_mark("lis===4283###sois===187988###eois===188021###lif===43###soif===1633###eoif===1666###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (mode_in->colortype == LCT_PALETTE)) && (AKA_mark("lis===4283###sois===188025###eois===188070###lif===43###soif===1670###eoif===1715###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (mode_in->palettesize >= mode_out->palettesize)))
        && (AKA_mark("lis===4284###sois===188083###eois===188122###lif===44###soif===1728###eoif===1767###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (mode_in->bitdepth == mode_out->bitdepth)))) {
      /*If input should have same palette colors, keep original to preserve its order and prevent conversion*/
      AKA_mark("lis===4286###sois===188245###eois===188282###lif===46###soif===1890###eoif===1927###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");lodepng_color_mode_cleanup(mode_out); /*clears palette, keeps the above set colortype and bitdepth fields as-is*/
      AKA_mark("lis===4287###sois===188366###eois===188409###lif===47###soif===2011###eoif===2054###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");lodepng_color_mode_copy(mode_out, mode_in);
    }
else {
AKA_mark("lis===-4283-###sois===-187988-###eois===-187988134-###lif===-43-###soif===-###eoif===-1767-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");
}
  } else /*8-bit or 16-bit per channel*/ {
    AKA_mark("lis===4290###sois===188466###eois===188492###lif===50###soif===2111###eoif===2137###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");mode_out->bitdepth = bits;
    AKA_mark("lis===4291###sois===188498###eois===188632###lif===51###soif===2143###eoif===2277###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");mode_out->colortype = alpha ? (gray_ok ? LCT_GREY_ALPHA : LCT_RGBA)
                                : (gray_ok ? LCT_GREY : LCT_RGB);
    if(AKA_mark("lis===4293###sois===188641###eois===188644###lif===53###soif===2286###eoif===2289###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (AKA_mark("lis===4293###sois===188641###eois===188644###lif===53###soif===2286###eoif===2289###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)") && (key))) {
      AKA_mark("lis===4294###sois===188655###eois===188703###lif===54###soif===2300###eoif===2348###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");unsigned mask = (1u << mode_out->bitdepth) - 1u; /*stats always uses 16-bit, mask converts it*/
      AKA_mark("lis===4295###sois===188758###eois===188796###lif===55###soif===2403###eoif===2441###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");mode_out->key_r = stats->key_r & mask;
      AKA_mark("lis===4296###sois===188804###eois===188842###lif===56###soif===2449###eoif===2487###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");mode_out->key_g = stats->key_g & mask;
      AKA_mark("lis===4297###sois===188850###eois===188888###lif===57###soif===2495###eoif===2533###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");mode_out->key_b = stats->key_b & mask;
      AKA_mark("lis===4298###sois===188896###eois===188922###lif===58###soif===2541###eoif===2567###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");mode_out->key_defined = 1;
    }
else {
AKA_mark("lis===-4293-###sois===-188641-###eois===-1886413-###lif===-53-###soif===-###eoif===-2289-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");
}
  }

  AKA_mark("lis===4302###sois===188940###eois===188953###lif===62###soif===2585###eoif===2598###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\auto_choose_color(LodePNGColorMode*,LodePNGColorMode const*,LodePNGColorStats const*)");return error;
}

#endif /* #ifdef LODEPNG_COMPILE_ENCODER */

/*Paeth predictor, used by PNG filter type 4*/
/** Instrumented function paethPredictor(unsigned char,unsigned char,unsigned char) */
static unsigned char paethPredictor(unsigned char a, unsigned char b, unsigned char c) /* << Aka begin of function unsigned char paethPredictor(unsigned char a, unsigned char b, unsigned char c) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\paethPredictor(unsigned char,unsigned char,unsigned char)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.paethPredictor.189076.stub"

  /* the subtractions of unsigned char cast it to a signed type.
  With gcc, short is faster than int, with clang int is as fast (as of april 2023)*/
  AKA_mark("lis===4311###sois===189299###eois===189343###lif===3###soif===244###eoif===288###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\paethPredictor(unsigned char,unsigned char,unsigned char)");short pa = (b - c) < 0 ? -(b - c) : (b - c);
  AKA_mark("lis===4312###sois===189347###eois===189391###lif===4###soif===292###eoif===336###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\paethPredictor(unsigned char,unsigned char,unsigned char)");short pb = (a - c) < 0 ? -(a - c) : (a - c);
  /* writing it out like this compiles to something faster than introducing a temp variable*/
  AKA_mark("lis===4314###sois===189490###eois===189558###lif===6###soif===435###eoif===503###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\paethPredictor(unsigned char,unsigned char,unsigned char)");short pc = (a + b - c - c) < 0 ? -(a + b - c - c) : (a + b - c - c);
  /* return input value associated with smallest of pa, pb, pc (with certain priority if equal) */
  if(AKA_mark("lis===4316###sois===189665###eois===189672###lif===8###soif===610###eoif===617###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\paethPredictor(unsigned char,unsigned char,unsigned char)") && (AKA_mark("lis===4316###sois===189665###eois===189672###lif===8###soif===610###eoif===617###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\paethPredictor(unsigned char,unsigned char,unsigned char)") && (pb < pa))) { AKA_mark("lis===4316###sois===189676###eois===189682###lif===8###soif===621###eoif===627###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\paethPredictor(unsigned char,unsigned char,unsigned char)");a = b; AKA_mark("lis===4316###sois===189683###eois===189691###lif===8###soif===628###eoif===636###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\paethPredictor(unsigned char,unsigned char,unsigned char)");pa = pb; }
else {
AKA_mark("lis===-4316-###sois===-189665-###eois===-1896657-###lif===-8-###soif===-###eoif===-617-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\paethPredictor(unsigned char,unsigned char,unsigned char)");
}
  AKA_mark("lis===4317###sois===189697###eois===189722###lif===9###soif===642###eoif===667###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\paethPredictor(unsigned char,unsigned char,unsigned char)");return (pc < pa) ? c : a;
}

/*shared values used by multiple Adam7 related functions*/

static const unsigned ADAM7_IX[7] = { 0, 4, 0, 2, 0, 1, 0 }; /*x start values*/
static const unsigned ADAM7_IY[7] = { 0, 0, 4, 0, 2, 0, 1 }; /*y start values*/
static const unsigned ADAM7_DX[7] = { 8, 8, 4, 4, 2, 2, 1 }; /*x delta values*/
static const unsigned ADAM7_DY[7] = { 8, 8, 8, 4, 4, 2, 2 }; /*y delta values*/

/*
Outputs various dimensions and positions in the image related to the Adam7 reduced images.
passw: output containing the width of the 7 passes
passh: output containing the height of the 7 passes
filter_passstart: output containing the index of the start and end of each
 reduced image with filter bytes
padded_passstart output containing the index of the start and end of each
 reduced image when without filter bytes but with padded scanlines
passstart: output containing the index of the start and end of each reduced
 image without padding between scanlines, but still padding between the images
w, h: width and height of non-interlaced image
bpp: bits per pixel
"padded" is only relevant if bpp is less than 8 and a scanline or image does not
 end at a full byte
*/
/** Instrumented function Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned) */
static void Adam7_getpassvalues(unsigned passw[7], unsigned passh[7], size_t filter_passstart[8],
                                size_t padded_passstart[8], size_t passstart[8], unsigned w, unsigned h, unsigned bpp) /* << Aka begin of function void Adam7_getpassvalues(unsigned passw[7], unsigned passh[7], size_t filter_passstart[8],
                                size_t padded_passstart[8], size_t passstart[8], unsigned w, unsigned h, unsigned bpp) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.Adam7_getpassvalues.190916.stub"

  /*the passstart values have 8 values: the 8th one indicates the byte after the end of the 7th (= last) pass*/
  AKA_mark("lis===4345###sois===191240###eois===191251###lif===3###soif===336###eoif===347###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)");unsigned i;

  /*calculate width and height in pixels of each pass*/
  int AKA_BLOCK_LOOP_191314 = 0;
    AKA_mark("lis===4348###sois===191318###eois===191324###lif===6###soif===414###eoif===420###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)");
for(i = 0; AKA_mark("lis===4348###sois===191325###eois===191331###lif===6###soif===421###eoif===427###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)") && (AKA_mark("lis===4348###sois===191325###eois===191331###lif===6###soif===421###eoif===427###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)") && (i != 7)); ({AKA_mark("lis===4348###sois===191333###eois===191336###lif===6###soif===429###eoif===432###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)");++i;})) {
        AKA_BLOCK_LOOP_191314++;
        if (AKA_BLOCK_LOOP_191314 > 1000) {
            //break;
        }
    AKA_mark("lis===4349###sois===191345###eois===191406###lif===7###soif===441###eoif===502###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)");passw[i] = (w + ADAM7_DX[i] - ADAM7_IX[i] - 1) / ADAM7_DX[i];
    AKA_mark("lis===4350###sois===191412###eois===191473###lif===8###soif===508###eoif===569###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)");passh[i] = (h + ADAM7_DY[i] - ADAM7_IY[i] - 1) / ADAM7_DY[i];
    if(AKA_mark("lis===4351###sois===191482###eois===191495###lif===9###soif===578###eoif===591###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)") && (AKA_mark("lis===4351###sois===191482###eois===191495###lif===9###soif===578###eoif===591###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)") && (passw[i] == 0))) {
AKA_mark("lis===4351###sois===191497###eois===191510###lif===9###soif===593###eoif===606###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)");passh[i] = 0;
}

else {
AKA_mark("lis===-4351-###sois===-191482-###eois===-19148213-###lif===-9-###soif===-###eoif===-591-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)");
}
    if(AKA_mark("lis===4352###sois===191519###eois===191532###lif===10###soif===615###eoif===628###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)") && (AKA_mark("lis===4352###sois===191519###eois===191532###lif===10###soif===615###eoif===628###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)") && (passh[i] == 0))) {
AKA_mark("lis===4352###sois===191534###eois===191547###lif===10###soif===630###eoif===643###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)");passw[i] = 0;
}

else {
AKA_mark("lis===-4352-###sois===-191519-###eois===-19151913-###lif===-10-###soif===-###eoif===-628-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)");
}
  }

  AKA_mark("lis===4355###sois===191558###eois===191619###lif===13###soif===654###eoif===715###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)");filter_passstart[0] = padded_passstart[0] = passstart[0] = 0;
  int AKA_BLOCK_LOOP_191623 = 0;
    AKA_mark("lis===4356###sois===191627###eois===191633###lif===14###soif===723###eoif===729###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)");
for(i = 0; AKA_mark("lis===4356###sois===191634###eois===191640###lif===14###soif===730###eoif===736###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)") && (AKA_mark("lis===4356###sois===191634###eois===191640###lif===14###soif===730###eoif===736###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)") && (i != 7)); ({AKA_mark("lis===4356###sois===191642###eois===191645###lif===14###soif===738###eoif===741###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)");++i;})) {
        AKA_BLOCK_LOOP_191623++;
        if (AKA_BLOCK_LOOP_191623 > 1000) {
            //break;
        }
    /*if passw[i] is 0, it's 0 bytes, not 1 (no filtertype-byte)*/
    AKA_mark("lis===4358###sois===191722###eois===191875###lif===16###soif===818###eoif===971###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)");filter_passstart[i + 1] = filter_passstart[i]
                            + ((passw[i] && passh[i]) ? passh[i] * (1u + (passw[i] * bpp + 7u) / 8u) : 0);
    /*bits padded if needed to fill full byte at end of each scanline*/
    AKA_mark("lis===4361###sois===191954###eois===192042###lif===19###soif===1050###eoif===1138###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)");padded_passstart[i + 1] = padded_passstart[i] + passh[i] * ((passw[i] * bpp + 7u) / 8u);
    /*only padded at end of reduced image*/
    AKA_mark("lis===4363###sois===192093###eois===192165###lif===21###soif===1189###eoif===1261###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_getpassvalues(unsigned[7],unsigned[7],size_t[8],size_t[8],size_t[8],unsigned,unsigned,unsigned)");passstart[i + 1] = passstart[i] + (passh[i] * passw[i] * bpp + 7u) / 8u;
  }
}

#ifdef LODEPNG_COMPILE_DECODER

/* ////////////////////////////////////////////////////////////////////////// */
/* / PNG Decoder                                                            / */
/* ////////////////////////////////////////////////////////////////////////// */

/*read the information from the header and store it in the LodePNGInfo. return value is error*/
/** Instrumented function lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t) */
unsigned lodepng_inspect(unsigned* w, unsigned* h, LodePNGState* state,
                         const unsigned char* in, size_t insize) /* << Aka begin of function unsigned lodepng_inspect(unsigned* w, unsigned* h, LodePNGState* state,
                         const unsigned char* in, size_t insize) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_inspect.192565.stub"

  AKA_mark("lis===4376###sois===192699###eois===192722###lif===2###soif===143###eoif===166###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");unsigned width, height;
  AKA_mark("lis===4377###sois===192726###eois===192763###lif===3###soif===170###eoif===207###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");LodePNGInfo* info = &state->info_png;
  if(AKA_mark("lis===4378###sois===192770###eois===192792###lif===4###soif===214###eoif===236###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && ((AKA_mark("lis===4378###sois===192770###eois===192781###lif===4###soif===214###eoif===225###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (insize == 0)) || (AKA_mark("lis===4378###sois===192785###eois===192792###lif===4###soif===229###eoif===236###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (in == 0)))) {
    AKA_mark("lis===4379###sois===192801###eois===192838###lif===5###soif===245###eoif===282###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_RETURN_ERROR(state->error, 48); /*error: the given data is empty*/
  }
else {
AKA_mark("lis===-4378-###sois===-192770-###eois===-19277022-###lif===-4-###soif===-###eoif===-236-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
  if(AKA_mark("lis===4381###sois===192886###eois===192897###lif===7###soif===330###eoif===341###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===4381###sois===192886###eois===192897###lif===7###soif===330###eoif===341###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (insize < 33))) {
    AKA_mark("lis===4382###sois===192906###eois===192943###lif===8###soif===350###eoif===387###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_RETURN_ERROR(state->error, 27); /*error: the data length is smaller than the length of a PNG header*/
  }
else {
AKA_mark("lis===-4381-###sois===-192886-###eois===-19288611-###lif===-7-###soif===-###eoif===-341-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}

  /*when decoding a new PNG image, make sure all parameters created after previous decoding are reset*/
  /* TODO: remove this. One should use a new LodePNGState for new sessions */
  AKA_mark("lis===4387###sois===193209###eois===193236###lif===13###soif===653###eoif===680###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");lodepng_info_cleanup(info);
  AKA_mark("lis===4388###sois===193240###eois===193264###lif===14###soif===684###eoif===708###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");lodepng_info_init(info);

  if(AKA_mark("lis===4390###sois===193273###eois===193396###lif===16###soif===717###eoif===840###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && ((((((((AKA_mark("lis===4390###sois===193273###eois===193285###lif===16###soif===717###eoif===729###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (in[0] != 137)) || (AKA_mark("lis===4390###sois===193289###eois===193300###lif===16###soif===733###eoif===744###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (in[1] != 80))) || (AKA_mark("lis===4390###sois===193304###eois===193315###lif===16###soif===748###eoif===759###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (in[2] != 78))) || (AKA_mark("lis===4390###sois===193319###eois===193330###lif===16###soif===763###eoif===774###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (in[3] != 71)))
     || (AKA_mark("lis===4391###sois===193340###eois===193351###lif===17###soif===784###eoif===795###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (in[4] != 13))) || (AKA_mark("lis===4391###sois===193355###eois===193366###lif===17###soif===799###eoif===810###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (in[5] != 10))) || (AKA_mark("lis===4391###sois===193370###eois===193381###lif===17###soif===814###eoif===825###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (in[6] != 26))) || (AKA_mark("lis===4391###sois===193385###eois===193396###lif===17###soif===829###eoif===840###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (in[7] != 10)))) {
    AKA_mark("lis===4392###sois===193405###eois===193442###lif===18###soif===849###eoif===886###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_RETURN_ERROR(state->error, 28); /*error: the first 8 bytes are not the correct PNG signature*/
  }
else {
AKA_mark("lis===-4390-###sois===-193273-###eois===-193273123-###lif===-16-###soif===-###eoif===-840-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
  if(AKA_mark("lis===4394###sois===193518###eois===193552###lif===20###soif===962###eoif===996###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===4394###sois===193518###eois===193552###lif===20###soif===962###eoif===996###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_length(in + 8) != 13))) {
    AKA_mark("lis===4395###sois===193561###eois===193598###lif===21###soif===1005###eoif===1042###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_RETURN_ERROR(state->error, 94); /*error: header size must be 13 bytes*/
  }
else {
AKA_mark("lis===-4394-###sois===-193518-###eois===-19351834-###lif===-20-###soif===-###eoif===-996-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
  if(AKA_mark("lis===4397###sois===193651###eois===193693###lif===23###soif===1095###eoif===1137###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===4397###sois===193651###eois===193693###lif===23###soif===1095###eoif===1137###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!lodepng_chunk_type_equals(in + 8, "IHDR")))) {
    AKA_mark("lis===4398###sois===193702###eois===193739###lif===24###soif===1146###eoif===1183###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_RETURN_ERROR(state->error, 29); /*error: it doesn't start with a IHDR chunk!*/
  }
else {
AKA_mark("lis===-4397-###sois===-193651-###eois===-19365142-###lif===-23-###soif===-###eoif===-1137-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}

  /*read the values given in the header*/
  AKA_mark("lis===4402###sois===193841###eois===193879###lif===28###soif===1285###eoif===1323###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");width = lodepng_read32bitInt(&in[16]);
  AKA_mark("lis===4403###sois===193883###eois===193922###lif===29###soif===1327###eoif===1366###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");height = lodepng_read32bitInt(&in[20]);
  /*TODO: remove the undocumented feature that allows to give null pointers to width or height*/
  if(AKA_mark("lis===4405###sois===194027###eois===194028###lif===31###soif===1471###eoif===1472###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===4405###sois===194027###eois===194028###lif===31###soif===1471###eoif===1472###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (w))) {
AKA_mark("lis===4405###sois===194030###eois===194041###lif===31###soif===1474###eoif===1485###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");*w = width;
}

else {
AKA_mark("lis===-4405-###sois===-194027-###eois===-1940271-###lif===-31-###soif===-###eoif===-1472-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
  if(AKA_mark("lis===4406###sois===194048###eois===194049###lif===32###soif===1492###eoif===1493###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===4406###sois===194048###eois===194049###lif===32###soif===1492###eoif===1493###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (h))) {
AKA_mark("lis===4406###sois===194051###eois===194063###lif===32###soif===1495###eoif===1507###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");*h = height;
}

else {
AKA_mark("lis===-4406-###sois===-194048-###eois===-1940481-###lif===-32-###soif===-###eoif===-1493-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
  AKA_mark("lis===4407###sois===194067###eois===194097###lif===33###soif===1511###eoif===1541###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");info->color.bitdepth = in[24];
  AKA_mark("lis===4408###sois===194101###eois===194150###lif===34###soif===1545###eoif===1594###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");info->color.colortype = (LodePNGColorType)in[25];
  AKA_mark("lis===4409###sois===194154###eois===194188###lif===35###soif===1598###eoif===1632###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");info->compression_method = in[26];
  AKA_mark("lis===4410###sois===194192###eois===194221###lif===36###soif===1636###eoif===1665###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");info->filter_method = in[27];
  AKA_mark("lis===4411###sois===194225###eois===194257###lif===37###soif===1669###eoif===1701###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");info->interlace_method = in[28];

  /*errors returned only after the parsing so other values are still output*/

  /*error: invalid image size*/
  if(AKA_mark("lis===4416###sois===194380###eois===194405###lif===42###soif===1824###eoif===1849###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && ((AKA_mark("lis===4416###sois===194380###eois===194390###lif===42###soif===1824###eoif===1834###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (width == 0)) || (AKA_mark("lis===4416###sois===194394###eois===194405###lif===42###soif===1838###eoif===1849###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (height == 0)))) {AKA_mark("lis===4416###sois===194407###eois===194444###lif===42###soif===1851###eoif===1888###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");AKA_mark("lis===4416###sois===194407###eois===194444###lif===42###soif===1851###eoif===1888###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_RETURN_ERROR(state->error, 93)}
else {
AKA_mark("lis===-4416-###sois===-194380-###eois===-19438025-###lif===-42-###soif===-###eoif===-1849-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
};
  /*error: invalid colortype or bitdepth combination*/
  AKA_mark("lis===4418###sois===194505###eois===194584###lif===44###soif===1949###eoif===2028###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = checkColorValidity(info->color.colortype, info->color.bitdepth);
  if(AKA_mark("lis===4419###sois===194591###eois===194603###lif===45###soif===2035###eoif===2047###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===4419###sois===194591###eois===194603###lif===45###soif===2035###eoif===2047###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===4419###sois===194605###eois===194625###lif===45###soif===2049###eoif===2069###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");return state->error;
}

else {
AKA_mark("lis===-4419-###sois===-194591-###eois===-19459112-###lif===-45-###soif===-###eoif===-2047-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
  /*error: only compression method 0 is allowed in the specification*/
  if(AKA_mark("lis===4421###sois===194704###eois===194733###lif===47###soif===2148###eoif===2177###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===4421###sois===194704###eois===194733###lif===47###soif===2148###eoif===2177###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (info->compression_method != 0))) {AKA_mark("lis===4421###sois===194735###eois===194772###lif===47###soif===2179###eoif===2216###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");AKA_mark("lis===4421###sois===194735###eois===194772###lif===47###soif===2179###eoif===2216###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_RETURN_ERROR(state->error, 32)}
else {
AKA_mark("lis===-4421-###sois===-194704-###eois===-19470429-###lif===-47-###soif===-###eoif===-2177-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
};
  /*error: only filter method 0 is allowed in the specification*/
  if(AKA_mark("lis===4423###sois===194847###eois===194871###lif===49###soif===2291###eoif===2315###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===4423###sois===194847###eois===194871###lif===49###soif===2291###eoif===2315###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (info->filter_method != 0))) {AKA_mark("lis===4423###sois===194873###eois===194910###lif===49###soif===2317###eoif===2354###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");AKA_mark("lis===4423###sois===194873###eois===194910###lif===49###soif===2317###eoif===2354###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_RETURN_ERROR(state->error, 33)}
else {
AKA_mark("lis===-4423-###sois===-194847-###eois===-19484724-###lif===-49-###soif===-###eoif===-2315-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
};
  /*error: only interlace methods 0 and 1 exist in the specification*/
  if(AKA_mark("lis===4425###sois===194990###eois===195016###lif===51###soif===2434###eoif===2460###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===4425###sois===194990###eois===195016###lif===51###soif===2434###eoif===2460###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (info->interlace_method > 1))) {AKA_mark("lis===4425###sois===195018###eois===195055###lif===51###soif===2462###eoif===2499###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");AKA_mark("lis===4425###sois===195018###eois===195055###lif===51###soif===2462###eoif===2499###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_RETURN_ERROR(state->error, 34)}
else {
AKA_mark("lis===-4425-###sois===-194990-###eois===-19499026-###lif===-51-###soif===-###eoif===-2460-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
};

  if(AKA_mark("lis===4427###sois===195065###eois===195091###lif===53###soif===2509###eoif===2535###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===4427###sois===195065###eois===195091###lif===53###soif===2509###eoif===2535###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!state->decoder.ignore_crc))) {
    AKA_mark("lis===4428###sois===195100###eois===195145###lif===54###soif===2544###eoif===2589###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");unsigned CRC = lodepng_read32bitInt(&in[29]);
    AKA_mark("lis===4429###sois===195151###eois===195198###lif===55###soif===2595###eoif===2642###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");unsigned checksum = lodepng_crc32(&in[12], 17);
    if(AKA_mark("lis===4430###sois===195207###eois===195222###lif===56###soif===2651###eoif===2666###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===4430###sois===195207###eois===195222###lif===56###soif===2651###eoif===2666###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (CRC != checksum))) {
      AKA_mark("lis===4431###sois===195233###eois===195270###lif===57###soif===2677###eoif===2714###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_RETURN_ERROR(state->error, 57); /*invalid CRC*/
    }
else {
AKA_mark("lis===-4430-###sois===-195207-###eois===-19520715-###lif===-56-###soif===-###eoif===-2666-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
  }
else {
AKA_mark("lis===-4427-###sois===-195065-###eois===-19506526-###lif===-53-###soif===-###eoif===-2535-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}

  AKA_mark("lis===4435###sois===195305###eois===195325###lif===61###soif===2749###eoif===2769###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect(unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");return state->error;
}

/** Instrumented function unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t) */
static unsigned unfilterScanline(unsigned char* recon, const unsigned char* scanline, const unsigned char* precon,
                                 size_t bytewidth, unsigned char filterType, size_t length) /* << Aka begin of function unsigned unfilterScanline(unsigned char* recon, const unsigned char* scanline, const unsigned char* precon,
                                 size_t bytewidth, unsigned char filterType, size_t length) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.unfilterScanline.195348.stub"

  /*
  For PNG filter method 0
  unfilter a PNG image scanline by scanline. when the pixels are smaller than 1 byte,
  the filter works byte per byte (bytewidth = 1)
  precon is the previous unfiltered scanline, recon the result, scanline the current one
  the incoming scanlines do NOT include the filtertype byte, that one is given in the parameter filterType instead
  recon and scanline MAY be the same memory address! precon must be disjoint.
  */

  AKA_mark("lis===4449###sois===196008###eois===196017###lif===11###soif===676###eoif===685###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");size_t i;
  AKA_mark("lis===4450###sois===196028###eois===196038###lif===12###soif===696###eoif===706###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");switch(filterType) {
    case 0: if (filterType == 0)
AKA_mark("lis===4451###sois===196047###eois===196054###lif===13###soif===715###eoif===722###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");

      int AKA_BLOCK_LOOP_196062 = 0;
    AKA_mark("lis===4452###sois===196066###eois===196072###lif===14###soif===734###eoif===740###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");
for(i = 0; AKA_mark("lis===4452###sois===196073###eois===196084###lif===14###soif===741###eoif===752###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4452###sois===196073###eois===196084###lif===14###soif===741###eoif===752###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i != length)); ({AKA_mark("lis===4452###sois===196086###eois===196089###lif===14###soif===754###eoif===757###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");++i;})) {
AKA_mark("lis===4452###sois===196091###eois===196114###lif===14###soif===759###eoif===782###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i] = scanline[i];
}

      AKA_mark("lis===4453###sois===196122###eois===196128###lif===15###soif===790###eoif===796###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");break;
    case 1: if (filterType == 1)
AKA_mark("lis===4454###sois===196134###eois===196141###lif===16###soif===802###eoif===809###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");
 {
      AKA_mark("lis===4455###sois===196151###eois===196164###lif===17###soif===819###eoif===832###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");size_t j = 0;
      int AKA_BLOCK_LOOP_196172 = 0;
    AKA_mark("lis===4456###sois===196176###eois===196182###lif===18###soif===844###eoif===850###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");
for(i = 0; AKA_mark("lis===4456###sois===196183###eois===196197###lif===18###soif===851###eoif===865###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4456###sois===196183###eois===196197###lif===18###soif===851###eoif===865###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i != bytewidth)); ({AKA_mark("lis===4456###sois===196199###eois===196202###lif===18###soif===867###eoif===870###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");++i;})) {
AKA_mark("lis===4456###sois===196204###eois===196227###lif===18###soif===872###eoif===895###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i] = scanline[i];
}

      int AKA_BLOCK_LOOP_196235 = 0;
    AKA_mark("lis===4457###sois===196239###eois===196253###lif===19###soif===907###eoif===921###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");
for(i = bytewidth; AKA_mark("lis===4457###sois===196254###eois===196265###lif===19###soif===922###eoif===933###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4457###sois===196254###eois===196265###lif===19###soif===922###eoif===933###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i != length)); ({AKA_mark("lis===4457###sois===196267###eois===196275###lif===19###soif===935###eoif===943###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");++i, ++j;})) {
AKA_mark("lis===4457###sois===196277###eois===196311###lif===19###soif===945###eoif===979###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i] = scanline[i] + recon[j];
}

      AKA_mark("lis===4458###sois===196319###eois===196325###lif===20###soif===987###eoif===993###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");break;
    }
    case 2: if (filterType == 2)
AKA_mark("lis===4460###sois===196338###eois===196345###lif===22###soif===1006###eoif===1013###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");

      if(AKA_mark("lis===4461###sois===196356###eois===196362###lif===23###soif===1024###eoif===1030###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4461###sois===196356###eois===196362###lif===23###soif===1024###eoif===1030###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (precon))) {
        int AKA_BLOCK_LOOP_196375 = 0;
    AKA_mark("lis===4462###sois===196379###eois===196385###lif===24###soif===1047###eoif===1053###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");
for(i = 0; AKA_mark("lis===4462###sois===196386###eois===196397###lif===24###soif===1054###eoif===1065###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4462###sois===196386###eois===196397###lif===24###soif===1054###eoif===1065###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i != length)); ({AKA_mark("lis===4462###sois===196399###eois===196402###lif===24###soif===1067###eoif===1070###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");++i;})) {
AKA_mark("lis===4462###sois===196404###eois===196439###lif===24###soif===1072###eoif===1107###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i] = scanline[i] + precon[i];
}

      } else {
        int AKA_BLOCK_LOOP_196465 = 0;
    AKA_mark("lis===4464###sois===196469###eois===196475###lif===26###soif===1137###eoif===1143###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");
for(i = 0; AKA_mark("lis===4464###sois===196476###eois===196487###lif===26###soif===1144###eoif===1155###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4464###sois===196476###eois===196487###lif===26###soif===1144###eoif===1155###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i != length)); ({AKA_mark("lis===4464###sois===196489###eois===196492###lif===26###soif===1157###eoif===1160###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");++i;})) {
AKA_mark("lis===4464###sois===196494###eois===196517###lif===26###soif===1162###eoif===1185###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i] = scanline[i];
}

      }
      AKA_mark("lis===4466###sois===196534###eois===196540###lif===28###soif===1202###eoif===1208###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");break;
    case 3: if (filterType == 3)
AKA_mark("lis===4467###sois===196546###eois===196553###lif===29###soif===1214###eoif===1221###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");

      if(AKA_mark("lis===4468###sois===196564###eois===196570###lif===30###soif===1232###eoif===1238###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4468###sois===196564###eois===196570###lif===30###soif===1232###eoif===1238###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (precon))) {
        AKA_mark("lis===4469###sois===196583###eois===196596###lif===31###soif===1251###eoif===1264###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");size_t j = 0;
        int AKA_BLOCK_LOOP_196606 = 0;
    AKA_mark("lis===4470###sois===196610###eois===196616###lif===32###soif===1278###eoif===1284###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");
for(i = 0; AKA_mark("lis===4470###sois===196617###eois===196631###lif===32###soif===1285###eoif===1299###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4470###sois===196617###eois===196631###lif===32###soif===1285###eoif===1299###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i != bytewidth)); ({AKA_mark("lis===4470###sois===196633###eois===196636###lif===32###soif===1301###eoif===1304###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");++i;})) {
AKA_mark("lis===4470###sois===196638###eois===196681###lif===32###soif===1306###eoif===1349###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i] = scanline[i] + (precon[i] >> 1u);
}

        /* Unroll independent paths of this predictor. A 6x and 8x version is also possible but that adds
        too much code. Whether this speeds up anything depends on compiler and settings. */
        if(AKA_mark("lis===4473###sois===196894###eois===196908###lif===35###soif===1562###eoif===1576###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4473###sois===196894###eois===196908###lif===35###soif===1562###eoif===1576###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (bytewidth >= 4))) {
          int AKA_BLOCK_LOOP_196923 = 0;
    for(; AKA_mark("lis===4474###sois===196929###eois===196943###lif===36###soif===1597###eoif===1611###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4474###sois===196929###eois===196943###lif===36###soif===1597###eoif===1611###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i + 3 < length)); ({AKA_mark("lis===4474###sois===196945###eois===196959###lif===36###soif===1613###eoif===1627###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");i += 4, j += 4;})) {
        AKA_BLOCK_LOOP_196923++;
        if (AKA_BLOCK_LOOP_196923 > 1000) {
            //break;
        }
            AKA_mark("lis===4475###sois===196976###eois===197077###lif===37###soif===1644###eoif===1745###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char s0 = scanline[i + 0], s1 = scanline[i + 1], s2 = scanline[i + 2], s3 = scanline[i + 3];
            AKA_mark("lis===4476###sois===197091###eois===197180###lif===38###soif===1759###eoif===1848###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char r0 = recon[j + 0], r1 = recon[j + 1], r2 = recon[j + 2], r3 = recon[j + 3];
            AKA_mark("lis===4477###sois===197194###eois===197287###lif===39###soif===1862###eoif===1955###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char p0 = precon[i + 0], p1 = precon[i + 1], p2 = precon[i + 2], p3 = precon[i + 3];
            AKA_mark("lis===4478###sois===197301###eois===197339###lif===40###soif===1969###eoif===2007###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 0] = s0 + ((r0 + p0) >> 1u);
            AKA_mark("lis===4479###sois===197353###eois===197391###lif===41###soif===2021###eoif===2059###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 1] = s1 + ((r1 + p1) >> 1u);
            AKA_mark("lis===4480###sois===197405###eois===197443###lif===42###soif===2073###eoif===2111###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 2] = s2 + ((r2 + p2) >> 1u);
            AKA_mark("lis===4481###sois===197457###eois===197495###lif===43###soif===2125###eoif===2163###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 3] = s3 + ((r3 + p3) >> 1u);
          }
        } else {
if(AKA_mark("lis===4483###sois===197528###eois===197542###lif===45###soif===2196###eoif===2210###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4483###sois===197528###eois===197542###lif===45###soif===2196###eoif===2210###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (bytewidth >= 3))) {
          int AKA_BLOCK_LOOP_197557 = 0;
    for(; AKA_mark("lis===4484###sois===197563###eois===197577###lif===46###soif===2231###eoif===2245###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4484###sois===197563###eois===197577###lif===46###soif===2231###eoif===2245###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i + 2 < length)); ({AKA_mark("lis===4484###sois===197579###eois===197593###lif===46###soif===2247###eoif===2261###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");i += 3, j += 3;})) {
        AKA_BLOCK_LOOP_197557++;
        if (AKA_BLOCK_LOOP_197557 > 1000) {
            //break;
        }
            AKA_mark("lis===4485###sois===197610###eois===197689###lif===47###soif===2278###eoif===2357###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char s0 = scanline[i + 0], s1 = scanline[i + 1], s2 = scanline[i + 2];
            AKA_mark("lis===4486###sois===197703###eois===197773###lif===48###soif===2371###eoif===2441###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char r0 = recon[j + 0], r1 = recon[j + 1], r2 = recon[j + 2];
            AKA_mark("lis===4487###sois===197787###eois===197860###lif===49###soif===2455###eoif===2528###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char p0 = precon[i + 0], p1 = precon[i + 1], p2 = precon[i + 2];
            AKA_mark("lis===4488###sois===197874###eois===197912###lif===50###soif===2542###eoif===2580###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 0] = s0 + ((r0 + p0) >> 1u);
            AKA_mark("lis===4489###sois===197926###eois===197964###lif===51###soif===2594###eoif===2632###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 1] = s1 + ((r1 + p1) >> 1u);
            AKA_mark("lis===4490###sois===197978###eois===198016###lif===52###soif===2646###eoif===2684###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 2] = s2 + ((r2 + p2) >> 1u);
          }
        } else {
if(AKA_mark("lis===4492###sois===198049###eois===198063###lif===54###soif===2717###eoif===2731###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4492###sois===198049###eois===198063###lif===54###soif===2717###eoif===2731###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (bytewidth >= 2))) {
          int AKA_BLOCK_LOOP_198078 = 0;
    for(; AKA_mark("lis===4493###sois===198084###eois===198098###lif===55###soif===2752###eoif===2766###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4493###sois===198084###eois===198098###lif===55###soif===2752###eoif===2766###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i + 1 < length)); ({AKA_mark("lis===4493###sois===198100###eois===198114###lif===55###soif===2768###eoif===2782###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");i += 2, j += 2;})) {
        AKA_BLOCK_LOOP_198078++;
        if (AKA_BLOCK_LOOP_198078 > 1000) {
            //break;
        }
            AKA_mark("lis===4494###sois===198131###eois===198188###lif===56###soif===2799###eoif===2856###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char s0 = scanline[i + 0], s1 = scanline[i + 1];
            AKA_mark("lis===4495###sois===198202###eois===198253###lif===57###soif===2870###eoif===2921###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char r0 = recon[j + 0], r1 = recon[j + 1];
            AKA_mark("lis===4496###sois===198267###eois===198320###lif===58###soif===2935###eoif===2988###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char p0 = precon[i + 0], p1 = precon[i + 1];
            AKA_mark("lis===4497###sois===198334###eois===198372###lif===59###soif===3002###eoif===3040###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 0] = s0 + ((r0 + p0) >> 1u);
            AKA_mark("lis===4498###sois===198386###eois===198424###lif===60###soif===3054###eoif===3092###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 1] = s1 + ((r1 + p1) >> 1u);
          }
        }
else {
AKA_mark("lis===-4492-###sois===-198049-###eois===-19804914-###lif===-54-###soif===-###eoif===-2731-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");
}
}

}

        int AKA_BLOCK_LOOP_198458 = 0;
    for(; AKA_mark("lis===4501###sois===198464###eois===198475###lif===63###soif===3132###eoif===3143###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4501###sois===198464###eois===198475###lif===63###soif===3132###eoif===3143###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i != length)); ({AKA_mark("lis===4501###sois===198477###eois===198485###lif===63###soif===3145###eoif===3153###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");++i, ++j;})) {
AKA_mark("lis===4501###sois===198487###eois===198543###lif===63###soif===3155###eoif===3211###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i] = scanline[i] + ((recon[j] + precon[i]) >> 1u);
}

      } else {
        AKA_mark("lis===4503###sois===198569###eois===198582###lif===65###soif===3237###eoif===3250###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");size_t j = 0;
        int AKA_BLOCK_LOOP_198592 = 0;
    AKA_mark("lis===4504###sois===198596###eois===198602###lif===66###soif===3264###eoif===3270###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");
for(i = 0; AKA_mark("lis===4504###sois===198603###eois===198617###lif===66###soif===3271###eoif===3285###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4504###sois===198603###eois===198617###lif===66###soif===3271###eoif===3285###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i != bytewidth)); ({AKA_mark("lis===4504###sois===198619###eois===198622###lif===66###soif===3287###eoif===3290###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");++i;})) {
AKA_mark("lis===4504###sois===198624###eois===198647###lif===66###soif===3292###eoif===3315###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i] = scanline[i];
}

        int AKA_BLOCK_LOOP_198657 = 0;
    AKA_mark("lis===4505###sois===198661###eois===198675###lif===67###soif===3329###eoif===3343###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");
for(i = bytewidth; AKA_mark("lis===4505###sois===198676###eois===198687###lif===67###soif===3344###eoif===3355###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4505###sois===198676###eois===198687###lif===67###soif===3344###eoif===3355###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i != length)); ({AKA_mark("lis===4505###sois===198689###eois===198697###lif===67###soif===3357###eoif===3365###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");++i, ++j;})) {
AKA_mark("lis===4505###sois===198699###eois===198741###lif===67###soif===3367###eoif===3409###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i] = scanline[i] + (recon[j] >> 1u);
}

      }
      AKA_mark("lis===4507###sois===198758###eois===198764###lif===69###soif===3426###eoif===3432###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");break;
    case 4: if (filterType == 4)
AKA_mark("lis===4508###sois===198770###eois===198777###lif===70###soif===3438###eoif===3445###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");

      if(AKA_mark("lis===4509###sois===198788###eois===198794###lif===71###soif===3456###eoif===3462###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4509###sois===198788###eois===198794###lif===71###soif===3456###eoif===3462###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (precon))) {
        /* Unroll independent paths of this predictor. Whether this speeds up
        anything depends on compiler and settings. */
        if(AKA_mark("lis===4512###sois===198944###eois===198958###lif===74###soif===3612###eoif===3626###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4512###sois===198944###eois===198958###lif===74###soif===3612###eoif===3626###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (bytewidth == 8))) {
          AKA_mark("lis===4513###sois===198973###eois===199034###lif===75###soif===3641###eoif===3702###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char a0, b0 = 0, c0, d0 = 0, a1, b1 = 0, c1, d1 = 0;
          AKA_mark("lis===4514###sois===199046###eois===199107###lif===76###soif===3714###eoif===3775###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char a2, b2 = 0, c2, d2 = 0, a3, b3 = 0, c3, d3 = 0;
          AKA_mark("lis===4515###sois===199119###eois===199180###lif===77###soif===3787###eoif===3848###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char a4, b4 = 0, c4, d4 = 0, a5, b5 = 0, c5, d5 = 0;
          AKA_mark("lis===4516###sois===199192###eois===199253###lif===78###soif===3860###eoif===3921###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char a6, b6 = 0, c6, d6 = 0, a7, b7 = 0, c7, d7 = 0;
          int AKA_BLOCK_LOOP_199265 = 0;
    AKA_mark("lis===4517###sois===199269###eois===199275###lif===79###soif===3937###eoif===3943###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");
for(i = 0; AKA_mark("lis===4517###sois===199276###eois===199290###lif===79###soif===3944###eoif===3958###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4517###sois===199276###eois===199290###lif===79###soif===3944###eoif===3958###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i + 7 < length)); ({AKA_mark("lis===4517###sois===199292###eois===199298###lif===79###soif===3960###eoif===3966###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");i += 8;})) {
        AKA_BLOCK_LOOP_199265++;
        if (AKA_BLOCK_LOOP_199265 > 1000) {
            //break;
        }
            AKA_mark("lis===4518###sois===199315###eois===199323###lif===80###soif===3983###eoif===3991###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c0 = b0; AKA_mark("lis===4518###sois===199324###eois===199332###lif===80###soif===3992###eoif===4000###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c1 = b1; AKA_mark("lis===4518###sois===199333###eois===199341###lif===80###soif===4001###eoif===4009###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c2 = b2; AKA_mark("lis===4518###sois===199342###eois===199350###lif===80###soif===4010###eoif===4018###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c3 = b3;
            AKA_mark("lis===4519###sois===199364###eois===199372###lif===81###soif===4032###eoif===4040###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c4 = b4; AKA_mark("lis===4519###sois===199373###eois===199381###lif===81###soif===4041###eoif===4049###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c5 = b5; AKA_mark("lis===4519###sois===199382###eois===199390###lif===81###soif===4050###eoif===4058###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c6 = b6; AKA_mark("lis===4519###sois===199391###eois===199399###lif===81###soif===4059###eoif===4067###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c7 = b7;
            AKA_mark("lis===4520###sois===199413###eois===199432###lif===82###soif===4081###eoif===4100###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b0 = precon[i + 0]; AKA_mark("lis===4520###sois===199433###eois===199452###lif===82###soif===4101###eoif===4120###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b1 = precon[i + 1]; AKA_mark("lis===4520###sois===199453###eois===199472###lif===82###soif===4121###eoif===4140###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b2 = precon[i + 2]; AKA_mark("lis===4520###sois===199473###eois===199492###lif===82###soif===4141###eoif===4160###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b3 = precon[i + 3];
            AKA_mark("lis===4521###sois===199506###eois===199525###lif===83###soif===4174###eoif===4193###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b4 = precon[i + 4]; AKA_mark("lis===4521###sois===199526###eois===199545###lif===83###soif===4194###eoif===4213###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b5 = precon[i + 5]; AKA_mark("lis===4521###sois===199546###eois===199565###lif===83###soif===4214###eoif===4233###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b6 = precon[i + 6]; AKA_mark("lis===4521###sois===199566###eois===199585###lif===83###soif===4234###eoif===4253###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b7 = precon[i + 7];
            AKA_mark("lis===4522###sois===199599###eois===199607###lif===84###soif===4267###eoif===4275###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a0 = d0; AKA_mark("lis===4522###sois===199608###eois===199616###lif===84###soif===4276###eoif===4284###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a1 = d1; AKA_mark("lis===4522###sois===199617###eois===199625###lif===84###soif===4285###eoif===4293###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a2 = d2; AKA_mark("lis===4522###sois===199626###eois===199634###lif===84###soif===4294###eoif===4302###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a3 = d3;
            AKA_mark("lis===4523###sois===199648###eois===199656###lif===85###soif===4316###eoif===4324###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a4 = d4; AKA_mark("lis===4523###sois===199657###eois===199665###lif===85###soif===4325###eoif===4333###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a5 = d5; AKA_mark("lis===4523###sois===199666###eois===199674###lif===85###soif===4334###eoif===4342###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a6 = d6; AKA_mark("lis===4523###sois===199675###eois===199683###lif===85###soif===4343###eoif===4351###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a7 = d7;
            AKA_mark("lis===4524###sois===199697###eois===199747###lif===86###soif===4365###eoif===4415###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d0 = scanline[i + 0] + paethPredictor(a0, b0, c0);
            AKA_mark("lis===4525###sois===199761###eois===199811###lif===87###soif===4429###eoif===4479###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d1 = scanline[i + 1] + paethPredictor(a1, b1, c1);
            AKA_mark("lis===4526###sois===199825###eois===199875###lif===88###soif===4493###eoif===4543###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d2 = scanline[i + 2] + paethPredictor(a2, b2, c2);
            AKA_mark("lis===4527###sois===199889###eois===199939###lif===89###soif===4557###eoif===4607###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d3 = scanline[i + 3] + paethPredictor(a3, b3, c3);
            AKA_mark("lis===4528###sois===199953###eois===200003###lif===90###soif===4621###eoif===4671###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d4 = scanline[i + 4] + paethPredictor(a4, b4, c4);
            AKA_mark("lis===4529###sois===200017###eois===200067###lif===91###soif===4685###eoif===4735###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d5 = scanline[i + 5] + paethPredictor(a5, b5, c5);
            AKA_mark("lis===4530###sois===200081###eois===200131###lif===92###soif===4749###eoif===4799###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d6 = scanline[i + 6] + paethPredictor(a6, b6, c6);
            AKA_mark("lis===4531###sois===200145###eois===200195###lif===93###soif===4813###eoif===4863###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d7 = scanline[i + 7] + paethPredictor(a7, b7, c7);
            AKA_mark("lis===4532###sois===200209###eois===200227###lif===94###soif===4877###eoif===4895###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 0] = d0; AKA_mark("lis===4532###sois===200228###eois===200246###lif===94###soif===4896###eoif===4914###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 1] = d1; AKA_mark("lis===4532###sois===200247###eois===200265###lif===94###soif===4915###eoif===4933###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 2] = d2; AKA_mark("lis===4532###sois===200266###eois===200284###lif===94###soif===4934###eoif===4952###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 3] = d3;
            AKA_mark("lis===4533###sois===200298###eois===200316###lif===95###soif===4966###eoif===4984###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 4] = d4; AKA_mark("lis===4533###sois===200317###eois===200335###lif===95###soif===4985###eoif===5003###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 5] = d5; AKA_mark("lis===4533###sois===200336###eois===200354###lif===95###soif===5004###eoif===5022###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 6] = d6; AKA_mark("lis===4533###sois===200355###eois===200373###lif===95###soif===5023###eoif===5041###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 7] = d7;
          }
        } else {
if(AKA_mark("lis===4535###sois===200406###eois===200420###lif===97###soif===5074###eoif===5088###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4535###sois===200406###eois===200420###lif===97###soif===5074###eoif===5088###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (bytewidth == 6))) {
          AKA_mark("lis===4536###sois===200435###eois===200496###lif===98###soif===5103###eoif===5164###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char a0, b0 = 0, c0, d0 = 0, a1, b1 = 0, c1, d1 = 0;
          AKA_mark("lis===4537###sois===200508###eois===200569###lif===99###soif===5176###eoif===5237###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char a2, b2 = 0, c2, d2 = 0, a3, b3 = 0, c3, d3 = 0;
          AKA_mark("lis===4538###sois===200581###eois===200642###lif===100###soif===5249###eoif===5310###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char a4, b4 = 0, c4, d4 = 0, a5, b5 = 0, c5, d5 = 0;
          int AKA_BLOCK_LOOP_200654 = 0;
    AKA_mark("lis===4539###sois===200658###eois===200664###lif===101###soif===5326###eoif===5332###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");
for(i = 0; AKA_mark("lis===4539###sois===200665###eois===200679###lif===101###soif===5333###eoif===5347###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4539###sois===200665###eois===200679###lif===101###soif===5333###eoif===5347###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i + 5 < length)); ({AKA_mark("lis===4539###sois===200681###eois===200687###lif===101###soif===5349###eoif===5355###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");i += 6;})) {
        AKA_BLOCK_LOOP_200654++;
        if (AKA_BLOCK_LOOP_200654 > 1000) {
            //break;
        }
            AKA_mark("lis===4540###sois===200704###eois===200712###lif===102###soif===5372###eoif===5380###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c0 = b0; AKA_mark("lis===4540###sois===200713###eois===200721###lif===102###soif===5381###eoif===5389###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c1 = b1; AKA_mark("lis===4540###sois===200722###eois===200730###lif===102###soif===5390###eoif===5398###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c2 = b2;
            AKA_mark("lis===4541###sois===200744###eois===200752###lif===103###soif===5412###eoif===5420###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c3 = b3; AKA_mark("lis===4541###sois===200753###eois===200761###lif===103###soif===5421###eoif===5429###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c4 = b4; AKA_mark("lis===4541###sois===200762###eois===200770###lif===103###soif===5430###eoif===5438###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c5 = b5;
            AKA_mark("lis===4542###sois===200784###eois===200803###lif===104###soif===5452###eoif===5471###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b0 = precon[i + 0]; AKA_mark("lis===4542###sois===200804###eois===200823###lif===104###soif===5472###eoif===5491###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b1 = precon[i + 1]; AKA_mark("lis===4542###sois===200824###eois===200843###lif===104###soif===5492###eoif===5511###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b2 = precon[i + 2];
            AKA_mark("lis===4543###sois===200857###eois===200876###lif===105###soif===5525###eoif===5544###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b3 = precon[i + 3]; AKA_mark("lis===4543###sois===200877###eois===200896###lif===105###soif===5545###eoif===5564###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b4 = precon[i + 4]; AKA_mark("lis===4543###sois===200897###eois===200916###lif===105###soif===5565###eoif===5584###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b5 = precon[i + 5];
            AKA_mark("lis===4544###sois===200930###eois===200938###lif===106###soif===5598###eoif===5606###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a0 = d0; AKA_mark("lis===4544###sois===200939###eois===200947###lif===106###soif===5607###eoif===5615###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a1 = d1; AKA_mark("lis===4544###sois===200948###eois===200956###lif===106###soif===5616###eoif===5624###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a2 = d2;
            AKA_mark("lis===4545###sois===200970###eois===200978###lif===107###soif===5638###eoif===5646###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a3 = d3; AKA_mark("lis===4545###sois===200979###eois===200987###lif===107###soif===5647###eoif===5655###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a4 = d4; AKA_mark("lis===4545###sois===200988###eois===200996###lif===107###soif===5656###eoif===5664###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a5 = d5;
            AKA_mark("lis===4546###sois===201010###eois===201060###lif===108###soif===5678###eoif===5728###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d0 = scanline[i + 0] + paethPredictor(a0, b0, c0);
            AKA_mark("lis===4547###sois===201074###eois===201124###lif===109###soif===5742###eoif===5792###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d1 = scanline[i + 1] + paethPredictor(a1, b1, c1);
            AKA_mark("lis===4548###sois===201138###eois===201188###lif===110###soif===5806###eoif===5856###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d2 = scanline[i + 2] + paethPredictor(a2, b2, c2);
            AKA_mark("lis===4549###sois===201202###eois===201252###lif===111###soif===5870###eoif===5920###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d3 = scanline[i + 3] + paethPredictor(a3, b3, c3);
            AKA_mark("lis===4550###sois===201266###eois===201316###lif===112###soif===5934###eoif===5984###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d4 = scanline[i + 4] + paethPredictor(a4, b4, c4);
            AKA_mark("lis===4551###sois===201330###eois===201380###lif===113###soif===5998###eoif===6048###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d5 = scanline[i + 5] + paethPredictor(a5, b5, c5);
            AKA_mark("lis===4552###sois===201394###eois===201412###lif===114###soif===6062###eoif===6080###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 0] = d0; AKA_mark("lis===4552###sois===201413###eois===201431###lif===114###soif===6081###eoif===6099###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 1] = d1; AKA_mark("lis===4552###sois===201432###eois===201450###lif===114###soif===6100###eoif===6118###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 2] = d2;
            AKA_mark("lis===4553###sois===201464###eois===201482###lif===115###soif===6132###eoif===6150###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 3] = d3; AKA_mark("lis===4553###sois===201483###eois===201501###lif===115###soif===6151###eoif===6169###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 4] = d4; AKA_mark("lis===4553###sois===201502###eois===201520###lif===115###soif===6170###eoif===6188###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 5] = d5;
          }
        } else {
if(AKA_mark("lis===4555###sois===201553###eois===201567###lif===117###soif===6221###eoif===6235###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4555###sois===201553###eois===201567###lif===117###soif===6221###eoif===6235###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (bytewidth == 4))) {
          AKA_mark("lis===4556###sois===201582###eois===201643###lif===118###soif===6250###eoif===6311###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char a0, b0 = 0, c0, d0 = 0, a1, b1 = 0, c1, d1 = 0;
          AKA_mark("lis===4557###sois===201655###eois===201716###lif===119###soif===6323###eoif===6384###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char a2, b2 = 0, c2, d2 = 0, a3, b3 = 0, c3, d3 = 0;
          int AKA_BLOCK_LOOP_201728 = 0;
    AKA_mark("lis===4558###sois===201732###eois===201738###lif===120###soif===6400###eoif===6406###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");
for(i = 0; AKA_mark("lis===4558###sois===201739###eois===201753###lif===120###soif===6407###eoif===6421###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4558###sois===201739###eois===201753###lif===120###soif===6407###eoif===6421###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i + 3 < length)); ({AKA_mark("lis===4558###sois===201755###eois===201761###lif===120###soif===6423###eoif===6429###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");i += 4;})) {
        AKA_BLOCK_LOOP_201728++;
        if (AKA_BLOCK_LOOP_201728 > 1000) {
            //break;
        }
            AKA_mark("lis===4559###sois===201778###eois===201786###lif===121###soif===6446###eoif===6454###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c0 = b0; AKA_mark("lis===4559###sois===201787###eois===201795###lif===121###soif===6455###eoif===6463###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c1 = b1; AKA_mark("lis===4559###sois===201796###eois===201804###lif===121###soif===6464###eoif===6472###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c2 = b2; AKA_mark("lis===4559###sois===201805###eois===201813###lif===121###soif===6473###eoif===6481###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c3 = b3;
            AKA_mark("lis===4560###sois===201827###eois===201846###lif===122###soif===6495###eoif===6514###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b0 = precon[i + 0]; AKA_mark("lis===4560###sois===201847###eois===201866###lif===122###soif===6515###eoif===6534###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b1 = precon[i + 1]; AKA_mark("lis===4560###sois===201867###eois===201886###lif===122###soif===6535###eoif===6554###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b2 = precon[i + 2]; AKA_mark("lis===4560###sois===201887###eois===201906###lif===122###soif===6555###eoif===6574###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b3 = precon[i + 3];
            AKA_mark("lis===4561###sois===201920###eois===201928###lif===123###soif===6588###eoif===6596###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a0 = d0; AKA_mark("lis===4561###sois===201929###eois===201937###lif===123###soif===6597###eoif===6605###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a1 = d1; AKA_mark("lis===4561###sois===201938###eois===201946###lif===123###soif===6606###eoif===6614###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a2 = d2; AKA_mark("lis===4561###sois===201947###eois===201955###lif===123###soif===6615###eoif===6623###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a3 = d3;
            AKA_mark("lis===4562###sois===201969###eois===202019###lif===124###soif===6637###eoif===6687###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d0 = scanline[i + 0] + paethPredictor(a0, b0, c0);
            AKA_mark("lis===4563###sois===202033###eois===202083###lif===125###soif===6701###eoif===6751###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d1 = scanline[i + 1] + paethPredictor(a1, b1, c1);
            AKA_mark("lis===4564###sois===202097###eois===202147###lif===126###soif===6765###eoif===6815###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d2 = scanline[i + 2] + paethPredictor(a2, b2, c2);
            AKA_mark("lis===4565###sois===202161###eois===202211###lif===127###soif===6829###eoif===6879###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d3 = scanline[i + 3] + paethPredictor(a3, b3, c3);
            AKA_mark("lis===4566###sois===202225###eois===202243###lif===128###soif===6893###eoif===6911###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 0] = d0; AKA_mark("lis===4566###sois===202244###eois===202262###lif===128###soif===6912###eoif===6930###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 1] = d1; AKA_mark("lis===4566###sois===202263###eois===202281###lif===128###soif===6931###eoif===6949###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 2] = d2; AKA_mark("lis===4566###sois===202282###eois===202300###lif===128###soif===6950###eoif===6968###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 3] = d3;
          }
        } else {
if(AKA_mark("lis===4568###sois===202333###eois===202347###lif===130###soif===7001###eoif===7015###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4568###sois===202333###eois===202347###lif===130###soif===7001###eoif===7015###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (bytewidth == 3))) {
          AKA_mark("lis===4569###sois===202362###eois===202399###lif===131###soif===7030###eoif===7067###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char a0, b0 = 0, c0, d0 = 0;
          AKA_mark("lis===4570###sois===202411###eois===202448###lif===132###soif===7079###eoif===7116###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char a1, b1 = 0, c1, d1 = 0;
          AKA_mark("lis===4571###sois===202460###eois===202497###lif===133###soif===7128###eoif===7165###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char a2, b2 = 0, c2, d2 = 0;
          int AKA_BLOCK_LOOP_202509 = 0;
    AKA_mark("lis===4572###sois===202513###eois===202519###lif===134###soif===7181###eoif===7187###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");
for(i = 0; AKA_mark("lis===4572###sois===202520###eois===202534###lif===134###soif===7188###eoif===7202###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4572###sois===202520###eois===202534###lif===134###soif===7188###eoif===7202###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i + 2 < length)); ({AKA_mark("lis===4572###sois===202536###eois===202542###lif===134###soif===7204###eoif===7210###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");i += 3;})) {
        AKA_BLOCK_LOOP_202509++;
        if (AKA_BLOCK_LOOP_202509 > 1000) {
            //break;
        }
            AKA_mark("lis===4573###sois===202559###eois===202567###lif===135###soif===7227###eoif===7235###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c0 = b0; AKA_mark("lis===4573###sois===202568###eois===202576###lif===135###soif===7236###eoif===7244###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c1 = b1; AKA_mark("lis===4573###sois===202577###eois===202585###lif===135###soif===7245###eoif===7253###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c2 = b2;
            AKA_mark("lis===4574###sois===202599###eois===202618###lif===136###soif===7267###eoif===7286###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b0 = precon[i + 0]; AKA_mark("lis===4574###sois===202619###eois===202638###lif===136###soif===7287###eoif===7306###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b1 = precon[i + 1]; AKA_mark("lis===4574###sois===202639###eois===202658###lif===136###soif===7307###eoif===7326###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b2 = precon[i + 2];
            AKA_mark("lis===4575###sois===202672###eois===202680###lif===137###soif===7340###eoif===7348###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a0 = d0; AKA_mark("lis===4575###sois===202681###eois===202689###lif===137###soif===7349###eoif===7357###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a1 = d1; AKA_mark("lis===4575###sois===202690###eois===202698###lif===137###soif===7358###eoif===7366###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a2 = d2;
            AKA_mark("lis===4576###sois===202712###eois===202762###lif===138###soif===7380###eoif===7430###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d0 = scanline[i + 0] + paethPredictor(a0, b0, c0);
            AKA_mark("lis===4577###sois===202776###eois===202826###lif===139###soif===7444###eoif===7494###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d1 = scanline[i + 1] + paethPredictor(a1, b1, c1);
            AKA_mark("lis===4578###sois===202840###eois===202890###lif===140###soif===7508###eoif===7558###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d2 = scanline[i + 2] + paethPredictor(a2, b2, c2);
            AKA_mark("lis===4579###sois===202904###eois===202922###lif===141###soif===7572###eoif===7590###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 0] = d0; AKA_mark("lis===4579###sois===202923###eois===202941###lif===141###soif===7591###eoif===7609###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 1] = d1; AKA_mark("lis===4579###sois===202942###eois===202960###lif===141###soif===7610###eoif===7628###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 2] = d2;
          }
        } else {
if(AKA_mark("lis===4581###sois===202993###eois===203007###lif===143###soif===7661###eoif===7675###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4581###sois===202993###eois===203007###lif===143###soif===7661###eoif===7675###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (bytewidth == 2))) {
          AKA_mark("lis===4582###sois===203022###eois===203059###lif===144###soif===7690###eoif===7727###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char a0, b0 = 0, c0, d0 = 0;
          AKA_mark("lis===4583###sois===203071###eois===203108###lif===145###soif===7739###eoif===7776###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char a1, b1 = 0, c1, d1 = 0;
          int AKA_BLOCK_LOOP_203120 = 0;
    AKA_mark("lis===4584###sois===203124###eois===203130###lif===146###soif===7792###eoif===7798###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");
for(i = 0; AKA_mark("lis===4584###sois===203131###eois===203145###lif===146###soif===7799###eoif===7813###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4584###sois===203131###eois===203145###lif===146###soif===7799###eoif===7813###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i + 1 < length)); ({AKA_mark("lis===4584###sois===203147###eois===203153###lif===146###soif===7815###eoif===7821###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");i += 2;})) {
        AKA_BLOCK_LOOP_203120++;
        if (AKA_BLOCK_LOOP_203120 > 1000) {
            //break;
        }
            AKA_mark("lis===4585###sois===203170###eois===203178###lif===147###soif===7838###eoif===7846###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c0 = b0; AKA_mark("lis===4585###sois===203179###eois===203187###lif===147###soif===7847###eoif===7855###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c1 = b1;
            AKA_mark("lis===4586###sois===203201###eois===203220###lif===148###soif===7869###eoif===7888###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b0 = precon[i + 0];
            AKA_mark("lis===4587###sois===203234###eois===203253###lif===149###soif===7902###eoif===7921###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b1 = precon[i + 1];
            AKA_mark("lis===4588###sois===203267###eois===203275###lif===150###soif===7935###eoif===7943###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a0 = d0; AKA_mark("lis===4588###sois===203276###eois===203284###lif===150###soif===7944###eoif===7952###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a1 = d1;
            AKA_mark("lis===4589###sois===203298###eois===203348###lif===151###soif===7966###eoif===8016###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d0 = scanline[i + 0] + paethPredictor(a0, b0, c0);
            AKA_mark("lis===4590###sois===203362###eois===203412###lif===152###soif===8030###eoif===8080###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d1 = scanline[i + 1] + paethPredictor(a1, b1, c1);
            AKA_mark("lis===4591###sois===203426###eois===203444###lif===153###soif===8094###eoif===8112###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 0] = d0;
            AKA_mark("lis===4592###sois===203458###eois===203476###lif===154###soif===8126###eoif===8144###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i + 1] = d1;
          }
        } else {
if(AKA_mark("lis===4594###sois===203509###eois===203523###lif===156###soif===8177###eoif===8191###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4594###sois===203509###eois===203523###lif===156###soif===8177###eoif===8191###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (bytewidth == 1))) {
          AKA_mark("lis===4595###sois===203538###eois===203571###lif===157###soif===8206###eoif===8239###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");unsigned char a, b = 0, c, d = 0;
          int AKA_BLOCK_LOOP_203583 = 0;
    AKA_mark("lis===4596###sois===203587###eois===203593###lif===158###soif===8255###eoif===8261###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");
for(i = 0; AKA_mark("lis===4596###sois===203594###eois===203605###lif===158###soif===8262###eoif===8273###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4596###sois===203594###eois===203605###lif===158###soif===8262###eoif===8273###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i != length)); ({AKA_mark("lis===4596###sois===203607###eois===203610###lif===158###soif===8275###eoif===8278###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");++i;})) {
        AKA_BLOCK_LOOP_203583++;
        if (AKA_BLOCK_LOOP_203583 > 1000) {
            //break;
        }
            AKA_mark("lis===4597###sois===203627###eois===203633###lif===159###soif===8295###eoif===8301###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");c = b;
            AKA_mark("lis===4598###sois===203647###eois===203661###lif===160###soif===8315###eoif===8329###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");b = precon[i];
            AKA_mark("lis===4599###sois===203675###eois===203681###lif===161###soif===8343###eoif===8349###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");a = d;
            AKA_mark("lis===4600###sois===203695###eois===203737###lif===162###soif===8363###eoif===8405###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");d = scanline[i] + paethPredictor(a, b, c);
            AKA_mark("lis===4601###sois===203751###eois===203764###lif===163###soif===8419###eoif===8432###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i] = d;
          }
        } else {
          /* Normally not a possible case, but this would handle it correctly */
          int AKA_BLOCK_LOOP_203889 = 0;
    AKA_mark("lis===4605###sois===203893###eois===203899###lif===167###soif===8561###eoif===8567###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");
for(i = 0; AKA_mark("lis===4605###sois===203900###eois===203914###lif===167###soif===8568###eoif===8582###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4605###sois===203900###eois===203914###lif===167###soif===8568###eoif===8582###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i != bytewidth)); ({AKA_mark("lis===4605###sois===203916###eois===203919###lif===167###soif===8584###eoif===8587###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");++i;})) {
        AKA_BLOCK_LOOP_203889++;
        if (AKA_BLOCK_LOOP_203889 > 1000) {
            //break;
        }
            AKA_mark("lis===4606###sois===203936###eois===203973###lif===168###soif===8604###eoif===8641###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i] = (scanline[i] + precon[i]); /*paethPredictor(0, precon[i], 0) is always precon[i]*/
          }
        }
}

}

}

}

}

        /* finish any remaining bytes */
        int AKA_BLOCK_LOOP_204105 = 0;
    for(; AKA_mark("lis===4610###sois===204111###eois===204122###lif===172###soif===8779###eoif===8790###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4610###sois===204111###eois===204122###lif===172###soif===8779###eoif===8790###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i != length)); ({AKA_mark("lis===4610###sois===204124###eois===204127###lif===172###soif===8792###eoif===8795###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");++i;})) {
        AKA_BLOCK_LOOP_204105++;
        if (AKA_BLOCK_LOOP_204105 > 1000) {
            //break;
        }
          AKA_mark("lis===4611###sois===204142###eois===204240###lif===173###soif===8810###eoif===8908###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i] = (scanline[i] + paethPredictor(recon[i - bytewidth], precon[i], precon[i - bytewidth]));
        }
      } else {
        AKA_mark("lis===4614###sois===204277###eois===204290###lif===176###soif===8945###eoif===8958###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");size_t j = 0;
        int AKA_BLOCK_LOOP_204300 = 0;
    AKA_mark("lis===4615###sois===204304###eois===204310###lif===177###soif===8972###eoif===8978###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");
for(i = 0; AKA_mark("lis===4615###sois===204311###eois===204325###lif===177###soif===8979###eoif===8993###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4615###sois===204311###eois===204325###lif===177###soif===8979###eoif===8993###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i != bytewidth)); ({AKA_mark("lis===4615###sois===204327###eois===204330###lif===177###soif===8995###eoif===8998###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");++i;})) {
        AKA_BLOCK_LOOP_204300++;
        if (AKA_BLOCK_LOOP_204300 > 1000) {
            //break;
        }
          AKA_mark("lis===4616###sois===204345###eois===204368###lif===178###soif===9013###eoif===9036###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i] = scanline[i];
        }
        int AKA_BLOCK_LOOP_204389 = 0;
    AKA_mark("lis===4618###sois===204393###eois===204407###lif===180###soif===9061###eoif===9075###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");
for(i = bytewidth; AKA_mark("lis===4618###sois===204408###eois===204419###lif===180###soif===9076###eoif===9087###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (AKA_mark("lis===4618###sois===204408###eois===204419###lif===180###soif===9076###eoif===9087###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)") && (i != length)); ({AKA_mark("lis===4618###sois===204421###eois===204429###lif===180###soif===9089###eoif===9097###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");++i, ++j;})) {
        AKA_BLOCK_LOOP_204389++;
        if (AKA_BLOCK_LOOP_204389 > 1000) {
            //break;
        }
          /*paethPredictor(recon[i - bytewidth], 0, 0) is always recon[i - bytewidth]*/
          AKA_mark("lis===4620###sois===204533###eois===204569###lif===182###soif===9201###eoif===9237###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");recon[i] = (scanline[i] + recon[j]);
        }
      }
      AKA_mark("lis===4623###sois===204597###eois===204603###lif===185###soif===9265###eoif===9271###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");break;
    default: if (filterType != 0 && filterType != 1 && filterType != 2 && filterType != 3 && filterType != 4)
AKA_mark("lis===4624###sois===204609###eois===204617###lif===186###soif===9277###eoif===9285###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");
 AKA_mark("lis===4624###sois===204618###eois===204628###lif===186###soif===9286###eoif===9296###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");return 36; /*error: invalid filter type given*/
  }
  AKA_mark("lis===4626###sois===204674###eois===204683###lif===188###soif===9342###eoif===9351###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,unsigned char,size_t)");return 0;
}

/** Instrumented function unfilter(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned) */
static unsigned unfilter(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp) /* << Aka begin of function unsigned unfilter(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilter(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.unfilter.204706.stub"

  /*
  For PNG filter method 0
  this function unfilters a single image (e.g. without interlacing this is called once, with Adam7 seven times)
  out must have enough bytes allocated already, in must have the scanlines + 1 filtertype byte per scanline
  w and h are image dimensions or dimensions of reduced image, bpp is bits per pixel
  in and out are allowed to be the same memory address (but aren't the same size since in has the extra filter bytes)
  */

  AKA_mark("lis===4638###sois===205271###eois===205282###lif===9###soif===581###eoif===592###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilter(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");unsigned y;
  AKA_mark("lis===4639###sois===205286###eois===205314###lif===10###soif===596###eoif===624###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilter(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");unsigned char* prevline = 0;

  /*bytewidth is used for filtering, is 1 when bpp < 8, number of bytes per pixel otherwise*/
  AKA_mark("lis===4642###sois===205415###eois===205450###lif===13###soif===725###eoif===760###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilter(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");size_t bytewidth = (bpp + 7u) / 8u;
  /*the width of a scanline in bytes, not including the filter type*/
  AKA_mark("lis===4644###sois===205525###eois===205586###lif===15###soif===835###eoif===896###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilter(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");size_t linebytes = lodepng_get_raw_size_idat(w, 1, bpp) - 1u;

  int AKA_BLOCK_LOOP_205592 = 0;
    AKA_mark("lis===4646###sois===205596###eois===205602###lif===17###soif===906###eoif===912###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilter(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");
for(y = 0; AKA_mark("lis===4646###sois===205603###eois===205608###lif===17###soif===913###eoif===918###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilter(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (AKA_mark("lis===4646###sois===205603###eois===205608###lif===17###soif===913###eoif===918###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilter(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (y < h)); ({AKA_mark("lis===4646###sois===205610###eois===205613###lif===17###soif===920###eoif===923###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilter(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");++y;})) {
        AKA_BLOCK_LOOP_205592++;
        if (AKA_BLOCK_LOOP_205592 > 1000) {
            //break;
        }
    AKA_mark("lis===4647###sois===205622###eois===205654###lif===18###soif===932###eoif===964###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilter(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");size_t outindex = linebytes * y;
    AKA_mark("lis===4648###sois===205660###eois===205697###lif===19###soif===970###eoif===1007###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilter(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");size_t inindex = (1 + linebytes) * y; /*the extra filterbyte added to each row*/
    AKA_mark("lis===4649###sois===205746###eois===205785###lif===20###soif===1056###eoif===1095###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilter(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");unsigned char filterType = in[inindex];

    AKA_mark("lis===4651###sois===205793###eois===205906###lif===22###soif===1103###eoif===1216###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilter(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");CERROR_TRY_RETURN(unfilterScanline(&out[outindex], &in[inindex + 1], prevline, bytewidth, filterType, linebytes));

    AKA_mark("lis===4653###sois===205915###eois===205941###lif===24###soif===1225###eoif===1251###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilter(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");prevline = &out[outindex];
  }

  AKA_mark("lis===4656###sois===205952###eois===205961###lif===27###soif===1262###eoif===1271###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\unfilter(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");return 0;
}

/*
in: Adam7 interlaced image, with no padding bits between scanlines, but between
 reduced images so that each reduced image starts at a byte.
out: the same pixels, but re-ordered so that they're now a non-interlaced image with size w*h
bpp: bits per pixel
out has the following size in bits: w * h * bpp.
in is possibly bigger due to padding bits between reduced images.
out must be big enough AND must be 0 everywhere if bpp < 8 in the current implementation
(because that's likely a little bit faster)
NOTE: comments about padding bits are only relevant if bpp < 8
*/
/** Instrumented function Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned) */
static void Adam7_deinterlace(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp) /* << Aka begin of function void Adam7_deinterlace(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.Adam7_deinterlace.206563.stub"

  AKA_mark("lis===4671###sois===206669###eois===206697###lif===1###soif===118###eoif===146###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");unsigned passw[7], passh[7];
  AKA_mark("lis===4672###sois===206701###eois===206763###lif===2###soif===150###eoif===212###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");size_t filter_passstart[8], padded_passstart[8], passstart[8];
  AKA_mark("lis===4673###sois===206767###eois===206778###lif===3###soif===216###eoif===227###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");unsigned i;

  AKA_mark("lis===4675###sois===206784###eois===206876###lif===5###soif===233###eoif===325###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);

  if(AKA_mark("lis===4677###sois===206885###eois===206893###lif===7###soif===334###eoif===342###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (AKA_mark("lis===4677###sois===206885###eois===206893###lif===7###soif===334###eoif===342###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (bpp >= 8))) {
    int AKA_BLOCK_LOOP_206902 = 0;
    AKA_mark("lis===4678###sois===206906###eois===206912###lif===8###soif===355###eoif===361###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");
for(i = 0; AKA_mark("lis===4678###sois===206913###eois===206919###lif===8###soif===362###eoif===368###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (AKA_mark("lis===4678###sois===206913###eois===206919###lif===8###soif===362###eoif===368###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (i != 7)); ({AKA_mark("lis===4678###sois===206921###eois===206924###lif===8###soif===370###eoif===373###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");++i;})) {
        AKA_BLOCK_LOOP_206902++;
        if (AKA_BLOCK_LOOP_206902 > 1000) {
            //break;
        }
      AKA_mark("lis===4679###sois===206935###eois===206952###lif===9###soif===384###eoif===401###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");unsigned x, y, b;
      AKA_mark("lis===4680###sois===206960###eois===206988###lif===10###soif===409###eoif===437###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");size_t bytewidth = bpp / 8u;
      int AKA_BLOCK_LOOP_206996 = 0;
    AKA_mark("lis===4681###sois===207000###eois===207006###lif===11###soif===449###eoif===455###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");
for(y = 0; AKA_mark("lis===4681###sois===207007###eois===207019###lif===11###soif===456###eoif===468###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (AKA_mark("lis===4681###sois===207007###eois===207019###lif===11###soif===456###eoif===468###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (y < passh[i])); ({AKA_mark("lis===4681###sois===207021###eois===207024###lif===11###soif===470###eoif===473###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");++y;}))
      {
int AKA_BLOCK_LOOP_207033 = 0;
    AKA_mark("lis===4682###sois===207037###eois===207043###lif===12###soif===486###eoif===492###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");
for(x = 0; AKA_mark("lis===4682###sois===207044###eois===207056###lif===12###soif===493###eoif===505###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (AKA_mark("lis===4682###sois===207044###eois===207056###lif===12###soif===493###eoif===505###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (x < passw[i])); ({AKA_mark("lis===4682###sois===207058###eois===207061###lif===12###soif===507###eoif===510###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");++x;})) {
        AKA_BLOCK_LOOP_207033++;
        if (AKA_BLOCK_LOOP_207033 > 1000) {
            //break;
        }
        AKA_mark("lis===4683###sois===207074###eois===207142###lif===13###soif===523###eoif===591###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");size_t pixelinstart = passstart[i] + (y * passw[i] + x) * bytewidth;
        AKA_mark("lis===4684###sois===207152###eois===207311###lif===14###soif===601###eoif===760###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");size_t pixeloutstart = ((ADAM7_IY[i] + (size_t)y * ADAM7_DY[i]) * (size_t)w
                             + ADAM7_IX[i] + (size_t)x * ADAM7_DX[i]) * bytewidth;
        int AKA_BLOCK_LOOP_207321 = 0;
    AKA_mark("lis===4686###sois===207325###eois===207331###lif===16###soif===774###eoif===780###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");
for(b = 0; AKA_mark("lis===4686###sois===207332###eois===207345###lif===16###soif===781###eoif===794###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (AKA_mark("lis===4686###sois===207332###eois===207345###lif===16###soif===781###eoif===794###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (b < bytewidth)); ({AKA_mark("lis===4686###sois===207347###eois===207350###lif===16###soif===796###eoif===799###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");++b;})) {
        AKA_BLOCK_LOOP_207321++;
        if (AKA_BLOCK_LOOP_207321 > 1000) {
            //break;
        }
          AKA_mark("lis===4687###sois===207365###eois===207411###lif===17###soif===814###eoif===860###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");out[pixeloutstart + b] = in[pixelinstart + b];
        }
      }
}

    }
  } else /*bpp < 8: Adam7 with pixels < 8 bit is a bit trickier: with bit pointers*/ {
    int AKA_BLOCK_LOOP_207532 = 0;
    AKA_mark("lis===4692###sois===207536###eois===207542###lif===22###soif===985###eoif===991###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");
for(i = 0; AKA_mark("lis===4692###sois===207543###eois===207549###lif===22###soif===992###eoif===998###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (AKA_mark("lis===4692###sois===207543###eois===207549###lif===22###soif===992###eoif===998###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (i != 7)); ({AKA_mark("lis===4692###sois===207551###eois===207554###lif===22###soif===1000###eoif===1003###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");++i;})) {
        AKA_BLOCK_LOOP_207532++;
        if (AKA_BLOCK_LOOP_207532 > 1000) {
            //break;
        }
      AKA_mark("lis===4693###sois===207565###eois===207582###lif===23###soif===1014###eoif===1031###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");unsigned x, y, b;
      AKA_mark("lis===4694###sois===207590###eois===207626###lif===24###soif===1039###eoif===1075###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");unsigned ilinebits = bpp * passw[i];
      AKA_mark("lis===4695###sois===207634###eois===207663###lif===25###soif===1083###eoif===1112###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");unsigned olinebits = bpp * w;
      AKA_mark("lis===4696###sois===207671###eois===207687###lif===26###soif===1120###eoif===1136###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");size_t obp, ibp; /*bit pointers (for out and in buffer)*/
      int AKA_BLOCK_LOOP_207736 = 0;
    AKA_mark("lis===4697###sois===207740###eois===207746###lif===27###soif===1189###eoif===1195###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");
for(y = 0; AKA_mark("lis===4697###sois===207747###eois===207759###lif===27###soif===1196###eoif===1208###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (AKA_mark("lis===4697###sois===207747###eois===207759###lif===27###soif===1196###eoif===1208###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (y < passh[i])); ({AKA_mark("lis===4697###sois===207761###eois===207764###lif===27###soif===1210###eoif===1213###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");++y;}))
      {
int AKA_BLOCK_LOOP_207773 = 0;
    AKA_mark("lis===4698###sois===207777###eois===207783###lif===28###soif===1226###eoif===1232###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");
for(x = 0; AKA_mark("lis===4698###sois===207784###eois===207796###lif===28###soif===1233###eoif===1245###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (AKA_mark("lis===4698###sois===207784###eois===207796###lif===28###soif===1233###eoif===1245###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (x < passw[i])); ({AKA_mark("lis===4698###sois===207798###eois===207801###lif===28###soif===1247###eoif===1250###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");++x;})) {
        AKA_BLOCK_LOOP_207773++;
        if (AKA_BLOCK_LOOP_207773 > 1000) {
            //break;
        }
        AKA_mark("lis===4699###sois===207814###eois===207867###lif===29###soif===1263###eoif===1316###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");ibp = (8 * passstart[i]) + (y * ilinebits + x * bpp);
        AKA_mark("lis===4700###sois===207877###eois===207983###lif===30###soif===1326###eoif===1432###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");obp = (ADAM7_IY[i] + (size_t)y * ADAM7_DY[i]) * olinebits + (ADAM7_IX[i] + (size_t)x * ADAM7_DX[i]) * bpp;
        int AKA_BLOCK_LOOP_207993 = 0;
    AKA_mark("lis===4701###sois===207997###eois===208003###lif===31###soif===1446###eoif===1452###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");
for(b = 0; AKA_mark("lis===4701###sois===208004###eois===208011###lif===31###soif===1453###eoif===1460###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (AKA_mark("lis===4701###sois===208004###eois===208011###lif===31###soif===1453###eoif===1460###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (b < bpp)); ({AKA_mark("lis===4701###sois===208013###eois===208016###lif===31###soif===1462###eoif===1465###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");++b;})) {
        AKA_BLOCK_LOOP_207993++;
        if (AKA_BLOCK_LOOP_207993 > 1000) {
            //break;
        }
          AKA_mark("lis===4702###sois===208031###eois===208087###lif===32###soif===1480###eoif===1536###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");unsigned char bit = readBitFromReversedStream(&ibp, in);
          AKA_mark("lis===4703###sois===208099###eois===208138###lif===33###soif===1548###eoif===1587###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_deinterlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");setBitOfReversedStream(&obp, out, bit);
        }
      }
}

    }
  }
}

/** Instrumented function removePaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned) */
static void removePaddingBits(unsigned char* out, const unsigned char* in,
                              size_t olinebits, size_t ilinebits, unsigned h) /* << Aka begin of function void removePaddingBits(unsigned char* out, const unsigned char* in,
                              size_t olinebits, size_t ilinebits, unsigned h) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\removePaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.removePaddingBits.208189.stub"

  /*
  After filtering there are still padding bits if scanlines have non multiple of 8 bit amounts. They need
  to be removed (except at last scanline of (Adam7-reduced) image) before working with pure image buffers
  for the Adam7 code, the color convert code and the output to the user.
  in and out are allowed to be the same buffer, in may also be higher but still overlapping; in must
  have >= ilinebits*h bits, out must have >= olinebits*h bits, olinebits must be <= ilinebits
  also used to move bits after earlier such operations happened, e.g. in a sequence of reduced images from Adam7
  only useful if (ilinebits - olinebits) is a value in the range 1..7
  */
  AKA_mark("lis===4721###sois===209018###eois===209029###lif===11###soif===841###eoif===852###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\removePaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");unsigned y;
  AKA_mark("lis===4722###sois===209033###eois===209069###lif===12###soif===856###eoif===892###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\removePaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");size_t diff = ilinebits - olinebits;
  AKA_mark("lis===4723###sois===209073###eois===209097###lif===13###soif===896###eoif===920###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\removePaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");size_t ibp = 0, obp = 0; /*input and output bit pointers*/
  int AKA_BLOCK_LOOP_209135 = 0;
    AKA_mark("lis===4724###sois===209139###eois===209145###lif===14###soif===962###eoif===968###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\removePaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");
for(y = 0; AKA_mark("lis===4724###sois===209146###eois===209151###lif===14###soif===969###eoif===974###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\removePaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)") && (AKA_mark("lis===4724###sois===209146###eois===209151###lif===14###soif===969###eoif===974###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\removePaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)") && (y < h)); ({AKA_mark("lis===4724###sois===209153###eois===209156###lif===14###soif===976###eoif===979###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\removePaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");++y;})) {
        AKA_BLOCK_LOOP_209135++;
        if (AKA_BLOCK_LOOP_209135 > 1000) {
            //break;
        }
    AKA_mark("lis===4725###sois===209165###eois===209174###lif===15###soif===988###eoif===997###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\removePaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");size_t x;
    int AKA_BLOCK_LOOP_209180 = 0;
    AKA_mark("lis===4726###sois===209184###eois===209190###lif===16###soif===1007###eoif===1013###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\removePaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");
for(x = 0; AKA_mark("lis===4726###sois===209191###eois===209204###lif===16###soif===1014###eoif===1027###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\removePaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)") && (AKA_mark("lis===4726###sois===209191###eois===209204###lif===16###soif===1014###eoif===1027###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\removePaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)") && (x < olinebits)); ({AKA_mark("lis===4726###sois===209206###eois===209209###lif===16###soif===1029###eoif===1032###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\removePaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");++x;})) {
        AKA_BLOCK_LOOP_209180++;
        if (AKA_BLOCK_LOOP_209180 > 1000) {
            //break;
        }
      AKA_mark("lis===4727###sois===209220###eois===209276###lif===17###soif===1043###eoif===1099###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\removePaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");unsigned char bit = readBitFromReversedStream(&ibp, in);
      AKA_mark("lis===4728###sois===209284###eois===209323###lif===18###soif===1107###eoif===1146###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\removePaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");setBitOfReversedStream(&obp, out, bit);
    }
    AKA_mark("lis===4730###sois===209336###eois===209348###lif===20###soif===1159###eoif===1171###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\removePaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");ibp += diff;
  }
}

/*out must be buffer big enough to contain full image, and in must contain the full decompressed data from
the IDAT chunks (with filter index bytes and possible padding bits)
return value is error*/
/** Instrumented function postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*) */
static unsigned postProcessScanlines(unsigned char* out, unsigned char* in,
                                     unsigned w, unsigned h, const LodePNGInfo* info_png) /* << Aka begin of function unsigned postProcessScanlines(unsigned char* out, unsigned char* in,
                                     unsigned w, unsigned h, const LodePNGInfo* info_png) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.postProcessScanlines.209578.stub"

  /*
  This function converts the filtered-padded-interlaced data into pure 2D image buffer with the PNG's colortype.
  Steps:
  *) if no Adam7: 1) unfilter 2) remove padding bits (= possible extra bits per scanline if bpp < 8)
  *) if adam7: 1) 7x unfilter 2) 7x remove padding bits 3) Adam7_deinterlace
  NOTE: the in buffer will be overwritten with intermediate data!
  */
  AKA_mark("lis===4746###sois===210117###eois===210166###lif===9###soif===555###eoif===604###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)");unsigned bpp = lodepng_get_bpp(&info_png->color);
  if(AKA_mark("lis===4747###sois===210173###eois===210181###lif===10###soif===611###eoif===619###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)") && (AKA_mark("lis===4747###sois===210173###eois===210181###lif===10###soif===611###eoif===619###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)") && (bpp == 0))) {
AKA_mark("lis===4747###sois===210183###eois===210193###lif===10###soif===621###eoif===631###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)");return 31;
}

else {
AKA_mark("lis===-4747-###sois===-210173-###eois===-2101738-###lif===-10-###soif===-###eoif===-619-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)");
} /*error: invalid colortype*/

  if(AKA_mark("lis===4749###sois===210231###eois===210262###lif===12###soif===669###eoif===700###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)") && (AKA_mark("lis===4749###sois===210231###eois===210262###lif===12###soif===669###eoif===700###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)") && (info_png->interlace_method == 0))) {
    if(AKA_mark("lis===4750###sois===210274###eois===210322###lif===13###soif===712###eoif===760###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)") && ((AKA_mark("lis===4750###sois===210274###eois===210281###lif===13###soif===712###eoif===719###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)") && (bpp < 8)) && (AKA_mark("lis===4750###sois===210285###eois===210322###lif===13###soif===723###eoif===760###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)") && (w * bpp != ((w * bpp + 7u) / 8u) * 8u)))) {
      AKA_mark("lis===4751###sois===210333###eois===210379###lif===14###soif===771###eoif===817###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)");CERROR_TRY_RETURN(unfilter(in, in, w, h, bpp));
      AKA_mark("lis===4752###sois===210388###eois===210455###lif===15###soif===826###eoif===893###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)");removePaddingBits(out, in, w * bpp, ((w * bpp + 7u) / 8u) * 8u, h);
    }
    /*we can immediately filter into the out buffer, no other steps needed*/
    else {AKA_mark("lis===4755###sois===210551###eois===210598###lif===18###soif===989###eoif===1036###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)");AKA_mark("lis===4755###sois===210551###eois===210598###lif===18###soif===989###eoif===1036###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)");CERROR_TRY_RETURN(unfilter(out, in, w, h, bpp))};
  } else /*interlace_method is 1 (Adam7)*/ {
    AKA_mark("lis===4757###sois===210651###eois===210679###lif===20###soif===1089###eoif===1117###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)");unsigned passw[7], passh[7]; AKA_mark("lis===4757###sois===210680###eois===210742###lif===20###soif===1118###eoif===1180###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)");size_t filter_passstart[8], padded_passstart[8], passstart[8];
    AKA_mark("lis===4758###sois===210748###eois===210759###lif===21###soif===1186###eoif===1197###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)");unsigned i;

    AKA_mark("lis===4760###sois===210767###eois===210859###lif===23###soif===1205###eoif===1297###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)");Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);

    int AKA_BLOCK_LOOP_210867 = 0;
    AKA_mark("lis===4762###sois===210871###eois===210877###lif===25###soif===1309###eoif===1315###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)");
for(i = 0; AKA_mark("lis===4762###sois===210878###eois===210884###lif===25###soif===1316###eoif===1322###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)") && (AKA_mark("lis===4762###sois===210878###eois===210884###lif===25###soif===1316###eoif===1322###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)") && (i != 7)); ({AKA_mark("lis===4762###sois===210886###eois===210889###lif===25###soif===1324###eoif===1327###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)");++i;})) {
        AKA_BLOCK_LOOP_210867++;
        if (AKA_BLOCK_LOOP_210867 > 1000) {
            //break;
        }
      AKA_mark("lis===4763###sois===210900###eois===211004###lif===26###soif===1338###eoif===1442###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)");CERROR_TRY_RETURN(unfilter(&in[padded_passstart[i]], &in[filter_passstart[i]], passw[i], passh[i], bpp));
      /*TODO: possible efficiency improvement: if in this reduced image the bits fit nicely in 1 scanline,
      move bytes instead of bits or move not at all*/
      if(AKA_mark("lis===4766###sois===211179###eois===211186###lif===29###soif===1617###eoif===1624###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)") && (AKA_mark("lis===4766###sois===211179###eois===211186###lif===29###soif===1617###eoif===1624###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)") && (bpp < 8))) {
        /*remove padding bits in scanlines; after this there still may be padding
        bits between the different reduced images: each reduced image still starts nicely at a byte*/
        AKA_mark("lis===4769###sois===211385###eois===211536###lif===32###soif===1823###eoif===1974###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)");removePaddingBits(&in[passstart[i]], &in[padded_passstart[i]], passw[i] * bpp,
                          ((passw[i] * bpp + 7u) / 8u) * 8u, passh[i]);
      }
else {
AKA_mark("lis===-4766-###sois===-211179-###eois===-2111797-###lif===-29-###soif===-###eoif===-1624-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)");
}
    }

    AKA_mark("lis===4774###sois===211560###eois===211598###lif===37###soif===1998###eoif===2036###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)");Adam7_deinterlace(out, in, w, h, bpp);
  }

  AKA_mark("lis===4777###sois===211609###eois===211618###lif===40###soif===2047###eoif===2056###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\postProcessScanlines(unsigned char*,unsigned char*,unsigned,unsigned,LodePNGInfo const*)");return 0;
}

/** Instrumented function readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t) */
static unsigned readChunk_PLTE(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength) /* << Aka begin of function unsigned readChunk_PLTE(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.readChunk_PLTE.211641.stub"

  AKA_mark("lis===4781###sois===211733###eois===211753###lif===1###soif===108###eoif===128###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)");unsigned pos = 0, i;
  AKA_mark("lis===4782###sois===211757###eois===211795###lif===2###soif===132###eoif===170###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)");color->palettesize = chunkLength / 3u;
  if(AKA_mark("lis===4783###sois===211802###eois===211853###lif===3###soif===177###eoif===228###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)") && ((AKA_mark("lis===4783###sois===211802###eois===211825###lif===3###soif===177###eoif===200###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)") && (color->palettesize == 0)) || (AKA_mark("lis===4783###sois===211829###eois===211853###lif===3###soif===204###eoif===228###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)") && (color->palettesize > 256)))) {
AKA_mark("lis===4783###sois===211855###eois===211865###lif===3###soif===230###eoif===240###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)");return 38;
}

else {
AKA_mark("lis===-4783-###sois===-211802-###eois===-21180251-###lif===-3-###soif===-###eoif===-228-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)");
} /*error: palette too small or big*/
  AKA_mark("lis===4784###sois===211905###eois===211945###lif===4###soif===280###eoif===320###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)");lodepng_color_mode_alloc_palette(color);
  if(AKA_mark("lis===4785###sois===211952###eois===211989###lif===5###soif===327###eoif===364###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)") && ((AKA_mark("lis===4785###sois===211952###eois===211967###lif===5###soif===327###eoif===342###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)") && (!color->palette)) && (AKA_mark("lis===4785###sois===211971###eois===211989###lif===5###soif===346###eoif===364###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)") && (color->palettesize)))) {
    AKA_mark("lis===4786###sois===211998###eois===212021###lif===6###soif===373###eoif===396###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)");color->palettesize = 0;
    AKA_mark("lis===4787###sois===212027###eois===212037###lif===7###soif===402###eoif===412###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)");return 83; /*alloc fail*/
  }
else {
AKA_mark("lis===-4785-###sois===-211952-###eois===-21195237-###lif===-5-###soif===-###eoif===-364-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)");
}

  int AKA_BLOCK_LOOP_212063 = 0;
    AKA_mark("lis===4790###sois===212067###eois===212073###lif===10###soif===442###eoif===448###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)");
for(i = 0; AKA_mark("lis===4790###sois===212074###eois===212097###lif===10###soif===449###eoif===472###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)") && (AKA_mark("lis===4790###sois===212074###eois===212097###lif===10###soif===449###eoif===472###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)") && (i != color->palettesize)); ({AKA_mark("lis===4790###sois===212099###eois===212102###lif===10###soif===474###eoif===477###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)");++i;})) {
        AKA_BLOCK_LOOP_212063++;
        if (AKA_BLOCK_LOOP_212063 > 1000) {
            //break;
        }
    AKA_mark("lis===4791###sois===212111###eois===212151###lif===11###soif===486###eoif===526###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)");color->palette[4 * i + 0] = data[pos++]; /*R*/
    AKA_mark("lis===4792###sois===212163###eois===212203###lif===12###soif===538###eoif===578###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)");color->palette[4 * i + 1] = data[pos++]; /*G*/
    AKA_mark("lis===4793###sois===212215###eois===212255###lif===13###soif===590###eoif===630###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)");color->palette[4 * i + 2] = data[pos++]; /*B*/
    AKA_mark("lis===4794###sois===212267###eois===212299###lif===14###soif===642###eoif===674###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)");color->palette[4 * i + 3] = 255; /*alpha*/
  }

  AKA_mark("lis===4797###sois===212320###eois===212329###lif===17###soif===695###eoif===704###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_PLTE(LodePNGColorMode*,unsigned char const*,size_t)");return 0; /* OK */
}

/** Instrumented function readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t) */
static unsigned readChunk_tRNS(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength) /* << Aka begin of function unsigned readChunk_tRNS(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.readChunk_tRNS.212361.stub"

  AKA_mark("lis===4801###sois===212453###eois===212464###lif===1###soif===108###eoif===119###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)");unsigned i;
  if(AKA_mark("lis===4802###sois===212471###eois===212502###lif===2###soif===126###eoif===157###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)") && (AKA_mark("lis===4802###sois===212471###eois===212502###lif===2###soif===126###eoif===157###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)") && (color->colortype == LCT_PALETTE))) {
    /*error: more alpha values given than there are palette entries*/
    if(AKA_mark("lis===4804###sois===212585###eois===212617###lif===4###soif===240###eoif===272###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)") && (AKA_mark("lis===4804###sois===212585###eois===212617###lif===4###soif===240###eoif===272###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)") && (chunkLength > color->palettesize))) {
AKA_mark("lis===4804###sois===212619###eois===212629###lif===4###soif===274###eoif===284###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)");return 39;
}

else {
AKA_mark("lis===-4804-###sois===-212585-###eois===-21258532-###lif===-4-###soif===-###eoif===-272-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)");
}

    int AKA_BLOCK_LOOP_212637 = 0;
    AKA_mark("lis===4806###sois===212641###eois===212647###lif===6###soif===296###eoif===302###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)");
for(i = 0; AKA_mark("lis===4806###sois===212648###eois===212664###lif===6###soif===303###eoif===319###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)") && (AKA_mark("lis===4806###sois===212648###eois===212664###lif===6###soif===303###eoif===319###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)") && (i != chunkLength)); ({AKA_mark("lis===4806###sois===212666###eois===212669###lif===6###soif===321###eoif===324###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)");++i;})) {
AKA_mark("lis===4806###sois===212671###eois===212707###lif===6###soif===326###eoif===362###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)");color->palette[4 * i + 3] = data[i];
}

  } else {
if(AKA_mark("lis===4807###sois===212721###eois===212749###lif===7###soif===376###eoif===404###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)") && (AKA_mark("lis===4807###sois===212721###eois===212749###lif===7###soif===376###eoif===404###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)") && (color->colortype == LCT_GREY))) {
    /*error: this chunk must be 2 bytes for grayscale image*/
    if(AKA_mark("lis===4809###sois===212824###eois===212840###lif===9###soif===479###eoif===495###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)") && (AKA_mark("lis===4809###sois===212824###eois===212840###lif===9###soif===479###eoif===495###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)") && (chunkLength != 2))) {
AKA_mark("lis===4809###sois===212842###eois===212852###lif===9###soif===497###eoif===507###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)");return 30;
}

else {
AKA_mark("lis===-4809-###sois===-212824-###eois===-21282416-###lif===-9-###soif===-###eoif===-495-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)");
}

    AKA_mark("lis===4811###sois===212860###eois===212883###lif===11###soif===515###eoif===538###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)");color->key_defined = 1;
    AKA_mark("lis===4812###sois===212889###eois===212959###lif===12###soif===544###eoif===614###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)");color->key_r = color->key_g = color->key_b = 256u * data[0] + data[1];
  } else {
if(AKA_mark("lis===4813###sois===212973###eois===213000###lif===13###soif===628###eoif===655###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)") && (AKA_mark("lis===4813###sois===212973###eois===213000###lif===13###soif===628###eoif===655###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)") && (color->colortype == LCT_RGB))) {
    /*error: this chunk must be 6 bytes for RGB image*/
    if(AKA_mark("lis===4815###sois===213069###eois===213085###lif===15###soif===724###eoif===740###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)") && (AKA_mark("lis===4815###sois===213069###eois===213085###lif===15###soif===724###eoif===740###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)") && (chunkLength != 6))) {
AKA_mark("lis===4815###sois===213087###eois===213097###lif===15###soif===742###eoif===752###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)");return 41;
}

else {
AKA_mark("lis===-4815-###sois===-213069-###eois===-21306916-###lif===-15-###soif===-###eoif===-740-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)");
}

    AKA_mark("lis===4817###sois===213105###eois===213128###lif===17###soif===760###eoif===783###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)");color->key_defined = 1;
    AKA_mark("lis===4818###sois===213134###eois===213174###lif===18###soif===789###eoif===829###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)");color->key_r = 256u * data[0] + data[1];
    AKA_mark("lis===4819###sois===213180###eois===213220###lif===19###soif===835###eoif===875###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)");color->key_g = 256u * data[2] + data[3];
    AKA_mark("lis===4820###sois===213226###eois===213266###lif===20###soif===881###eoif===921###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)");color->key_b = 256u * data[4] + data[5];
  }
  else {
AKA_mark("lis===4822###sois===213280###eois===213290###lif===22###soif===935###eoif===945###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)");return 42;
}

}

}
 /*error: tRNS chunk not allowed for other color models*/

  AKA_mark("lis===4824###sois===213353###eois===213362###lif===24###soif===1008###eoif===1017###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tRNS(LodePNGColorMode*,unsigned char const*,size_t)");return 0; /* OK */
}


#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
/*background color chunk (bKGD)*/
/** Instrumented function readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t) */
static unsigned readChunk_bKGD(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) /* << Aka begin of function unsigned readChunk_bKGD(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.readChunk_bKGD.213472.stub"

  if(AKA_mark("lis===4831###sois===213561###eois===213597###lif===1###soif===105###eoif===141###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===4831###sois===213561###eois===213597###lif===1###soif===105###eoif===141###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)") && (info->color.colortype == LCT_PALETTE))) {
    /*error: this chunk must be 1 byte for indexed color image*/
    if(AKA_mark("lis===4833###sois===213675###eois===213691###lif===3###soif===219###eoif===235###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===4833###sois===213675###eois===213691###lif===3###soif===219###eoif===235###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)") && (chunkLength != 1))) {
AKA_mark("lis===4833###sois===213693###eois===213703###lif===3###soif===237###eoif===247###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)");return 43;
}

else {
AKA_mark("lis===-4833-###sois===-213675-###eois===-21367516-###lif===-3-###soif===-###eoif===-235-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)");
}

    /*error: invalid palette index, or maybe this chunk appeared before PLTE*/
    if(AKA_mark("lis===4836###sois===213794###eois===213828###lif===6###soif===338###eoif===372###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===4836###sois===213794###eois===213828###lif===6###soif===338###eoif===372###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)") && (data[0] >= info->color.palettesize))) {
AKA_mark("lis===4836###sois===213830###eois===213841###lif===6###soif===374###eoif===385###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)");return 103;
}

else {
AKA_mark("lis===-4836-###sois===-213794-###eois===-21379434-###lif===-6-###soif===-###eoif===-372-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)");
}

    AKA_mark("lis===4838###sois===213849###eois===213878###lif===8###soif===393###eoif===422###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)");info->background_defined = 1;
    AKA_mark("lis===4839###sois===213884###eois===213955###lif===9###soif===428###eoif===499###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)");info->background_r = info->background_g = info->background_b = data[0];
  } else {
if(AKA_mark("lis===4840###sois===213969###eois===214045###lif===10###soif===513###eoif===589###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)") && ((AKA_mark("lis===4840###sois===213969###eois===214002###lif===10###soif===513###eoif===546###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)") && (info->color.colortype == LCT_GREY)) || (AKA_mark("lis===4840###sois===214006###eois===214045###lif===10###soif===550###eoif===589###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)") && (info->color.colortype == LCT_GREY_ALPHA)))) {
    /*error: this chunk must be 2 bytes for grayscale image*/
    if(AKA_mark("lis===4842###sois===214120###eois===214136###lif===12###soif===664###eoif===680###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===4842###sois===214120###eois===214136###lif===12###soif===664###eoif===680###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)") && (chunkLength != 2))) {
AKA_mark("lis===4842###sois===214138###eois===214148###lif===12###soif===682###eoif===692###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)");return 44;
}

else {
AKA_mark("lis===-4842-###sois===-214120-###eois===-21412016-###lif===-12-###soif===-###eoif===-680-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)");
}

    /*the values are truncated to bitdepth in the PNG file*/
    AKA_mark("lis===4845###sois===214218###eois===214247###lif===15###soif===762###eoif===791###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)");info->background_defined = 1;
    AKA_mark("lis===4846###sois===214253###eois===214341###lif===16###soif===797###eoif===885###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)");info->background_r = info->background_g = info->background_b = 256u * data[0] + data[1];
  } else {
if(AKA_mark("lis===4847###sois===214355###eois===214424###lif===17###soif===899###eoif===968###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)") && ((AKA_mark("lis===4847###sois===214355###eois===214387###lif===17###soif===899###eoif===931###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)") && (info->color.colortype == LCT_RGB)) || (AKA_mark("lis===4847###sois===214391###eois===214424###lif===17###soif===935###eoif===968###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)") && (info->color.colortype == LCT_RGBA)))) {
    /*error: this chunk must be 6 bytes for grayscale image*/
    if(AKA_mark("lis===4849###sois===214499###eois===214515###lif===19###soif===1043###eoif===1059###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===4849###sois===214499###eois===214515###lif===19###soif===1043###eoif===1059###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)") && (chunkLength != 6))) {
AKA_mark("lis===4849###sois===214517###eois===214527###lif===19###soif===1061###eoif===1071###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)");return 45;
}

else {
AKA_mark("lis===-4849-###sois===-214499-###eois===-21449916-###lif===-19-###soif===-###eoif===-1059-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)");
}

    /*the values are truncated to bitdepth in the PNG file*/
    AKA_mark("lis===4852###sois===214597###eois===214626###lif===22###soif===1141###eoif===1170###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)");info->background_defined = 1;
    AKA_mark("lis===4853###sois===214632###eois===214678###lif===23###soif===1176###eoif===1222###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)");info->background_r = 256u * data[0] + data[1];
    AKA_mark("lis===4854###sois===214684###eois===214730###lif===24###soif===1228###eoif===1274###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)");info->background_g = 256u * data[2] + data[3];
    AKA_mark("lis===4855###sois===214736###eois===214782###lif===25###soif===1280###eoif===1326###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)");info->background_b = 256u * data[4] + data[5];
  }
else {
AKA_mark("lis===-4847-###sois===-214355-###eois===-21435569-###lif===-17-###soif===-###eoif===-968-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)");
}
}

}


  AKA_mark("lis===4858###sois===214793###eois===214802###lif===28###soif===1337###eoif===1346###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_bKGD(LodePNGInfo*,unsigned char const*,size_t)");return 0; /* OK */
}

/*text chunk (tEXt)*/
/** Instrumented function readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t) */
static unsigned readChunk_tEXt(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) /* << Aka begin of function unsigned readChunk_tEXt(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.readChunk_tEXt.214857.stub"

  AKA_mark("lis===4863###sois===214943###eois===214962###lif===1###soif===102###eoif===121###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");unsigned error = 0;
  AKA_mark("lis===4864###sois===214966###eois===214990###lif===2###soif===125###eoif===149###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");char *key = 0, *str = 0;

  int AKA_BLOCK_LOOP_214996 = 0;
    while(AKA_mark("lis===4866###sois===215002###eois===215008###lif===4###soif===161###eoif===167###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===4866###sois===215002###eois===215008###lif===4###soif===161###eoif===167###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)") && (!error))) /*not really a while loop, only used to break on error*/ {
        AKA_BLOCK_LOOP_214996++;
        if (AKA_BLOCK_LOOP_214996 > 1000) {
            //break;
        }
    AKA_mark("lis===4867###sois===215074###eois===215105###lif===5###soif===233###eoif===264###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");unsigned length, string2_begin;

    AKA_mark("lis===4869###sois===215113###eois===215124###lif===7###soif===272###eoif===283###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");length = 0;
    int AKA_BLOCK_LOOP_215130 = 0;
    while(AKA_mark("lis===4870###sois===215136###eois===215177###lif===8###soif===295###eoif===336###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)") && ((AKA_mark("lis===4870###sois===215136###eois===215156###lif===8###soif===295###eoif===315###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)") && (length < chunkLength)) && (AKA_mark("lis===4870###sois===215160###eois===215177###lif===8###soif===319###eoif===336###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)") && (data[length] != 0)))) {
AKA_mark("lis===4870###sois===215179###eois===215188###lif===8###soif===338###eoif===347###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");++length;
}

    /*even though it's not allowed by the standard, no error is thrown if
    there's no null termination char, if the text is empty*/
    if(AKA_mark("lis===4873###sois===215334###eois===215359###lif===11###soif===493###eoif===518###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)") && ((AKA_mark("lis===4873###sois===215334###eois===215344###lif===11###soif===493###eoif===503###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)") && (length < 1)) || (AKA_mark("lis===4873###sois===215348###eois===215359###lif===11###soif===507###eoif===518###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)") && (length > 79)))) {AKA_mark("lis===4873###sois===215361###eois===215384###lif===11###soif===520###eoif===543###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");AKA_mark("lis===4873###sois===215361###eois===215384###lif===11###soif===520###eoif===543###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");CERROR_BREAK(error, 89)}
else {
AKA_mark("lis===-4873-###sois===-215334-###eois===-21533425-###lif===-11-###soif===-###eoif===-518-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");
}; /*keyword too short or long*/

    AKA_mark("lis===4875###sois===215423###eois===215463###lif===13###soif===582###eoif===622###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");key = (char*)lodepng_malloc(length + 1);
    if(AKA_mark("lis===4876###sois===215472###eois===215476###lif===14###soif===631###eoif===635###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===4876###sois===215472###eois===215476###lif===14###soif===631###eoif===635###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)") && (!key))) {AKA_mark("lis===4876###sois===215478###eois===215501###lif===14###soif===637###eoif===660###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");AKA_mark("lis===4876###sois===215478###eois===215501###lif===14###soif===637###eoif===660###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");CERROR_BREAK(error, 83)}
else {
AKA_mark("lis===-4876-###sois===-215472-###eois===-2154724-###lif===-14-###soif===-###eoif===-635-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");
}; /*alloc fail*/

    AKA_mark("lis===4878###sois===215525###eois===215559###lif===16###soif===684###eoif===718###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");lodepng_memcpy(key, data, length);
    AKA_mark("lis===4879###sois===215565###eois===215581###lif===17###soif===724###eoif===740###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");key[length] = 0;

    AKA_mark("lis===4881###sois===215589###eois===215616###lif===19###soif===748###eoif===775###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");string2_begin = length + 1; /*skip keyword null terminator*/

    AKA_mark("lis===4883###sois===215657###eois===215740###lif===21###soif===816###eoif===899###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");length = (unsigned)(chunkLength < string2_begin ? 0 : chunkLength - string2_begin);
    AKA_mark("lis===4884###sois===215746###eois===215786###lif===22###soif===905###eoif===945###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");str = (char*)lodepng_malloc(length + 1);
    if(AKA_mark("lis===4885###sois===215795###eois===215799###lif===23###soif===954###eoif===958###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===4885###sois===215795###eois===215799###lif===23###soif===954###eoif===958###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)") && (!str))) {AKA_mark("lis===4885###sois===215801###eois===215824###lif===23###soif===960###eoif===983###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");AKA_mark("lis===4885###sois===215801###eois===215824###lif===23###soif===960###eoif===983###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");CERROR_BREAK(error, 83)}
else {
AKA_mark("lis===-4885-###sois===-215795-###eois===-2157954-###lif===-23-###soif===-###eoif===-958-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");
}; /*alloc fail*/

    AKA_mark("lis===4887###sois===215848###eois===215898###lif===25###soif===1007###eoif===1057###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");lodepng_memcpy(str, data + string2_begin, length);
    AKA_mark("lis===4888###sois===215904###eois===215920###lif===26###soif===1063###eoif===1079###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");str[length] = 0;

    AKA_mark("lis===4890###sois===215928###eois===215969###lif===28###soif===1087###eoif===1128###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");error = lodepng_add_text(info, key, str);

    AKA_mark("lis===4892###sois===215977###eois===215983###lif===30###soif===1136###eoif===1142###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");break;
  }

  AKA_mark("lis===4895###sois===215994###eois===216012###lif===33###soif===1153###eoif===1171###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");lodepng_free(key);
  AKA_mark("lis===4896###sois===216016###eois===216034###lif===34###soif===1175###eoif===1193###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");lodepng_free(str);

  AKA_mark("lis===4898###sois===216040###eois===216053###lif===36###soif===1199###eoif===1212###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tEXt(LodePNGInfo*,unsigned char const*,size_t)");return error;
}

/*compressed text chunk (zTXt)*/
/** Instrumented function readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t) */
static unsigned readChunk_zTXt(LodePNGInfo* info, const LodePNGDecoderSettings* decoder,
                               const unsigned char* data, size_t chunkLength) /* << Aka begin of function unsigned readChunk_zTXt(LodePNGInfo* info, const LodePNGDecoderSettings* decoder,
                               const unsigned char* data, size_t chunkLength) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.readChunk_zTXt.216110.stub"

  AKA_mark("lis===4904###sois===216267###eois===216286###lif===2###soif===173###eoif===192###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");unsigned error = 0;

  /*copy the object to change parameters in it*/
  AKA_mark("lis===4907###sois===216342###eois===216405###lif===5###soif===248###eoif===311###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");LodePNGDecompressSettings zlibsettings = decoder->zlibsettings;

  AKA_mark("lis===4909###sois===216411###eois===216442###lif===7###soif===317###eoif===348###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");unsigned length, string2_begin;
  AKA_mark("lis===4910###sois===216446###eois===216460###lif===8###soif===352###eoif===366###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");char *key = 0;
  AKA_mark("lis===4911###sois===216464###eois===216487###lif===9###soif===370###eoif===393###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");unsigned char* str = 0;
  AKA_mark("lis===4912###sois===216491###eois===216507###lif===10###soif===397###eoif===413###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");size_t size = 0;

  int AKA_BLOCK_LOOP_216513 = 0;
    while(AKA_mark("lis===4914###sois===216519###eois===216525###lif===12###soif===425###eoif===431###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===4914###sois===216519###eois===216525###lif===12###soif===425###eoif===431###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (!error))) /*not really a while loop, only used to break on error*/ {
        AKA_BLOCK_LOOP_216513++;
        if (AKA_BLOCK_LOOP_216513 > 1000) {
            //break;
        }
    int AKA_BLOCK_LOOP_216591 = 0;
    AKA_mark("lis===4915###sois===216595###eois===216606###lif===13###soif===501###eoif===512###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
for(length = 0; AKA_mark("lis===4915###sois===216607###eois===216648###lif===13###soif===513###eoif===554###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && ((AKA_mark("lis===4915###sois===216607###eois===216627###lif===13###soif===513###eoif===533###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (length < chunkLength)) && (AKA_mark("lis===4915###sois===216631###eois===216648###lif===13###soif===537###eoif===554###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (data[length] != 0))); ({AKA_mark("lis===4915###sois===216650###eois===216658###lif===13###soif===556###eoif===564###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");++length;})) {
;
}

    if(AKA_mark("lis===4916###sois===216670###eois===216695###lif===14###soif===576###eoif===601###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===4916###sois===216670###eois===216695###lif===14###soif===576###eoif===601###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (length + 2 >= chunkLength))) {AKA_mark("lis===4916###sois===216697###eois===216720###lif===14###soif===603###eoif===626###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");AKA_mark("lis===4916###sois===216697###eois===216720###lif===14###soif===603###eoif===626###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");CERROR_BREAK(error, 75)}
else {
AKA_mark("lis===-4916-###sois===-216670-###eois===-21667025-###lif===-14-###soif===-###eoif===-601-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
}; /*no null termination, corrupt?*/
    if(AKA_mark("lis===4917###sois===216764###eois===216789###lif===15###soif===670###eoif===695###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && ((AKA_mark("lis===4917###sois===216764###eois===216774###lif===15###soif===670###eoif===680###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (length < 1)) || (AKA_mark("lis===4917###sois===216778###eois===216789###lif===15###soif===684###eoif===695###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (length > 79)))) {AKA_mark("lis===4917###sois===216791###eois===216814###lif===15###soif===697###eoif===720###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");AKA_mark("lis===4917###sois===216791###eois===216814###lif===15###soif===697###eoif===720###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");CERROR_BREAK(error, 89)}
else {
AKA_mark("lis===-4917-###sois===-216764-###eois===-21676425-###lif===-15-###soif===-###eoif===-695-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
}; /*keyword too short or long*/

    AKA_mark("lis===4919###sois===216853###eois===216893###lif===17###soif===759###eoif===799###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");key = (char*)lodepng_malloc(length + 1);
    if(AKA_mark("lis===4920###sois===216902###eois===216906###lif===18###soif===808###eoif===812###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===4920###sois===216902###eois===216906###lif===18###soif===808###eoif===812###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (!key))) {AKA_mark("lis===4920###sois===216908###eois===216931###lif===18###soif===814###eoif===837###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");AKA_mark("lis===4920###sois===216908###eois===216931###lif===18###soif===814###eoif===837###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");CERROR_BREAK(error, 83)}
else {
AKA_mark("lis===-4920-###sois===-216902-###eois===-2169024-###lif===-18-###soif===-###eoif===-812-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
}; /*alloc fail*/

    AKA_mark("lis===4922###sois===216955###eois===216989###lif===20###soif===861###eoif===895###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");lodepng_memcpy(key, data, length);
    AKA_mark("lis===4923###sois===216995###eois===217011###lif===21###soif===901###eoif===917###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");key[length] = 0;

    if(AKA_mark("lis===4925###sois===217022###eois===217043###lif===23###soif===928###eoif===949###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===4925###sois===217022###eois===217043###lif===23###soif===928###eoif===949###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (data[length + 1] != 0))) {AKA_mark("lis===4925###sois===217045###eois===217068###lif===23###soif===951###eoif===974###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");AKA_mark("lis===4925###sois===217045###eois===217068###lif===23###soif===951###eoif===974###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");CERROR_BREAK(error, 72)}
else {
AKA_mark("lis===-4925-###sois===-217022-###eois===-21702221-###lif===-23-###soif===-###eoif===-949-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
}; /*the 0 byte indicating compression must be 0*/

    AKA_mark("lis===4927###sois===217125###eois===217152###lif===25###soif===1031###eoif===1058###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");string2_begin = length + 2;
    if(AKA_mark("lis===4928###sois===217161###eois===217188###lif===26###soif===1067###eoif===1094###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===4928###sois===217161###eois===217188###lif===26###soif===1067###eoif===1094###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (string2_begin > chunkLength))) {AKA_mark("lis===4928###sois===217190###eois===217213###lif===26###soif===1096###eoif===1119###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");AKA_mark("lis===4928###sois===217190###eois===217213###lif===26###soif===1096###eoif===1119###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");CERROR_BREAK(error, 75)}
else {
AKA_mark("lis===-4928-###sois===-217161-###eois===-21716127-###lif===-26-###soif===-###eoif===-1094-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
}; /*no null termination, corrupt?*/

    AKA_mark("lis===4930###sois===217256###eois===217303###lif===28###soif===1162###eoif===1209###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");length = (unsigned)chunkLength - string2_begin;
    AKA_mark("lis===4931###sois===217309###eois===217363###lif===29###soif===1215###eoif===1269###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");zlibsettings.max_output_size = decoder->max_text_size;
    /*will fail if zlib error, e.g. if length is too small*/
    AKA_mark("lis===4933###sois===217431###eois===217545###lif===31###soif===1337###eoif===1451###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");error = zlib_decompress(&str, &size, 0, &data[string2_begin],
                            length, &zlibsettings);
    /*error: compressed text larger than  decoder->max_text_size*/
    if(AKA_mark("lis===4936###sois===217622###eois===217666###lif===34###soif===1528###eoif===1572###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && ((AKA_mark("lis===4936###sois===217622###eois===217627###lif===34###soif===1528###eoif===1533###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (error)) && (AKA_mark("lis===4936###sois===217631###eois===217666###lif===34###soif===1537###eoif===1572###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (size > zlibsettings.max_output_size)))) {
AKA_mark("lis===4936###sois===217668###eois===217680###lif===34###soif===1574###eoif===1586###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");error = 112;
}

else {
AKA_mark("lis===-4936-###sois===-217622-###eois===-21762244-###lif===-34-###soif===-###eoif===-1572-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
}
    if(AKA_mark("lis===4937###sois===217689###eois===217694###lif===35###soif===1595###eoif===1600###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===4937###sois===217689###eois===217694###lif===35###soif===1595###eoif===1600###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (error))) {
AKA_mark("lis===4937###sois===217696###eois===217702###lif===35###soif===1602###eoif===1608###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-4937-###sois===-217689-###eois===-2176895-###lif===-35-###soif===-###eoif===-1600-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
}
    AKA_mark("lis===4938###sois===217708###eois===217768###lif===36###soif===1614###eoif===1674###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");error = lodepng_add_text_sized(info, key, (char*)str, size);
    AKA_mark("lis===4939###sois===217774###eois===217780###lif===37###soif===1680###eoif===1686###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");break;
  }

  AKA_mark("lis===4942###sois===217791###eois===217809###lif===40###soif===1697###eoif===1715###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");lodepng_free(key);
  AKA_mark("lis===4943###sois===217813###eois===217831###lif===41###soif===1719###eoif===1737###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");lodepng_free(str);

  AKA_mark("lis===4945###sois===217837###eois===217850###lif===43###soif===1743###eoif===1756###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_zTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");return error;
}

/*international text chunk (iTXt)*/
/** Instrumented function readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t) */
static unsigned readChunk_iTXt(LodePNGInfo* info, const LodePNGDecoderSettings* decoder,
                               const unsigned char* data, size_t chunkLength) /* << Aka begin of function unsigned readChunk_iTXt(LodePNGInfo* info, const LodePNGDecoderSettings* decoder,
                               const unsigned char* data, size_t chunkLength) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.readChunk_iTXt.217910.stub"

  AKA_mark("lis===4951###sois===218067###eois===218086###lif===2###soif===173###eoif===192###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");unsigned error = 0;
  AKA_mark("lis===4952###sois===218090###eois===218101###lif===3###soif===196###eoif===207###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");unsigned i;

  /*copy the object to change parameters in it*/
  AKA_mark("lis===4955###sois===218157###eois===218220###lif===6###soif===263###eoif===326###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");LodePNGDecompressSettings zlibsettings = decoder->zlibsettings;

  AKA_mark("lis===4957###sois===218226###eois===218261###lif===8###soif===332###eoif===367###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");unsigned length, begin, compressed;
  AKA_mark("lis===4958###sois===218265###eois===218308###lif===9###soif===371###eoif===414###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");char *key = 0, *langtag = 0, *transkey = 0;

  int AKA_BLOCK_LOOP_218314 = 0;
    while(AKA_mark("lis===4960###sois===218320###eois===218326###lif===11###soif===426###eoif===432###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===4960###sois===218320###eois===218326###lif===11###soif===426###eoif===432###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (!error))) /*not really a while loop, only used to break on error*/ {
        AKA_BLOCK_LOOP_218314++;
        if (AKA_BLOCK_LOOP_218314 > 1000) {
            //break;
        }
    /*Quick check if the chunk length isn't too small. Even without check
    it'd still fail with other error checks below if it's too short. This just gives a different error code.*/
    if(AKA_mark("lis===4963###sois===218582###eois===218597###lif===14###soif===688###eoif===703###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===4963###sois===218582###eois===218597###lif===14###soif===688###eoif===703###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (chunkLength < 5))) {AKA_mark("lis===4963###sois===218599###eois===218622###lif===14###soif===705###eoif===728###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");AKA_mark("lis===4963###sois===218599###eois===218622###lif===14###soif===705###eoif===728###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");CERROR_BREAK(error, 30)}
else {
AKA_mark("lis===-4963-###sois===-218582-###eois===-21858215-###lif===-14-###soif===-###eoif===-703-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
}; /*iTXt chunk too short*/

    /*read the key*/
    int AKA_BLOCK_LOOP_218678 = 0;
    AKA_mark("lis===4966###sois===218682###eois===218693###lif===17###soif===788###eoif===799###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
for(length = 0; AKA_mark("lis===4966###sois===218694###eois===218735###lif===17###soif===800###eoif===841###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && ((AKA_mark("lis===4966###sois===218694###eois===218714###lif===17###soif===800###eoif===820###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (length < chunkLength)) && (AKA_mark("lis===4966###sois===218718###eois===218735###lif===17###soif===824###eoif===841###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (data[length] != 0))); ({AKA_mark("lis===4966###sois===218737###eois===218745###lif===17###soif===843###eoif===851###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");++length;})) {
;
}

    if(AKA_mark("lis===4967###sois===218757###eois===218782###lif===18###soif===863###eoif===888###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===4967###sois===218757###eois===218782###lif===18###soif===863###eoif===888###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (length + 3 >= chunkLength))) {AKA_mark("lis===4967###sois===218784###eois===218807###lif===18###soif===890###eoif===913###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");AKA_mark("lis===4967###sois===218784###eois===218807###lif===18###soif===890###eoif===913###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");CERROR_BREAK(error, 75)}
else {
AKA_mark("lis===-4967-###sois===-218757-###eois===-21875725-###lif===-18-###soif===-###eoif===-888-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
}; /*no null termination char, corrupt?*/
    if(AKA_mark("lis===4968###sois===218856###eois===218881###lif===19###soif===962###eoif===987###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && ((AKA_mark("lis===4968###sois===218856###eois===218866###lif===19###soif===962###eoif===972###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (length < 1)) || (AKA_mark("lis===4968###sois===218870###eois===218881###lif===19###soif===976###eoif===987###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (length > 79)))) {AKA_mark("lis===4968###sois===218883###eois===218906###lif===19###soif===989###eoif===1012###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");AKA_mark("lis===4968###sois===218883###eois===218906###lif===19###soif===989###eoif===1012###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");CERROR_BREAK(error, 89)}
else {
AKA_mark("lis===-4968-###sois===-218856-###eois===-21885625-###lif===-19-###soif===-###eoif===-987-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
}; /*keyword too short or long*/

    AKA_mark("lis===4970###sois===218945###eois===218985###lif===21###soif===1051###eoif===1091###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");key = (char*)lodepng_malloc(length + 1);
    if(AKA_mark("lis===4971###sois===218994###eois===218998###lif===22###soif===1100###eoif===1104###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===4971###sois===218994###eois===218998###lif===22###soif===1100###eoif===1104###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (!key))) {AKA_mark("lis===4971###sois===219000###eois===219023###lif===22###soif===1106###eoif===1129###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");AKA_mark("lis===4971###sois===219000###eois===219023###lif===22###soif===1106###eoif===1129###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");CERROR_BREAK(error, 83)}
else {
AKA_mark("lis===-4971-###sois===-218994-###eois===-2189944-###lif===-22-###soif===-###eoif===-1104-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
}; /*alloc fail*/

    AKA_mark("lis===4973###sois===219047###eois===219081###lif===24###soif===1153###eoif===1187###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");lodepng_memcpy(key, data, length);
    AKA_mark("lis===4974###sois===219087###eois===219103###lif===25###soif===1193###eoif===1209###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");key[length] = 0;

    /*read the compression method*/
    AKA_mark("lis===4977###sois===219148###eois===219178###lif===28###soif===1254###eoif===1284###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");compressed = data[length + 1];
    if(AKA_mark("lis===4978###sois===219187###eois===219208###lif===29###soif===1293###eoif===1314###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===4978###sois===219187###eois===219208###lif===29###soif===1293###eoif===1314###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (data[length + 2] != 0))) {AKA_mark("lis===4978###sois===219210###eois===219233###lif===29###soif===1316###eoif===1339###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");AKA_mark("lis===4978###sois===219210###eois===219233###lif===29###soif===1316###eoif===1339###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");CERROR_BREAK(error, 72)}
else {
AKA_mark("lis===-4978-###sois===-219187-###eois===-21918721-###lif===-29-###soif===-###eoif===-1314-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
}; /*the 0 byte indicating compression must be 0*/

    /*even though it's not allowed by the standard, no error is thrown if
    there's no null termination char, if the text is empty for the next 3 texts*/

    /*read the langtag*/
    AKA_mark("lis===4984###sois===219476###eois===219495###lif===35###soif===1582###eoif===1601###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");begin = length + 3;
    AKA_mark("lis===4985###sois===219501###eois===219512###lif===36###soif===1607###eoif===1618###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");length = 0;
    int AKA_BLOCK_LOOP_219518 = 0;
    AKA_mark("lis===4986###sois===219522###eois===219532###lif===37###soif===1628###eoif===1638###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
for(i = begin; AKA_mark("lis===4986###sois===219533###eois===219564###lif===37###soif===1639###eoif===1670###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && ((AKA_mark("lis===4986###sois===219533###eois===219548###lif===37###soif===1639###eoif===1654###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (i < chunkLength)) && (AKA_mark("lis===4986###sois===219552###eois===219564###lif===37###soif===1658###eoif===1670###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (data[i] != 0))); ({AKA_mark("lis===4986###sois===219566###eois===219569###lif===37###soif===1672###eoif===1675###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");++i;})) {
AKA_mark("lis===4986###sois===219571###eois===219580###lif===37###soif===1677###eoif===1686###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");++length;
}


    AKA_mark("lis===4988###sois===219588###eois===219632###lif===39###soif===1694###eoif===1738###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");langtag = (char*)lodepng_malloc(length + 1);
    if(AKA_mark("lis===4989###sois===219641###eois===219649###lif===40###soif===1747###eoif===1755###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===4989###sois===219641###eois===219649###lif===40###soif===1747###eoif===1755###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (!langtag))) {AKA_mark("lis===4989###sois===219651###eois===219674###lif===40###soif===1757###eoif===1780###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");AKA_mark("lis===4989###sois===219651###eois===219674###lif===40###soif===1757###eoif===1780###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");CERROR_BREAK(error, 83)}
else {
AKA_mark("lis===-4989-###sois===-219641-###eois===-2196418-###lif===-40-###soif===-###eoif===-1755-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
}; /*alloc fail*/

    AKA_mark("lis===4991###sois===219698###eois===219744###lif===42###soif===1804###eoif===1850###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");lodepng_memcpy(langtag, data + begin, length);
    AKA_mark("lis===4992###sois===219750###eois===219770###lif===43###soif===1856###eoif===1876###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");langtag[length] = 0;

    /*read the transkey*/
    AKA_mark("lis===4995###sois===219805###eois===219825###lif===46###soif===1911###eoif===1931###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");begin += length + 1;
    AKA_mark("lis===4996###sois===219831###eois===219842###lif===47###soif===1937###eoif===1948###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");length = 0;
    int AKA_BLOCK_LOOP_219848 = 0;
    AKA_mark("lis===4997###sois===219852###eois===219862###lif===48###soif===1958###eoif===1968###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
for(i = begin; AKA_mark("lis===4997###sois===219863###eois===219894###lif===48###soif===1969###eoif===2000###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && ((AKA_mark("lis===4997###sois===219863###eois===219878###lif===48###soif===1969###eoif===1984###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (i < chunkLength)) && (AKA_mark("lis===4997###sois===219882###eois===219894###lif===48###soif===1988###eoif===2000###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (data[i] != 0))); ({AKA_mark("lis===4997###sois===219896###eois===219899###lif===48###soif===2002###eoif===2005###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");++i;})) {
AKA_mark("lis===4997###sois===219901###eois===219910###lif===48###soif===2007###eoif===2016###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");++length;
}


    AKA_mark("lis===4999###sois===219918###eois===219963###lif===50###soif===2024###eoif===2069###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");transkey = (char*)lodepng_malloc(length + 1);
    if(AKA_mark("lis===5000###sois===219972###eois===219981###lif===51###soif===2078###eoif===2087###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===5000###sois===219972###eois===219981###lif===51###soif===2078###eoif===2087###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (!transkey))) {AKA_mark("lis===5000###sois===219983###eois===220006###lif===51###soif===2089###eoif===2112###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");AKA_mark("lis===5000###sois===219983###eois===220006###lif===51###soif===2089###eoif===2112###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");CERROR_BREAK(error, 83)}
else {
AKA_mark("lis===-5000-###sois===-219972-###eois===-2199729-###lif===-51-###soif===-###eoif===-2087-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
}; /*alloc fail*/

    AKA_mark("lis===5002###sois===220030###eois===220077###lif===53###soif===2136###eoif===2183###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");lodepng_memcpy(transkey, data + begin, length);
    AKA_mark("lis===5003###sois===220083###eois===220104###lif===54###soif===2189###eoif===2210###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");transkey[length] = 0;

    /*read the actual text*/
    AKA_mark("lis===5006###sois===220142###eois===220162###lif===57###soif===2248###eoif===2268###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");begin += length + 1;

    AKA_mark("lis===5008###sois===220170###eois===220245###lif===59###soif===2276###eoif===2351###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");length = (unsigned)chunkLength < begin ? 0 : (unsigned)chunkLength - begin;

    if(AKA_mark("lis===5010###sois===220256###eois===220266###lif===61###soif===2362###eoif===2372###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===5010###sois===220256###eois===220266###lif===61###soif===2362###eoif===2372###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (compressed))) {
      AKA_mark("lis===5011###sois===220277###eois===220300###lif===62###soif===2383###eoif===2406###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");unsigned char* str = 0;
      AKA_mark("lis===5012###sois===220308###eois===220324###lif===63###soif===2414###eoif===2430###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");size_t size = 0;
      AKA_mark("lis===5013###sois===220332###eois===220386###lif===64###soif===2438###eoif===2492###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");zlibsettings.max_output_size = decoder->max_text_size;
      /*will fail if zlib error, e.g. if length is too small*/
      AKA_mark("lis===5015###sois===220458###eois===220566###lif===66###soif===2564###eoif===2672###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");error = zlib_decompress(&str, &size, 0, &data[begin],
                              length, &zlibsettings);
      /*error: compressed text larger than  decoder->max_text_size*/
      if(AKA_mark("lis===5018###sois===220647###eois===220691###lif===69###soif===2753###eoif===2797###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && ((AKA_mark("lis===5018###sois===220647###eois===220652###lif===69###soif===2753###eoif===2758###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (error)) && (AKA_mark("lis===5018###sois===220656###eois===220691###lif===69###soif===2762###eoif===2797###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (size > zlibsettings.max_output_size)))) {
AKA_mark("lis===5018###sois===220693###eois===220705###lif===69###soif===2799###eoif===2811###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");error = 112;
}

else {
AKA_mark("lis===-5018-###sois===-220647-###eois===-22064744-###lif===-69-###soif===-###eoif===-2797-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
}
      if(AKA_mark("lis===5019###sois===220716###eois===220722###lif===70###soif===2822###eoif===2828###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===5019###sois===220716###eois===220722###lif===70###soif===2822###eoif===2828###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (!error))) {
AKA_mark("lis===5019###sois===220724###eois===220804###lif===70###soif===2830###eoif===2910###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");error = lodepng_add_itext_sized(info, key, langtag, transkey, (char*)str, size);
}

else {
AKA_mark("lis===-5019-###sois===-220716-###eois===-2207166-###lif===-70-###soif===-###eoif===-2828-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
}
      AKA_mark("lis===5020###sois===220812###eois===220830###lif===71###soif===2918###eoif===2936###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");lodepng_free(str);
    } else {
      AKA_mark("lis===5022###sois===220852###eois===220951###lif===73###soif===2958###eoif===3057###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");error = lodepng_add_itext_sized(info, key, langtag, transkey, (const char*)(data + begin), length);
    }

    AKA_mark("lis===5025###sois===220966###eois===220972###lif===76###soif===3072###eoif===3078###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");break;
  }

  AKA_mark("lis===5028###sois===220983###eois===221001###lif===79###soif===3089###eoif===3107###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");lodepng_free(key);
  AKA_mark("lis===5029###sois===221005###eois===221027###lif===80###soif===3111###eoif===3133###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");lodepng_free(langtag);
  AKA_mark("lis===5030###sois===221031###eois===221054###lif===81###soif===3137###eoif===3160###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");lodepng_free(transkey);

  AKA_mark("lis===5032###sois===221060###eois===221073###lif===83###soif===3166###eoif===3179###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iTXt(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");return error;
}

/** Instrumented function readChunk_tIME(LodePNGInfo*,unsigned char const*,size_t) */
static unsigned readChunk_tIME(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) /* << Aka begin of function unsigned readChunk_tIME(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tIME(LodePNGInfo*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.readChunk_tIME.221096.stub"

  if(AKA_mark("lis===5036###sois===221185###eois===221201###lif===1###soif===105###eoif===121###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tIME(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===5036###sois===221185###eois===221201###lif===1###soif===105###eoif===121###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tIME(LodePNGInfo*,unsigned char const*,size_t)") && (chunkLength != 7))) {
AKA_mark("lis===5036###sois===221203###eois===221213###lif===1###soif===123###eoif===133###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tIME(LodePNGInfo*,unsigned char const*,size_t)");return 73;
}

else {
AKA_mark("lis===-5036-###sois===-221185-###eois===-22118516-###lif===-1-###soif===-###eoif===-121-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tIME(LodePNGInfo*,unsigned char const*,size_t)");
} /*invalid tIME chunk size*/

  AKA_mark("lis===5038###sois===221247###eois===221270###lif===3###soif===167###eoif===190###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tIME(LodePNGInfo*,unsigned char const*,size_t)");info->time_defined = 1;
  AKA_mark("lis===5039###sois===221274###eois===221317###lif===4###soif===194###eoif===237###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tIME(LodePNGInfo*,unsigned char const*,size_t)");info->time.year = 256u * data[0] + data[1];
  AKA_mark("lis===5040###sois===221321###eois===221348###lif===5###soif===241###eoif===268###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tIME(LodePNGInfo*,unsigned char const*,size_t)");info->time.month = data[2];
  AKA_mark("lis===5041###sois===221352###eois===221377###lif===6###soif===272###eoif===297###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tIME(LodePNGInfo*,unsigned char const*,size_t)");info->time.day = data[3];
  AKA_mark("lis===5042###sois===221381###eois===221407###lif===7###soif===301###eoif===327###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tIME(LodePNGInfo*,unsigned char const*,size_t)");info->time.hour = data[4];
  AKA_mark("lis===5043###sois===221411###eois===221439###lif===8###soif===331###eoif===359###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tIME(LodePNGInfo*,unsigned char const*,size_t)");info->time.minute = data[5];
  AKA_mark("lis===5044###sois===221443###eois===221471###lif===9###soif===363###eoif===391###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tIME(LodePNGInfo*,unsigned char const*,size_t)");info->time.second = data[6];

  AKA_mark("lis===5046###sois===221477###eois===221486###lif===11###soif===397###eoif===406###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_tIME(LodePNGInfo*,unsigned char const*,size_t)");return 0; /* OK */
}

/** Instrumented function readChunk_pHYs(LodePNGInfo*,unsigned char const*,size_t) */
static unsigned readChunk_pHYs(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) /* << Aka begin of function unsigned readChunk_pHYs(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_pHYs(LodePNGInfo*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.readChunk_pHYs.221518.stub"

  if(AKA_mark("lis===5050###sois===221607###eois===221623###lif===1###soif===105###eoif===121###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_pHYs(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===5050###sois===221607###eois===221623###lif===1###soif===105###eoif===121###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_pHYs(LodePNGInfo*,unsigned char const*,size_t)") && (chunkLength != 9))) {
AKA_mark("lis===5050###sois===221625###eois===221635###lif===1###soif===123###eoif===133###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_pHYs(LodePNGInfo*,unsigned char const*,size_t)");return 74;
}

else {
AKA_mark("lis===-5050-###sois===-221607-###eois===-22160716-###lif===-1-###soif===-###eoif===-121-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_pHYs(LodePNGInfo*,unsigned char const*,size_t)");
} /*invalid pHYs chunk size*/

  AKA_mark("lis===5052###sois===221669###eois===221692###lif===3###soif===167###eoif===190###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_pHYs(LodePNGInfo*,unsigned char const*,size_t)");info->phys_defined = 1;
  AKA_mark("lis===5053###sois===221696###eois===221777###lif===4###soif===194###eoif===275###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_pHYs(LodePNGInfo*,unsigned char const*,size_t)");info->phys_x = 16777216u * data[0] + 65536u * data[1] + 256u * data[2] + data[3];
  AKA_mark("lis===5054###sois===221781###eois===221862###lif===5###soif===279###eoif===360###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_pHYs(LodePNGInfo*,unsigned char const*,size_t)");info->phys_y = 16777216u * data[4] + 65536u * data[5] + 256u * data[6] + data[7];
  AKA_mark("lis===5055###sois===221866###eois===221892###lif===6###soif===364###eoif===390###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_pHYs(LodePNGInfo*,unsigned char const*,size_t)");info->phys_unit = data[8];

  AKA_mark("lis===5057###sois===221898###eois===221907###lif===8###soif===396###eoif===405###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_pHYs(LodePNGInfo*,unsigned char const*,size_t)");return 0; /* OK */
}

/** Instrumented function readChunk_gAMA(LodePNGInfo*,unsigned char const*,size_t) */
static unsigned readChunk_gAMA(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) /* << Aka begin of function unsigned readChunk_gAMA(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_gAMA(LodePNGInfo*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.readChunk_gAMA.221939.stub"

  if(AKA_mark("lis===5061###sois===222028###eois===222044###lif===1###soif===105###eoif===121###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_gAMA(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===5061###sois===222028###eois===222044###lif===1###soif===105###eoif===121###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_gAMA(LodePNGInfo*,unsigned char const*,size_t)") && (chunkLength != 4))) {
AKA_mark("lis===5061###sois===222046###eois===222056###lif===1###soif===123###eoif===133###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_gAMA(LodePNGInfo*,unsigned char const*,size_t)");return 96;
}

else {
AKA_mark("lis===-5061-###sois===-222028-###eois===-22202816-###lif===-1-###soif===-###eoif===-121-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_gAMA(LodePNGInfo*,unsigned char const*,size_t)");
} /*invalid gAMA chunk size*/

  AKA_mark("lis===5063###sois===222090###eois===222113###lif===3###soif===167###eoif===190###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_gAMA(LodePNGInfo*,unsigned char const*,size_t)");info->gama_defined = 1;
  AKA_mark("lis===5064###sois===222117###eois===222202###lif===4###soif===194###eoif===279###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_gAMA(LodePNGInfo*,unsigned char const*,size_t)");info->gama_gamma = 16777216u * data[0] + 65536u * data[1] + 256u * data[2] + data[3];

  AKA_mark("lis===5066###sois===222208###eois===222217###lif===6###soif===285###eoif===294###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_gAMA(LodePNGInfo*,unsigned char const*,size_t)");return 0; /* OK */
}

/** Instrumented function readChunk_cHRM(LodePNGInfo*,unsigned char const*,size_t) */
static unsigned readChunk_cHRM(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) /* << Aka begin of function unsigned readChunk_cHRM(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cHRM(LodePNGInfo*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.readChunk_cHRM.222249.stub"

  if(AKA_mark("lis===5070###sois===222338###eois===222355###lif===1###soif===105###eoif===122###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cHRM(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===5070###sois===222338###eois===222355###lif===1###soif===105###eoif===122###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cHRM(LodePNGInfo*,unsigned char const*,size_t)") && (chunkLength != 32))) {
AKA_mark("lis===5070###sois===222357###eois===222367###lif===1###soif===124###eoif===134###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cHRM(LodePNGInfo*,unsigned char const*,size_t)");return 97;
}

else {
AKA_mark("lis===-5070-###sois===-222338-###eois===-22233817-###lif===-1-###soif===-###eoif===-122-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cHRM(LodePNGInfo*,unsigned char const*,size_t)");
} /*invalid cHRM chunk size*/

  AKA_mark("lis===5072###sois===222401###eois===222424###lif===3###soif===168###eoif===191###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cHRM(LodePNGInfo*,unsigned char const*,size_t)");info->chrm_defined = 1;
  AKA_mark("lis===5073###sois===222428###eois===222519###lif===4###soif===195###eoif===286###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cHRM(LodePNGInfo*,unsigned char const*,size_t)");info->chrm_white_x = 16777216u * data[ 0] + 65536u * data[ 1] + 256u * data[ 2] + data[ 3];
  AKA_mark("lis===5074###sois===222523###eois===222614###lif===5###soif===290###eoif===381###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cHRM(LodePNGInfo*,unsigned char const*,size_t)");info->chrm_white_y = 16777216u * data[ 4] + 65536u * data[ 5] + 256u * data[ 6] + data[ 7];
  AKA_mark("lis===5075###sois===222618###eois===222709###lif===6###soif===385###eoif===476###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cHRM(LodePNGInfo*,unsigned char const*,size_t)");info->chrm_red_x   = 16777216u * data[ 8] + 65536u * data[ 9] + 256u * data[10] + data[11];
  AKA_mark("lis===5076###sois===222713###eois===222804###lif===7###soif===480###eoif===571###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cHRM(LodePNGInfo*,unsigned char const*,size_t)");info->chrm_red_y   = 16777216u * data[12] + 65536u * data[13] + 256u * data[14] + data[15];
  AKA_mark("lis===5077###sois===222808###eois===222899###lif===8###soif===575###eoif===666###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cHRM(LodePNGInfo*,unsigned char const*,size_t)");info->chrm_green_x = 16777216u * data[16] + 65536u * data[17] + 256u * data[18] + data[19];
  AKA_mark("lis===5078###sois===222903###eois===222994###lif===9###soif===670###eoif===761###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cHRM(LodePNGInfo*,unsigned char const*,size_t)");info->chrm_green_y = 16777216u * data[20] + 65536u * data[21] + 256u * data[22] + data[23];
  AKA_mark("lis===5079###sois===222998###eois===223089###lif===10###soif===765###eoif===856###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cHRM(LodePNGInfo*,unsigned char const*,size_t)");info->chrm_blue_x  = 16777216u * data[24] + 65536u * data[25] + 256u * data[26] + data[27];
  AKA_mark("lis===5080###sois===223093###eois===223184###lif===11###soif===860###eoif===951###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cHRM(LodePNGInfo*,unsigned char const*,size_t)");info->chrm_blue_y  = 16777216u * data[28] + 65536u * data[29] + 256u * data[30] + data[31];

  AKA_mark("lis===5082###sois===223190###eois===223199###lif===13###soif===957###eoif===966###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cHRM(LodePNGInfo*,unsigned char const*,size_t)");return 0; /* OK */
}

/** Instrumented function readChunk_sRGB(LodePNGInfo*,unsigned char const*,size_t) */
static unsigned readChunk_sRGB(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) /* << Aka begin of function unsigned readChunk_sRGB(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sRGB(LodePNGInfo*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.readChunk_sRGB.223231.stub"

  if(AKA_mark("lis===5086###sois===223320###eois===223336###lif===1###soif===105###eoif===121###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sRGB(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===5086###sois===223320###eois===223336###lif===1###soif===105###eoif===121###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sRGB(LodePNGInfo*,unsigned char const*,size_t)") && (chunkLength != 1))) {
AKA_mark("lis===5086###sois===223338###eois===223348###lif===1###soif===123###eoif===133###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sRGB(LodePNGInfo*,unsigned char const*,size_t)");return 98;
}

else {
AKA_mark("lis===-5086-###sois===-223320-###eois===-22332016-###lif===-1-###soif===-###eoif===-121-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sRGB(LodePNGInfo*,unsigned char const*,size_t)");
} /*invalid sRGB chunk size (this one is never ignored)*/

  AKA_mark("lis===5088###sois===223410###eois===223433###lif===3###soif===195###eoif===218###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sRGB(LodePNGInfo*,unsigned char const*,size_t)");info->srgb_defined = 1;
  AKA_mark("lis===5089###sois===223437###eois===223465###lif===4###soif===222###eoif===250###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sRGB(LodePNGInfo*,unsigned char const*,size_t)");info->srgb_intent = data[0];

  AKA_mark("lis===5091###sois===223471###eois===223480###lif===6###soif===256###eoif===265###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sRGB(LodePNGInfo*,unsigned char const*,size_t)");return 0; /* OK */
}

/** Instrumented function readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t) */
static unsigned readChunk_iCCP(LodePNGInfo* info, const LodePNGDecoderSettings* decoder,
                               const unsigned char* data, size_t chunkLength) /* << Aka begin of function unsigned readChunk_iCCP(LodePNGInfo* info, const LodePNGDecoderSettings* decoder,
                               const unsigned char* data, size_t chunkLength) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.readChunk_iCCP.223512.stub"

  AKA_mark("lis===5096###sois===223669###eois===223688###lif===2###soif===173###eoif===192###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");unsigned error = 0;
  AKA_mark("lis===5097###sois===223692###eois===223703###lif===3###soif===196###eoif===207###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");unsigned i;
  AKA_mark("lis===5098###sois===223707###eois===223723###lif===4###soif===211###eoif===227###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");size_t size = 0;
  /*copy the object to change parameters in it*/
  AKA_mark("lis===5100###sois===223777###eois===223840###lif===6###soif===281###eoif===344###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");LodePNGDecompressSettings zlibsettings = decoder->zlibsettings;

  AKA_mark("lis===5102###sois===223846###eois===223877###lif===8###soif===350###eoif===381###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");unsigned length, string2_begin;

  if(AKA_mark("lis===5104###sois===223886###eois===223904###lif===10###soif===390###eoif===408###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===5104###sois===223886###eois===223904###lif===10###soif===390###eoif===408###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (info->iccp_defined))) {
AKA_mark("lis===5104###sois===223906###eois===223930###lif===10###soif===410###eoif===434###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");lodepng_clear_icc(info);
}

else {
AKA_mark("lis===-5104-###sois===-223886-###eois===-22388618-###lif===-10-###soif===-###eoif===-408-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
}
  AKA_mark("lis===5105###sois===223934###eois===223957###lif===11###soif===438###eoif===461###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");info->iccp_defined = 1;

  int AKA_BLOCK_LOOP_223963 = 0;
    AKA_mark("lis===5107###sois===223967###eois===223978###lif===13###soif===471###eoif===482###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
for(length = 0; AKA_mark("lis===5107###sois===223979###eois===224020###lif===13###soif===483###eoif===524###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && ((AKA_mark("lis===5107###sois===223979###eois===223999###lif===13###soif===483###eoif===503###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (length < chunkLength)) && (AKA_mark("lis===5107###sois===224003###eois===224020###lif===13###soif===507###eoif===524###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (data[length] != 0))); ({AKA_mark("lis===5107###sois===224022###eois===224030###lif===13###soif===526###eoif===534###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");++length;})) {
;
}

  if(AKA_mark("lis===5108###sois===224040###eois===224065###lif===14###soif===544###eoif===569###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===5108###sois===224040###eois===224065###lif===14###soif===544###eoif===569###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (length + 2 >= chunkLength))) {
AKA_mark("lis===5108###sois===224067###eois===224077###lif===14###soif===571###eoif===581###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");return 75;
}

else {
AKA_mark("lis===-5108-###sois===-224040-###eois===-22404025-###lif===-14-###soif===-###eoif===-569-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
} /*no null termination, corrupt?*/
  if(AKA_mark("lis===5109###sois===224118###eois===224143###lif===15###soif===622###eoif===647###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && ((AKA_mark("lis===5109###sois===224118###eois===224128###lif===15###soif===622###eoif===632###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (length < 1)) || (AKA_mark("lis===5109###sois===224132###eois===224143###lif===15###soif===636###eoif===647###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (length > 79)))) {
AKA_mark("lis===5109###sois===224145###eois===224155###lif===15###soif===649###eoif===659###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");return 89;
}

else {
AKA_mark("lis===-5109-###sois===-224118-###eois===-22411825-###lif===-15-###soif===-###eoif===-647-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
} /*keyword too short or long*/

  AKA_mark("lis===5111###sois===224191###eois===224243###lif===17###soif===695###eoif===747###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");info->iccp_name = (char*)lodepng_malloc(length + 1);
  if(AKA_mark("lis===5112###sois===224250###eois===224266###lif===18###soif===754###eoif===770###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===5112###sois===224250###eois===224266###lif===18###soif===754###eoif===770###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (!info->iccp_name))) {
AKA_mark("lis===5112###sois===224268###eois===224278###lif===18###soif===772###eoif===782###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");return 83;
}

else {
AKA_mark("lis===-5112-###sois===-224250-###eois===-22425016-###lif===-18-###soif===-###eoif===-770-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
} /*alloc fail*/

  AKA_mark("lis===5114###sois===224299###eois===224327###lif===20###soif===803###eoif===831###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");info->iccp_name[length] = 0;
  int AKA_BLOCK_LOOP_224331 = 0;
    AKA_mark("lis===5115###sois===224335###eois===224341###lif===21###soif===839###eoif===845###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
for(i = 0; AKA_mark("lis===5115###sois===224342###eois===224353###lif===21###soif===846###eoif===857###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===5115###sois===224342###eois===224353###lif===21###soif===846###eoif===857###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (i != length)); ({AKA_mark("lis===5115###sois===224355###eois===224358###lif===21###soif===859###eoif===862###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");++i;})) {
AKA_mark("lis===5115###sois===224360###eois===224395###lif===21###soif===864###eoif===899###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");info->iccp_name[i] = (char)data[i];
}


  if(AKA_mark("lis===5117###sois===224404###eois===224425###lif===23###soif===908###eoif===929###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===5117###sois===224404###eois===224425###lif===23###soif===908###eoif===929###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (data[length + 1] != 0))) {
AKA_mark("lis===5117###sois===224427###eois===224437###lif===23###soif===931###eoif===941###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");return 72;
}

else {
AKA_mark("lis===-5117-###sois===-224404-###eois===-22440421-###lif===-23-###soif===-###eoif===-929-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
} /*the 0 byte indicating compression must be 0*/

  AKA_mark("lis===5119###sois===224491###eois===224518###lif===25###soif===995###eoif===1022###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");string2_begin = length + 2;
  if(AKA_mark("lis===5120###sois===224525###eois===224552###lif===26###soif===1029###eoif===1056###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (AKA_mark("lis===5120###sois===224525###eois===224552###lif===26###soif===1029###eoif===1056###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (string2_begin > chunkLength))) {
AKA_mark("lis===5120###sois===224554###eois===224564###lif===26###soif===1058###eoif===1068###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");return 75;
}

else {
AKA_mark("lis===-5120-###sois===-224525-###eois===-22452527-###lif===-26-###soif===-###eoif===-1056-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
} /*no null termination, corrupt?*/

  AKA_mark("lis===5122###sois===224604###eois===224651###lif===28###soif===1108###eoif===1155###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");length = (unsigned)chunkLength - string2_begin;
  AKA_mark("lis===5123###sois===224655###eois===224708###lif===29###soif===1159###eoif===1212###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");zlibsettings.max_output_size = decoder->max_icc_size;
  AKA_mark("lis===5124###sois===224712###eois===224866###lif===30###soif===1216###eoif===1370###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");error = zlib_decompress(&info->iccp_profile, &size, 0,
                          &data[string2_begin],
                          length, &zlibsettings);
  /*error: ICC profile larger than decoder->max_icc_size*/
  if(AKA_mark("lis===5128###sois===224933###eois===224977###lif===34###soif===1437###eoif===1481###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && ((AKA_mark("lis===5128###sois===224933###eois===224938###lif===34###soif===1437###eoif===1442###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (error)) && (AKA_mark("lis===5128###sois===224942###eois===224977###lif===34###soif===1446###eoif===1481###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (size > zlibsettings.max_output_size)))) {
AKA_mark("lis===5128###sois===224979###eois===224991###lif===34###soif===1483###eoif===1495###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");error = 113;
}

else {
AKA_mark("lis===-5128-###sois===-224933-###eois===-22493344-###lif===-34-###soif===-###eoif===-1481-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
}
  AKA_mark("lis===5129###sois===224995###eois===225036###lif===35###soif===1499###eoif===1540###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");info->iccp_profile_size = (unsigned)size;
  if(AKA_mark("lis===5130###sois===225043###eois===225077###lif===36###soif===1547###eoif===1581###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && ((AKA_mark("lis===5130###sois===225043###eois===225049###lif===36###soif===1547###eoif===1553###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (!error)) && (AKA_mark("lis===5130###sois===225053###eois===225077###lif===36###soif===1557###eoif===1581###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)") && (!info->iccp_profile_size)))) {
AKA_mark("lis===5130###sois===225079###eois===225091###lif===36###soif===1583###eoif===1595###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");error = 100;
}

else {
AKA_mark("lis===-5130-###sois===-225043-###eois===-22504334-###lif===-36-###soif===-###eoif===-1581-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");
} /*invalid ICC profile size*/
  AKA_mark("lis===5131###sois===225124###eois===225137###lif===37###soif===1628###eoif===1641###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_iCCP(LodePNGInfo*,LodePNGDecoderSettings const*,unsigned char const*,size_t)");return error;
}

/** Instrumented function readChunk_cICP(LodePNGInfo*,unsigned char const*,size_t) */
static unsigned readChunk_cICP(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) /* << Aka begin of function unsigned readChunk_cICP(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cICP(LodePNGInfo*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.readChunk_cICP.225160.stub"

  if(AKA_mark("lis===5135###sois===225249###eois===225265###lif===1###soif===105###eoif===121###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cICP(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===5135###sois===225249###eois===225265###lif===1###soif===105###eoif===121###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cICP(LodePNGInfo*,unsigned char const*,size_t)") && (chunkLength != 4))) {
AKA_mark("lis===5135###sois===225267###eois===225278###lif===1###soif===123###eoif===134###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cICP(LodePNGInfo*,unsigned char const*,size_t)");return 117;
}

else {
AKA_mark("lis===-5135-###sois===-225249-###eois===-22524916-###lif===-1-###soif===-###eoif===-121-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cICP(LodePNGInfo*,unsigned char const*,size_t)");
} /*invalid cICP chunk size*/

  AKA_mark("lis===5137###sois===225312###eois===225335###lif===3###soif===168###eoif===191###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cICP(LodePNGInfo*,unsigned char const*,size_t)");info->cicp_defined = 1;
  /* No error checking for value ranges is done here, that is up to a CICP
  handling library, not the PNG decoding. Just pass on the metadata. */
  AKA_mark("lis===5140###sois===225488###eois===225525###lif===6###soif===344###eoif===381###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cICP(LodePNGInfo*,unsigned char const*,size_t)");info->cicp_color_primaries = data[0];
  AKA_mark("lis===5141###sois===225529###eois===225568###lif===7###soif===385###eoif===424###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cICP(LodePNGInfo*,unsigned char const*,size_t)");info->cicp_transfer_function = data[1];
  AKA_mark("lis===5142###sois===225572###eois===225613###lif===8###soif===428###eoif===469###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cICP(LodePNGInfo*,unsigned char const*,size_t)");info->cicp_matrix_coefficients = data[2];
  AKA_mark("lis===5143###sois===225617###eois===225660###lif===9###soif===473###eoif===516###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cICP(LodePNGInfo*,unsigned char const*,size_t)");info->cicp_video_full_range_flag = data[3];

  AKA_mark("lis===5145###sois===225666###eois===225675###lif===11###soif===522###eoif===531###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cICP(LodePNGInfo*,unsigned char const*,size_t)");return 0; /* OK */
}

/** Instrumented function readChunk_mDCV(LodePNGInfo*,unsigned char const*,size_t) */
static unsigned readChunk_mDCV(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) /* << Aka begin of function unsigned readChunk_mDCV(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_mDCV(LodePNGInfo*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.readChunk_mDCV.225707.stub"

  if(AKA_mark("lis===5149###sois===225796###eois===225813###lif===1###soif===105###eoif===122###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_mDCV(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===5149###sois===225796###eois===225813###lif===1###soif===105###eoif===122###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_mDCV(LodePNGInfo*,unsigned char const*,size_t)") && (chunkLength != 24))) {
AKA_mark("lis===5149###sois===225815###eois===225826###lif===1###soif===124###eoif===135###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_mDCV(LodePNGInfo*,unsigned char const*,size_t)");return 119;
}

else {
AKA_mark("lis===-5149-###sois===-225796-###eois===-22579617-###lif===-1-###soif===-###eoif===-122-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_mDCV(LodePNGInfo*,unsigned char const*,size_t)");
} /*invalid mDCV chunk size*/

  AKA_mark("lis===5151###sois===225860###eois===225883###lif===3###soif===169###eoif===192###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_mDCV(LodePNGInfo*,unsigned char const*,size_t)");info->mdcv_defined = 1;
  AKA_mark("lis===5152###sois===225887###eois===225931###lif===4###soif===196###eoif===240###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_mDCV(LodePNGInfo*,unsigned char const*,size_t)");info->mdcv_red_x = 256u * data[0] + data[1];
  AKA_mark("lis===5153###sois===225935###eois===225979###lif===5###soif===244###eoif===288###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_mDCV(LodePNGInfo*,unsigned char const*,size_t)");info->mdcv_red_y = 256u * data[2] + data[3];
  AKA_mark("lis===5154###sois===225983###eois===226029###lif===6###soif===292###eoif===338###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_mDCV(LodePNGInfo*,unsigned char const*,size_t)");info->mdcv_green_x = 256u * data[4] + data[5];
  AKA_mark("lis===5155###sois===226033###eois===226079###lif===7###soif===342###eoif===388###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_mDCV(LodePNGInfo*,unsigned char const*,size_t)");info->mdcv_green_y = 256u * data[6] + data[7];
  AKA_mark("lis===5156###sois===226083###eois===226128###lif===8###soif===392###eoif===437###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_mDCV(LodePNGInfo*,unsigned char const*,size_t)");info->mdcv_blue_x = 256u * data[8] + data[9];
  AKA_mark("lis===5157###sois===226132###eois===226179###lif===9###soif===441###eoif===488###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_mDCV(LodePNGInfo*,unsigned char const*,size_t)");info->mdcv_blue_y = 256u * data[10] + data[11];
  AKA_mark("lis===5158###sois===226183###eois===226231###lif===10###soif===492###eoif===540###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_mDCV(LodePNGInfo*,unsigned char const*,size_t)");info->mdcv_white_x = 256u * data[12] + data[13];
  AKA_mark("lis===5159###sois===226235###eois===226283###lif===11###soif===544###eoif===592###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_mDCV(LodePNGInfo*,unsigned char const*,size_t)");info->mdcv_white_y = 256u * data[14] + data[15];
  AKA_mark("lis===5160###sois===226287###eois===226384###lif===12###soif===596###eoif===693###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_mDCV(LodePNGInfo*,unsigned char const*,size_t)");info->mdcv_max_luminance = 16777216u * data[16] + 65536u * data[17] + 256u * data[18] + data[19];
  AKA_mark("lis===5161###sois===226388###eois===226485###lif===13###soif===697###eoif===794###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_mDCV(LodePNGInfo*,unsigned char const*,size_t)");info->mdcv_min_luminance = 16777216u * data[20] + 65536u * data[21] + 256u * data[22] + data[23];

  AKA_mark("lis===5163###sois===226491###eois===226500###lif===15###soif===800###eoif===809###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_mDCV(LodePNGInfo*,unsigned char const*,size_t)");return 0; /* OK */
}

/** Instrumented function readChunk_cLLI(LodePNGInfo*,unsigned char const*,size_t) */
static unsigned readChunk_cLLI(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) /* << Aka begin of function unsigned readChunk_cLLI(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cLLI(LodePNGInfo*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.readChunk_cLLI.226532.stub"

  if(AKA_mark("lis===5167###sois===226621###eois===226637###lif===1###soif===105###eoif===121###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cLLI(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===5167###sois===226621###eois===226637###lif===1###soif===105###eoif===121###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cLLI(LodePNGInfo*,unsigned char const*,size_t)") && (chunkLength != 8))) {
AKA_mark("lis===5167###sois===226639###eois===226650###lif===1###soif===123###eoif===134###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cLLI(LodePNGInfo*,unsigned char const*,size_t)");return 120;
}

else {
AKA_mark("lis===-5167-###sois===-226621-###eois===-22662116-###lif===-1-###soif===-###eoif===-121-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cLLI(LodePNGInfo*,unsigned char const*,size_t)");
} /*invalid cLLI chunk size*/

  AKA_mark("lis===5169###sois===226684###eois===226707###lif===3###soif===168###eoif===191###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cLLI(LodePNGInfo*,unsigned char const*,size_t)");info->clli_defined = 1;
  AKA_mark("lis===5170###sois===226711###eois===226798###lif===4###soif===195###eoif===282###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cLLI(LodePNGInfo*,unsigned char const*,size_t)");info->clli_max_cll = 16777216u * data[0] + 65536u * data[1] + 256u * data[2] + data[3];
  AKA_mark("lis===5171###sois===226802###eois===226890###lif===5###soif===286###eoif===374###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cLLI(LodePNGInfo*,unsigned char const*,size_t)");info->clli_max_fall = 16777216u * data[4] + 65536u * data[5] + 256u * data[6] + data[7];

  AKA_mark("lis===5173###sois===226896###eois===226905###lif===7###soif===380###eoif===389###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_cLLI(LodePNGInfo*,unsigned char const*,size_t)");return 0; /* OK */
}

/** Instrumented function readChunk_eXIf(LodePNGInfo*,unsigned char const*,size_t) */
static unsigned readChunk_eXIf(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) /* << Aka begin of function unsigned readChunk_eXIf(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_eXIf(LodePNGInfo*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.readChunk_eXIf.226937.stub"

  AKA_mark("lis===5177###sois===227023###eois===227082###lif===1###soif===102###eoif===161###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_eXIf(LodePNGInfo*,unsigned char const*,size_t)");return lodepng_set_exif(info, data, (unsigned)chunkLength);
}

/*significant bits chunk (sBIT)*/
/** Instrumented function readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t) */
static unsigned readChunk_sBIT(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) /* << Aka begin of function unsigned readChunk_sBIT(LodePNGInfo* info, const unsigned char* data, size_t chunkLength) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.readChunk_sBIT.227140.stub"

  AKA_mark("lis===5182###sois===227226###eois===227312###lif===1###soif===102###eoif===188###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");unsigned bitdepth = (info->color.colortype == LCT_PALETTE) ? 8 : info->color.bitdepth;
  if(AKA_mark("lis===5183###sois===227319###eois===227352###lif===2###soif===195###eoif===228###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===5183###sois===227319###eois===227352###lif===2###soif===195###eoif===228###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (info->color.colortype == LCT_GREY))) {
    /*error: this chunk must be 1 bytes for grayscale image*/
    if(AKA_mark("lis===5185###sois===227427###eois===227443###lif===4###soif===303###eoif===319###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===5185###sois===227427###eois===227443###lif===4###soif===303###eoif===319###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (chunkLength != 1))) {
AKA_mark("lis===5185###sois===227445###eois===227456###lif===4###soif===321###eoif===332###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");return 114;
}

else {
AKA_mark("lis===-5185-###sois===-227427-###eois===-22742716-###lif===-4-###soif===-###eoif===-319-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");
}
    if(AKA_mark("lis===5186###sois===227465###eois===227499###lif===5###soif===341###eoif===375###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && ((AKA_mark("lis===5186###sois===227465###eois===227477###lif===5###soif===341###eoif===353###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (data[0] == 0)) || (AKA_mark("lis===5186###sois===227481###eois===227499###lif===5###soif===357###eoif===375###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (data[0] > bitdepth)))) {
AKA_mark("lis===5186###sois===227501###eois===227512###lif===5###soif===377###eoif===388###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");return 115;
}

else {
AKA_mark("lis===-5186-###sois===-227465-###eois===-22746534-###lif===-5-###soif===-###eoif===-375-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");
}
    AKA_mark("lis===5187###sois===227518###eois===227541###lif===6###soif===394###eoif===417###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");info->sbit_defined = 1;
    AKA_mark("lis===5188###sois===227547###eois===227600###lif===7###soif===423###eoif===476###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");info->sbit_r = info->sbit_g = info->sbit_b = data[0]; /*setting g and b is not required, but sensible*/
  } else {
if(AKA_mark("lis===5189###sois===227664###eois===227736###lif===8###soif===540###eoif===612###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && ((AKA_mark("lis===5189###sois===227664###eois===227696###lif===8###soif===540###eoif===572###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (info->color.colortype == LCT_RGB)) || (AKA_mark("lis===5189###sois===227700###eois===227736###lif===8###soif===576###eoif===612###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (info->color.colortype == LCT_PALETTE)))) {
    /*error: this chunk must be 3 bytes for RGB and palette image*/
    if(AKA_mark("lis===5191###sois===227817###eois===227833###lif===10###soif===693###eoif===709###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===5191###sois===227817###eois===227833###lif===10###soif===693###eoif===709###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (chunkLength != 3))) {
AKA_mark("lis===5191###sois===227835###eois===227846###lif===10###soif===711###eoif===722###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");return 114;
}

else {
AKA_mark("lis===-5191-###sois===-227817-###eois===-22781716-###lif===-10-###soif===-###eoif===-709-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");
}
    if(AKA_mark("lis===5192###sois===227855###eois===227899###lif===11###soif===731###eoif===775###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (((AKA_mark("lis===5192###sois===227855###eois===227867###lif===11###soif===731###eoif===743###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (data[0] == 0)) || (AKA_mark("lis===5192###sois===227871###eois===227883###lif===11###soif===747###eoif===759###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (data[1] == 0))) || (AKA_mark("lis===5192###sois===227887###eois===227899###lif===11###soif===763###eoif===775###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (data[2] == 0)))) {
AKA_mark("lis===5192###sois===227901###eois===227912###lif===11###soif===777###eoif===788###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");return 115;
}

else {
AKA_mark("lis===-5192-###sois===-227855-###eois===-22785544-###lif===-11-###soif===-###eoif===-775-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");
}
    if(AKA_mark("lis===5193###sois===227921###eois===227983###lif===12###soif===797###eoif===859###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (((AKA_mark("lis===5193###sois===227921###eois===227939###lif===12###soif===797###eoif===815###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (data[0] > bitdepth)) || (AKA_mark("lis===5193###sois===227943###eois===227961###lif===12###soif===819###eoif===837###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (data[1] > bitdepth))) || (AKA_mark("lis===5193###sois===227965###eois===227983###lif===12###soif===841###eoif===859###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (data[2] > bitdepth)))) {
AKA_mark("lis===5193###sois===227985###eois===227996###lif===12###soif===861###eoif===872###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");return 115;
}

else {
AKA_mark("lis===-5193-###sois===-227921-###eois===-22792162-###lif===-12-###soif===-###eoif===-859-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");
}
    AKA_mark("lis===5194###sois===228002###eois===228025###lif===13###soif===878###eoif===901###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");info->sbit_defined = 1;
    AKA_mark("lis===5195###sois===228031###eois===228054###lif===14###soif===907###eoif===930###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");info->sbit_r = data[0];
    AKA_mark("lis===5196###sois===228060###eois===228083###lif===15###soif===936###eoif===959###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");info->sbit_g = data[1];
    AKA_mark("lis===5197###sois===228089###eois===228112###lif===16###soif===965###eoif===988###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");info->sbit_b = data[2];
  } else {
if(AKA_mark("lis===5198###sois===228126###eois===228165###lif===17###soif===1002###eoif===1041###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===5198###sois===228126###eois===228165###lif===17###soif===1002###eoif===1041###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (info->color.colortype == LCT_GREY_ALPHA))) {
    /*error: this chunk must be 2 byte for grayscale with alpha image*/
    if(AKA_mark("lis===5200###sois===228250###eois===228266###lif===19###soif===1126###eoif===1142###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===5200###sois===228250###eois===228266###lif===19###soif===1126###eoif===1142###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (chunkLength != 2))) {
AKA_mark("lis===5200###sois===228268###eois===228279###lif===19###soif===1144###eoif===1155###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");return 114;
}

else {
AKA_mark("lis===-5200-###sois===-228250-###eois===-22825016-###lif===-19-###soif===-###eoif===-1142-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");
}
    if(AKA_mark("lis===5201###sois===228288###eois===228316###lif===20###soif===1164###eoif===1192###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && ((AKA_mark("lis===5201###sois===228288###eois===228300###lif===20###soif===1164###eoif===1176###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (data[0] == 0)) || (AKA_mark("lis===5201###sois===228304###eois===228316###lif===20###soif===1180###eoif===1192###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (data[1] == 0)))) {
AKA_mark("lis===5201###sois===228318###eois===228329###lif===20###soif===1194###eoif===1205###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");return 115;
}

else {
AKA_mark("lis===-5201-###sois===-228288-###eois===-22828828-###lif===-20-###soif===-###eoif===-1192-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");
}
    if(AKA_mark("lis===5202###sois===228338###eois===228378###lif===21###soif===1214###eoif===1254###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && ((AKA_mark("lis===5202###sois===228338###eois===228356###lif===21###soif===1214###eoif===1232###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (data[0] > bitdepth)) || (AKA_mark("lis===5202###sois===228360###eois===228378###lif===21###soif===1236###eoif===1254###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (data[1] > bitdepth)))) {
AKA_mark("lis===5202###sois===228380###eois===228391###lif===21###soif===1256###eoif===1267###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");return 115;
}

else {
AKA_mark("lis===-5202-###sois===-228338-###eois===-22833840-###lif===-21-###soif===-###eoif===-1254-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");
}
    AKA_mark("lis===5203###sois===228397###eois===228420###lif===22###soif===1273###eoif===1296###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");info->sbit_defined = 1;
    AKA_mark("lis===5204###sois===228426###eois===228479###lif===23###soif===1302###eoif===1355###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");info->sbit_r = info->sbit_g = info->sbit_b = data[0]; /*setting g and b is not required, but sensible*/
    AKA_mark("lis===5205###sois===228535###eois===228558###lif===24###soif===1411###eoif===1434###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");info->sbit_a = data[1];
  } else {
if(AKA_mark("lis===5206###sois===228572###eois===228605###lif===25###soif===1448###eoif===1481###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===5206###sois===228572###eois===228605###lif===25###soif===1448###eoif===1481###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (info->color.colortype == LCT_RGBA))) {
    /*error: this chunk must be 4 bytes for grayscale image*/
    if(AKA_mark("lis===5208###sois===228680###eois===228696###lif===27###soif===1556###eoif===1572###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (AKA_mark("lis===5208###sois===228680###eois===228696###lif===27###soif===1556###eoif===1572###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (chunkLength != 4))) {
AKA_mark("lis===5208###sois===228698###eois===228709###lif===27###soif===1574###eoif===1585###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");return 114;
}

else {
AKA_mark("lis===-5208-###sois===-228680-###eois===-22868016-###lif===-27-###soif===-###eoif===-1572-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");
}
    if(AKA_mark("lis===5209###sois===228718###eois===228778###lif===28###soif===1594###eoif===1654###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && ((((AKA_mark("lis===5209###sois===228718###eois===228730###lif===28###soif===1594###eoif===1606###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (data[0] == 0)) || (AKA_mark("lis===5209###sois===228734###eois===228746###lif===28###soif===1610###eoif===1622###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (data[1] == 0))) || (AKA_mark("lis===5209###sois===228750###eois===228762###lif===28###soif===1626###eoif===1638###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (data[2] == 0))) || (AKA_mark("lis===5209###sois===228766###eois===228778###lif===28###soif===1642###eoif===1654###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (data[3] == 0)))) {
AKA_mark("lis===5209###sois===228780###eois===228791###lif===28###soif===1656###eoif===1667###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");return 115;
}

else {
AKA_mark("lis===-5209-###sois===-228718-###eois===-22871860-###lif===-28-###soif===-###eoif===-1654-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");
}
    if(AKA_mark("lis===5210###sois===228800###eois===228884###lif===29###soif===1676###eoif===1760###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && ((((AKA_mark("lis===5210###sois===228800###eois===228818###lif===29###soif===1676###eoif===1694###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (data[0] > bitdepth)) || (AKA_mark("lis===5210###sois===228822###eois===228840###lif===29###soif===1698###eoif===1716###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (data[1] > bitdepth))) || (AKA_mark("lis===5210###sois===228844###eois===228862###lif===29###soif===1720###eoif===1738###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (data[2] > bitdepth))) || (AKA_mark("lis===5210###sois===228866###eois===228884###lif===29###soif===1742###eoif===1760###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)") && (data[3] > bitdepth)))) {
AKA_mark("lis===5210###sois===228886###eois===228897###lif===29###soif===1762###eoif===1773###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");return 115;
}

else {
AKA_mark("lis===-5210-###sois===-228800-###eois===-22880084-###lif===-29-###soif===-###eoif===-1760-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");
}
    AKA_mark("lis===5211###sois===228903###eois===228926###lif===30###soif===1779###eoif===1802###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");info->sbit_defined = 1;
    AKA_mark("lis===5212###sois===228932###eois===228955###lif===31###soif===1808###eoif===1831###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");info->sbit_r = data[0];
    AKA_mark("lis===5213###sois===228961###eois===228984###lif===32###soif===1837###eoif===1860###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");info->sbit_g = data[1];
    AKA_mark("lis===5214###sois===228990###eois===229013###lif===33###soif===1866###eoif===1889###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");info->sbit_b = data[2];
    AKA_mark("lis===5215###sois===229019###eois===229042###lif===34###soif===1895###eoif===1918###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");info->sbit_a = data[3];
  }
else {
AKA_mark("lis===-5206-###sois===-228572-###eois===-22857233-###lif===-25-###soif===-###eoif===-1481-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");
}
}

}

}


  AKA_mark("lis===5218###sois===229053###eois===229062###lif===37###soif===1929###eoif===1938###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\readChunk_sBIT(LodePNGInfo*,unsigned char const*,size_t)");return 0; /* OK */
}
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/

/** Instrumented function lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t) */
unsigned lodepng_inspect_chunk(LodePNGState* state, size_t pos,
                               const unsigned char* in, size_t insize) /* << Aka begin of function unsigned lodepng_inspect_chunk(LodePNGState* state, size_t pos,
                               const unsigned char* in, size_t insize) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_inspect_chunk.229132.stub"

  AKA_mark("lis===5224###sois===229264###eois===229302###lif===2###soif===141###eoif===179###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");const unsigned char* chunk = in + pos;
  AKA_mark("lis===5225###sois===229306###eois===229327###lif===3###soif===183###eoif===204###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");unsigned chunkLength;
  AKA_mark("lis===5226###sois===229331###eois===229357###lif===4###soif===208###eoif===234###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");const unsigned char* data;
  AKA_mark("lis===5227###sois===229361###eois===229384###lif===5###soif===238###eoif===261###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");unsigned unhandled = 0;
  AKA_mark("lis===5228###sois===229388###eois===229407###lif===6###soif===265###eoif===284###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");unsigned error = 0;

  if(AKA_mark("lis===5230###sois===229416###eois===229432###lif===8###soif===293###eoif===309###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5230###sois===229416###eois===229432###lif===8###soif===293###eoif===309###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (pos + 4 > insize))) {
AKA_mark("lis===5230###sois===229434###eois===229444###lif===8###soif===311###eoif===321###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");return 30;
}

else {
AKA_mark("lis===-5230-###sois===-229416-###eois===-22941616-###lif===-8-###soif===-###eoif===-309-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");
}
  AKA_mark("lis===5231###sois===229448###eois===229490###lif===9###soif===325###eoif===367###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");chunkLength = lodepng_chunk_length(chunk);
  if(AKA_mark("lis===5232###sois===229497###eois===229521###lif===10###soif===374###eoif===398###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5232###sois===229497###eois===229521###lif===10###soif===374###eoif===398###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (chunkLength > 2147483647))) {
AKA_mark("lis===5232###sois===229523###eois===229533###lif===10###soif===400###eoif===410###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");return 63;
}

else {
AKA_mark("lis===-5232-###sois===-229497-###eois===-22949724-###lif===-10-###soif===-###eoif===-398-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");
}
  AKA_mark("lis===5233###sois===229537###eois===229576###lif===11###soif===414###eoif===453###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");data = lodepng_chunk_data_const(chunk);
  if(AKA_mark("lis===5234###sois===229583###eois===229614###lif===12###soif===460###eoif===491###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5234###sois===229583###eois===229614###lif===12###soif===460###eoif===491###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (chunkLength + 12 > insize - pos))) {
AKA_mark("lis===5234###sois===229616###eois===229626###lif===12###soif===493###eoif===503###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");return 30;
}

else {
AKA_mark("lis===-5234-###sois===-229583-###eois===-22958331-###lif===-12-###soif===-###eoif===-491-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");
}

  if(AKA_mark("lis===5236###sois===229635###eois===229675###lif===14###soif===512###eoif===552###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5236###sois===229635###eois===229675###lif===14###soif===512###eoif===552###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "PLTE")))) {
    AKA_mark("lis===5237###sois===229684###eois===229750###lif===15###soif===561###eoif===627###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");error = readChunk_PLTE(&state->info_png.color, data, chunkLength);
  } else {
if(AKA_mark("lis===5238###sois===229764###eois===229804###lif===16###soif===641###eoif===681###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5238###sois===229764###eois===229804###lif===16###soif===641###eoif===681###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "tRNS")))) {
    AKA_mark("lis===5239###sois===229813###eois===229879###lif===17###soif===690###eoif===756###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");error = readChunk_tRNS(&state->info_png.color, data, chunkLength);
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
  } else {
if(AKA_mark("lis===5241###sois===229934###eois===229974###lif===19###soif===811###eoif===851###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5241###sois===229934###eois===229974###lif===19###soif===811###eoif===851###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "bKGD")))) {
    AKA_mark("lis===5242###sois===229983###eois===230043###lif===20###soif===860###eoif===920###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");error = readChunk_bKGD(&state->info_png, data, chunkLength);
  } else {
if(AKA_mark("lis===5243###sois===230057###eois===230097###lif===21###soif===934###eoif===974###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5243###sois===230057###eois===230097###lif===21###soif===934###eoif===974###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "tEXt")))) {
    AKA_mark("lis===5244###sois===230106###eois===230166###lif===22###soif===983###eoif===1043###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");error = readChunk_tEXt(&state->info_png, data, chunkLength);
  } else {
if(AKA_mark("lis===5245###sois===230180###eois===230220###lif===23###soif===1057###eoif===1097###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5245###sois===230180###eois===230220###lif===23###soif===1057###eoif===1097###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "zTXt")))) {
    AKA_mark("lis===5246###sois===230229###eois===230306###lif===24###soif===1106###eoif===1183###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");error = readChunk_zTXt(&state->info_png, &state->decoder, data, chunkLength);
  } else {
if(AKA_mark("lis===5247###sois===230320###eois===230360###lif===25###soif===1197###eoif===1237###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5247###sois===230320###eois===230360###lif===25###soif===1197###eoif===1237###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "iTXt")))) {
    AKA_mark("lis===5248###sois===230369###eois===230446###lif===26###soif===1246###eoif===1323###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");error = readChunk_iTXt(&state->info_png, &state->decoder, data, chunkLength);
  } else {
if(AKA_mark("lis===5249###sois===230460###eois===230500###lif===27###soif===1337###eoif===1377###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5249###sois===230460###eois===230500###lif===27###soif===1337###eoif===1377###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "tIME")))) {
    AKA_mark("lis===5250###sois===230509###eois===230569###lif===28###soif===1386###eoif===1446###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");error = readChunk_tIME(&state->info_png, data, chunkLength);
  } else {
if(AKA_mark("lis===5251###sois===230583###eois===230623###lif===29###soif===1460###eoif===1500###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5251###sois===230583###eois===230623###lif===29###soif===1460###eoif===1500###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "pHYs")))) {
    AKA_mark("lis===5252###sois===230632###eois===230692###lif===30###soif===1509###eoif===1569###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");error = readChunk_pHYs(&state->info_png, data, chunkLength);
  } else {
if(AKA_mark("lis===5253###sois===230706###eois===230746###lif===31###soif===1583###eoif===1623###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5253###sois===230706###eois===230746###lif===31###soif===1583###eoif===1623###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "gAMA")))) {
    AKA_mark("lis===5254###sois===230755###eois===230815###lif===32###soif===1632###eoif===1692###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");error = readChunk_gAMA(&state->info_png, data, chunkLength);
  } else {
if(AKA_mark("lis===5255###sois===230829###eois===230869###lif===33###soif===1706###eoif===1746###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5255###sois===230829###eois===230869###lif===33###soif===1706###eoif===1746###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "cHRM")))) {
    AKA_mark("lis===5256###sois===230878###eois===230938###lif===34###soif===1755###eoif===1815###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");error = readChunk_cHRM(&state->info_png, data, chunkLength);
  } else {
if(AKA_mark("lis===5257###sois===230952###eois===230992###lif===35###soif===1829###eoif===1869###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5257###sois===230952###eois===230992###lif===35###soif===1829###eoif===1869###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "sRGB")))) {
    AKA_mark("lis===5258###sois===231001###eois===231061###lif===36###soif===1878###eoif===1938###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");error = readChunk_sRGB(&state->info_png, data, chunkLength);
  } else {
if(AKA_mark("lis===5259###sois===231075###eois===231115###lif===37###soif===1952###eoif===1992###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5259###sois===231075###eois===231115###lif===37###soif===1952###eoif===1992###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "iCCP")))) {
    AKA_mark("lis===5260###sois===231124###eois===231201###lif===38###soif===2001###eoif===2078###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");error = readChunk_iCCP(&state->info_png, &state->decoder, data, chunkLength);
  } else {
if(AKA_mark("lis===5261###sois===231215###eois===231255###lif===39###soif===2092###eoif===2132###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5261###sois===231215###eois===231255###lif===39###soif===2092###eoif===2132###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "cICP")))) {
    AKA_mark("lis===5262###sois===231264###eois===231324###lif===40###soif===2141###eoif===2201###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");error = readChunk_cICP(&state->info_png, data, chunkLength);
  } else {
if(AKA_mark("lis===5263###sois===231338###eois===231378###lif===41###soif===2215###eoif===2255###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5263###sois===231338###eois===231378###lif===41###soif===2215###eoif===2255###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "mDCV")))) {
    AKA_mark("lis===5264###sois===231387###eois===231447###lif===42###soif===2264###eoif===2324###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");error = readChunk_mDCV(&state->info_png, data, chunkLength);
  } else {
if(AKA_mark("lis===5265###sois===231461###eois===231501###lif===43###soif===2338###eoif===2378###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5265###sois===231461###eois===231501###lif===43###soif===2338###eoif===2378###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "cLLI")))) {
    AKA_mark("lis===5266###sois===231510###eois===231570###lif===44###soif===2387###eoif===2447###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");error = readChunk_cLLI(&state->info_png, data, chunkLength);
  } else {
if(AKA_mark("lis===5267###sois===231584###eois===231624###lif===45###soif===2461###eoif===2501###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5267###sois===231584###eois===231624###lif===45###soif===2461###eoif===2501###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "eXIf")))) {
    AKA_mark("lis===5268###sois===231633###eois===231693###lif===46###soif===2510###eoif===2570###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");error = readChunk_eXIf(&state->info_png, data, chunkLength);
  } else {
if(AKA_mark("lis===5269###sois===231707###eois===231747###lif===47###soif===2584###eoif===2624###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5269###sois===231707###eois===231747###lif===47###soif===2584###eoif===2624###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "sBIT")))) {
    AKA_mark("lis===5270###sois===231756###eois===231816###lif===48###soif===2633###eoif===2693###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");error = readChunk_sBIT(&state->info_png, data, chunkLength);
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
  } else {
    /* unhandled chunk is ok (is not an error) */
    AKA_mark("lis===5274###sois===231930###eois===231944###lif===52###soif===2807###eoif===2821###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");unhandled = 1;
  }
}

}

}

}

}

}

}

}

}

}

}

}

}

}

}

}


  if(AKA_mark("lis===5277###sois===231958###eois===232008###lif===55###soif===2835###eoif===2885###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (((AKA_mark("lis===5277###sois===231958###eois===231964###lif===55###soif===2835###eoif===2841###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (!error)) && (AKA_mark("lis===5277###sois===231968###eois===231978###lif===55###soif===2845###eoif===2855###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (!unhandled))) && (AKA_mark("lis===5277###sois===231982###eois===232008###lif===55###soif===2859###eoif===2885###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (!state->decoder.ignore_crc)))) {
    if(AKA_mark("lis===5278###sois===232020###eois===232050###lif===56###soif===2897###eoif===2927###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (AKA_mark("lis===5278###sois===232020###eois===232050###lif===56###soif===2897###eoif===2927###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)") && (lodepng_chunk_check_crc(chunk)))) {
AKA_mark("lis===5278###sois===232052###eois===232062###lif===56###soif===2929###eoif===2939###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");return 57;
}

else {
AKA_mark("lis===-5278-###sois===-232020-###eois===-23202030-###lif===-56-###soif===-###eoif===-2927-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");
} /*invalid CRC*/
  }
else {
AKA_mark("lis===-5277-###sois===-231958-###eois===-23195850-###lif===-55-###soif===-###eoif===-2885-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");
}

  AKA_mark("lis===5281###sois===232089###eois===232102###lif===59###soif===2966###eoif===2979###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_inspect_chunk(LodePNGState*,size_t,unsigned char const*,size_t)");return error;
}

/*read a PNG, the result will be in the same color type as the PNG (hence "generic")*/
/** Instrumented function decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t) */
static void decodeGeneric(unsigned char** out, unsigned* w, unsigned* h,
                          LodePNGState* state,
                          const unsigned char* in, size_t insize) /* << Aka begin of function void decodeGeneric(unsigned char** out, unsigned* w, unsigned* h,
                          LodePNGState* state,
                          const unsigned char* in, size_t insize) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.decodeGeneric.232209.stub"

  AKA_mark("lis===5288###sois===232390###eois===232413###lif===3###soif===193###eoif===216###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");unsigned char IEND = 0;
  AKA_mark("lis===5289###sois===232417###eois===232444###lif===4###soif===220###eoif===247###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");const unsigned char* chunk; /*points to beginning of next chunk*/
  AKA_mark("lis===5290###sois===232486###eois===232506###lif===5###soif===289###eoif===309###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");unsigned char* idat; /*the data from idat chunks, zlib compressed*/
  AKA_mark("lis===5291###sois===232557###eois===232577###lif===6###soif===360###eoif===380###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");size_t idatsize = 0;
  AKA_mark("lis===5292###sois===232581###eois===232610###lif===7###soif===384###eoif===413###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");unsigned char* scanlines = 0;
  AKA_mark("lis===5293###sois===232614###eois===232659###lif===8###soif===417###eoif===462###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");size_t scanlines_size = 0, expected_size = 0;
  AKA_mark("lis===5294###sois===232663###eois===232682###lif===9###soif===466###eoif===485###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");size_t outsize = 0;

  /*for unknown chunk order*/
  AKA_mark("lis===5297###sois===232719###eois===232740###lif===12###soif===522###eoif===543###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");unsigned unknown = 0;
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
  AKA_mark("lis===5299###sois===232785###eois===232811###lif===14###soif===588###eoif===614###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");unsigned critical_pos = 1; /*1 = after IHDR, 2 = after PLTE, 3 = after IDAT*/
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/


  /* safe output values in case error happens */
  AKA_mark("lis===5304###sois===232965###eois===232974###lif===19###soif===768###eoif===777###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");*out = 0;
  AKA_mark("lis===5305###sois===232978###eois===232990###lif===20###soif===781###eoif===793###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");*w = *h = 0;

  AKA_mark("lis===5307###sois===232996###eois===233052###lif===22###soif===799###eoif===855###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = lodepng_inspect(w, h, state, in, insize); /*reads header and resets other parameters in state->info_png*/
  if(AKA_mark("lis===5308###sois===233123###eois===233135###lif===23###soif===926###eoif===938###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5308###sois===233123###eois===233135###lif===23###soif===926###eoif===938###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5308###sois===233137###eois===233144###lif===23###soif===940###eoif===947###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");return;
}

else {
AKA_mark("lis===-5308-###sois===-233123-###eois===-23312312-###lif===-23-###soif===-###eoif===-938-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}

  if(AKA_mark("lis===5310###sois===233153###eois===233225###lif===25###soif===956###eoif===1028###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5310###sois===233153###eois===233225###lif===25###soif===956###eoif===1028###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_pixel_overflow(*w, *h, &state->info_png.color, &state->info_raw)))) {
    AKA_mark("lis===5311###sois===233234###eois===233265###lif===26###soif===1037###eoif===1068###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_RETURN(state->error, 92); /*overflow possible due to amount of pixels*/
  }
else {
AKA_mark("lis===-5310-###sois===-233153-###eois===-23315372-###lif===-25-###soif===-###eoif===-1028-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}

  /*the input filesize is a safe upper bound for the sum of idat chunks size*/
  AKA_mark("lis===5315###sois===233403###eois===233449###lif===30###soif===1206###eoif===1252###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");idat = (unsigned char*)lodepng_malloc(insize);
  if(AKA_mark("lis===5316###sois===233456###eois===233461###lif===31###soif===1259###eoif===1264###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5316###sois===233456###eois===233461###lif===31###soif===1259###eoif===1264###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!idat))) {AKA_mark("lis===5316###sois===233463###eois===233494###lif===31###soif===1266###eoif===1297###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");AKA_mark("lis===5316###sois===233463###eois===233494###lif===31###soif===1266###eoif===1297###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_RETURN(state->error, 83)}
else {
AKA_mark("lis===-5316-###sois===-233456-###eois===-2334565-###lif===-31-###soif===-###eoif===-1264-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}; /*alloc fail*/

  AKA_mark("lis===5318###sois===233516###eois===233532###lif===33###soif===1319###eoif===1335###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");chunk = &in[33]; /*first byte of the first chunk after the header*/

  /*loop through the chunks, ignoring unknown chunks and stopping at IEND chunk.
  IDAT data is put at the start of the in buffer*/
  int AKA_BLOCK_LOOP_233723 = 0;
    while(AKA_mark("lis===5322###sois===233729###eois===233751###lif===37###soif===1532###eoif===1554###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && ((AKA_mark("lis===5322###sois===233729###eois===233734###lif===37###soif===1532###eoif===1537###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!IEND)) && (AKA_mark("lis===5322###sois===233738###eois===233751###lif===37###soif===1541###eoif===1554###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!state->error)))) {
        AKA_BLOCK_LOOP_233723++;
        if (AKA_BLOCK_LOOP_233723 > 1000) {
            //break;
        }
    AKA_mark("lis===5323###sois===233760###eois===233781###lif===38###soif===1563###eoif===1584###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");unsigned chunkLength;
    AKA_mark("lis===5324###sois===233787###eois===233813###lif===39###soif===1590###eoif===1616###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");const unsigned char* data; /*the data in the chunk*/
    AKA_mark("lis===5325###sois===233845###eois===233879###lif===40###soif===1648###eoif===1682###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");size_t pos = (size_t)(chunk - in);

    /*error: next chunk out of bounds of the in buffer*/
    if(AKA_mark("lis===5328###sois===233948###eois===233979###lif===43###soif===1751###eoif===1782###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && ((AKA_mark("lis===5328###sois===233948###eois===233958###lif===43###soif===1751###eoif===1761###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (chunk < in)) || (AKA_mark("lis===5328###sois===233962###eois===233979###lif===43###soif===1765###eoif===1782###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (pos + 12 > insize)))) {
      if(AKA_mark("lis===5329###sois===233993###eois===234018###lif===44###soif===1796###eoif===1821###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5329###sois===233993###eois===234018###lif===44###soif===1796###eoif===1821###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->decoder.ignore_end))) {
AKA_mark("lis===5329###sois===234020###eois===234026###lif===44###soif===1823###eoif===1829###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-5329-###sois===-233993-###eois===-23399325-###lif===-44-###soif===-###eoif===-1821-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
} /*other errors may still happen though*/
      AKA_mark("lis===5330###sois===234075###eois===234105###lif===45###soif===1878###eoif===1908###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_BREAK(state->error, 30);
    }
else {
AKA_mark("lis===-5328-###sois===-233948-###eois===-23394831-###lif===-43-###soif===-###eoif===-1782-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}

    /*length of the data of the chunk, excluding the 12 bytes for length, chunk type and CRC*/
    AKA_mark("lis===5334###sois===234217###eois===234259###lif===49###soif===2020###eoif===2062###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");chunkLength = lodepng_chunk_length(chunk);
    /*error: chunk length larger than the max PNG chunk size*/
    if(AKA_mark("lis===5336###sois===234332###eois===234356###lif===51###soif===2135###eoif===2159###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5336###sois===234332###eois===234356###lif===51###soif===2135###eoif===2159###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (chunkLength > 2147483647))) {
      if(AKA_mark("lis===5337###sois===234370###eois===234395###lif===52###soif===2173###eoif===2198###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5337###sois===234370###eois===234395###lif===52###soif===2173###eoif===2198###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->decoder.ignore_end))) {
AKA_mark("lis===5337###sois===234397###eois===234403###lif===52###soif===2200###eoif===2206###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-5337-###sois===-234370-###eois===-23437025-###lif===-52-###soif===-###eoif===-2198-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
} /*other errors may still happen though*/
      AKA_mark("lis===5338###sois===234452###eois===234482###lif===53###soif===2255###eoif===2285###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_BREAK(state->error, 63);
    }
else {
AKA_mark("lis===-5336-###sois===-234332-###eois===-23433224-###lif===-51-###soif===-###eoif===-2159-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}

    if(AKA_mark("lis===5341###sois===234501###eois===234580###lif===56###soif===2304###eoif===2383###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && ((AKA_mark("lis===5341###sois===234501###eois===234540###lif===56###soif===2304###eoif===2343###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (pos + (size_t)chunkLength + 12 > insize)) || (AKA_mark("lis===5341###sois===234544###eois===234580###lif===56###soif===2347###eoif===2383###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (pos + (size_t)chunkLength + 12 < pos)))) {
      AKA_mark("lis===5342###sois===234591###eois===234621###lif===57###soif===2394###eoif===2424###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_BREAK(state->error, 64); /*error: size of the in buffer too small to contain next chunk (or int overflow)*/
    }
else {
AKA_mark("lis===-5341-###sois===-234501-###eois===-23450179-###lif===-56-###soif===-###eoif===-2383-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}

    AKA_mark("lis===5345###sois===234720###eois===234759###lif===60###soif===2523###eoif===2562###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");data = lodepng_chunk_data_const(chunk);

    AKA_mark("lis===5347###sois===234767###eois===234779###lif===62###soif===2570###eoif===2582###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");unknown = 0;

    /*IDAT chunk, containing compressed image data*/
    if(AKA_mark("lis===5350###sois===234844###eois===234884###lif===65###soif===2647###eoif===2687###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5350###sois===234844###eois===234884###lif===65###soif===2647###eoif===2687###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "IDAT")))) {
      AKA_mark("lis===5351###sois===234895###eois===234910###lif===66###soif===2698###eoif===2713###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");size_t newsize;
      if(AKA_mark("lis===5352###sois===234921###eois===234968###lif===67###soif===2724###eoif===2771###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5352###sois===234921###eois===234968###lif===67###soif===2724###eoif===2771###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_addofl(idatsize, chunkLength, &newsize)))) {AKA_mark("lis===5352###sois===234970###eois===235000###lif===67###soif===2773###eoif===2803###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");AKA_mark("lis===5352###sois===234970###eois===235000###lif===67###soif===2773###eoif===2803###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_BREAK(state->error, 95)}
else {
AKA_mark("lis===-5352-###sois===-234921-###eois===-23492147-###lif===-67-###soif===-###eoif===-2771-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
};
      if(AKA_mark("lis===5353###sois===235012###eois===235028###lif===68###soif===2815###eoif===2831###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5353###sois===235012###eois===235028###lif===68###soif===2815###eoif===2831###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (newsize > insize))) {AKA_mark("lis===5353###sois===235030###eois===235060###lif===68###soif===2833###eoif===2863###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");AKA_mark("lis===5353###sois===235030###eois===235060###lif===68###soif===2833###eoif===2863###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_BREAK(state->error, 95)}
else {
AKA_mark("lis===-5353-###sois===-235012-###eois===-23501216-###lif===-68-###soif===-###eoif===-2831-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
};
      AKA_mark("lis===5354###sois===235069###eois===235120###lif===69###soif===2872###eoif===2923###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");lodepng_memcpy(idat + idatsize, data, chunkLength);
      AKA_mark("lis===5355###sois===235128###eois===235152###lif===70###soif===2931###eoif===2955###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");idatsize += chunkLength;
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
      AKA_mark("lis===5357###sois===235201###eois===235218###lif===72###soif===3004###eoif===3021###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");critical_pos = 3;
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
    } else {
if(AKA_mark("lis===5359###sois===235279###eois===235319###lif===74###soif===3082###eoif===3122###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5359###sois===235279###eois===235319###lif===74###soif===3082###eoif===3122###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "IEND")))) {
      /*IEND chunk*/
      AKA_mark("lis===5361###sois===235352###eois===235361###lif===76###soif===3155###eoif===3164###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");IEND = 1;
    } else {
if(AKA_mark("lis===5362###sois===235377###eois===235417###lif===77###soif===3180###eoif===3220###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5362###sois===235377###eois===235417###lif===77###soif===3180###eoif===3220###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "PLTE")))) {
      /*palette chunk (PLTE)*/
      AKA_mark("lis===5364###sois===235460###eois===235533###lif===79###soif===3263###eoif===3336###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = readChunk_PLTE(&state->info_png.color, data, chunkLength);
      if(AKA_mark("lis===5365###sois===235544###eois===235556###lif===80###soif===3347###eoif===3359###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5365###sois===235544###eois===235556###lif===80###soif===3347###eoif===3359###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5365###sois===235558###eois===235564###lif===80###soif===3361###eoif===3367###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-5365-###sois===-235544-###eois===-23554412-###lif===-80-###soif===-###eoif===-3359-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
      AKA_mark("lis===5367###sois===235613###eois===235630###lif===82###soif===3416###eoif===3433###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");critical_pos = 2;
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
    } else {
if(AKA_mark("lis===5369###sois===235691###eois===235731###lif===84###soif===3494###eoif===3534###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5369###sois===235691###eois===235731###lif===84###soif===3494###eoif===3534###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "tRNS")))) {
      /*palette transparency chunk (tRNS). Even though this one is an ancillary chunk , it is still compiled
      in without 'LODEPNG_COMPILE_ANCILLARY_CHUNKS' because it contains essential color information that
      affects the alpha channel of pixels. */
      AKA_mark("lis===5373###sois===236005###eois===236078###lif===88###soif===3808###eoif===3881###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = readChunk_tRNS(&state->info_png.color, data, chunkLength);
      if(AKA_mark("lis===5374###sois===236089###eois===236101###lif===89###soif===3892###eoif===3904###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5374###sois===236089###eois===236101###lif===89###soif===3892###eoif===3904###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5374###sois===236103###eois===236109###lif===89###soif===3906###eoif===3912###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-5374-###sois===-236089-###eois===-23608912-###lif===-89-###soif===-###eoif===-3904-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
      /*background color chunk (bKGD)*/
    } else {
if(AKA_mark("lis===5377###sois===236207###eois===236247###lif===92###soif===4010###eoif===4050###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5377###sois===236207###eois===236247###lif===92###soif===4010###eoif===4050###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "bKGD")))) {
      AKA_mark("lis===5378###sois===236258###eois===236325###lif===93###soif===4061###eoif===4128###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = readChunk_bKGD(&state->info_png, data, chunkLength);
      if(AKA_mark("lis===5379###sois===236336###eois===236348###lif===94###soif===4139###eoif===4151###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5379###sois===236336###eois===236348###lif===94###soif===4139###eoif===4151###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5379###sois===236350###eois===236356###lif===94###soif===4153###eoif===4159###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-5379-###sois===-236336-###eois===-23633612-###lif===-94-###soif===-###eoif===-4151-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
    } else {
if(AKA_mark("lis===5380###sois===236372###eois===236412###lif===95###soif===4175###eoif===4215###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5380###sois===236372###eois===236412###lif===95###soif===4175###eoif===4215###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "tEXt")))) {
      /*text chunk (tEXt)*/
      if(AKA_mark("lis===5382###sois===236455###eois===236486###lif===97###soif===4258###eoif===4289###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5382###sois===236455###eois===236486###lif===97###soif===4258###eoif===4289###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->decoder.read_text_chunks))) {
        AKA_mark("lis===5383###sois===236499###eois===236566###lif===98###soif===4302###eoif===4369###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = readChunk_tEXt(&state->info_png, data, chunkLength);
        if(AKA_mark("lis===5384###sois===236579###eois===236591###lif===99###soif===4382###eoif===4394###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5384###sois===236579###eois===236591###lif===99###soif===4382###eoif===4394###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5384###sois===236593###eois===236599###lif===99###soif===4396###eoif===4402###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-5384-###sois===-236579-###eois===-23657912-###lif===-99-###soif===-###eoif===-4394-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
      }
else {
AKA_mark("lis===-5382-###sois===-236455-###eois===-23645531-###lif===-97-###soif===-###eoif===-4289-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
    } else {
if(AKA_mark("lis===5386###sois===236624###eois===236664###lif===101###soif===4427###eoif===4467###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5386###sois===236624###eois===236664###lif===101###soif===4427###eoif===4467###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "zTXt")))) {
      /*compressed text chunk (zTXt)*/
      if(AKA_mark("lis===5388###sois===236718###eois===236749###lif===103###soif===4521###eoif===4552###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5388###sois===236718###eois===236749###lif===103###soif===4521###eoif===4552###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->decoder.read_text_chunks))) {
        AKA_mark("lis===5389###sois===236762###eois===236846###lif===104###soif===4565###eoif===4649###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = readChunk_zTXt(&state->info_png, &state->decoder, data, chunkLength);
        if(AKA_mark("lis===5390###sois===236859###eois===236871###lif===105###soif===4662###eoif===4674###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5390###sois===236859###eois===236871###lif===105###soif===4662###eoif===4674###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5390###sois===236873###eois===236879###lif===105###soif===4676###eoif===4682###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-5390-###sois===-236859-###eois===-23685912-###lif===-105-###soif===-###eoif===-4674-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
      }
else {
AKA_mark("lis===-5388-###sois===-236718-###eois===-23671831-###lif===-103-###soif===-###eoif===-4552-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
    } else {
if(AKA_mark("lis===5392###sois===236904###eois===236944###lif===107###soif===4707###eoif===4747###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5392###sois===236904###eois===236944###lif===107###soif===4707###eoif===4747###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "iTXt")))) {
      /*international text chunk (iTXt)*/
      if(AKA_mark("lis===5394###sois===237001###eois===237032###lif===109###soif===4804###eoif===4835###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5394###sois===237001###eois===237032###lif===109###soif===4804###eoif===4835###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->decoder.read_text_chunks))) {
        AKA_mark("lis===5395###sois===237045###eois===237129###lif===110###soif===4848###eoif===4932###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = readChunk_iTXt(&state->info_png, &state->decoder, data, chunkLength);
        if(AKA_mark("lis===5396###sois===237142###eois===237154###lif===111###soif===4945###eoif===4957###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5396###sois===237142###eois===237154###lif===111###soif===4945###eoif===4957###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5396###sois===237156###eois===237162###lif===111###soif===4959###eoif===4965###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-5396-###sois===-237142-###eois===-23714212-###lif===-111-###soif===-###eoif===-4957-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
      }
else {
AKA_mark("lis===-5394-###sois===-237001-###eois===-23700131-###lif===-109-###soif===-###eoif===-4835-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
    } else {
if(AKA_mark("lis===5398###sois===237187###eois===237227###lif===113###soif===4990###eoif===5030###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5398###sois===237187###eois===237227###lif===113###soif===4990###eoif===5030###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "tIME")))) {
      AKA_mark("lis===5399###sois===237238###eois===237305###lif===114###soif===5041###eoif===5108###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = readChunk_tIME(&state->info_png, data, chunkLength);
      if(AKA_mark("lis===5400###sois===237316###eois===237328###lif===115###soif===5119###eoif===5131###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5400###sois===237316###eois===237328###lif===115###soif===5119###eoif===5131###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5400###sois===237330###eois===237336###lif===115###soif===5133###eoif===5139###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-5400-###sois===-237316-###eois===-23731612-###lif===-115-###soif===-###eoif===-5131-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
    } else {
if(AKA_mark("lis===5401###sois===237352###eois===237392###lif===116###soif===5155###eoif===5195###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5401###sois===237352###eois===237392###lif===116###soif===5155###eoif===5195###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "pHYs")))) {
      AKA_mark("lis===5402###sois===237403###eois===237470###lif===117###soif===5206###eoif===5273###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = readChunk_pHYs(&state->info_png, data, chunkLength);
      if(AKA_mark("lis===5403###sois===237481###eois===237493###lif===118###soif===5284###eoif===5296###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5403###sois===237481###eois===237493###lif===118###soif===5284###eoif===5296###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5403###sois===237495###eois===237501###lif===118###soif===5298###eoif===5304###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-5403-###sois===-237481-###eois===-23748112-###lif===-118-###soif===-###eoif===-5296-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
    } else {
if(AKA_mark("lis===5404###sois===237517###eois===237557###lif===119###soif===5320###eoif===5360###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5404###sois===237517###eois===237557###lif===119###soif===5320###eoif===5360###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "gAMA")))) {
      AKA_mark("lis===5405###sois===237568###eois===237635###lif===120###soif===5371###eoif===5438###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = readChunk_gAMA(&state->info_png, data, chunkLength);
      if(AKA_mark("lis===5406###sois===237646###eois===237658###lif===121###soif===5449###eoif===5461###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5406###sois===237646###eois===237658###lif===121###soif===5449###eoif===5461###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5406###sois===237660###eois===237666###lif===121###soif===5463###eoif===5469###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-5406-###sois===-237646-###eois===-23764612-###lif===-121-###soif===-###eoif===-5461-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
    } else {
if(AKA_mark("lis===5407###sois===237682###eois===237722###lif===122###soif===5485###eoif===5525###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5407###sois===237682###eois===237722###lif===122###soif===5485###eoif===5525###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "cHRM")))) {
      AKA_mark("lis===5408###sois===237733###eois===237800###lif===123###soif===5536###eoif===5603###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = readChunk_cHRM(&state->info_png, data, chunkLength);
      if(AKA_mark("lis===5409###sois===237811###eois===237823###lif===124###soif===5614###eoif===5626###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5409###sois===237811###eois===237823###lif===124###soif===5614###eoif===5626###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5409###sois===237825###eois===237831###lif===124###soif===5628###eoif===5634###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-5409-###sois===-237811-###eois===-23781112-###lif===-124-###soif===-###eoif===-5626-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
    } else {
if(AKA_mark("lis===5410###sois===237847###eois===237887###lif===125###soif===5650###eoif===5690###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5410###sois===237847###eois===237887###lif===125###soif===5650###eoif===5690###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "sRGB")))) {
      AKA_mark("lis===5411###sois===237898###eois===237965###lif===126###soif===5701###eoif===5768###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = readChunk_sRGB(&state->info_png, data, chunkLength);
      if(AKA_mark("lis===5412###sois===237976###eois===237988###lif===127###soif===5779###eoif===5791###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5412###sois===237976###eois===237988###lif===127###soif===5779###eoif===5791###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5412###sois===237990###eois===237996###lif===127###soif===5793###eoif===5799###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-5412-###sois===-237976-###eois===-23797612-###lif===-127-###soif===-###eoif===-5791-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
    } else {
if(AKA_mark("lis===5413###sois===238012###eois===238052###lif===128###soif===5815###eoif===5855###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5413###sois===238012###eois===238052###lif===128###soif===5815###eoif===5855###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "iCCP")))) {
      AKA_mark("lis===5414###sois===238063###eois===238147###lif===129###soif===5866###eoif===5950###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = readChunk_iCCP(&state->info_png, &state->decoder, data, chunkLength);
      if(AKA_mark("lis===5415###sois===238158###eois===238170###lif===130###soif===5961###eoif===5973###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5415###sois===238158###eois===238170###lif===130###soif===5961###eoif===5973###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5415###sois===238172###eois===238178###lif===130###soif===5975###eoif===5981###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-5415-###sois===-238158-###eois===-23815812-###lif===-130-###soif===-###eoif===-5973-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
    } else {
if(AKA_mark("lis===5416###sois===238194###eois===238234###lif===131###soif===5997###eoif===6037###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5416###sois===238194###eois===238234###lif===131###soif===5997###eoif===6037###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "cICP")))) {
      AKA_mark("lis===5417###sois===238245###eois===238312###lif===132###soif===6048###eoif===6115###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = readChunk_cICP(&state->info_png, data, chunkLength);
      if(AKA_mark("lis===5418###sois===238323###eois===238335###lif===133###soif===6126###eoif===6138###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5418###sois===238323###eois===238335###lif===133###soif===6126###eoif===6138###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5418###sois===238337###eois===238343###lif===133###soif===6140###eoif===6146###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-5418-###sois===-238323-###eois===-23832312-###lif===-133-###soif===-###eoif===-6138-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
    } else {
if(AKA_mark("lis===5419###sois===238359###eois===238399###lif===134###soif===6162###eoif===6202###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5419###sois===238359###eois===238399###lif===134###soif===6162###eoif===6202###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "mDCV")))) {
      AKA_mark("lis===5420###sois===238410###eois===238477###lif===135###soif===6213###eoif===6280###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = readChunk_mDCV(&state->info_png, data, chunkLength);
      if(AKA_mark("lis===5421###sois===238488###eois===238500###lif===136###soif===6291###eoif===6303###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5421###sois===238488###eois===238500###lif===136###soif===6291###eoif===6303###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5421###sois===238502###eois===238508###lif===136###soif===6305###eoif===6311###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-5421-###sois===-238488-###eois===-23848812-###lif===-136-###soif===-###eoif===-6303-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
    } else {
if(AKA_mark("lis===5422###sois===238524###eois===238564###lif===137###soif===6327###eoif===6367###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5422###sois===238524###eois===238564###lif===137###soif===6327###eoif===6367###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "cLLI")))) {
      AKA_mark("lis===5423###sois===238575###eois===238642###lif===138###soif===6378###eoif===6445###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = readChunk_cLLI(&state->info_png, data, chunkLength);
      if(AKA_mark("lis===5424###sois===238653###eois===238665###lif===139###soif===6456###eoif===6468###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5424###sois===238653###eois===238665###lif===139###soif===6456###eoif===6468###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5424###sois===238667###eois===238673###lif===139###soif===6470###eoif===6476###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-5424-###sois===-238653-###eois===-23865312-###lif===-139-###soif===-###eoif===-6468-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
    } else {
if(AKA_mark("lis===5425###sois===238689###eois===238729###lif===140###soif===6492###eoif===6532###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5425###sois===238689###eois===238729###lif===140###soif===6492###eoif===6532###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "eXIf")))) {
      AKA_mark("lis===5426###sois===238740###eois===238807###lif===141###soif===6543###eoif===6610###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = readChunk_eXIf(&state->info_png, data, chunkLength);
      if(AKA_mark("lis===5427###sois===238818###eois===238830###lif===142###soif===6621###eoif===6633###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5427###sois===238818###eois===238830###lif===142###soif===6621###eoif===6633###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5427###sois===238832###eois===238838###lif===142###soif===6635###eoif===6641###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-5427-###sois===-238818-###eois===-23881812-###lif===-142-###soif===-###eoif===-6633-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
    } else {
if(AKA_mark("lis===5428###sois===238854###eois===238894###lif===143###soif===6657###eoif===6697###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5428###sois===238854###eois===238894###lif===143###soif===6657###eoif===6697###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_type_equals(chunk, "sBIT")))) {
      AKA_mark("lis===5429###sois===238905###eois===238972###lif===144###soif===6708###eoif===6775###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = readChunk_sBIT(&state->info_png, data, chunkLength);
      if(AKA_mark("lis===5430###sois===238983###eois===238995###lif===145###soif===6786###eoif===6798###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5430###sois===238983###eois===238995###lif===145###soif===6786###eoif===6798###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5430###sois===238997###eois===239003###lif===145###soif===6800###eoif===6806###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-5430-###sois===-238983-###eois===-23898312-###lif===-145-###soif===-###eoif===-6798-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
    } else /*it's not an implemented chunk type, so ignore it: skip over the data*/ {
      if(AKA_mark("lis===5433###sois===239146###eois===239183###lif===148###soif===6949###eoif===6986###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5433###sois===239146###eois===239183###lif===148###soif===6949###eoif===6986###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!lodepng_chunk_type_name_valid(chunk)))) {
        AKA_mark("lis===5434###sois===239196###eois===239227###lif===149###soif===6999###eoif===7030###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_BREAK(state->error, 121); /* invalid chunk type name */
      }
else {
AKA_mark("lis===-5433-###sois===-239146-###eois===-23914637-###lif===-148-###soif===-###eoif===-6986-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
      if(AKA_mark("lis===5436###sois===239278###eois===239307###lif===151###soif===7081###eoif===7110###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5436###sois===239278###eois===239307###lif===151###soif===7081###eoif===7110###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_reserved(chunk)))) {
        AKA_mark("lis===5437###sois===239320###eois===239351###lif===152###soif===7123###eoif===7154###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_BREAK(state->error, 122); /* invalid third lowercase character */
      }
else {
AKA_mark("lis===-5436-###sois===-239278-###eois===-23927829-###lif===-151-###soif===-###eoif===-7110-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}

      /*error: unknown critical chunk (5th bit of first byte of chunk type is 0)*/
      if(AKA_mark("lis===5441###sois===239498###eois===239564###lif===156###soif===7301###eoif===7367###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && ((AKA_mark("lis===5441###sois===239498###eois===239529###lif===156###soif===7301###eoif===7332###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!state->decoder.ignore_critical)) && (AKA_mark("lis===5441###sois===239533###eois===239564###lif===156###soif===7336###eoif===7367###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!lodepng_chunk_ancillary(chunk))))) {
        AKA_mark("lis===5442###sois===239577###eois===239607###lif===157###soif===7380###eoif===7410###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_BREAK(state->error, 69);
      }
else {
AKA_mark("lis===-5441-###sois===-239498-###eois===-23949866-###lif===-156-###soif===-###eoif===-7367-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}

      AKA_mark("lis===5445###sois===239627###eois===239639###lif===160###soif===7430###eoif===7442###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");unknown = 1;
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
      if(AKA_mark("lis===5447###sois===239691###eois===239729###lif===162###soif===7494###eoif===7532###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5447###sois===239691###eois===239729###lif===162###soif===7494###eoif===7532###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->decoder.remember_unknown_chunks))) {
        AKA_mark("lis===5448###sois===239742###eois===239942###lif===163###soif===7545###eoif===7745###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = lodepng_chunk_append(&state->info_png.unknown_chunks_data[critical_pos - 1],
                                            &state->info_png.unknown_chunks_size[critical_pos - 1], chunk);
        if(AKA_mark("lis===5450###sois===239955###eois===239967###lif===165###soif===7758###eoif===7770###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5450###sois===239955###eois===239967###lif===165###soif===7758###eoif===7770###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5450###sois===239969###eois===239975###lif===165###soif===7772###eoif===7778###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");break;
}

else {
AKA_mark("lis===-5450-###sois===-239955-###eois===-23995512-###lif===-165-###soif===-###eoif===-7770-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
      }
else {
AKA_mark("lis===-5447-###sois===-239691-###eois===-23969138-###lif===-162-###soif===-###eoif===-7532-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
    }
}

}

}

}

}

}

}

}

}

}

}

}

}

}

}

}

}

}


    if(AKA_mark("lis===5455###sois===240047###eois===240085###lif===170###soif===7850###eoif===7888###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && ((AKA_mark("lis===5455###sois===240047###eois===240073###lif===170###soif===7850###eoif===7876###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!state->decoder.ignore_crc)) && (AKA_mark("lis===5455###sois===240077###eois===240085###lif===170###soif===7880###eoif===7888###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!unknown)))) /*check CRC if wanted, only on known chunk types*/ {
      if(AKA_mark("lis===5456###sois===240150###eois===240180###lif===171###soif===7953###eoif===7983###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5456###sois===240150###eois===240180###lif===171###soif===7953###eoif===7983###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_chunk_check_crc(chunk)))) {AKA_mark("lis===5456###sois===240182###eois===240212###lif===171###soif===7985###eoif===8015###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");AKA_mark("lis===5456###sois===240182###eois===240212###lif===171###soif===7985###eoif===8015###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");CERROR_BREAK(state->error, 57)}
else {
AKA_mark("lis===-5456-###sois===-240150-###eois===-24015030-###lif===-171-###soif===-###eoif===-7983-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}; /*invalid CRC*/
    }
else {
AKA_mark("lis===-5455-###sois===-240047-###eois===-24004738-###lif===-170-###soif===-###eoif===-7888-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}

    if(AKA_mark("lis===5459###sois===240247###eois===240252###lif===174###soif===8050###eoif===8055###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5459###sois===240247###eois===240252###lif===174###soif===8050###eoif===8055###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!IEND))) {
AKA_mark("lis===5459###sois===240254###eois===240307###lif===174###soif===8057###eoif===8110###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");chunk = lodepng_chunk_next_const(chunk, in + insize);
}

else {
AKA_mark("lis===-5459-###sois===-240247-###eois===-2402475-###lif===-174-###soif===-###eoif===-8055-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
  }

  if(AKA_mark("lis===5462###sois===240321###eois===240418###lif===177###soif===8124###eoif===8221###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (((AKA_mark("lis===5462###sois===240321###eois===240334###lif===177###soif===8124###eoif===8137###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!state->error)) && (AKA_mark("lis===5462###sois===240338###eois===240384###lif===177###soif===8141###eoif===8187###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->info_png.color.colortype == LCT_PALETTE))) && (AKA_mark("lis===5462###sois===240388###eois===240418###lif===177###soif===8191###eoif===8221###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!state->info_png.color.palette)))) {
    AKA_mark("lis===5463###sois===240427###eois===240446###lif===178###soif===8230###eoif===8249###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = 106; /* error: PNG file must have PLTE chunk if color type is palette */
  }
else {
AKA_mark("lis===-5462-###sois===-240321-###eois===-24032197-###lif===-177-###soif===-###eoif===-8221-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}

  if(AKA_mark("lis===5466###sois===240528###eois===240541###lif===181###soif===8331###eoif===8344###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5466###sois===240528###eois===240541###lif===181###soif===8331###eoif===8344###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!state->error))) {
    /*predict output size, to allocate exact size for output buffer to avoid more dynamic allocation.
    If the decompressed size does not match the prediction, the image must be corrupt.*/
    if(AKA_mark("lis===5469###sois===240746###eois===240783###lif===184###soif===8549###eoif===8586###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5469###sois===240746###eois===240783###lif===184###soif===8549###eoif===8586###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->info_png.interlace_method == 0))) {
      AKA_mark("lis===5470###sois===240794###eois===240849###lif===185###soif===8597###eoif===8652###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");unsigned bpp = lodepng_get_bpp(&state->info_png.color);
      AKA_mark("lis===5471###sois===240857###eois===240912###lif===186###soif===8660###eoif===8715###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");expected_size = lodepng_get_raw_size_idat(*w, *h, bpp);
    } else {
      AKA_mark("lis===5473###sois===240934###eois===240989###lif===188###soif===8737###eoif===8792###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");unsigned bpp = lodepng_get_bpp(&state->info_png.color);
      /*Adam-7 interlaced: expected size is the sum of the 7 sub-images sizes*/
      AKA_mark("lis===5475###sois===241078###eois===241096###lif===190###soif===8881###eoif===8899###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");expected_size = 0;
      AKA_mark("lis===5476###sois===241104###eois===241182###lif===191###soif===8907###eoif===8985###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");expected_size += lodepng_get_raw_size_idat((*w + 7) >> 3, (*h + 7) >> 3, bpp);
      if(AKA_mark("lis===5477###sois===241193###eois===241199###lif===192###soif===8996###eoif===9002###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5477###sois===241193###eois===241199###lif===192###soif===8996###eoif===9002###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (*w > 4))) {
AKA_mark("lis===5477###sois===241201###eois===241279###lif===192###soif===9004###eoif===9082###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");expected_size += lodepng_get_raw_size_idat((*w + 3) >> 3, (*h + 7) >> 3, bpp);
}

else {
AKA_mark("lis===-5477-###sois===-241193-###eois===-2411936-###lif===-192-###soif===-###eoif===-9002-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
      AKA_mark("lis===5478###sois===241287###eois===241365###lif===193###soif===9090###eoif===9168###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");expected_size += lodepng_get_raw_size_idat((*w + 3) >> 2, (*h + 3) >> 3, bpp);
      if(AKA_mark("lis===5479###sois===241376###eois===241382###lif===194###soif===9179###eoif===9185###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5479###sois===241376###eois===241382###lif===194###soif===9179###eoif===9185###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (*w > 2))) {
AKA_mark("lis===5479###sois===241384###eois===241462###lif===194###soif===9187###eoif===9265###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");expected_size += lodepng_get_raw_size_idat((*w + 1) >> 2, (*h + 3) >> 2, bpp);
}

else {
AKA_mark("lis===-5479-###sois===-241376-###eois===-2413766-###lif===-194-###soif===-###eoif===-9185-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
      AKA_mark("lis===5480###sois===241470###eois===241548###lif===195###soif===9273###eoif===9351###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");expected_size += lodepng_get_raw_size_idat((*w + 1) >> 1, (*h + 1) >> 2, bpp);
      if(AKA_mark("lis===5481###sois===241559###eois===241565###lif===196###soif===9362###eoif===9368###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5481###sois===241559###eois===241565###lif===196###soif===9362###eoif===9368###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (*w > 1))) {
AKA_mark("lis===5481###sois===241567###eois===241645###lif===196###soif===9370###eoif===9448###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");expected_size += lodepng_get_raw_size_idat((*w + 0) >> 1, (*h + 1) >> 1, bpp);
}

else {
AKA_mark("lis===-5481-###sois===-241559-###eois===-2415596-###lif===-196-###soif===-###eoif===-9368-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
      AKA_mark("lis===5482###sois===241653###eois===241726###lif===197###soif===9456###eoif===9529###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");expected_size += lodepng_get_raw_size_idat((*w + 0), (*h + 0) >> 1, bpp);
    }

    AKA_mark("lis===5485###sois===241741###eois===241862###lif===200###soif===9544###eoif===9665###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = zlib_decompress(&scanlines, &scanlines_size, expected_size, idat, idatsize, &state->decoder.zlibsettings);
  }
else {
AKA_mark("lis===-5466-###sois===-240528-###eois===-24052813-###lif===-181-###soif===-###eoif===-8344-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
  if(AKA_mark("lis===5487###sois===241874###eois===241922###lif===202###soif===9677###eoif===9725###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && ((AKA_mark("lis===5487###sois===241874###eois===241887###lif===202###soif===9677###eoif===9690###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!state->error)) && (AKA_mark("lis===5487###sois===241891###eois===241922###lif===202###soif===9694###eoif===9725###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (scanlines_size != expected_size)))) {
AKA_mark("lis===5487###sois===241924###eois===241942###lif===202###soif===9727###eoif===9745###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = 91;
}

else {
AKA_mark("lis===-5487-###sois===-241874-###eois===-24187448-###lif===-202-###soif===-###eoif===-9725-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
} /*decompressed size doesn't match prediction*/
  AKA_mark("lis===5488###sois===241993###eois===242012###lif===203###soif===9796###eoif===9815###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");lodepng_free(idat);

  if(AKA_mark("lis===5490###sois===242021###eois===242034###lif===205###soif===9824###eoif===9837###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5490###sois===242021###eois===242034###lif===205###soif===9824###eoif===9837###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!state->error))) {
    AKA_mark("lis===5491###sois===242043###eois===242106###lif===206###soif===9846###eoif===9909###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");outsize = lodepng_get_raw_size(*w, *h, &state->info_png.color);
    AKA_mark("lis===5492###sois===242112###eois===242159###lif===207###soif===9915###eoif===9962###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");*out = (unsigned char*)lodepng_malloc(outsize);
    if(AKA_mark("lis===5493###sois===242168###eois===242173###lif===208###soif===9971###eoif===9976###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5493###sois===242168###eois===242173###lif===208###soif===9971###eoif===9976###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!*out))) {
AKA_mark("lis===5493###sois===242175###eois===242193###lif===208###soif===9978###eoif===9996###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = 83;
}

else {
AKA_mark("lis===-5493-###sois===-242168-###eois===-2421685-###lif===-208-###soif===-###eoif===-9976-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
} /*alloc fail*/
  }
else {
AKA_mark("lis===-5490-###sois===-242021-###eois===-24202113-###lif===-205-###soif===-###eoif===-9837-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
  if(AKA_mark("lis===5495###sois===242220###eois===242233###lif===210###soif===10023###eoif===10036###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5495###sois===242220###eois===242233###lif===210###soif===10023###eoif===10036###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!state->error))) {
    AKA_mark("lis===5496###sois===242242###eois===242275###lif===211###soif===10045###eoif===10078###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");lodepng_memset(*out, 0, outsize);
    AKA_mark("lis===5497###sois===242281###eois===242360###lif===212###soif===10084###eoif===10163###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = postProcessScanlines(*out, scanlines, *w, *h, &state->info_png);
  }
else {
AKA_mark("lis===-5495-###sois===-242220-###eois===-24222013-###lif===-210-###soif===-###eoif===-10036-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
  AKA_mark("lis===5499###sois===242369###eois===242393###lif===214###soif===10172###eoif===10196###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\decodeGeneric(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");lodepng_free(scanlines);
}

/** Instrumented function lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t) */
unsigned lodepng_decode(unsigned char** out, unsigned* w, unsigned* h,
                        LodePNGState* state,
                        const unsigned char* in, size_t insize) /* << Aka begin of function unsigned lodepng_decode(unsigned char** out, unsigned* w, unsigned* h,
                        LodePNGState* state,
                        const unsigned char* in, size_t insize) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_decode.242409.stub"

  AKA_mark("lis===5505###sois===242587###eois===242596###lif===3###soif===187###eoif===196###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");*out = 0;
  AKA_mark("lis===5506###sois===242600###eois===242644###lif===4###soif===200###eoif===244###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");decodeGeneric(out, w, h, state, in, insize);
  if(AKA_mark("lis===5507###sois===242651###eois===242663###lif===5###soif===251###eoif===263###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5507###sois===242651###eois===242663###lif===5###soif===251###eoif===263###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5507###sois===242665###eois===242685###lif===5###soif===265###eoif===285###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");return state->error;
}

else {
AKA_mark("lis===-5507-###sois===-242651-###eois===-24265112-###lif===-5-###soif===-###eoif===-263-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
  if(AKA_mark("lis===5508###sois===242692###eois===242791###lif===6###soif===292###eoif===391###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && ((AKA_mark("lis===5508###sois===242692###eois===242721###lif===6###soif===292###eoif===321###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!state->decoder.color_convert)) || (AKA_mark("lis===5508###sois===242725###eois===242791###lif===6###soif===325###eoif===391###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (lodepng_color_mode_equal(&state->info_raw, &state->info_png.color))))) {
    /*same color type, no copying or converting of data needed*/
    /*store the info_png color settings on the info_raw so that the info_raw still reflects what colortype
    the raw image has to the end user*/
    if(AKA_mark("lis===5512###sois===243018###eois===243047###lif===10###soif===618###eoif===647###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5512###sois===243018###eois===243047###lif===10###soif===618###eoif===647###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!state->decoder.color_convert))) {
      AKA_mark("lis===5513###sois===243058###eois===243139###lif===11###soif===658###eoif===739###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = lodepng_color_mode_copy(&state->info_raw, &state->info_png.color);
      if(AKA_mark("lis===5514###sois===243150###eois===243162###lif===12###soif===750###eoif===762###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5514###sois===243150###eois===243162###lif===12###soif===750###eoif===762###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (state->error))) {
AKA_mark("lis===5514###sois===243164###eois===243184###lif===12###soif===764###eoif===784###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");return state->error;
}

else {
AKA_mark("lis===-5514-###sois===-243150-###eois===-24315012-###lif===-12-###soif===-###eoif===-762-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
    }
else {
AKA_mark("lis===-5512-###sois===-243018-###eois===-24301829-###lif===-10-###soif===-###eoif===-647-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}
  } else { /*color conversion needed*/
    AKA_mark("lis===5517###sois===243237###eois===243264###lif===15###soif===837###eoif===864###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");unsigned char* data = *out;
    AKA_mark("lis===5518###sois===243270###eois===243285###lif===16###soif===870###eoif===885###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");size_t outsize;

    /*TODO: check if this works according to the statement in the documentation: "The converter can convert
    from grayscale input color type, to 8-bit grayscale or grayscale with alpha"*/
    if(AKA_mark("lis===5522###sois===243489###eois===243613###lif===20###soif===1089###eoif===1213###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && ((AKA_mark("lis===5522###sois===243489###eois===243569###lif===20###soif===1089###eoif===1169###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!(state->info_raw.colortype == LCT_RGB || state->info_raw.colortype == LCT_RGBA)))
       && (AKA_mark("lis===5523###sois===243581###eois===243613###lif===21###soif===1181###eoif===1213###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!(state->info_raw.bitdepth == 8))))) {
      AKA_mark("lis===5524###sois===243624###eois===243634###lif===22###soif===1224###eoif===1234###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");return 56; /*unsupported color mode conversion*/
    }
else {
AKA_mark("lis===-5522-###sois===-243489-###eois===-243489124-###lif===-20-###soif===-###eoif===-1213-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");
}

    AKA_mark("lis===5527###sois===243687###eois===243744###lif===25###soif===1287###eoif===1344###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");outsize = lodepng_get_raw_size(*w, *h, &state->info_raw);
    AKA_mark("lis===5528###sois===243750###eois===243797###lif===26###soif===1350###eoif===1397###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");*out = (unsigned char*)lodepng_malloc(outsize);
    if(AKA_mark("lis===5529###sois===243806###eois===243813###lif===27###soif===1406###eoif===1413###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (AKA_mark("lis===5529###sois===243806###eois===243813###lif===27###soif===1406###eoif===1413###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)") && (!(*out)))) {
      AKA_mark("lis===5530###sois===243824###eois===243842###lif===28###soif===1424###eoif===1442###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = 83; /*alloc fail*/
    }
    else {
AKA_mark("lis===5532###sois===243875###eois===244009###lif===30###soif===1475###eoif===1609###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");state->error = lodepng_convert(*out, data, &state->info_raw,
                                        &state->info_png.color, *w, *h);
}

    AKA_mark("lis===5534###sois===244015###eois===244034###lif===32###soif===1615###eoif===1634###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");lodepng_free(data);
  }
  AKA_mark("lis===5536###sois===244043###eois===244063###lif===34###soif===1643###eoif===1663###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode(unsigned char**,unsigned*,unsigned*,LodePNGState*,unsigned char const*,size_t)");return state->error;
}

/** Instrumented function lodepng_decode_memory(unsigned char**,unsigned*,unsigned*,unsigned char const*,size_t,LodePNGColorType,unsigned) */
unsigned lodepng_decode_memory(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in,
                               size_t insize, LodePNGColorType colortype, unsigned bitdepth) /* << Aka begin of function unsigned lodepng_decode_memory(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in,
                               size_t insize, LodePNGColorType colortype, unsigned bitdepth) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_memory(unsigned char**,unsigned*,unsigned*,unsigned char const*,size_t,LodePNGColorType,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_decode_memory.244079.stub"

  AKA_mark("lis===5541###sois===244272###eois===244287###lif===2###soif===202###eoif===217###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_memory(unsigned char**,unsigned*,unsigned*,unsigned char const*,size_t,LodePNGColorType,unsigned)");unsigned error;
  AKA_mark("lis===5542###sois===244291###eois===244310###lif===3###soif===221###eoif===240###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_memory(unsigned char**,unsigned*,unsigned*,unsigned char const*,size_t,LodePNGColorType,unsigned)");LodePNGState state;
  AKA_mark("lis===5543###sois===244314###eois===244341###lif===4###soif===244###eoif===271###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_memory(unsigned char**,unsigned*,unsigned*,unsigned char const*,size_t,LodePNGColorType,unsigned)");lodepng_state_init(&state);
  AKA_mark("lis===5544###sois===244345###eois===244382###lif===5###soif===275###eoif===312###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_memory(unsigned char**,unsigned*,unsigned*,unsigned char const*,size_t,LodePNGColorType,unsigned)");state.info_raw.colortype = colortype;
  AKA_mark("lis===5545###sois===244386###eois===244421###lif===6###soif===316###eoif===351###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_memory(unsigned char**,unsigned*,unsigned*,unsigned char const*,size_t,LodePNGColorType,unsigned)");state.info_raw.bitdepth = bitdepth;
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
  /*disable reading things that this function doesn't output*/
  AKA_mark("lis===5548###sois===244530###eois===244565###lif===9###soif===460###eoif===495###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_memory(unsigned char**,unsigned*,unsigned*,unsigned char const*,size_t,LodePNGColorType,unsigned)");state.decoder.read_text_chunks = 0;
  AKA_mark("lis===5549###sois===244569###eois===244611###lif===10###soif===499###eoif===541###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_memory(unsigned char**,unsigned*,unsigned*,unsigned char const*,size_t,LodePNGColorType,unsigned)");state.decoder.remember_unknown_chunks = 0;
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
  AKA_mark("lis===5551###sois===244660###eois===244714###lif===12###soif===590###eoif===644###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_memory(unsigned char**,unsigned*,unsigned*,unsigned char const*,size_t,LodePNGColorType,unsigned)");error = lodepng_decode(out, w, h, &state, in, insize);
  AKA_mark("lis===5552###sois===244718###eois===244748###lif===13###soif===648###eoif===678###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_memory(unsigned char**,unsigned*,unsigned*,unsigned char const*,size_t,LodePNGColorType,unsigned)");lodepng_state_cleanup(&state);
  AKA_mark("lis===5553###sois===244752###eois===244765###lif===14###soif===682###eoif===695###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_memory(unsigned char**,unsigned*,unsigned*,unsigned char const*,size_t,LodePNGColorType,unsigned)");return error;
}

/** Instrumented function lodepng_decode32(unsigned char**,unsigned*,unsigned*,unsigned char const*,size_t) */
unsigned lodepng_decode32(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize) /* << Aka begin of function unsigned lodepng_decode32(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode32(unsigned char**,unsigned*,unsigned*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_decode32.244781.stub"

  AKA_mark("lis===5557###sois===244890###eois===244955###lif===1###soif===118###eoif===183###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode32(unsigned char**,unsigned*,unsigned*,unsigned char const*,size_t)");return lodepng_decode_memory(out, w, h, in, insize, LCT_RGBA, 8);
}

/** Instrumented function lodepng_decode24(unsigned char**,unsigned*,unsigned*,unsigned char const*,size_t) */
unsigned lodepng_decode24(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize) /* << Aka begin of function unsigned lodepng_decode24(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode24(unsigned char**,unsigned*,unsigned*,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_decode24.244971.stub"

  AKA_mark("lis===5561###sois===245080###eois===245144###lif===1###soif===118###eoif===182###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode24(unsigned char**,unsigned*,unsigned*,unsigned char const*,size_t)");return lodepng_decode_memory(out, w, h, in, insize, LCT_RGB, 8);
}

#ifdef LODEPNG_COMPILE_DISK
/** Instrumented function lodepng_decode_file(unsigned char**,unsigned*,unsigned*,char const*,LodePNGColorType,unsigned) */
unsigned lodepng_decode_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename,
                             LodePNGColorType colortype, unsigned bitdepth) /* << Aka begin of function unsigned lodepng_decode_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename,
                             LodePNGColorType colortype, unsigned bitdepth) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_file(unsigned char**,unsigned*,unsigned*,char const*,LodePNGColorType,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_decode_file.245189.stub"

  AKA_mark("lis===5567###sois===245360###eois===245386###lif===2###soif===180###eoif===206###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_file(unsigned char**,unsigned*,unsigned*,char const*,LodePNGColorType,unsigned)");unsigned char* buffer = 0;
  AKA_mark("lis===5568###sois===245390###eois===245408###lif===3###soif===210###eoif===228###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_file(unsigned char**,unsigned*,unsigned*,char const*,LodePNGColorType,unsigned)");size_t buffersize;
  AKA_mark("lis===5569###sois===245412###eois===245427###lif===4###soif===232###eoif===247###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_file(unsigned char**,unsigned*,unsigned*,char const*,LodePNGColorType,unsigned)");unsigned error;
  /* safe output values in case error happens */
  AKA_mark("lis===5571###sois===245481###eois===245490###lif===6###soif===301###eoif===310###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_file(unsigned char**,unsigned*,unsigned*,char const*,LodePNGColorType,unsigned)");*out = 0;
  AKA_mark("lis===5572###sois===245494###eois===245506###lif===7###soif===314###eoif===326###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_file(unsigned char**,unsigned*,unsigned*,char const*,LodePNGColorType,unsigned)");*w = *h = 0;
  AKA_mark("lis===5573###sois===245510###eois===245568###lif===8###soif===330###eoif===388###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_file(unsigned char**,unsigned*,unsigned*,char const*,LodePNGColorType,unsigned)");error = lodepng_load_file(&buffer, &buffersize, filename);
  if(AKA_mark("lis===5574###sois===245575###eois===245581###lif===9###soif===395###eoif===401###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_file(unsigned char**,unsigned*,unsigned*,char const*,LodePNGColorType,unsigned)") && (AKA_mark("lis===5574###sois===245575###eois===245581###lif===9###soif===395###eoif===401###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_file(unsigned char**,unsigned*,unsigned*,char const*,LodePNGColorType,unsigned)") && (!error))) {
AKA_mark("lis===5574###sois===245583###eois===245665###lif===9###soif===403###eoif===485###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_file(unsigned char**,unsigned*,unsigned*,char const*,LodePNGColorType,unsigned)");error = lodepng_decode_memory(out, w, h, buffer, buffersize, colortype, bitdepth);
}

else {
AKA_mark("lis===-5574-###sois===-245575-###eois===-2455756-###lif===-9-###soif===-###eoif===-401-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_file(unsigned char**,unsigned*,unsigned*,char const*,LodePNGColorType,unsigned)");
}
  AKA_mark("lis===5575###sois===245669###eois===245690###lif===10###soif===489###eoif===510###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_file(unsigned char**,unsigned*,unsigned*,char const*,LodePNGColorType,unsigned)");lodepng_free(buffer);
  AKA_mark("lis===5576###sois===245694###eois===245707###lif===11###soif===514###eoif===527###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode_file(unsigned char**,unsigned*,unsigned*,char const*,LodePNGColorType,unsigned)");return error;
}

/** Instrumented function lodepng_decode32_file(unsigned char**,unsigned*,unsigned*,char const*) */
unsigned lodepng_decode32_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename) /* << Aka begin of function unsigned lodepng_decode32_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode32_file(unsigned char**,unsigned*,unsigned*,char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_decode32_file.245723.stub"

  AKA_mark("lis===5580###sois===245819###eois===245880###lif===1###soif===105###eoif===166###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode32_file(unsigned char**,unsigned*,unsigned*,char const*)");return lodepng_decode_file(out, w, h, filename, LCT_RGBA, 8);
}

/** Instrumented function lodepng_decode24_file(unsigned char**,unsigned*,unsigned*,char const*) */
unsigned lodepng_decode24_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename) /* << Aka begin of function unsigned lodepng_decode24_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode24_file(unsigned char**,unsigned*,unsigned*,char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_decode24_file.245896.stub"

  AKA_mark("lis===5584###sois===245992###eois===246052###lif===1###soif===105###eoif===165###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decode24_file(unsigned char**,unsigned*,unsigned*,char const*)");return lodepng_decode_file(out, w, h, filename, LCT_RGB, 8);
}
#endif /*LODEPNG_COMPILE_DISK*/

/** Instrumented function lodepng_decoder_settings_init(LodePNGDecoderSettings*) */
void lodepng_decoder_settings_init(LodePNGDecoderSettings* settings) /* << Aka begin of function void lodepng_decoder_settings_init(LodePNGDecoderSettings* settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decoder_settings_init(LodePNGDecoderSettings*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_decoder_settings_init.246097.stub"

  AKA_mark("lis===5589###sois===246166###eois===246194###lif===1###soif===74###eoif===102###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decoder_settings_init(LodePNGDecoderSettings*)");settings->color_convert = 1;
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
  AKA_mark("lis===5591###sois===246239###eois===246270###lif===3###soif===147###eoif===178###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decoder_settings_init(LodePNGDecoderSettings*)");settings->read_text_chunks = 1;
  AKA_mark("lis===5592###sois===246274###eois===246312###lif===4###soif===182###eoif===220###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decoder_settings_init(LodePNGDecoderSettings*)");settings->remember_unknown_chunks = 0;
  AKA_mark("lis===5593###sois===246316###eois===246351###lif===5###soif===224###eoif===259###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decoder_settings_init(LodePNGDecoderSettings*)");settings->max_text_size = 16777216;
  AKA_mark("lis===5594###sois===246355###eois===246389###lif===6###soif===263###eoif===297###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decoder_settings_init(LodePNGDecoderSettings*)");settings->max_icc_size = 16777216; /* 16MB is much more than enough for any reasonable ICC profile */
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
  AKA_mark("lis===5596###sois===246505###eois===246530###lif===8###soif===413###eoif===438###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decoder_settings_init(LodePNGDecoderSettings*)");settings->ignore_crc = 0;
  AKA_mark("lis===5597###sois===246534###eois===246564###lif===9###soif===442###eoif===472###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decoder_settings_init(LodePNGDecoderSettings*)");settings->ignore_critical = 0;
  AKA_mark("lis===5598###sois===246568###eois===246593###lif===10###soif===476###eoif===501###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decoder_settings_init(LodePNGDecoderSettings*)");settings->ignore_end = 0;
  AKA_mark("lis===5599###sois===246597###eois===246655###lif===11###soif===505###eoif===563###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_decoder_settings_init(LodePNGDecoderSettings*)");lodepng_decompress_settings_init(&settings->zlibsettings);
}

#endif /*LODEPNG_COMPILE_DECODER*/

#if defined(LODEPNG_COMPILE_DECODER) || defined(LODEPNG_COMPILE_ENCODER)

/** Instrumented function lodepng_state_init(LodePNGState*) */
void lodepng_state_init(LodePNGState* state) /* << Aka begin of function void lodepng_state_init(LodePNGState* state) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_init(LodePNGState*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_state_init.246781.stub"

#ifdef LODEPNG_COMPILE_DECODER
  AKA_mark("lis===5608###sois===246858###eois===246905###lif===2###soif===82###eoif===129###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_init(LodePNGState*)");lodepng_decoder_settings_init(&state->decoder);
#endif /*LODEPNG_COMPILE_DECODER*/
#ifdef LODEPNG_COMPILE_ENCODER
  AKA_mark("lis===5611###sois===246977###eois===247024###lif===5###soif===201###eoif===248###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_init(LodePNGState*)");lodepng_encoder_settings_init(&state->encoder);
#endif /*LODEPNG_COMPILE_ENCODER*/
  AKA_mark("lis===5613###sois===247064###eois===247106###lif===7###soif===288###eoif===330###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_init(LodePNGState*)");lodepng_color_mode_init(&state->info_raw);
  AKA_mark("lis===5614###sois===247110###eois===247146###lif===8###soif===334###eoif===370###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_init(LodePNGState*)");lodepng_info_init(&state->info_png);
  AKA_mark("lis===5615###sois===247150###eois===247167###lif===9###soif===374###eoif===391###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_init(LodePNGState*)");state->error = 1;
}

/** Instrumented function lodepng_state_cleanup(LodePNGState*) */
void lodepng_state_cleanup(LodePNGState* state) /* << Aka begin of function void lodepng_state_cleanup(LodePNGState* state) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_cleanup(LodePNGState*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_state_cleanup.247179.stub"

  AKA_mark("lis===5619###sois===247227###eois===247272###lif===1###soif===53###eoif===98###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_cleanup(LodePNGState*)");lodepng_color_mode_cleanup(&state->info_raw);
  AKA_mark("lis===5620###sois===247276###eois===247315###lif===2###soif===102###eoif===141###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_cleanup(LodePNGState*)");lodepng_info_cleanup(&state->info_png);
}

/** Instrumented function lodepng_state_copy(LodePNGState*,LodePNGState const*) */
void lodepng_state_copy(LodePNGState* dest, const LodePNGState* source) /* << Aka begin of function void lodepng_state_copy(LodePNGState* dest, const LodePNGState* source) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_copy(LodePNGState*,LodePNGState const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_state_copy.247327.stub"

  AKA_mark("lis===5624###sois===247399###eois===247427###lif===1###soif===77###eoif===105###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_copy(LodePNGState*,LodePNGState const*)");lodepng_state_cleanup(dest);
  AKA_mark("lis===5625###sois===247431###eois===247447###lif===2###soif===109###eoif===125###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_copy(LodePNGState*,LodePNGState const*)");*dest = *source;
  AKA_mark("lis===5626###sois===247451###eois===247492###lif===3###soif===129###eoif===170###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_copy(LodePNGState*,LodePNGState const*)");lodepng_color_mode_init(&dest->info_raw);
  AKA_mark("lis===5627###sois===247496###eois===247531###lif===4###soif===174###eoif===209###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_copy(LodePNGState*,LodePNGState const*)");lodepng_info_init(&dest->info_png);
  AKA_mark("lis===5628###sois===247535###eois===247609###lif===5###soif===213###eoif===287###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_copy(LodePNGState*,LodePNGState const*)");dest->error = lodepng_color_mode_copy(&dest->info_raw, &source->info_raw); if(AKA_mark("lis===5628###sois===247613###eois===247624###lif===5###soif===291###eoif===302###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_copy(LodePNGState*,LodePNGState const*)") && (AKA_mark("lis===5628###sois===247613###eois===247624###lif===5###soif===291###eoif===302###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_copy(LodePNGState*,LodePNGState const*)") && (dest->error))) {
AKA_mark("lis===5628###sois===247626###eois===247633###lif===5###soif===304###eoif===311###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_copy(LodePNGState*,LodePNGState const*)");return;
}

else {
AKA_mark("lis===-5628-###sois===-247613-###eois===-24761311-###lif===-5-###soif===-###eoif===-302-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_copy(LodePNGState*,LodePNGState const*)");
}
  AKA_mark("lis===5629###sois===247637###eois===247705###lif===6###soif===315###eoif===383###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_copy(LodePNGState*,LodePNGState const*)");dest->error = lodepng_info_copy(&dest->info_png, &source->info_png); if(AKA_mark("lis===5629###sois===247709###eois===247720###lif===6###soif===387###eoif===398###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_copy(LodePNGState*,LodePNGState const*)") && (AKA_mark("lis===5629###sois===247709###eois===247720###lif===6###soif===387###eoif===398###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_copy(LodePNGState*,LodePNGState const*)") && (dest->error))) {
AKA_mark("lis===5629###sois===247722###eois===247729###lif===6###soif===400###eoif===407###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_copy(LodePNGState*,LodePNGState const*)");return;
}

else {
AKA_mark("lis===-5629-###sois===-247709-###eois===-24770911-###lif===-6-###soif===-###eoif===-398-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_state_copy(LodePNGState*,LodePNGState const*)");
}
}

#endif /* defined(LODEPNG_COMPILE_DECODER) || defined(LODEPNG_COMPILE_ENCODER) */

#ifdef LODEPNG_COMPILE_ENCODER

/* ////////////////////////////////////////////////////////////////////////// */
/* / PNG Encoder                                                            / */
/* ////////////////////////////////////////////////////////////////////////// */


/** Instrumented function writeSignature(ucvector*) */
static unsigned writeSignature(ucvector* out) /* << Aka begin of function unsigned writeSignature(ucvector* out) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\writeSignature(ucvector*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.writeSignature.248121.stub"

  AKA_mark("lis===5642###sois===248156###eois===248179###lif===1###soif===51###eoif===74###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeSignature(ucvector*)");size_t pos = out->size;
  AKA_mark("lis===5643###sois===248183###eois===248251###lif===2###soif===78###eoif===146###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeSignature(ucvector*)");const unsigned char signature[] = {137, 80, 78, 71, 13, 10, 26, 10};
  /*8 bytes PNG signature, aka the magic bytes*/
  if(AKA_mark("lis===5645###sois===248308###eois===248344###lif===4###soif===203###eoif===239###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeSignature(ucvector*)") && (AKA_mark("lis===5645###sois===248308###eois===248344###lif===4###soif===203###eoif===239###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeSignature(ucvector*)") && (!ucvector_resize(out, out->size + 8)))) {
AKA_mark("lis===5645###sois===248346###eois===248356###lif===4###soif===241###eoif===251###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeSignature(ucvector*)");return 83;
}

else {
AKA_mark("lis===-5645-###sois===-248308-###eois===-24830836-###lif===-4-###soif===-###eoif===-239-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeSignature(ucvector*)");
} /*alloc fail*/
  AKA_mark("lis===5646###sois===248375###eois===248421###lif===5###soif===270###eoif===316###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeSignature(ucvector*)");lodepng_memcpy(out->data + pos, signature, 8);
  AKA_mark("lis===5647###sois===248425###eois===248434###lif===6###soif===320###eoif===329###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\writeSignature(ucvector*)");return 0;
}

/** Instrumented function addChunk_IHDR(ucvector*,unsigned,unsigned,LodePNGColorType,unsigned,unsigned) */
static unsigned addChunk_IHDR(ucvector* out, unsigned w, unsigned h,
                              LodePNGColorType colortype, unsigned bitdepth, unsigned interlace_method) /* << Aka begin of function unsigned addChunk_IHDR(ucvector* out, unsigned w, unsigned h,
                              LodePNGColorType colortype, unsigned bitdepth, unsigned interlace_method) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IHDR(ucvector*,unsigned,unsigned,LodePNGColorType,unsigned,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addChunk_IHDR.248457.stub"

  AKA_mark("lis===5652###sois===248620###eois===248648###lif===2###soif===179###eoif===207###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IHDR(ucvector*,unsigned,unsigned,LodePNGColorType,unsigned,unsigned)");unsigned char *chunk, *data;
  AKA_mark("lis===5653###sois===248652###eois===248714###lif===3###soif===211###eoif===273###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IHDR(ucvector*,unsigned,unsigned,LodePNGColorType,unsigned,unsigned)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, 13, "IHDR"));
  AKA_mark("lis===5654###sois===248719###eois===248736###lif===4###soif===278###eoif===295###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IHDR(ucvector*,unsigned,unsigned,LodePNGColorType,unsigned,unsigned)");data = chunk + 8;

  AKA_mark("lis===5656###sois===248742###eois===248775###lif===6###soif===301###eoif===334###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IHDR(ucvector*,unsigned,unsigned,LodePNGColorType,unsigned,unsigned)");lodepng_set32bitInt(data + 0, w); /*width*/
  AKA_mark("lis===5657###sois===248789###eois===248822###lif===7###soif===348###eoif===381###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IHDR(ucvector*,unsigned,unsigned,LodePNGColorType,unsigned,unsigned)");lodepng_set32bitInt(data + 4, h); /*height*/
  AKA_mark("lis===5658###sois===248837###eois===248871###lif===8###soif===396###eoif===430###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IHDR(ucvector*,unsigned,unsigned,LodePNGColorType,unsigned,unsigned)");data[8] = (unsigned char)bitdepth; /*bit depth*/
  AKA_mark("lis===5659###sois===248889###eois===248924###lif===9###soif===448###eoif===483###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IHDR(ucvector*,unsigned,unsigned,LodePNGColorType,unsigned,unsigned)");data[9] = (unsigned char)colortype; /*color type*/
  AKA_mark("lis===5660###sois===248943###eois===248956###lif===10###soif===502###eoif===515###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IHDR(ucvector*,unsigned,unsigned,LodePNGColorType,unsigned,unsigned)");data[10] = 0; /*compression method*/
  AKA_mark("lis===5661###sois===248983###eois===248996###lif===11###soif===542###eoif===555###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IHDR(ucvector*,unsigned,unsigned,LodePNGColorType,unsigned,unsigned)");data[11] = 0; /*filter method*/
  AKA_mark("lis===5662###sois===249018###eois===249046###lif===12###soif===577###eoif===605###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IHDR(ucvector*,unsigned,unsigned,LodePNGColorType,unsigned,unsigned)");data[12] = interlace_method; /*interlace method*/

  AKA_mark("lis===5664###sois===249073###eois===249107###lif===14###soif===632###eoif===666###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IHDR(ucvector*,unsigned,unsigned,LodePNGColorType,unsigned,unsigned)");lodepng_chunk_generate_crc(chunk);
  AKA_mark("lis===5665###sois===249111###eois===249120###lif===15###soif===670###eoif===679###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IHDR(ucvector*,unsigned,unsigned,LodePNGColorType,unsigned,unsigned)");return 0;
}

/* only adds the chunk if needed (there is a key or palette with alpha) */
/** Instrumented function addChunk_PLTE(ucvector*,LodePNGColorMode const*) */
static unsigned addChunk_PLTE(ucvector* out, const LodePNGColorMode* info) /* << Aka begin of function unsigned addChunk_PLTE(ucvector* out, const LodePNGColorMode* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_PLTE(ucvector*,LodePNGColorMode const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addChunk_PLTE.249219.stub"

  AKA_mark("lis===5670###sois===249283###eois===249304###lif===1###soif===80###eoif===101###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_PLTE(ucvector*,LodePNGColorMode const*)");unsigned char* chunk;
  AKA_mark("lis===5671###sois===249308###eois===249324###lif===2###soif===105###eoif===121###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_PLTE(ucvector*,LodePNGColorMode const*)");size_t i, j = 8;

  if(AKA_mark("lis===5673###sois===249333###eois===249382###lif===4###soif===130###eoif===179###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_PLTE(ucvector*,LodePNGColorMode const*)") && ((AKA_mark("lis===5673###sois===249333###eois===249355###lif===4###soif===130###eoif===152###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_PLTE(ucvector*,LodePNGColorMode const*)") && (info->palettesize == 0)) || (AKA_mark("lis===5673###sois===249359###eois===249382###lif===4###soif===156###eoif===179###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_PLTE(ucvector*,LodePNGColorMode const*)") && (info->palettesize > 256)))) {
    AKA_mark("lis===5674###sois===249391###eois===249401###lif===5###soif===188###eoif===198###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_PLTE(ucvector*,LodePNGColorMode const*)");return 68; /*invalid palette size, it is only allowed to be 1-256*/
  }
else {
AKA_mark("lis===-5673-###sois===-249333-###eois===-24933349-###lif===-4-###soif===-###eoif===-179-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_PLTE(ucvector*,LodePNGColorMode const*)");
}

  AKA_mark("lis===5677###sois===249469###eois===249550###lif===8###soif===266###eoif===347###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_PLTE(ucvector*,LodePNGColorMode const*)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, info->palettesize * 3, "PLTE"));

  int AKA_BLOCK_LOOP_249557 = 0;
    AKA_mark("lis===5679###sois===249561###eois===249567###lif===10###soif===358###eoif===364###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_PLTE(ucvector*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===5679###sois===249568###eois===249590###lif===10###soif===365###eoif===387###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_PLTE(ucvector*,LodePNGColorMode const*)") && (AKA_mark("lis===5679###sois===249568###eois===249590###lif===10###soif===365###eoif===387###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_PLTE(ucvector*,LodePNGColorMode const*)") && (i != info->palettesize)); ({AKA_mark("lis===5679###sois===249592###eois===249595###lif===10###soif===389###eoif===392###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_PLTE(ucvector*,LodePNGColorMode const*)");++i;})) {
        AKA_BLOCK_LOOP_249557++;
        if (AKA_BLOCK_LOOP_249557 > 1000) {
            //break;
        }
    /*add all channels except alpha channel*/
    AKA_mark("lis===5681###sois===249651###eois===249689###lif===12###soif===448###eoif===486###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_PLTE(ucvector*,LodePNGColorMode const*)");chunk[j++] = info->palette[i * 4 + 0];
    AKA_mark("lis===5682###sois===249695###eois===249733###lif===13###soif===492###eoif===530###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_PLTE(ucvector*,LodePNGColorMode const*)");chunk[j++] = info->palette[i * 4 + 1];
    AKA_mark("lis===5683###sois===249739###eois===249777###lif===14###soif===536###eoif===574###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_PLTE(ucvector*,LodePNGColorMode const*)");chunk[j++] = info->palette[i * 4 + 2];
  }

  AKA_mark("lis===5686###sois===249788###eois===249822###lif===17###soif===585###eoif===619###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_PLTE(ucvector*,LodePNGColorMode const*)");lodepng_chunk_generate_crc(chunk);
  AKA_mark("lis===5687###sois===249826###eois===249835###lif===18###soif===623###eoif===632###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_PLTE(ucvector*,LodePNGColorMode const*)");return 0;
}

/** Instrumented function addChunk_tRNS(ucvector*,LodePNGColorMode const*) */
static unsigned addChunk_tRNS(ucvector* out, const LodePNGColorMode* info) /* << Aka begin of function unsigned addChunk_tRNS(ucvector* out, const LodePNGColorMode* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addChunk_tRNS.249858.stub"

  AKA_mark("lis===5691###sois===249922###eois===249947###lif===1###soif===80###eoif===105###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");unsigned char* chunk = 0;

  if(AKA_mark("lis===5693###sois===249956###eois===249986###lif===3###soif===114###eoif===144###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)") && (AKA_mark("lis===5693###sois===249956###eois===249986###lif===3###soif===114###eoif===144###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)") && (info->colortype == LCT_PALETTE))) {
    AKA_mark("lis===5694###sois===249995###eois===250032###lif===4###soif===153###eoif===190###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");size_t i, amount = info->palettesize;
    /*the tail of palette values that all have 255 as alpha, does not have to be encoded*/
    int AKA_BLOCK_LOOP_250130 = 0;
    AKA_mark("lis===5696###sois===250134###eois===250156###lif===6###soif===292###eoif===314###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");
for(i = info->palettesize; AKA_mark("lis===5696###sois===250157###eois===250163###lif===6###soif===315###eoif===321###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)") && (AKA_mark("lis===5696###sois===250157###eois===250163###lif===6###soif===315###eoif===321###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)") && (i != 0)); ({AKA_mark("lis===5696###sois===250165###eois===250168###lif===6###soif===323###eoif===326###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");--i;})) {
        AKA_BLOCK_LOOP_250130++;
        if (AKA_BLOCK_LOOP_250130 > 1000) {
            //break;
        }
      if(AKA_mark("lis===5697###sois===250182###eois===250219###lif===7###soif===340###eoif===377###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)") && (AKA_mark("lis===5697###sois===250182###eois===250219###lif===7###soif===340###eoif===377###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)") && (info->palette[4 * (i - 1) + 3] != 255))) {
AKA_mark("lis===5697###sois===250221###eois===250227###lif===7###soif===379###eoif===385###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");break;
}

else {
AKA_mark("lis===-5697-###sois===-250182-###eois===-25018237-###lif===-7-###soif===-###eoif===-377-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");
}
      AKA_mark("lis===5698###sois===250235###eois===250244###lif===8###soif===393###eoif===402###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");--amount;
    }
    if(AKA_mark("lis===5700###sois===250260###eois===250266###lif===10###soif===418###eoif===424###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)") && (AKA_mark("lis===5700###sois===250260###eois===250266###lif===10###soif===418###eoif===424###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)") && (amount))) {
      AKA_mark("lis===5701###sois===250277###eois===250343###lif===11###soif===435###eoif===501###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, amount, "tRNS"));
      /*add the alpha channel values from the palette*/
      int AKA_BLOCK_LOOP_250409 = 0;
    AKA_mark("lis===5703###sois===250413###eois===250419###lif===13###soif===571###eoif===577###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");
for(i = 0; AKA_mark("lis===5703###sois===250420###eois===250431###lif===13###soif===578###eoif===589###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)") && (AKA_mark("lis===5703###sois===250420###eois===250431###lif===13###soif===578###eoif===589###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)") && (i != amount)); ({AKA_mark("lis===5703###sois===250433###eois===250436###lif===13###soif===591###eoif===594###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");++i;})) {
AKA_mark("lis===5703###sois===250438###eois===250478###lif===13###soif===596###eoif===636###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");chunk[8 + i] = info->palette[4 * i + 3];
}

    }
else {
AKA_mark("lis===-5700-###sois===-250260-###eois===-2502606-###lif===-10-###soif===-###eoif===-424-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");
}
  } else {
if(AKA_mark("lis===5705###sois===250499###eois===250526###lif===15###soif===657###eoif===684###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)") && (AKA_mark("lis===5705###sois===250499###eois===250526###lif===15###soif===657###eoif===684###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)") && (info->colortype == LCT_GREY))) {
    if(AKA_mark("lis===5706###sois===250538###eois===250555###lif===16###soif===696###eoif===713###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)") && (AKA_mark("lis===5706###sois===250538###eois===250555###lif===16###soif===696###eoif===713###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)") && (info->key_defined))) {
      AKA_mark("lis===5707###sois===250566###eois===250627###lif===17###soif===724###eoif===785###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, 2, "tRNS"));
      AKA_mark("lis===5708###sois===250636###eois===250681###lif===18###soif===794###eoif===839###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");chunk[8] = (unsigned char)(info->key_r >> 8);
      AKA_mark("lis===5709###sois===250689###eois===250735###lif===19###soif===847###eoif===893###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");chunk[9] = (unsigned char)(info->key_r & 255);
    }
else {
AKA_mark("lis===-5706-###sois===-250538-###eois===-25053817-###lif===-16-###soif===-###eoif===-713-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");
}
  } else {
if(AKA_mark("lis===5711###sois===250756###eois===250782###lif===21###soif===914###eoif===940###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)") && (AKA_mark("lis===5711###sois===250756###eois===250782###lif===21###soif===914###eoif===940###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)") && (info->colortype == LCT_RGB))) {
    if(AKA_mark("lis===5712###sois===250794###eois===250811###lif===22###soif===952###eoif===969###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)") && (AKA_mark("lis===5712###sois===250794###eois===250811###lif===22###soif===952###eoif===969###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)") && (info->key_defined))) {
      AKA_mark("lis===5713###sois===250822###eois===250883###lif===23###soif===980###eoif===1041###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, 6, "tRNS"));
      AKA_mark("lis===5714###sois===250892###eois===250937###lif===24###soif===1050###eoif===1095###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");chunk[8] = (unsigned char)(info->key_r >> 8);
      AKA_mark("lis===5715###sois===250945###eois===250991###lif===25###soif===1103###eoif===1149###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");chunk[9] = (unsigned char)(info->key_r & 255);
      AKA_mark("lis===5716###sois===250999###eois===251045###lif===26###soif===1157###eoif===1203###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");chunk[10] = (unsigned char)(info->key_g >> 8);
      AKA_mark("lis===5717###sois===251053###eois===251100###lif===27###soif===1211###eoif===1258###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");chunk[11] = (unsigned char)(info->key_g & 255);
      AKA_mark("lis===5718###sois===251108###eois===251154###lif===28###soif===1266###eoif===1312###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");chunk[12] = (unsigned char)(info->key_b >> 8);
      AKA_mark("lis===5719###sois===251162###eois===251209###lif===29###soif===1320###eoif===1367###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");chunk[13] = (unsigned char)(info->key_b & 255);
    }
else {
AKA_mark("lis===-5712-###sois===-250794-###eois===-25079417-###lif===-22-###soif===-###eoif===-969-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");
}
  }
else {
AKA_mark("lis===-5711-###sois===-250756-###eois===-25075626-###lif===-21-###soif===-###eoif===-940-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");
}
}

}


  if(AKA_mark("lis===5723###sois===251230###eois===251235###lif===33###soif===1388###eoif===1393###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)") && (AKA_mark("lis===5723###sois===251230###eois===251235###lif===33###soif===1388###eoif===1393###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)") && (chunk))) {
AKA_mark("lis===5723###sois===251237###eois===251271###lif===33###soif===1395###eoif===1429###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");lodepng_chunk_generate_crc(chunk);
}

else {
AKA_mark("lis===-5723-###sois===-251230-###eois===-2512305-###lif===-33-###soif===-###eoif===-1393-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");
}
  AKA_mark("lis===5724###sois===251275###eois===251284###lif===34###soif===1433###eoif===1442###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tRNS(ucvector*,LodePNGColorMode const*)");return 0;
}

/** Instrumented function addChunk_IDAT(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings*) */
static unsigned addChunk_IDAT(ucvector* out, const unsigned char* data, size_t datasize,
                              LodePNGCompressSettings* zlibsettings) /* << Aka begin of function unsigned addChunk_IDAT(ucvector* out, const unsigned char* data, size_t datasize,
                              LodePNGCompressSettings* zlibsettings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IDAT(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addChunk_IDAT.251307.stub"

  AKA_mark("lis===5729###sois===251455###eois===251474###lif===2###soif===164###eoif===183###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IDAT(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings*)");unsigned error = 0;
  AKA_mark("lis===5730###sois===251478###eois===251502###lif===3###soif===187###eoif===211###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IDAT(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings*)");unsigned char* zlib = 0;
  AKA_mark("lis===5731###sois===251506###eois===251521###lif===4###soif===215###eoif===230###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IDAT(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings*)");size_t pos = 0;
  AKA_mark("lis===5732###sois===251525###eois===251545###lif===5###soif===234###eoif===254###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IDAT(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings*)");size_t zlibsize = 0;
  /* max chunk length allowed by the specification is 2147483647 bytes */
  AKA_mark("lis===5734###sois===251624###eois===251668###lif===7###soif===333###eoif===377###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IDAT(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings*)");const size_t max_chunk_length = 2147483647u;

  AKA_mark("lis===5736###sois===251674###eois===251744###lif===9###soif===383###eoif===453###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IDAT(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings*)");error = zlib_compress(&zlib, &zlibsize, data, datasize, zlibsettings);
  int AKA_BLOCK_LOOP_251748 = 0;
    while(AKA_mark("lis===5737###sois===251754###eois===251760###lif===10###soif===463###eoif===469###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IDAT(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings*)") && (AKA_mark("lis===5737###sois===251754###eois===251760###lif===10###soif===463###eoif===469###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IDAT(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings*)") && (!error))) {
        AKA_BLOCK_LOOP_251748++;
        if (AKA_BLOCK_LOOP_251748 > 1000) {
            //break;
        }
    if(AKA_mark("lis===5738###sois===251772###eois===251805###lif===11###soif===481###eoif===514###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IDAT(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings*)") && (AKA_mark("lis===5738###sois===251772###eois===251805###lif===11###soif===481###eoif===514###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IDAT(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings*)") && (zlibsize - pos > max_chunk_length))) {
      AKA_mark("lis===5739###sois===251816###eois===251889###lif===12###soif===525###eoif===598###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IDAT(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings*)");error = lodepng_chunk_createv(out, max_chunk_length, "IDAT", zlib + pos);
      AKA_mark("lis===5740###sois===251897###eois===251921###lif===13###soif===606###eoif===630###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IDAT(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings*)");pos += max_chunk_length;
    } else {
      AKA_mark("lis===5742###sois===251943###eois===252014###lif===15###soif===652###eoif===723###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IDAT(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings*)");error = lodepng_chunk_createv(out, zlibsize - pos, "IDAT", zlib + pos);
      AKA_mark("lis===5743###sois===252022###eois===252028###lif===16###soif===731###eoif===737###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IDAT(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings*)");break;
    }
  }
  AKA_mark("lis===5746###sois===252044###eois===252063###lif===19###soif===753###eoif===772###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IDAT(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings*)");lodepng_free(zlib);
  AKA_mark("lis===5747###sois===252067###eois===252080###lif===20###soif===776###eoif===789###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IDAT(ucvector*,unsigned char const*,size_t,LodePNGCompressSettings*)");return error;
}

/** Instrumented function addChunk_IEND(ucvector*) */
static unsigned addChunk_IEND(ucvector* out) /* << Aka begin of function unsigned addChunk_IEND(ucvector* out) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IEND(ucvector*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addChunk_IEND.252103.stub"

  AKA_mark("lis===5751###sois===252137###eois===252185###lif===1###soif===50###eoif===98###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_IEND(ucvector*)");return lodepng_chunk_createv(out, 0, "IEND", 0);
}

#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS

/** Instrumented function addChunk_tEXt(ucvector*,char const*,char const*) */
static unsigned addChunk_tEXt(ucvector* out, const char* keyword, const char* textstring) /* << Aka begin of function unsigned addChunk_tEXt(ucvector* out, const char* keyword, const char* textstring) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tEXt(ucvector*,char const*,char const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addChunk_tEXt.252251.stub"

  AKA_mark("lis===5757###sois===252330###eois===252355###lif===1###soif===95###eoif===120###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tEXt(ucvector*,char const*,char const*)");unsigned char* chunk = 0;
  AKA_mark("lis===5758###sois===252359###eois===252439###lif===2###soif===124###eoif===204###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tEXt(ucvector*,char const*,char const*)");size_t keysize = lodepng_strlen(keyword), textsize = lodepng_strlen(textstring);
  AKA_mark("lis===5759###sois===252443###eois===252480###lif===3###soif===208###eoif===245###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tEXt(ucvector*,char const*,char const*)");size_t size = keysize + 1 + textsize;
  if(AKA_mark("lis===5760###sois===252487###eois===252514###lif===4###soif===252###eoif===279###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tEXt(ucvector*,char const*,char const*)") && ((AKA_mark("lis===5760###sois===252487###eois===252498###lif===4###soif===252###eoif===263###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tEXt(ucvector*,char const*,char const*)") && (keysize < 1)) || (AKA_mark("lis===5760###sois===252502###eois===252514###lif===4###soif===267###eoif===279###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tEXt(ucvector*,char const*,char const*)") && (keysize > 79)))) {
AKA_mark("lis===5760###sois===252516###eois===252526###lif===4###soif===281###eoif===291###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tEXt(ucvector*,char const*,char const*)");return 89;
}

else {
AKA_mark("lis===-5760-###sois===-252487-###eois===-25248727-###lif===-4-###soif===-###eoif===-279-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tEXt(ucvector*,char const*,char const*)");
} /*error: invalid keyword size*/
  AKA_mark("lis===5761###sois===252562###eois===252626###lif===5###soif===327###eoif===391###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tEXt(ucvector*,char const*,char const*)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, size, "tEXt"));
  AKA_mark("lis===5762###sois===252631###eois===252675###lif===6###soif===396###eoif===440###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tEXt(ucvector*,char const*,char const*)");lodepng_memcpy(chunk + 8, keyword, keysize);
  AKA_mark("lis===5763###sois===252679###eois===252702###lif===7###soif===444###eoif===467###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tEXt(ucvector*,char const*,char const*)");chunk[8 + keysize] = 0; /*null termination char*/
  AKA_mark("lis===5764###sois===252732###eois===252790###lif===8###soif===497###eoif===555###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tEXt(ucvector*,char const*,char const*)");lodepng_memcpy(chunk + 9 + keysize, textstring, textsize);
  AKA_mark("lis===5765###sois===252794###eois===252828###lif===9###soif===559###eoif===593###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tEXt(ucvector*,char const*,char const*)");lodepng_chunk_generate_crc(chunk);
  AKA_mark("lis===5766###sois===252832###eois===252841###lif===10###soif===597###eoif===606###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tEXt(ucvector*,char const*,char const*)");return 0;
}

/** Instrumented function addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*) */
static unsigned addChunk_zTXt(ucvector* out, const char* keyword, const char* textstring,
                              LodePNGCompressSettings* zlibsettings) /* << Aka begin of function unsigned addChunk_zTXt(ucvector* out, const char* keyword, const char* textstring,
                              LodePNGCompressSettings* zlibsettings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addChunk_zTXt.252864.stub"

  AKA_mark("lis===5771###sois===253013###eois===253032###lif===2###soif===165###eoif===184###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");unsigned error = 0;
  AKA_mark("lis===5772###sois===253036###eois===253061###lif===3###soif===188###eoif===213###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");unsigned char* chunk = 0;
  AKA_mark("lis===5773###sois===253065###eois===253095###lif===4###soif===217###eoif===247###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");unsigned char* compressed = 0;
  AKA_mark("lis===5774###sois===253099###eois===253125###lif===5###soif===251###eoif===277###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");size_t compressedsize = 0;
  AKA_mark("lis===5775###sois===253129###eois===253174###lif===6###soif===281###eoif===326###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");size_t textsize = lodepng_strlen(textstring);
  AKA_mark("lis===5776###sois===253178###eois===253219###lif===7###soif===330###eoif===371###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");size_t keysize = lodepng_strlen(keyword);
  if(AKA_mark("lis===5777###sois===253226###eois===253253###lif===8###soif===378###eoif===405###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)") && ((AKA_mark("lis===5777###sois===253226###eois===253237###lif===8###soif===378###eoif===389###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)") && (keysize < 1)) || (AKA_mark("lis===5777###sois===253241###eois===253253###lif===8###soif===393###eoif===405###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)") && (keysize > 79)))) {
AKA_mark("lis===5777###sois===253255###eois===253265###lif===8###soif===407###eoif===417###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");return 89;
}

else {
AKA_mark("lis===-5777-###sois===-253226-###eois===-25322627-###lif===-8-###soif===-###eoif===-405-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");
} /*error: invalid keyword size*/

  AKA_mark("lis===5779###sois===253303###eois===253438###lif===10###soif===455###eoif===590###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");error = zlib_compress(&compressed, &compressedsize,
                        (const unsigned char*)textstring, textsize, zlibsettings);
  if(AKA_mark("lis===5781###sois===253445###eois===253451###lif===12###soif===597###eoif===603###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)") && (AKA_mark("lis===5781###sois===253445###eois===253451###lif===12###soif===597###eoif===603###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)") && (!error))) {
    AKA_mark("lis===5782###sois===253460###eois===253503###lif===13###soif===612###eoif===655###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");size_t size = keysize + 2 + compressedsize;
    AKA_mark("lis===5783###sois===253509###eois===253563###lif===14###soif===661###eoif===715###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");error = lodepng_chunk_init(&chunk, out, size, "zTXt");
  }
else {
AKA_mark("lis===-5781-###sois===-253445-###eois===-2534456-###lif===-12-###soif===-###eoif===-603-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");
}
  if(AKA_mark("lis===5785###sois===253575###eois===253581###lif===16###soif===727###eoif===733###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)") && (AKA_mark("lis===5785###sois===253575###eois===253581###lif===16###soif===727###eoif===733###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)") && (!error))) {
    AKA_mark("lis===5786###sois===253590###eois===253634###lif===17###soif===742###eoif===786###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");lodepng_memcpy(chunk + 8, keyword, keysize);
    AKA_mark("lis===5787###sois===253640###eois===253663###lif===18###soif===792###eoif===815###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");chunk[8 + keysize] = 0; /*null termination char*/
    AKA_mark("lis===5788###sois===253695###eois===253718###lif===19###soif===847###eoif===870###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");chunk[9 + keysize] = 0; /*compression method: 0*/
    AKA_mark("lis===5789###sois===253750###eois===253815###lif===20###soif===902###eoif===967###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");lodepng_memcpy(chunk + 10 + keysize, compressed, compressedsize);
    AKA_mark("lis===5790###sois===253821###eois===253855###lif===21###soif===973###eoif===1007###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");lodepng_chunk_generate_crc(chunk);
  }
else {
AKA_mark("lis===-5785-###sois===-253575-###eois===-2535756-###lif===-16-###soif===-###eoif===-733-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");
}

  AKA_mark("lis===5793###sois===253866###eois===253891###lif===24###soif===1018###eoif===1043###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");lodepng_free(compressed);
  AKA_mark("lis===5794###sois===253895###eois===253908###lif===25###soif===1047###eoif===1060###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_zTXt(ucvector*,char const*,char const*,LodePNGCompressSettings*)");return error;
}

/** Instrumented function addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*) */
static unsigned addChunk_iTXt(ucvector* out, unsigned compress, const char* keyword, const char* langtag,
                              const char* transkey, const char* textstring, LodePNGCompressSettings* zlibsettings) /* << Aka begin of function unsigned addChunk_iTXt(ucvector* out, unsigned compress, const char* keyword, const char* langtag,
                              const char* transkey, const char* textstring, LodePNGCompressSettings* zlibsettings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addChunk_iTXt.253931.stub"

  AKA_mark("lis===5799###sois===254142###eois===254161###lif===2###soif===227###eoif===246###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");unsigned error = 0;
  AKA_mark("lis===5800###sois===254165###eois===254190###lif===3###soif===250###eoif===275###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");unsigned char* chunk = 0;
  AKA_mark("lis===5801###sois===254194###eois===254224###lif===4###soif===279###eoif===309###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");unsigned char* compressed = 0;
  AKA_mark("lis===5802###sois===254228###eois===254254###lif===5###soif===313###eoif===339###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");size_t compressedsize = 0;
  AKA_mark("lis===5803###sois===254258###eois===254303###lif===6###soif===343###eoif===388###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");size_t textsize = lodepng_strlen(textstring);
  AKA_mark("lis===5804###sois===254307###eois===254422###lif===7###soif===392###eoif===507###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");size_t keysize = lodepng_strlen(keyword), langsize = lodepng_strlen(langtag), transsize = lodepng_strlen(transkey);

  if(AKA_mark("lis===5806###sois===254431###eois===254458###lif===9###soif===516###eoif===543###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)") && ((AKA_mark("lis===5806###sois===254431###eois===254442###lif===9###soif===516###eoif===527###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)") && (keysize < 1)) || (AKA_mark("lis===5806###sois===254446###eois===254458###lif===9###soif===531###eoif===543###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)") && (keysize > 79)))) {
AKA_mark("lis===5806###sois===254460###eois===254470###lif===9###soif===545###eoif===555###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");return 89;
}

else {
AKA_mark("lis===-5806-###sois===-254431-###eois===-25443127-###lif===-9-###soif===-###eoif===-543-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");
} /*error: invalid keyword size*/

  if(AKA_mark("lis===5808###sois===254511###eois===254519###lif===11###soif===596###eoif===604###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)") && (AKA_mark("lis===5808###sois===254511###eois===254519###lif===11###soif===596###eoif===604###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)") && (compress))) {
    AKA_mark("lis===5809###sois===254528###eois===254665###lif===12###soif===613###eoif===750###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");error = zlib_compress(&compressed, &compressedsize,
                          (const unsigned char*)textstring, textsize, zlibsettings);
  }
else {
AKA_mark("lis===-5808-###sois===-254511-###eois===-2545118-###lif===-11-###soif===-###eoif===-604-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");
}
  if(AKA_mark("lis===5812###sois===254677###eois===254683###lif===15###soif===762###eoif===768###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)") && (AKA_mark("lis===5812###sois===254677###eois===254683###lif===15###soif===762###eoif===768###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)") && (!error))) {
    AKA_mark("lis===5813###sois===254692###eois===254790###lif===16###soif===777###eoif===875###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");size_t size = keysize + 3 + langsize + 1 + transsize + 1 + (compress ? compressedsize : textsize);
    AKA_mark("lis===5814###sois===254796###eois===254850###lif===17###soif===881###eoif===935###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");error = lodepng_chunk_init(&chunk, out, size, "iTXt");
  }
else {
AKA_mark("lis===-5812-###sois===-254677-###eois===-2546776-###lif===-15-###soif===-###eoif===-768-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");
}
  if(AKA_mark("lis===5816###sois===254862###eois===254868###lif===19###soif===947###eoif===953###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)") && (AKA_mark("lis===5816###sois===254862###eois===254868###lif===19###soif===947###eoif===953###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)") && (!error))) {
    AKA_mark("lis===5817###sois===254877###eois===254892###lif===20###soif===962###eoif===977###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");size_t pos = 8;
    AKA_mark("lis===5818###sois===254898###eois===254944###lif===21###soif===983###eoif===1029###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");lodepng_memcpy(chunk + pos, keyword, keysize);
    AKA_mark("lis===5819###sois===254950###eois===254965###lif===22###soif===1035###eoif===1050###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");pos += keysize;
    AKA_mark("lis===5820###sois===254971###eois===254988###lif===23###soif===1056###eoif===1073###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");chunk[pos++] = 0; /*null termination char*/
    AKA_mark("lis===5821###sois===255020###eois===255054###lif===24###soif===1105###eoif===1139###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");chunk[pos++] = (compress ? 1 : 0); /*compression flag*/
    AKA_mark("lis===5822###sois===255081###eois===255098###lif===25###soif===1166###eoif===1183###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");chunk[pos++] = 0; /*compression method: 0*/
    AKA_mark("lis===5823###sois===255130###eois===255177###lif===26###soif===1215###eoif===1262###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");lodepng_memcpy(chunk + pos, langtag, langsize);
    AKA_mark("lis===5824###sois===255183###eois===255199###lif===27###soif===1268###eoif===1284###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");pos += langsize;
    AKA_mark("lis===5825###sois===255205###eois===255222###lif===28###soif===1290###eoif===1307###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");chunk[pos++] = 0; /*null termination char*/
    AKA_mark("lis===5826###sois===255254###eois===255303###lif===29###soif===1339###eoif===1388###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");lodepng_memcpy(chunk + pos, transkey, transsize);
    AKA_mark("lis===5827###sois===255309###eois===255326###lif===30###soif===1394###eoif===1411###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");pos += transsize;
    AKA_mark("lis===5828###sois===255332###eois===255349###lif===31###soif===1417###eoif===1434###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");chunk[pos++] = 0; /*null termination char*/
    if(AKA_mark("lis===5829###sois===255384###eois===255392###lif===32###soif===1469###eoif===1477###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)") && (AKA_mark("lis===5829###sois===255384###eois===255392###lif===32###soif===1469###eoif===1477###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)") && (compress))) {
      AKA_mark("lis===5830###sois===255403###eois===255459###lif===33###soif===1488###eoif===1544###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");lodepng_memcpy(chunk + pos, compressed, compressedsize);
    } else {
      AKA_mark("lis===5832###sois===255481###eois===255531###lif===35###soif===1566###eoif===1616###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");lodepng_memcpy(chunk + pos, textstring, textsize);
    }
    AKA_mark("lis===5834###sois===255544###eois===255578###lif===37###soif===1629###eoif===1663###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");lodepng_chunk_generate_crc(chunk);
  }
else {
AKA_mark("lis===-5816-###sois===-254862-###eois===-2548626-###lif===-19-###soif===-###eoif===-953-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");
}

  AKA_mark("lis===5837###sois===255589###eois===255614###lif===40###soif===1674###eoif===1699###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");lodepng_free(compressed);
  AKA_mark("lis===5838###sois===255618###eois===255631###lif===41###soif===1703###eoif===1716###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iTXt(ucvector*,unsigned,char const*,char const*,char const*,char const*,LodePNGCompressSettings*)");return error;
}

/** Instrumented function addChunk_bKGD(ucvector*,LodePNGInfo const*) */
static unsigned addChunk_bKGD(ucvector* out, const LodePNGInfo* info) /* << Aka begin of function unsigned addChunk_bKGD(ucvector* out, const LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addChunk_bKGD.255654.stub"

  AKA_mark("lis===5842###sois===255713###eois===255738###lif===1###soif===75###eoif===100###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)");unsigned char* chunk = 0;
  if(AKA_mark("lis===5843###sois===255745###eois===255821###lif===2###soif===107###eoif===183###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)") && ((AKA_mark("lis===5843###sois===255745###eois===255778###lif===2###soif===107###eoif===140###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)") && (info->color.colortype == LCT_GREY)) || (AKA_mark("lis===5843###sois===255782###eois===255821###lif===2###soif===144###eoif===183###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)") && (info->color.colortype == LCT_GREY_ALPHA)))) {
    AKA_mark("lis===5844###sois===255830###eois===255891###lif===3###soif===192###eoif===253###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, 2, "bKGD"));
    AKA_mark("lis===5845###sois===255898###eois===255950###lif===4###soif===260###eoif===312###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)");chunk[8] = (unsigned char)(info->background_r >> 8);
    AKA_mark("lis===5846###sois===255956###eois===256009###lif===5###soif===318###eoif===371###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)");chunk[9] = (unsigned char)(info->background_r & 255);
  } else {
if(AKA_mark("lis===5847###sois===256023###eois===256092###lif===6###soif===385###eoif===454###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)") && ((AKA_mark("lis===5847###sois===256023###eois===256055###lif===6###soif===385###eoif===417###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)") && (info->color.colortype == LCT_RGB)) || (AKA_mark("lis===5847###sois===256059###eois===256092###lif===6###soif===421###eoif===454###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)") && (info->color.colortype == LCT_RGBA)))) {
    AKA_mark("lis===5848###sois===256101###eois===256162###lif===7###soif===463###eoif===524###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, 6, "bKGD"));
    AKA_mark("lis===5849###sois===256169###eois===256221###lif===8###soif===531###eoif===583###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)");chunk[8] = (unsigned char)(info->background_r >> 8);
    AKA_mark("lis===5850###sois===256227###eois===256280###lif===9###soif===589###eoif===642###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)");chunk[9] = (unsigned char)(info->background_r & 255);
    AKA_mark("lis===5851###sois===256286###eois===256339###lif===10###soif===648###eoif===701###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)");chunk[10] = (unsigned char)(info->background_g >> 8);
    AKA_mark("lis===5852###sois===256345###eois===256399###lif===11###soif===707###eoif===761###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)");chunk[11] = (unsigned char)(info->background_g & 255);
    AKA_mark("lis===5853###sois===256405###eois===256458###lif===12###soif===767###eoif===820###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)");chunk[12] = (unsigned char)(info->background_b >> 8);
    AKA_mark("lis===5854###sois===256464###eois===256518###lif===13###soif===826###eoif===880###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)");chunk[13] = (unsigned char)(info->background_b & 255);
  } else {
if(AKA_mark("lis===5855###sois===256532###eois===256568###lif===14###soif===894###eoif===930###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)") && (AKA_mark("lis===5855###sois===256532###eois===256568###lif===14###soif===894###eoif===930###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)") && (info->color.colortype == LCT_PALETTE))) {
    AKA_mark("lis===5856###sois===256577###eois===256638###lif===15###soif===939###eoif===1000###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, 1, "bKGD"));
    AKA_mark("lis===5857###sois===256645###eois===256698###lif===16###soif===1007###eoif===1060###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)");chunk[8] = (unsigned char)(info->background_r & 255); /*palette index*/
  }
else {
AKA_mark("lis===-5855-###sois===-256532-###eois===-25653236-###lif===-14-###soif===-###eoif===-930-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)");
}
}

}

  if(AKA_mark("lis===5859###sois===256728###eois===256733###lif===18###soif===1090###eoif===1095###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)") && (AKA_mark("lis===5859###sois===256728###eois===256733###lif===18###soif===1090###eoif===1095###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)") && (chunk))) {
AKA_mark("lis===5859###sois===256735###eois===256769###lif===18###soif===1097###eoif===1131###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)");lodepng_chunk_generate_crc(chunk);
}

else {
AKA_mark("lis===-5859-###sois===-256728-###eois===-2567285-###lif===-18-###soif===-###eoif===-1095-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)");
}
  AKA_mark("lis===5860###sois===256773###eois===256782###lif===19###soif===1135###eoif===1144###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_bKGD(ucvector*,LodePNGInfo const*)");return 0;
}

/** Instrumented function addChunk_tIME(ucvector*,LodePNGTime const*) */
static unsigned addChunk_tIME(ucvector* out, const LodePNGTime* time) /* << Aka begin of function unsigned addChunk_tIME(ucvector* out, const LodePNGTime* time) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tIME(ucvector*,LodePNGTime const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addChunk_tIME.256805.stub"

  AKA_mark("lis===5864###sois===256864###eois===256885###lif===1###soif===75###eoif===96###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tIME(ucvector*,LodePNGTime const*)");unsigned char* chunk;
  AKA_mark("lis===5865###sois===256889###eois===256950###lif===2###soif===100###eoif===161###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tIME(ucvector*,LodePNGTime const*)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, 7, "tIME"));
  AKA_mark("lis===5866###sois===256955###eois===256999###lif===3###soif===166###eoif===210###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tIME(ucvector*,LodePNGTime const*)");chunk[8] = (unsigned char)(time->year >> 8);
  AKA_mark("lis===5867###sois===257003###eois===257048###lif===4###soif===214###eoif===259###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tIME(ucvector*,LodePNGTime const*)");chunk[9] = (unsigned char)(time->year & 255);
  AKA_mark("lis===5868###sois===257052###eois===257091###lif===5###soif===263###eoif===302###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tIME(ucvector*,LodePNGTime const*)");chunk[10] = (unsigned char)time->month;
  AKA_mark("lis===5869###sois===257095###eois===257132###lif===6###soif===306###eoif===343###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tIME(ucvector*,LodePNGTime const*)");chunk[11] = (unsigned char)time->day;
  AKA_mark("lis===5870###sois===257136###eois===257174###lif===7###soif===347###eoif===385###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tIME(ucvector*,LodePNGTime const*)");chunk[12] = (unsigned char)time->hour;
  AKA_mark("lis===5871###sois===257178###eois===257218###lif===8###soif===389###eoif===429###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tIME(ucvector*,LodePNGTime const*)");chunk[13] = (unsigned char)time->minute;
  AKA_mark("lis===5872###sois===257222###eois===257262###lif===9###soif===433###eoif===473###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tIME(ucvector*,LodePNGTime const*)");chunk[14] = (unsigned char)time->second;
  AKA_mark("lis===5873###sois===257266###eois===257300###lif===10###soif===477###eoif===511###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tIME(ucvector*,LodePNGTime const*)");lodepng_chunk_generate_crc(chunk);
  AKA_mark("lis===5874###sois===257304###eois===257313###lif===11###soif===515###eoif===524###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_tIME(ucvector*,LodePNGTime const*)");return 0;
}

/** Instrumented function addChunk_pHYs(ucvector*,LodePNGInfo const*) */
static unsigned addChunk_pHYs(ucvector* out, const LodePNGInfo* info) /* << Aka begin of function unsigned addChunk_pHYs(ucvector* out, const LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_pHYs(ucvector*,LodePNGInfo const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addChunk_pHYs.257336.stub"

  AKA_mark("lis===5878###sois===257395###eois===257416###lif===1###soif===75###eoif===96###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_pHYs(ucvector*,LodePNGInfo const*)");unsigned char* chunk;
  AKA_mark("lis===5879###sois===257420###eois===257481###lif===2###soif===100###eoif===161###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_pHYs(ucvector*,LodePNGInfo const*)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, 9, "pHYs"));
  AKA_mark("lis===5880###sois===257486###eois===257531###lif===3###soif===166###eoif===211###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_pHYs(ucvector*,LodePNGInfo const*)");lodepng_set32bitInt(chunk + 8, info->phys_x);
  AKA_mark("lis===5881###sois===257535###eois===257581###lif===4###soif===215###eoif===261###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_pHYs(ucvector*,LodePNGInfo const*)");lodepng_set32bitInt(chunk + 12, info->phys_y);
  AKA_mark("lis===5882###sois===257585###eois===257613###lif===5###soif===265###eoif===293###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_pHYs(ucvector*,LodePNGInfo const*)");chunk[16] = info->phys_unit;
  AKA_mark("lis===5883###sois===257617###eois===257651###lif===6###soif===297###eoif===331###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_pHYs(ucvector*,LodePNGInfo const*)");lodepng_chunk_generate_crc(chunk);
  AKA_mark("lis===5884###sois===257655###eois===257664###lif===7###soif===335###eoif===344###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_pHYs(ucvector*,LodePNGInfo const*)");return 0;
}

/** Instrumented function addChunk_gAMA(ucvector*,LodePNGInfo const*) */
static unsigned addChunk_gAMA(ucvector* out, const LodePNGInfo* info) /* << Aka begin of function unsigned addChunk_gAMA(ucvector* out, const LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_gAMA(ucvector*,LodePNGInfo const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addChunk_gAMA.257687.stub"

  AKA_mark("lis===5888###sois===257746###eois===257767###lif===1###soif===75###eoif===96###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_gAMA(ucvector*,LodePNGInfo const*)");unsigned char* chunk;
  AKA_mark("lis===5889###sois===257771###eois===257832###lif===2###soif===100###eoif===161###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_gAMA(ucvector*,LodePNGInfo const*)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, 4, "gAMA"));
  AKA_mark("lis===5890###sois===257837###eois===257886###lif===3###soif===166###eoif===215###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_gAMA(ucvector*,LodePNGInfo const*)");lodepng_set32bitInt(chunk + 8, info->gama_gamma);
  AKA_mark("lis===5891###sois===257890###eois===257924###lif===4###soif===219###eoif===253###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_gAMA(ucvector*,LodePNGInfo const*)");lodepng_chunk_generate_crc(chunk);
  AKA_mark("lis===5892###sois===257928###eois===257937###lif===5###soif===257###eoif===266###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_gAMA(ucvector*,LodePNGInfo const*)");return 0;
}

/** Instrumented function addChunk_cHRM(ucvector*,LodePNGInfo const*) */
static unsigned addChunk_cHRM(ucvector* out, const LodePNGInfo* info) /* << Aka begin of function unsigned addChunk_cHRM(ucvector* out, const LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cHRM(ucvector*,LodePNGInfo const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addChunk_cHRM.257960.stub"

  AKA_mark("lis===5896###sois===258019###eois===258040###lif===1###soif===75###eoif===96###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cHRM(ucvector*,LodePNGInfo const*)");unsigned char* chunk;
  AKA_mark("lis===5897###sois===258044###eois===258106###lif===2###soif===100###eoif===162###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cHRM(ucvector*,LodePNGInfo const*)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, 32, "cHRM"));
  AKA_mark("lis===5898###sois===258111###eois===258162###lif===3###soif===167###eoif===218###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cHRM(ucvector*,LodePNGInfo const*)");lodepng_set32bitInt(chunk + 8, info->chrm_white_x);
  AKA_mark("lis===5899###sois===258166###eois===258218###lif===4###soif===222###eoif===274###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cHRM(ucvector*,LodePNGInfo const*)");lodepng_set32bitInt(chunk + 12, info->chrm_white_y);
  AKA_mark("lis===5900###sois===258222###eois===258272###lif===5###soif===278###eoif===328###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cHRM(ucvector*,LodePNGInfo const*)");lodepng_set32bitInt(chunk + 16, info->chrm_red_x);
  AKA_mark("lis===5901###sois===258276###eois===258326###lif===6###soif===332###eoif===382###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cHRM(ucvector*,LodePNGInfo const*)");lodepng_set32bitInt(chunk + 20, info->chrm_red_y);
  AKA_mark("lis===5902###sois===258330###eois===258382###lif===7###soif===386###eoif===438###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cHRM(ucvector*,LodePNGInfo const*)");lodepng_set32bitInt(chunk + 24, info->chrm_green_x);
  AKA_mark("lis===5903###sois===258386###eois===258438###lif===8###soif===442###eoif===494###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cHRM(ucvector*,LodePNGInfo const*)");lodepng_set32bitInt(chunk + 28, info->chrm_green_y);
  AKA_mark("lis===5904###sois===258442###eois===258493###lif===9###soif===498###eoif===549###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cHRM(ucvector*,LodePNGInfo const*)");lodepng_set32bitInt(chunk + 32, info->chrm_blue_x);
  AKA_mark("lis===5905###sois===258497###eois===258548###lif===10###soif===553###eoif===604###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cHRM(ucvector*,LodePNGInfo const*)");lodepng_set32bitInt(chunk + 36, info->chrm_blue_y);
  AKA_mark("lis===5906###sois===258552###eois===258586###lif===11###soif===608###eoif===642###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cHRM(ucvector*,LodePNGInfo const*)");lodepng_chunk_generate_crc(chunk);
  AKA_mark("lis===5907###sois===258590###eois===258599###lif===12###soif===646###eoif===655###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cHRM(ucvector*,LodePNGInfo const*)");return 0;
}

/** Instrumented function addChunk_sRGB(ucvector*,LodePNGInfo const*) */
static unsigned addChunk_sRGB(ucvector* out, const LodePNGInfo* info) /* << Aka begin of function unsigned addChunk_sRGB(ucvector* out, const LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sRGB(ucvector*,LodePNGInfo const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addChunk_sRGB.258622.stub"

  AKA_mark("lis===5911###sois===258681###eois===258720###lif===1###soif===75###eoif===114###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sRGB(ucvector*,LodePNGInfo const*)");unsigned char data = info->srgb_intent;
  AKA_mark("lis===5912###sois===258724###eois===258776###lif===2###soif===118###eoif===170###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sRGB(ucvector*,LodePNGInfo const*)");return lodepng_chunk_createv(out, 1, "sRGB", &data);
}

/** Instrumented function addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*) */
static unsigned addChunk_iCCP(ucvector* out, const LodePNGInfo* info, LodePNGCompressSettings* zlibsettings) /* << Aka begin of function unsigned addChunk_iCCP(ucvector* out, const LodePNGInfo* info, LodePNGCompressSettings* zlibsettings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addChunk_iCCP.258799.stub"

  AKA_mark("lis===5916###sois===258897###eois===258916###lif===1###soif===114###eoif===133###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)");unsigned error = 0;
  AKA_mark("lis===5917###sois===258920###eois===258945###lif===2###soif===137###eoif===162###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)");unsigned char* chunk = 0;
  AKA_mark("lis===5918###sois===258949###eois===258979###lif===3###soif===166###eoif===196###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)");unsigned char* compressed = 0;
  AKA_mark("lis===5919###sois===258983###eois===259009###lif===4###soif===200###eoif===226###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)");size_t compressedsize = 0;
  AKA_mark("lis===5920###sois===259013###eois===259062###lif===5###soif===230###eoif===279###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)");size_t keysize = lodepng_strlen(info->iccp_name);

  if(AKA_mark("lis===5922###sois===259071###eois===259098###lif===7###soif===288###eoif===315###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)") && ((AKA_mark("lis===5922###sois===259071###eois===259082###lif===7###soif===288###eoif===299###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)") && (keysize < 1)) || (AKA_mark("lis===5922###sois===259086###eois===259098###lif===7###soif===303###eoif===315###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)") && (keysize > 79)))) {
AKA_mark("lis===5922###sois===259100###eois===259110###lif===7###soif===317###eoif===327###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)");return 89;
}

else {
AKA_mark("lis===-5922-###sois===-259071-###eois===-25907127-###lif===-7-###soif===-###eoif===-315-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)");
} /*error: invalid keyword size*/
  AKA_mark("lis===5923###sois===259146###eois===259282###lif===8###soif===363###eoif===499###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)");error = zlib_compress(&compressed, &compressedsize,
                        info->iccp_profile, info->iccp_profile_size, zlibsettings);
  if(AKA_mark("lis===5925###sois===259289###eois===259295###lif===10###soif===506###eoif===512###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)") && (AKA_mark("lis===5925###sois===259289###eois===259295###lif===10###soif===506###eoif===512###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)") && (!error))) {
    AKA_mark("lis===5926###sois===259304###eois===259347###lif===11###soif===521###eoif===564###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)");size_t size = keysize + 2 + compressedsize;
    AKA_mark("lis===5927###sois===259353###eois===259407###lif===12###soif===570###eoif===624###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)");error = lodepng_chunk_init(&chunk, out, size, "iCCP");
  }
else {
AKA_mark("lis===-5925-###sois===-259289-###eois===-2592896-###lif===-10-###soif===-###eoif===-512-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)");
}
  if(AKA_mark("lis===5929###sois===259419###eois===259425###lif===14###soif===636###eoif===642###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)") && (AKA_mark("lis===5929###sois===259419###eois===259425###lif===14###soif===636###eoif===642###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)") && (!error))) {
    AKA_mark("lis===5930###sois===259434###eois===259486###lif===15###soif===651###eoif===703###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)");lodepng_memcpy(chunk + 8, info->iccp_name, keysize);
    AKA_mark("lis===5931###sois===259492###eois===259515###lif===16###soif===709###eoif===732###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)");chunk[8 + keysize] = 0; /*null termination char*/
    AKA_mark("lis===5932###sois===259547###eois===259570###lif===17###soif===764###eoif===787###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)");chunk[9 + keysize] = 0; /*compression method: 0*/
    AKA_mark("lis===5933###sois===259602###eois===259667###lif===18###soif===819###eoif===884###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)");lodepng_memcpy(chunk + 10 + keysize, compressed, compressedsize);
    AKA_mark("lis===5934###sois===259673###eois===259707###lif===19###soif===890###eoif===924###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)");lodepng_chunk_generate_crc(chunk);
  }
else {
AKA_mark("lis===-5929-###sois===-259419-###eois===-2594196-###lif===-14-###soif===-###eoif===-642-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)");
}

  AKA_mark("lis===5937###sois===259718###eois===259743###lif===22###soif===935###eoif===960###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)");lodepng_free(compressed);
  AKA_mark("lis===5938###sois===259747###eois===259760###lif===23###soif===964###eoif===977###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_iCCP(ucvector*,LodePNGInfo const*,LodePNGCompressSettings*)");return error;
}

/** Instrumented function addChunk_cICP(ucvector*,LodePNGInfo const*) */
static unsigned addChunk_cICP(ucvector* out, const LodePNGInfo* info) /* << Aka begin of function unsigned addChunk_cICP(ucvector* out, const LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addChunk_cICP.259783.stub"

  AKA_mark("lis===5942###sois===259842###eois===259863###lif===1###soif===75###eoif===96###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)");unsigned char* chunk;
  /* Allow up to 255 since they are bytes. The ITU-R-BT.709 spec has a more
  restricted set of valid values for each field, but that's up to the error
  handling of a CICP library, not the PNG encoding/decoding, to manage. */
  if(AKA_mark("lis===5946###sois===260100###eois===260132###lif===5###soif===333###eoif===365###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)") && (AKA_mark("lis===5946###sois===260100###eois===260132###lif===5###soif===333###eoif===365###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)") && (info->cicp_color_primaries > 255))) {
AKA_mark("lis===5946###sois===260134###eois===260145###lif===5###soif===367###eoif===378###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)");return 116;
}

else {
AKA_mark("lis===-5946-###sois===-260100-###eois===-26010032-###lif===-5-###soif===-###eoif===-365-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)");
}
  if(AKA_mark("lis===5947###sois===260152###eois===260186###lif===6###soif===385###eoif===419###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)") && (AKA_mark("lis===5947###sois===260152###eois===260186###lif===6###soif===385###eoif===419###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)") && (info->cicp_transfer_function > 255))) {
AKA_mark("lis===5947###sois===260188###eois===260199###lif===6###soif===421###eoif===432###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)");return 116;
}

else {
AKA_mark("lis===-5947-###sois===-260152-###eois===-26015234-###lif===-6-###soif===-###eoif===-419-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)");
}
  if(AKA_mark("lis===5948###sois===260206###eois===260242###lif===7###soif===439###eoif===475###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)") && (AKA_mark("lis===5948###sois===260206###eois===260242###lif===7###soif===439###eoif===475###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)") && (info->cicp_matrix_coefficients > 255))) {
AKA_mark("lis===5948###sois===260244###eois===260255###lif===7###soif===477###eoif===488###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)");return 116;
}

else {
AKA_mark("lis===-5948-###sois===-260206-###eois===-26020636-###lif===-7-###soif===-###eoif===-475-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)");
}
  if(AKA_mark("lis===5949###sois===260262###eois===260300###lif===8###soif===495###eoif===533###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)") && (AKA_mark("lis===5949###sois===260262###eois===260300###lif===8###soif===495###eoif===533###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)") && (info->cicp_video_full_range_flag > 255))) {
AKA_mark("lis===5949###sois===260302###eois===260313###lif===8###soif===535###eoif===546###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)");return 116;
}

else {
AKA_mark("lis===-5949-###sois===-260262-###eois===-26026238-###lif===-8-###soif===-###eoif===-533-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)");
}
  AKA_mark("lis===5950###sois===260317###eois===260378###lif===9###soif===550###eoif===611###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, 4, "cICP"));
  AKA_mark("lis===5951###sois===260383###eois===260440###lif===10###soif===616###eoif===673###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)");chunk[8 + 0] = (unsigned char)info->cicp_color_primaries;
  AKA_mark("lis===5952###sois===260444###eois===260503###lif===11###soif===677###eoif===736###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)");chunk[8 + 1] = (unsigned char)info->cicp_transfer_function;
  AKA_mark("lis===5953###sois===260507###eois===260568###lif===12###soif===740###eoif===801###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)");chunk[8 + 2] = (unsigned char)info->cicp_matrix_coefficients;
  AKA_mark("lis===5954###sois===260572###eois===260635###lif===13###soif===805###eoif===868###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)");chunk[8 + 3] = (unsigned char)info->cicp_video_full_range_flag;
  AKA_mark("lis===5955###sois===260639###eois===260673###lif===14###soif===872###eoif===906###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)");lodepng_chunk_generate_crc(chunk);
  AKA_mark("lis===5956###sois===260677###eois===260686###lif===15###soif===910###eoif===919###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cICP(ucvector*,LodePNGInfo const*)");return 0;
}

/** Instrumented function addChunk_mDCV(ucvector*,LodePNGInfo const*) */
static unsigned addChunk_mDCV(ucvector* out, const LodePNGInfo* info) /* << Aka begin of function unsigned addChunk_mDCV(ucvector* out, const LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addChunk_mDCV.260709.stub"

  AKA_mark("lis===5960###sois===260768###eois===260789###lif===1###soif===75###eoif===96###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");unsigned char* chunk;
  /* Allow up to 65535 since they are 16-bit ints. */
  if(AKA_mark("lis===5962###sois===260851###eois===260875###lif===3###soif===158###eoif===182###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)") && (AKA_mark("lis===5962###sois===260851###eois===260875###lif===3###soif===158###eoif===182###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)") && (info->mdcv_red_x > 65535))) {
AKA_mark("lis===5962###sois===260877###eois===260888###lif===3###soif===184###eoif===195###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");return 118;
}

else {
AKA_mark("lis===-5962-###sois===-260851-###eois===-26085124-###lif===-3-###soif===-###eoif===-182-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");
}
  if(AKA_mark("lis===5963###sois===260895###eois===260919###lif===4###soif===202###eoif===226###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)") && (AKA_mark("lis===5963###sois===260895###eois===260919###lif===4###soif===202###eoif===226###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)") && (info->mdcv_red_y > 65535))) {
AKA_mark("lis===5963###sois===260921###eois===260932###lif===4###soif===228###eoif===239###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");return 118;
}

else {
AKA_mark("lis===-5963-###sois===-260895-###eois===-26089524-###lif===-4-###soif===-###eoif===-226-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");
}
  if(AKA_mark("lis===5964###sois===260939###eois===260965###lif===5###soif===246###eoif===272###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)") && (AKA_mark("lis===5964###sois===260939###eois===260965###lif===5###soif===246###eoif===272###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)") && (info->mdcv_green_x > 65535))) {
AKA_mark("lis===5964###sois===260967###eois===260978###lif===5###soif===274###eoif===285###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");return 118;
}

else {
AKA_mark("lis===-5964-###sois===-260939-###eois===-26093926-###lif===-5-###soif===-###eoif===-272-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");
}
  if(AKA_mark("lis===5965###sois===260985###eois===261011###lif===6###soif===292###eoif===318###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)") && (AKA_mark("lis===5965###sois===260985###eois===261011###lif===6###soif===292###eoif===318###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)") && (info->mdcv_green_y > 65535))) {
AKA_mark("lis===5965###sois===261013###eois===261024###lif===6###soif===320###eoif===331###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");return 118;
}

else {
AKA_mark("lis===-5965-###sois===-260985-###eois===-26098526-###lif===-6-###soif===-###eoif===-318-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");
}
  if(AKA_mark("lis===5966###sois===261031###eois===261056###lif===7###soif===338###eoif===363###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)") && (AKA_mark("lis===5966###sois===261031###eois===261056###lif===7###soif===338###eoif===363###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)") && (info->mdcv_blue_x > 65535))) {
AKA_mark("lis===5966###sois===261058###eois===261069###lif===7###soif===365###eoif===376###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");return 118;
}

else {
AKA_mark("lis===-5966-###sois===-261031-###eois===-26103125-###lif===-7-###soif===-###eoif===-363-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");
}
  if(AKA_mark("lis===5967###sois===261076###eois===261101###lif===8###soif===383###eoif===408###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)") && (AKA_mark("lis===5967###sois===261076###eois===261101###lif===8###soif===383###eoif===408###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)") && (info->mdcv_blue_y > 65535))) {
AKA_mark("lis===5967###sois===261103###eois===261114###lif===8###soif===410###eoif===421###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");return 118;
}

else {
AKA_mark("lis===-5967-###sois===-261076-###eois===-26107625-###lif===-8-###soif===-###eoif===-408-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");
}
  if(AKA_mark("lis===5968###sois===261121###eois===261147###lif===9###soif===428###eoif===454###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)") && (AKA_mark("lis===5968###sois===261121###eois===261147###lif===9###soif===428###eoif===454###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)") && (info->mdcv_white_x > 65535))) {
AKA_mark("lis===5968###sois===261149###eois===261160###lif===9###soif===456###eoif===467###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");return 118;
}

else {
AKA_mark("lis===-5968-###sois===-261121-###eois===-26112126-###lif===-9-###soif===-###eoif===-454-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");
}
  if(AKA_mark("lis===5969###sois===261167###eois===261193###lif===10###soif===474###eoif===500###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)") && (AKA_mark("lis===5969###sois===261167###eois===261193###lif===10###soif===474###eoif===500###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)") && (info->mdcv_white_y > 65535))) {
AKA_mark("lis===5969###sois===261195###eois===261206###lif===10###soif===502###eoif===513###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");return 118;
}

else {
AKA_mark("lis===-5969-###sois===-261167-###eois===-26116726-###lif===-10-###soif===-###eoif===-500-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");
}
  AKA_mark("lis===5970###sois===261210###eois===261272###lif===11###soif===517###eoif===579###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, 24, "mDCV"));
  AKA_mark("lis===5971###sois===261277###eois===261334###lif===12###soif===584###eoif===641###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");chunk[8 + 0] = (unsigned char)((info->mdcv_red_x) >> 8u);
  AKA_mark("lis===5972###sois===261338###eois===261387###lif===13###soif===645###eoif===694###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");chunk[8 + 1] = (unsigned char)(info->mdcv_red_x);
  AKA_mark("lis===5973###sois===261391###eois===261448###lif===14###soif===698###eoif===755###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");chunk[8 + 2] = (unsigned char)((info->mdcv_red_y) >> 8u);
  AKA_mark("lis===5974###sois===261452###eois===261501###lif===15###soif===759###eoif===808###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");chunk[8 + 3] = (unsigned char)(info->mdcv_red_y);
  AKA_mark("lis===5975###sois===261505###eois===261564###lif===16###soif===812###eoif===871###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");chunk[8 + 4] = (unsigned char)((info->mdcv_green_x) >> 8u);
  AKA_mark("lis===5976###sois===261568###eois===261619###lif===17###soif===875###eoif===926###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");chunk[8 + 5] = (unsigned char)(info->mdcv_green_x);
  AKA_mark("lis===5977###sois===261623###eois===261682###lif===18###soif===930###eoif===989###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");chunk[8 + 6] = (unsigned char)((info->mdcv_green_y) >> 8u);
  AKA_mark("lis===5978###sois===261686###eois===261737###lif===19###soif===993###eoif===1044###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");chunk[8 + 7] = (unsigned char)(info->mdcv_green_y);
  AKA_mark("lis===5979###sois===261741###eois===261799###lif===20###soif===1048###eoif===1106###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");chunk[8 + 8] = (unsigned char)((info->mdcv_blue_x) >> 8u);
  AKA_mark("lis===5980###sois===261803###eois===261853###lif===21###soif===1110###eoif===1160###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");chunk[8 + 9] = (unsigned char)(info->mdcv_blue_x);
  AKA_mark("lis===5981###sois===261857###eois===261916###lif===22###soif===1164###eoif===1223###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");chunk[8 + 10] = (unsigned char)((info->mdcv_blue_y) >> 8u);
  AKA_mark("lis===5982###sois===261920###eois===261971###lif===23###soif===1227###eoif===1278###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");chunk[8 + 11] = (unsigned char)(info->mdcv_blue_y);
  AKA_mark("lis===5983###sois===261975###eois===262035###lif===24###soif===1282###eoif===1342###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");chunk[8 + 12] = (unsigned char)((info->mdcv_white_x) >> 8u);
  AKA_mark("lis===5984###sois===262039###eois===262091###lif===25###soif===1346###eoif===1398###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");chunk[8 + 13] = (unsigned char)(info->mdcv_white_x);
  AKA_mark("lis===5985###sois===262095###eois===262155###lif===26###soif===1402###eoif===1462###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");chunk[8 + 14] = (unsigned char)((info->mdcv_white_y) >> 8u);
  AKA_mark("lis===5986###sois===262159###eois===262211###lif===27###soif===1466###eoif===1518###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");chunk[8 + 15] = (unsigned char)(info->mdcv_white_y);
  AKA_mark("lis===5987###sois===262215###eois===262277###lif===28###soif===1522###eoif===1584###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");lodepng_set32bitInt(chunk + 8 + 16, info->mdcv_max_luminance);
  AKA_mark("lis===5988###sois===262281###eois===262343###lif===29###soif===1588###eoif===1650###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");lodepng_set32bitInt(chunk + 8 + 20, info->mdcv_min_luminance);
  AKA_mark("lis===5989###sois===262347###eois===262381###lif===30###soif===1654###eoif===1688###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");lodepng_chunk_generate_crc(chunk);
  AKA_mark("lis===5990###sois===262385###eois===262394###lif===31###soif===1692###eoif===1701###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_mDCV(ucvector*,LodePNGInfo const*)");return 0;
}

/** Instrumented function addChunk_cLLI(ucvector*,LodePNGInfo const*) */
static unsigned addChunk_cLLI(ucvector* out, const LodePNGInfo* info) /* << Aka begin of function unsigned addChunk_cLLI(ucvector* out, const LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cLLI(ucvector*,LodePNGInfo const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addChunk_cLLI.262417.stub"

  AKA_mark("lis===5994###sois===262476###eois===262497###lif===1###soif===75###eoif===96###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cLLI(ucvector*,LodePNGInfo const*)");unsigned char* chunk;
  AKA_mark("lis===5995###sois===262501###eois===262562###lif===2###soif===100###eoif===161###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cLLI(ucvector*,LodePNGInfo const*)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, 8, "cLLI"));
  AKA_mark("lis===5996###sois===262567###eois===262622###lif===3###soif===166###eoif===221###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cLLI(ucvector*,LodePNGInfo const*)");lodepng_set32bitInt(chunk + 8 + 0, info->clli_max_cll);
  AKA_mark("lis===5997###sois===262626###eois===262682###lif===4###soif===225###eoif===281###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cLLI(ucvector*,LodePNGInfo const*)");lodepng_set32bitInt(chunk + 8 + 4, info->clli_max_fall);
  AKA_mark("lis===5998###sois===262686###eois===262720###lif===5###soif===285###eoif===319###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cLLI(ucvector*,LodePNGInfo const*)");lodepng_chunk_generate_crc(chunk);
  AKA_mark("lis===5999###sois===262724###eois===262733###lif===6###soif===323###eoif===332###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_cLLI(ucvector*,LodePNGInfo const*)");return 0;
}

/** Instrumented function addChunk_eXIf(ucvector*,LodePNGInfo const*) */
static unsigned addChunk_eXIf(ucvector* out, const LodePNGInfo* info) /* << Aka begin of function unsigned addChunk_eXIf(ucvector* out, const LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_eXIf(ucvector*,LodePNGInfo const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addChunk_eXIf.262756.stub"

  AKA_mark("lis===6003###sois===262815###eois===262886###lif===1###soif===75###eoif===146###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_eXIf(ucvector*,LodePNGInfo const*)");return lodepng_chunk_createv(out, info->exif_size, "eXIf", info->exif);
}

/** Instrumented function addChunk_sBIT(ucvector*,LodePNGInfo const*) */
static unsigned addChunk_sBIT(ucvector* out, const LodePNGInfo* info) /* << Aka begin of function unsigned addChunk_sBIT(ucvector* out, const LodePNGInfo* info) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addChunk_sBIT.262909.stub"

  AKA_mark("lis===6007###sois===262968###eois===263054###lif===1###soif===75###eoif===161###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");unsigned bitdepth = (info->color.colortype == LCT_PALETTE) ? 8 : info->color.bitdepth;
  AKA_mark("lis===6008###sois===263058###eois===263083###lif===2###soif===165###eoif===190###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");unsigned char* chunk = 0;
  if(AKA_mark("lis===6009###sois===263090###eois===263123###lif===3###soif===197###eoif===230###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (AKA_mark("lis===6009###sois===263090###eois===263123###lif===3###soif===197###eoif===230###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->color.colortype == LCT_GREY))) {
    if(AKA_mark("lis===6010###sois===263135###eois===263179###lif===4###soif===242###eoif===286###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && ((AKA_mark("lis===6010###sois===263135###eois===263152###lif===4###soif===242###eoif===259###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->sbit_r == 0)) || (AKA_mark("lis===6010###sois===263156###eois===263179###lif===4###soif===263###eoif===286###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->sbit_r > bitdepth)))) {
AKA_mark("lis===6010###sois===263181###eois===263192###lif===4###soif===288###eoif===299###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");return 115;
}

else {
AKA_mark("lis===-6010-###sois===-263135-###eois===-26313544-###lif===-4-###soif===-###eoif===-286-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");
}
    AKA_mark("lis===6011###sois===263198###eois===263259###lif===5###soif===305###eoif===366###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, 1, "sBIT"));
    AKA_mark("lis===6012###sois===263266###eois===263290###lif===6###soif===373###eoif===397###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");chunk[8] = info->sbit_r;
  } else {
if(AKA_mark("lis===6013###sois===263304###eois===263376###lif===7###soif===411###eoif===483###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && ((AKA_mark("lis===6013###sois===263304###eois===263336###lif===7###soif===411###eoif===443###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->color.colortype == LCT_RGB)) || (AKA_mark("lis===6013###sois===263340###eois===263376###lif===7###soif===447###eoif===483###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->color.colortype == LCT_PALETTE)))) {
    if(AKA_mark("lis===6014###sois===263388###eois===263447###lif===8###soif===495###eoif===554###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (((AKA_mark("lis===6014###sois===263388###eois===263405###lif===8###soif===495###eoif===512###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->sbit_r == 0)) || (AKA_mark("lis===6014###sois===263409###eois===263426###lif===8###soif===516###eoif===533###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->sbit_g == 0))) || (AKA_mark("lis===6014###sois===263430###eois===263447###lif===8###soif===537###eoif===554###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->sbit_b == 0)))) {
AKA_mark("lis===6014###sois===263449###eois===263460###lif===8###soif===556###eoif===567###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");return 115;
}

else {
AKA_mark("lis===-6014-###sois===-263388-###eois===-26338859-###lif===-8-###soif===-###eoif===-554-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");
}
    if(AKA_mark("lis===6015###sois===263469###eois===263546###lif===9###soif===576###eoif===653###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (((AKA_mark("lis===6015###sois===263469###eois===263492###lif===9###soif===576###eoif===599###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->sbit_r > bitdepth)) || (AKA_mark("lis===6015###sois===263496###eois===263519###lif===9###soif===603###eoif===626###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->sbit_g > bitdepth))) || (AKA_mark("lis===6015###sois===263523###eois===263546###lif===9###soif===630###eoif===653###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->sbit_b > bitdepth)))) {
AKA_mark("lis===6015###sois===263548###eois===263559###lif===9###soif===655###eoif===666###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");return 115;
}

else {
AKA_mark("lis===-6015-###sois===-263469-###eois===-26346977-###lif===-9-###soif===-###eoif===-653-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");
}
    AKA_mark("lis===6016###sois===263565###eois===263626###lif===10###soif===672###eoif===733###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, 3, "sBIT"));
    AKA_mark("lis===6017###sois===263633###eois===263657###lif===11###soif===740###eoif===764###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");chunk[8] = info->sbit_r;
    AKA_mark("lis===6018###sois===263663###eois===263687###lif===12###soif===770###eoif===794###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");chunk[9] = info->sbit_g;
    AKA_mark("lis===6019###sois===263693###eois===263718###lif===13###soif===800###eoif===825###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");chunk[10] = info->sbit_b;
  } else {
if(AKA_mark("lis===6020###sois===263732###eois===263771###lif===14###soif===839###eoif===878###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (AKA_mark("lis===6020###sois===263732###eois===263771###lif===14###soif===839###eoif===878###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->color.colortype == LCT_GREY_ALPHA))) {
    if(AKA_mark("lis===6021###sois===263783###eois===263821###lif===15###soif===890###eoif===928###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && ((AKA_mark("lis===6021###sois===263783###eois===263800###lif===15###soif===890###eoif===907###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->sbit_r == 0)) || (AKA_mark("lis===6021###sois===263804###eois===263821###lif===15###soif===911###eoif===928###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->sbit_a == 0)))) {
AKA_mark("lis===6021###sois===263823###eois===263834###lif===15###soif===930###eoif===941###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");return 115;
}

else {
AKA_mark("lis===-6021-###sois===-263783-###eois===-26378338-###lif===-15-###soif===-###eoif===-928-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");
}
    if(AKA_mark("lis===6022###sois===263843###eois===263893###lif===16###soif===950###eoif===1000###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && ((AKA_mark("lis===6022###sois===263843###eois===263866###lif===16###soif===950###eoif===973###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->sbit_r > bitdepth)) || (AKA_mark("lis===6022###sois===263870###eois===263893###lif===16###soif===977###eoif===1000###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->sbit_a > bitdepth)))) {
AKA_mark("lis===6022###sois===263895###eois===263906###lif===16###soif===1002###eoif===1013###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");return 115;
}

else {
AKA_mark("lis===-6022-###sois===-263843-###eois===-26384350-###lif===-16-###soif===-###eoif===-1000-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");
}
    AKA_mark("lis===6023###sois===263912###eois===263973###lif===17###soif===1019###eoif===1080###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, 2, "sBIT"));
    AKA_mark("lis===6024###sois===263980###eois===264004###lif===18###soif===1087###eoif===1111###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");chunk[8] = info->sbit_r;
    AKA_mark("lis===6025###sois===264010###eois===264034###lif===19###soif===1117###eoif===1141###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");chunk[9] = info->sbit_a;
  } else {
if(AKA_mark("lis===6026###sois===264048###eois===264081###lif===20###soif===1155###eoif===1188###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (AKA_mark("lis===6026###sois===264048###eois===264081###lif===20###soif===1155###eoif===1188###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->color.colortype == LCT_RGBA))) {
    if(AKA_mark("lis===6027###sois===264093###eois===264297###lif===21###soif===1200###eoif===1404###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && ((((((((AKA_mark("lis===6027###sois===264093###eois===264110###lif===21###soif===1200###eoif===1217###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->sbit_r == 0)) || (AKA_mark("lis===6027###sois===264114###eois===264131###lif===21###soif===1221###eoif===1238###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->sbit_g == 0))) || (AKA_mark("lis===6027###sois===264135###eois===264152###lif===21###soif===1242###eoif===1259###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->sbit_b == 0))) || (AKA_mark("lis===6027###sois===264156###eois===264173###lif===21###soif===1263###eoif===1280###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->sbit_a == 0))) ||
       (AKA_mark("lis===6028###sois===264185###eois===264208###lif===22###soif===1292###eoif===1315###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->sbit_r > bitdepth))) || (AKA_mark("lis===6028###sois===264212###eois===264235###lif===22###soif===1319###eoif===1342###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->sbit_g > bitdepth))) ||
       (AKA_mark("lis===6029###sois===264247###eois===264270###lif===23###soif===1354###eoif===1377###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->sbit_b > bitdepth))) || (AKA_mark("lis===6029###sois===264274###eois===264297###lif===23###soif===1381###eoif===1404###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (info->sbit_a > bitdepth)))) {
      AKA_mark("lis===6030###sois===264308###eois===264319###lif===24###soif===1415###eoif===1426###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");return 115;
    }
else {
AKA_mark("lis===-6027-###sois===-264093-###eois===-264093204-###lif===-21-###soif===-###eoif===-1404-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");
}
    AKA_mark("lis===6032###sois===264332###eois===264393###lif===26###soif===1439###eoif===1500###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");CERROR_TRY_RETURN(lodepng_chunk_init(&chunk, out, 4, "sBIT"));
    AKA_mark("lis===6033###sois===264400###eois===264424###lif===27###soif===1507###eoif===1531###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");chunk[8] = info->sbit_r;
    AKA_mark("lis===6034###sois===264430###eois===264454###lif===28###soif===1537###eoif===1561###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");chunk[9] = info->sbit_g;
    AKA_mark("lis===6035###sois===264460###eois===264485###lif===29###soif===1567###eoif===1592###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");chunk[10] = info->sbit_b;
    AKA_mark("lis===6036###sois===264491###eois===264516###lif===30###soif===1598###eoif===1623###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");chunk[11] = info->sbit_a;
  }
else {
AKA_mark("lis===-6026-###sois===-264048-###eois===-26404833-###lif===-20-###soif===-###eoif===-1188-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");
}
}

}

}

  if(AKA_mark("lis===6038###sois===264528###eois===264533###lif===32###soif===1635###eoif===1640###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (AKA_mark("lis===6038###sois===264528###eois===264533###lif===32###soif===1635###eoif===1640###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)") && (chunk))) {
AKA_mark("lis===6038###sois===264535###eois===264569###lif===32###soif===1642###eoif===1676###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");lodepng_chunk_generate_crc(chunk);
}

else {
AKA_mark("lis===-6038-###sois===-264528-###eois===-2645285-###lif===-32-###soif===-###eoif===-1640-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");
}
  AKA_mark("lis===6039###sois===264573###eois===264582###lif===33###soif===1680###eoif===1689###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addChunk_sBIT(ucvector*,LodePNGInfo const*)");return 0;
}

#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/

/** Instrumented function filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char) */
static void filterScanline(unsigned char* out, const unsigned char* scanline, const unsigned char* prevline,
                           size_t length, size_t bytewidth, unsigned char filterType) /* << Aka begin of function void filterScanline(unsigned char* out, const unsigned char* scanline, const unsigned char* prevline,
                           size_t length, size_t bytewidth, unsigned char filterType) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.filterScanline.264648.stub"

  AKA_mark("lis===6046###sois===264837###eois===264846###lif===2###soif===201###eoif===210###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");size_t i;
  AKA_mark("lis===6047###sois===264857###eois===264867###lif===3###soif===221###eoif===231###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");switch(filterType) {
    case 0: if (filterType == 0)
AKA_mark("lis===6048###sois===264876###eois===264883###lif===4###soif===240###eoif===247###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");
 /*None*/
      int AKA_BLOCK_LOOP_264900 = 0;
    AKA_mark("lis===6049###sois===264904###eois===264910###lif===5###soif===268###eoif===274###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");
for(i = 0; AKA_mark("lis===6049###sois===264911###eois===264922###lif===5###soif===275###eoif===286###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (AKA_mark("lis===6049###sois===264911###eois===264922###lif===5###soif===275###eoif===286###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (i != length)); ({AKA_mark("lis===6049###sois===264924###eois===264927###lif===5###soif===288###eoif===291###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");++i;})) {
AKA_mark("lis===6049###sois===264929###eois===264950###lif===5###soif===293###eoif===314###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");out[i] = scanline[i];
}

      AKA_mark("lis===6050###sois===264958###eois===264964###lif===6###soif===322###eoif===328###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");break;
    case 1: if (filterType == 1)
AKA_mark("lis===6051###sois===264970###eois===264977###lif===7###soif===334###eoif===341###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");
 /*Sub*/
      int AKA_BLOCK_LOOP_264993 = 0;
    AKA_mark("lis===6052###sois===264997###eois===265003###lif===8###soif===361###eoif===367###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");
for(i = 0; AKA_mark("lis===6052###sois===265004###eois===265018###lif===8###soif===368###eoif===382###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (AKA_mark("lis===6052###sois===265004###eois===265018###lif===8###soif===368###eoif===382###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (i != bytewidth)); ({AKA_mark("lis===6052###sois===265020###eois===265023###lif===8###soif===384###eoif===387###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");++i;})) {
AKA_mark("lis===6052###sois===265025###eois===265046###lif===8###soif===389###eoif===410###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");out[i] = scanline[i];
}

      int AKA_BLOCK_LOOP_265054 = 0;
    AKA_mark("lis===6053###sois===265058###eois===265072###lif===9###soif===422###eoif===436###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");
for(i = bytewidth; AKA_mark("lis===6053###sois===265073###eois===265083###lif===9###soif===437###eoif===447###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (AKA_mark("lis===6053###sois===265073###eois===265083###lif===9###soif===437###eoif===447###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (i < length)); ({AKA_mark("lis===6053###sois===265085###eois===265088###lif===9###soif===449###eoif===452###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");++i;})) {
AKA_mark("lis===6053###sois===265090###eois===265137###lif===9###soif===454###eoif===501###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");out[i] = scanline[i] - scanline[i - bytewidth];
}

      AKA_mark("lis===6054###sois===265145###eois===265151###lif===10###soif===509###eoif===515###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");break;
    case 2: if (filterType == 2)
AKA_mark("lis===6055###sois===265157###eois===265164###lif===11###soif===521###eoif===528###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");
 /*Up*/
      if(AKA_mark("lis===6056###sois===265182###eois===265190###lif===12###soif===546###eoif===554###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (AKA_mark("lis===6056###sois===265182###eois===265190###lif===12###soif===546###eoif===554###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (prevline))) {
        int AKA_BLOCK_LOOP_265203 = 0;
    AKA_mark("lis===6057###sois===265207###eois===265213###lif===13###soif===571###eoif===577###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");
for(i = 0; AKA_mark("lis===6057###sois===265214###eois===265225###lif===13###soif===578###eoif===589###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (AKA_mark("lis===6057###sois===265214###eois===265225###lif===13###soif===578###eoif===589###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (i != length)); ({AKA_mark("lis===6057###sois===265227###eois===265230###lif===13###soif===591###eoif===594###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");++i;})) {
AKA_mark("lis===6057###sois===265232###eois===265267###lif===13###soif===596###eoif===631###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");out[i] = scanline[i] - prevline[i];
}

      } else {
        int AKA_BLOCK_LOOP_265293 = 0;
    AKA_mark("lis===6059###sois===265297###eois===265303###lif===15###soif===661###eoif===667###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");
for(i = 0; AKA_mark("lis===6059###sois===265304###eois===265315###lif===15###soif===668###eoif===679###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (AKA_mark("lis===6059###sois===265304###eois===265315###lif===15###soif===668###eoif===679###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (i != length)); ({AKA_mark("lis===6059###sois===265317###eois===265320###lif===15###soif===681###eoif===684###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");++i;})) {
AKA_mark("lis===6059###sois===265322###eois===265343###lif===15###soif===686###eoif===707###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");out[i] = scanline[i];
}

      }
      AKA_mark("lis===6061###sois===265360###eois===265366###lif===17###soif===724###eoif===730###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");break;
    case 3: if (filterType == 3)
AKA_mark("lis===6062###sois===265372###eois===265379###lif===18###soif===736###eoif===743###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");
 /*Average*/
      if(AKA_mark("lis===6063###sois===265402###eois===265410###lif===19###soif===766###eoif===774###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (AKA_mark("lis===6063###sois===265402###eois===265410###lif===19###soif===766###eoif===774###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (prevline))) {
        int AKA_BLOCK_LOOP_265423 = 0;
    AKA_mark("lis===6064###sois===265427###eois===265433###lif===20###soif===791###eoif===797###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");
for(i = 0; AKA_mark("lis===6064###sois===265434###eois===265448###lif===20###soif===798###eoif===812###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (AKA_mark("lis===6064###sois===265434###eois===265448###lif===20###soif===798###eoif===812###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (i != bytewidth)); ({AKA_mark("lis===6064###sois===265450###eois===265453###lif===20###soif===814###eoif===817###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");++i;})) {
AKA_mark("lis===6064###sois===265455###eois===265497###lif===20###soif===819###eoif===861###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");out[i] = scanline[i] - (prevline[i] >> 1);
}

        int AKA_BLOCK_LOOP_265507 = 0;
    AKA_mark("lis===6065###sois===265511###eois===265525###lif===21###soif===875###eoif===889###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");
for(i = bytewidth; AKA_mark("lis===6065###sois===265526###eois===265536###lif===21###soif===890###eoif===900###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (AKA_mark("lis===6065###sois===265526###eois===265536###lif===21###soif===890###eoif===900###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (i < length)); ({AKA_mark("lis===6065###sois===265538###eois===265541###lif===21###soif===902###eoif===905###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");++i;})) {
AKA_mark("lis===6065###sois===265543###eois===265613###lif===21###soif===907###eoif===977###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");out[i] = scanline[i] - ((scanline[i - bytewidth] + prevline[i]) >> 1);
}

      } else {
        int AKA_BLOCK_LOOP_265639 = 0;
    AKA_mark("lis===6067###sois===265643###eois===265649###lif===23###soif===1007###eoif===1013###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");
for(i = 0; AKA_mark("lis===6067###sois===265650###eois===265664###lif===23###soif===1014###eoif===1028###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (AKA_mark("lis===6067###sois===265650###eois===265664###lif===23###soif===1014###eoif===1028###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (i != bytewidth)); ({AKA_mark("lis===6067###sois===265666###eois===265669###lif===23###soif===1030###eoif===1033###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");++i;})) {
AKA_mark("lis===6067###sois===265671###eois===265692###lif===23###soif===1035###eoif===1056###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");out[i] = scanline[i];
}

        int AKA_BLOCK_LOOP_265702 = 0;
    AKA_mark("lis===6068###sois===265706###eois===265720###lif===24###soif===1070###eoif===1084###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");
for(i = bytewidth; AKA_mark("lis===6068###sois===265721###eois===265731###lif===24###soif===1085###eoif===1095###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (AKA_mark("lis===6068###sois===265721###eois===265731###lif===24###soif===1085###eoif===1095###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (i < length)); ({AKA_mark("lis===6068###sois===265733###eois===265736###lif===24###soif===1097###eoif===1100###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");++i;})) {
AKA_mark("lis===6068###sois===265738###eois===265792###lif===24###soif===1102###eoif===1156###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");out[i] = scanline[i] - (scanline[i - bytewidth] >> 1);
}

      }
      AKA_mark("lis===6070###sois===265809###eois===265815###lif===26###soif===1173###eoif===1179###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");break;
    case 4: if (filterType == 4)
AKA_mark("lis===6071###sois===265821###eois===265828###lif===27###soif===1185###eoif===1192###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");
 /*Paeth*/
      if(AKA_mark("lis===6072###sois===265849###eois===265857###lif===28###soif===1213###eoif===1221###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (AKA_mark("lis===6072###sois===265849###eois===265857###lif===28###soif===1213###eoif===1221###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (prevline))) {
        /*paethPredictor(0, prevline[i], 0) is always prevline[i]*/
        int AKA_BLOCK_LOOP_265939 = 0;
    AKA_mark("lis===6074###sois===265943###eois===265949###lif===30###soif===1307###eoif===1313###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");
for(i = 0; AKA_mark("lis===6074###sois===265950###eois===265964###lif===30###soif===1314###eoif===1328###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (AKA_mark("lis===6074###sois===265950###eois===265964###lif===30###soif===1314###eoif===1328###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (i != bytewidth)); ({AKA_mark("lis===6074###sois===265966###eois===265969###lif===30###soif===1330###eoif===1333###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");++i;})) {
AKA_mark("lis===6074###sois===265971###eois===266008###lif===30###soif===1335###eoif===1372###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");out[i] = (scanline[i] - prevline[i]);
}

        int AKA_BLOCK_LOOP_266018 = 0;
    AKA_mark("lis===6075###sois===266022###eois===266036###lif===31###soif===1386###eoif===1400###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");
for(i = bytewidth; AKA_mark("lis===6075###sois===266037###eois===266047###lif===31###soif===1401###eoif===1411###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (AKA_mark("lis===6075###sois===266037###eois===266047###lif===31###soif===1401###eoif===1411###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (i < length)); ({AKA_mark("lis===6075###sois===266049###eois===266052###lif===31###soif===1413###eoif===1416###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");++i;})) {
        AKA_BLOCK_LOOP_266018++;
        if (AKA_BLOCK_LOOP_266018 > 1000) {
            //break;
        }
          AKA_mark("lis===6076###sois===266067###eois===266170###lif===32###soif===1431###eoif===1534###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");out[i] = (scanline[i] - paethPredictor(scanline[i - bytewidth], prevline[i], prevline[i - bytewidth]));
        }
      } else {
        int AKA_BLOCK_LOOP_266207 = 0;
    AKA_mark("lis===6079###sois===266211###eois===266217###lif===35###soif===1575###eoif===1581###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");
for(i = 0; AKA_mark("lis===6079###sois===266218###eois===266232###lif===35###soif===1582###eoif===1596###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (AKA_mark("lis===6079###sois===266218###eois===266232###lif===35###soif===1582###eoif===1596###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (i != bytewidth)); ({AKA_mark("lis===6079###sois===266234###eois===266237###lif===35###soif===1598###eoif===1601###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");++i;})) {
AKA_mark("lis===6079###sois===266239###eois===266260###lif===35###soif===1603###eoif===1624###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");out[i] = scanline[i];
}

        /*paethPredictor(scanline[i - bytewidth], 0, 0) is always scanline[i - bytewidth]*/
        int AKA_BLOCK_LOOP_266363 = 0;
    AKA_mark("lis===6081###sois===266367###eois===266381###lif===37###soif===1731###eoif===1745###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");
for(i = bytewidth; AKA_mark("lis===6081###sois===266382###eois===266392###lif===37###soif===1746###eoif===1756###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (AKA_mark("lis===6081###sois===266382###eois===266392###lif===37###soif===1746###eoif===1756###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)") && (i < length)); ({AKA_mark("lis===6081###sois===266394###eois===266397###lif===37###soif===1758###eoif===1761###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");++i;})) {
AKA_mark("lis===6081###sois===266399###eois===266448###lif===37###soif===1763###eoif===1812###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");out[i] = (scanline[i] - scanline[i - bytewidth]);
}

      }
      AKA_mark("lis===6083###sois===266465###eois===266471###lif===39###soif===1829###eoif===1835###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");break;
    default: if (filterType != 0 && filterType != 1 && filterType != 2 && filterType != 3 && filterType != 4)
AKA_mark("lis===6084###sois===266477###eois===266485###lif===40###soif===1841###eoif===1849###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");
 AKA_mark("lis===6084###sois===266486###eois===266493###lif===40###soif===1850###eoif===1857###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filterScanline(unsigned char*,unsigned char const*,unsigned char const*,size_t,size_t,unsigned char)");return; /*invalid filter type given*/
  }
}

/* integer binary logarithm, max return value is 31 */
/** Instrumented function ilog2(size_t) */
static size_t ilog2(size_t i) /* << Aka begin of function size_t ilog2(size_t i) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.ilog2.266605.stub"

  AKA_mark("lis===6090###sois===266626###eois===266644###lif===1###soif===35###eoif===53###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)");size_t result = 0;
  if(AKA_mark("lis===6091###sois===266651###eois===266661###lif===2###soif===60###eoif===70###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)") && (AKA_mark("lis===6091###sois===266651###eois===266661###lif===2###soif===60###eoif===70###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)") && (i >= 65536))) { AKA_mark("lis===6091###sois===266665###eois===266678###lif===2###soif===74###eoif===87###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)");result += 16; AKA_mark("lis===6091###sois===266679###eois===266688###lif===2###soif===88###eoif===97###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)");i >>= 16; }
else {
AKA_mark("lis===-6091-###sois===-266651-###eois===-26665110-###lif===-2-###soif===-###eoif===-70-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)");
}
  if(AKA_mark("lis===6092###sois===266697###eois===266705###lif===3###soif===106###eoif===114###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)") && (AKA_mark("lis===6092###sois===266697###eois===266705###lif===3###soif===106###eoif===114###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)") && (i >= 256))) { AKA_mark("lis===6092###sois===266709###eois===266721###lif===3###soif===118###eoif===130###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)");result += 8; AKA_mark("lis===6092###sois===266722###eois===266730###lif===3###soif===131###eoif===139###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)");i >>= 8; }
else {
AKA_mark("lis===-6092-###sois===-266697-###eois===-2666978-###lif===-3-###soif===-###eoif===-114-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)");
}
  if(AKA_mark("lis===6093###sois===266739###eois===266746###lif===4###soif===148###eoif===155###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)") && (AKA_mark("lis===6093###sois===266739###eois===266746###lif===4###soif===148###eoif===155###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)") && (i >= 16))) { AKA_mark("lis===6093###sois===266750###eois===266762###lif===4###soif===159###eoif===171###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)");result += 4; AKA_mark("lis===6093###sois===266763###eois===266771###lif===4###soif===172###eoif===180###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)");i >>= 4; }
else {
AKA_mark("lis===-6093-###sois===-266739-###eois===-2667397-###lif===-4-###soif===-###eoif===-155-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)");
}
  if(AKA_mark("lis===6094###sois===266780###eois===266786###lif===5###soif===189###eoif===195###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)") && (AKA_mark("lis===6094###sois===266780###eois===266786###lif===5###soif===189###eoif===195###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)") && (i >= 4))) { AKA_mark("lis===6094###sois===266790###eois===266802###lif===5###soif===199###eoif===211###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)");result += 2; AKA_mark("lis===6094###sois===266803###eois===266811###lif===5###soif===212###eoif===220###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)");i >>= 2; }
else {
AKA_mark("lis===-6094-###sois===-266780-###eois===-2667806-###lif===-5-###soif===-###eoif===-195-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)");
}
  if(AKA_mark("lis===6095###sois===266820###eois===266826###lif===6###soif===229###eoif===235###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)") && (AKA_mark("lis===6095###sois===266820###eois===266826###lif===6###soif===229###eoif===235###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)") && (i >= 2))) { AKA_mark("lis===6095###sois===266830###eois===266842###lif===6###soif===239###eoif===251###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)");result += 1; /*i >>= 1;*/ }
else {
AKA_mark("lis===-6095-###sois===-266820-###eois===-2668206-###lif===-6-###soif===-###eoif===-235-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)");
}
  AKA_mark("lis===6096###sois===266861###eois===266875###lif===7###soif===270###eoif===284###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2(size_t)");return result;
}

/* integer approximation for i * log2(i), helper function for LFS_ENTROPY */
/** Instrumented function ilog2i(size_t) */
static size_t ilog2i(size_t i) /* << Aka begin of function size_t ilog2i(size_t i) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2i(size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.ilog2i.266974.stub"

  AKA_mark("lis===6101###sois===266996###eois===267005###lif===1###soif===36###eoif===45###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2i(size_t)");size_t l;
  if(AKA_mark("lis===6102###sois===267012###eois===267018###lif===2###soif===52###eoif===58###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2i(size_t)") && (AKA_mark("lis===6102###sois===267012###eois===267018###lif===2###soif===52###eoif===58###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2i(size_t)") && (i == 0))) {
AKA_mark("lis===6102###sois===267020###eois===267029###lif===2###soif===60###eoif===69###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2i(size_t)");return 0;
}

else {
AKA_mark("lis===-6102-###sois===-267012-###eois===-2670126-###lif===-2-###soif===-###eoif===-58-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2i(size_t)");
}
  AKA_mark("lis===6103###sois===267033###eois===267046###lif===3###soif===73###eoif===86###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2i(size_t)");l = ilog2(i);
  /* approximate i*log2(i): l is integer logarithm, ((i - (1u << l)) << 1u)
  linearly approximates the missing fractional part multiplied by i */
  AKA_mark("lis===6106###sois===267199###eois===267247###lif===6###soif===239###eoif===287###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\ilog2i(size_t)");return i * l + ((i - (((size_t)1) << l)) << 1u);
}

/** Instrumented function filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*) */
static unsigned filter(unsigned char* out, const unsigned char* in, unsigned w, unsigned h,
                       const LodePNGColorMode* color, const LodePNGEncoderSettings* settings) /* << Aka begin of function unsigned filter(unsigned char* out, const unsigned char* in, unsigned w, unsigned h,
                       const LodePNGColorMode* color, const LodePNGEncoderSettings* settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.filter.267270.stub"

  /*
  For PNG filter method 0
  out must be a buffer with as size: h + (w * h * bpp + 7u) / 8u, because there are
  the scanlines with 1 extra byte per scanline
  */

  AKA_mark("lis===6117###sois===267620###eois===267658###lif===8###soif===366###eoif===404###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");unsigned bpp = lodepng_get_bpp(color);
  /*the width of a scanline in bytes, not including the filter type*/
  AKA_mark("lis===6119###sois===267733###eois===267794###lif===10###soif===479###eoif===540###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");size_t linebytes = lodepng_get_raw_size_idat(w, 1, bpp) - 1u;

  /*bytewidth is used for filtering, is 1 when bpp < 8, number of bytes per pixel otherwise*/
  AKA_mark("lis===6122###sois===267895###eois===267930###lif===13###soif===641###eoif===676###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");size_t bytewidth = (bpp + 7u) / 8u;
  AKA_mark("lis===6123###sois===267934###eois===267968###lif===14###soif===680###eoif===714###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");const unsigned char* prevline = 0;
  AKA_mark("lis===6124###sois===267972###eois===267986###lif===15###soif===718###eoif===732###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");unsigned x, y;
  AKA_mark("lis===6125###sois===267990###eois===268009###lif===16###soif===736###eoif===755###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");unsigned error = 0;
  AKA_mark("lis===6126###sois===268013###eois===268072###lif===17###soif===759###eoif===818###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");LodePNGFilterStrategy strategy = settings->filter_strategy;

  if(AKA_mark("lis===6128###sois===268081###eois===268170###lif===19###soif===827###eoif===916###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && ((AKA_mark("lis===6128###sois===268081###eois===268110###lif===19###soif===827###eoif===856###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (settings->filter_palette_zero)) && (((AKA_mark("lis===6128###sois===268115###eois===268146###lif===19###soif===861###eoif===892###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (color->colortype == LCT_PALETTE)) || (AKA_mark("lis===6128###sois===268150###eois===268169###lif===19###soif===896###eoif===915###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (color->bitdepth < 8)))))) {
    /*if the filter_palette_zero setting is enabled, override the filter strategy with
    zero for all scanlines for palette and less-than-8-bitdepth images*/
    AKA_mark("lis===6131###sois===268341###eois===268361###lif===22###soif===1087###eoif===1107###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");strategy = LFS_ZERO;
  }
else {
AKA_mark("lis===-6128-###sois===-268081-###eois===-26808189-###lif===-19-###soif===-###eoif===-916-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
}

  if(AKA_mark("lis===6134###sois===268375###eois===268383###lif===25###soif===1121###eoif===1129###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6134###sois===268375###eois===268383###lif===25###soif===1121###eoif===1129###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (bpp == 0))) {
AKA_mark("lis===6134###sois===268385###eois===268395###lif===25###soif===1131###eoif===1141###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");return 31;
}

else {
AKA_mark("lis===-6134-###sois===-268375-###eois===-2683758-###lif===-25-###soif===-###eoif===-1129-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
} /*error: invalid color type*/

  if(AKA_mark("lis===6136###sois===268434###eois===268478###lif===27###soif===1180###eoif===1224###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && ((AKA_mark("lis===6136###sois===268434###eois===268454###lif===27###soif===1180###eoif===1200###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (strategy >= LFS_ZERO)) && (AKA_mark("lis===6136###sois===268458###eois===268478###lif===27###soif===1204###eoif===1224###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (strategy <= LFS_FOUR)))) {
    AKA_mark("lis===6137###sois===268487###eois===268532###lif===28###soif===1233###eoif===1278###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");unsigned char type = (unsigned char)strategy;
    int AKA_BLOCK_LOOP_268538 = 0;
    AKA_mark("lis===6138###sois===268542###eois===268548###lif===29###soif===1288###eoif===1294###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(y = 0; AKA_mark("lis===6138###sois===268549###eois===268555###lif===29###soif===1295###eoif===1301###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6138###sois===268549###eois===268555###lif===29###soif===1295###eoif===1301###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (y != h)); ({AKA_mark("lis===6138###sois===268557###eois===268560###lif===29###soif===1303###eoif===1306###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++y;})) {
        AKA_BLOCK_LOOP_268538++;
        if (AKA_BLOCK_LOOP_268538 > 1000) {
            //break;
        }
      AKA_mark("lis===6139###sois===268571###eois===268609###lif===30###soif===1317###eoif===1355###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");size_t outindex = (1 + linebytes) * y; /*the extra filterbyte added to each row*/
      AKA_mark("lis===6140###sois===268660###eois===268691###lif===31###soif===1406###eoif===1437###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");size_t inindex = linebytes * y;
      AKA_mark("lis===6141###sois===268699###eois===268720###lif===32###soif===1445###eoif===1466###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");out[outindex] = type; /*filter type byte*/
      AKA_mark("lis===6142###sois===268749###eois===268836###lif===33###soif===1495###eoif===1582###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");filterScanline(&out[outindex + 1], &in[inindex], prevline, linebytes, bytewidth, type);
      AKA_mark("lis===6143###sois===268844###eois===268868###lif===34###soif===1590###eoif===1614###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");prevline = &in[inindex];
    }
  } else {
if(AKA_mark("lis===6145###sois===268889###eois===268911###lif===36###soif===1635###eoif===1657###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6145###sois===268889###eois===268911###lif===36###soif===1635###eoif===1657###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (strategy == LFS_MINSUM))) {
    /*adaptive filtering: independently for each row, try all five filter types and select the one that produces the
    smallest sum of absolute values per row.*/
    AKA_mark("lis===6148###sois===269086###eois===269112###lif===39###soif===1832###eoif===1858###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");unsigned char* attempt[5]; /*five filtering attempts, one for each filter type*/
    AKA_mark("lis===6149###sois===269172###eois===269192###lif===40###soif===1918###eoif===1938###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");size_t smallest = 0;
    AKA_mark("lis===6150###sois===269198###eois===269231###lif===41###soif===1944###eoif===1977###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");unsigned char type, bestType = 0;

    int AKA_BLOCK_LOOP_269239 = 0;
    AKA_mark("lis===6152###sois===269243###eois===269252###lif===43###soif===1989###eoif===1998###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(type = 0; AKA_mark("lis===6152###sois===269253###eois===269262###lif===43###soif===1999###eoif===2008###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6152###sois===269253###eois===269262###lif===43###soif===1999###eoif===2008###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (type != 5)); ({AKA_mark("lis===6152###sois===269264###eois===269270###lif===43###soif===2010###eoif===2016###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++type;})) {
        AKA_BLOCK_LOOP_269239++;
        if (AKA_BLOCK_LOOP_269239 > 1000) {
            //break;
        }
      AKA_mark("lis===6153###sois===269281###eois===269339###lif===44###soif===2027###eoif===2085###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");attempt[type] = (unsigned char*)lodepng_malloc(linebytes);
      if(AKA_mark("lis===6154###sois===269350###eois===269364###lif===45###soif===2096###eoif===2110###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6154###sois===269350###eois===269364###lif===45###soif===2096###eoif===2110###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (!attempt[type]))) {
AKA_mark("lis===6154###sois===269366###eois===269377###lif===45###soif===2112###eoif===2123###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");error = 83;
}

else {
AKA_mark("lis===-6154-###sois===-269350-###eois===-26935014-###lif===-45-###soif===-###eoif===-2110-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
} /*alloc fail*/
    }

    if(AKA_mark("lis===6157###sois===269410###eois===269416###lif===48###soif===2156###eoif===2162###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6157###sois===269410###eois===269416###lif===48###soif===2156###eoif===2162###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (!error))) {
      int AKA_BLOCK_LOOP_269427 = 0;
    AKA_mark("lis===6158###sois===269431###eois===269437###lif===49###soif===2177###eoif===2183###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(y = 0; AKA_mark("lis===6158###sois===269438###eois===269444###lif===49###soif===2184###eoif===2190###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6158###sois===269438###eois===269444###lif===49###soif===2184###eoif===2190###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (y != h)); ({AKA_mark("lis===6158###sois===269446###eois===269449###lif===49###soif===2192###eoif===2195###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++y;})) {
        AKA_BLOCK_LOOP_269427++;
        if (AKA_BLOCK_LOOP_269427 > 1000) {
            //break;
        }
        /*try the 5 filter types*/
        int AKA_BLOCK_LOOP_269498 = 0;
    AKA_mark("lis===6160###sois===269502###eois===269511###lif===51###soif===2248###eoif===2257###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(type = 0; AKA_mark("lis===6160###sois===269512###eois===269521###lif===51###soif===2258###eoif===2267###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6160###sois===269512###eois===269521###lif===51###soif===2258###eoif===2267###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (type != 5)); ({AKA_mark("lis===6160###sois===269523###eois===269529###lif===51###soif===2269###eoif===2275###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++type;})) {
        AKA_BLOCK_LOOP_269498++;
        if (AKA_BLOCK_LOOP_269498 > 1000) {
            //break;
        }
          AKA_mark("lis===6161###sois===269544###eois===269559###lif===52###soif===2290###eoif===2305###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");size_t sum = 0;
          AKA_mark("lis===6162###sois===269571###eois===269659###lif===53###soif===2317###eoif===2405###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");filterScanline(attempt[type], &in[y * linebytes], prevline, linebytes, bytewidth, type);

          /*calculate the sum of the result*/
          if(AKA_mark("lis===6165###sois===269723###eois===269732###lif===56###soif===2469###eoif===2478###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6165###sois===269723###eois===269732###lif===56###soif===2469###eoif===2478###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (type == 0))) {
            int AKA_BLOCK_LOOP_269749 = 0;
    AKA_mark("lis===6166###sois===269753###eois===269759###lif===57###soif===2499###eoif===2505###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(x = 0; AKA_mark("lis===6166###sois===269760###eois===269774###lif===57###soif===2506###eoif===2520###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6166###sois===269760###eois===269774###lif===57###soif===2506###eoif===2520###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (x != linebytes)); ({AKA_mark("lis===6166###sois===269776###eois===269779###lif===57###soif===2522###eoif===2525###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++x;})) {
AKA_mark("lis===6166###sois===269781###eois===269822###lif===57###soif===2527###eoif===2568###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");sum += (unsigned char)(attempt[type][x]);
}

          } else {
            int AKA_BLOCK_LOOP_269856 = 0;
    AKA_mark("lis===6168###sois===269860###eois===269866###lif===59###soif===2606###eoif===2612###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(x = 0; AKA_mark("lis===6168###sois===269867###eois===269881###lif===59###soif===2613###eoif===2627###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6168###sois===269867###eois===269881###lif===59###soif===2613###eoif===2627###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (x != linebytes)); ({AKA_mark("lis===6168###sois===269883###eois===269886###lif===59###soif===2629###eoif===2632###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++x;})) {
        AKA_BLOCK_LOOP_269856++;
        if (AKA_BLOCK_LOOP_269856 > 1000) {
            //break;
        }
              /*For differences, each byte should be treated as signed, values above 127 are negative
              (converted to signed char). Filtertype 0 isn't a difference though, so use unsigned there.
              This means filtertype 0 is almost never chosen, but that is justified.*/
              AKA_mark("lis===6172###sois===270202###eois===270237###lif===63###soif===2948###eoif===2983###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");unsigned char s = attempt[type][x];
              AKA_mark("lis===6173###sois===270253###eois===270285###lif===64###soif===2999###eoif===3031###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");sum += s < 128 ? s : (255U - s);
            }
          }

          /*check if this is smallest sum (or if type == 0 it's the first case so always store the values)*/
          if(AKA_mark("lis===6178###sois===270440###eois===270467###lif===69###soif===3186###eoif===3213###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && ((AKA_mark("lis===6178###sois===270440###eois===270449###lif===69###soif===3186###eoif===3195###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (type == 0)) || (AKA_mark("lis===6178###sois===270453###eois===270467###lif===69###soif===3199###eoif===3213###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (sum < smallest)))) {
            AKA_mark("lis===6179###sois===270484###eois===270500###lif===70###soif===3230###eoif===3246###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");bestType = type;
            AKA_mark("lis===6180###sois===270514###eois===270529###lif===71###soif===3260###eoif===3275###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");smallest = sum;
          }
else {
AKA_mark("lis===-6178-###sois===-270440-###eois===-27044027-###lif===-69-###soif===-###eoif===-3213-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
}
        }

        AKA_mark("lis===6184###sois===270565###eois===270595###lif===75###soif===3311###eoif===3341###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");prevline = &in[y * linebytes];

        /*now fill the out values*/
        AKA_mark("lis===6187###sois===270644###eois===270680###lif===78###soif===3390###eoif===3426###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");out[y * (linebytes + 1)] = bestType; /*the first byte of a scanline will be the filter type*/
        int AKA_BLOCK_LOOP_270747 = 0;
    AKA_mark("lis===6188###sois===270751###eois===270757###lif===79###soif===3497###eoif===3503###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(x = 0; AKA_mark("lis===6188###sois===270758###eois===270772###lif===79###soif===3504###eoif===3518###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6188###sois===270758###eois===270772###lif===79###soif===3504###eoif===3518###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (x != linebytes)); ({AKA_mark("lis===6188###sois===270774###eois===270777###lif===79###soif===3520###eoif===3523###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++x;})) {
AKA_mark("lis===6188###sois===270779###eois===270835###lif===79###soif===3525###eoif===3581###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");out[y * (linebytes + 1) + 1 + x] = attempt[bestType][x];
}

      }
    }
else {
AKA_mark("lis===-6157-###sois===-269410-###eois===-2694106-###lif===-48-###soif===-###eoif===-2162-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
}

    int AKA_BLOCK_LOOP_270859 = 0;
    AKA_mark("lis===6192###sois===270863###eois===270872###lif===83###soif===3609###eoif===3618###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(type = 0; AKA_mark("lis===6192###sois===270873###eois===270882###lif===83###soif===3619###eoif===3628###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6192###sois===270873###eois===270882###lif===83###soif===3619###eoif===3628###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (type != 5)); ({AKA_mark("lis===6192###sois===270884###eois===270890###lif===83###soif===3630###eoif===3636###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++type;})) {
AKA_mark("lis===6192###sois===270892###eois===270920###lif===83###soif===3638###eoif===3666###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");lodepng_free(attempt[type]);
}

  } else {
if(AKA_mark("lis===6193###sois===270934###eois===270957###lif===84###soif===3680###eoif===3703###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6193###sois===270934###eois===270957###lif===84###soif===3680###eoif===3703###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (strategy == LFS_ENTROPY))) {
    AKA_mark("lis===6194###sois===270966###eois===270992###lif===85###soif===3712###eoif===3738###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");unsigned char* attempt[5]; /*five filtering attempts, one for each filter type*/
    AKA_mark("lis===6195###sois===271052###eois===271071###lif===86###soif===3798###eoif===3817###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");size_t bestSum = 0;
    AKA_mark("lis===6196###sois===271077###eois===271105###lif===87###soif===3823###eoif===3851###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");unsigned type, bestType = 0;
    AKA_mark("lis===6197###sois===271111###eois===271131###lif===88###soif===3857###eoif===3877###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");unsigned count[256];

    int AKA_BLOCK_LOOP_271139 = 0;
    AKA_mark("lis===6199###sois===271143###eois===271152###lif===90###soif===3889###eoif===3898###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(type = 0; AKA_mark("lis===6199###sois===271153###eois===271162###lif===90###soif===3899###eoif===3908###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6199###sois===271153###eois===271162###lif===90###soif===3899###eoif===3908###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (type != 5)); ({AKA_mark("lis===6199###sois===271164###eois===271170###lif===90###soif===3910###eoif===3916###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++type;})) {
        AKA_BLOCK_LOOP_271139++;
        if (AKA_BLOCK_LOOP_271139 > 1000) {
            //break;
        }
      AKA_mark("lis===6200###sois===271181###eois===271239###lif===91###soif===3927###eoif===3985###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");attempt[type] = (unsigned char*)lodepng_malloc(linebytes);
      if(AKA_mark("lis===6201###sois===271250###eois===271264###lif===92###soif===3996###eoif===4010###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6201###sois===271250###eois===271264###lif===92###soif===3996###eoif===4010###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (!attempt[type]))) {
AKA_mark("lis===6201###sois===271266###eois===271277###lif===92###soif===4012###eoif===4023###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");error = 83;
}

else {
AKA_mark("lis===-6201-###sois===-271250-###eois===-27125014-###lif===-92-###soif===-###eoif===-4010-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
} /*alloc fail*/
    }

    if(AKA_mark("lis===6204###sois===271310###eois===271316###lif===95###soif===4056###eoif===4062###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6204###sois===271310###eois===271316###lif===95###soif===4056###eoif===4062###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (!error))) {
      int AKA_BLOCK_LOOP_271327 = 0;
    AKA_mark("lis===6205###sois===271331###eois===271337###lif===96###soif===4077###eoif===4083###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(y = 0; AKA_mark("lis===6205###sois===271338###eois===271344###lif===96###soif===4084###eoif===4090###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6205###sois===271338###eois===271344###lif===96###soif===4084###eoif===4090###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (y != h)); ({AKA_mark("lis===6205###sois===271346###eois===271349###lif===96###soif===4092###eoif===4095###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++y;})) {
        AKA_BLOCK_LOOP_271327++;
        if (AKA_BLOCK_LOOP_271327 > 1000) {
            //break;
        }
        /*try the 5 filter types*/
        int AKA_BLOCK_LOOP_271398 = 0;
    AKA_mark("lis===6207###sois===271402###eois===271411###lif===98###soif===4148###eoif===4157###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(type = 0; AKA_mark("lis===6207###sois===271412###eois===271421###lif===98###soif===4158###eoif===4167###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6207###sois===271412###eois===271421###lif===98###soif===4158###eoif===4167###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (type != 5)); ({AKA_mark("lis===6207###sois===271423###eois===271429###lif===98###soif===4169###eoif===4175###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++type;})) {
        AKA_BLOCK_LOOP_271398++;
        if (AKA_BLOCK_LOOP_271398 > 1000) {
            //break;
        }
          AKA_mark("lis===6208###sois===271444###eois===271459###lif===99###soif===4190###eoif===4205###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");size_t sum = 0;
          AKA_mark("lis===6209###sois===271471###eois===271559###lif===100###soif===4217###eoif===4305###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");filterScanline(attempt[type], &in[y * linebytes], prevline, linebytes, bytewidth, type);
          AKA_mark("lis===6210###sois===271571###eois===271618###lif===101###soif===4317###eoif===4364###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");lodepng_memset(count, 0, 256 * sizeof(*count));
          int AKA_BLOCK_LOOP_271630 = 0;
    AKA_mark("lis===6211###sois===271634###eois===271640###lif===102###soif===4380###eoif===4386###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(x = 0; AKA_mark("lis===6211###sois===271641###eois===271655###lif===102###soif===4387###eoif===4401###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6211###sois===271641###eois===271655###lif===102###soif===4387###eoif===4401###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (x != linebytes)); ({AKA_mark("lis===6211###sois===271657###eois===271660###lif===102###soif===4403###eoif===4406###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++x;})) {
AKA_mark("lis===6211###sois===271662###eois===271688###lif===102###soif===4408###eoif===4434###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++count[attempt[type][x]];
}

          AKA_mark("lis===6212###sois===271700###eois===271714###lif===103###soif===4446###eoif===4460###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++count[type]; /*the filter type itself is part of the scanline*/
          int AKA_BLOCK_LOOP_271777 = 0;
    AKA_mark("lis===6213###sois===271781###eois===271787###lif===104###soif===4527###eoif===4533###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(x = 0; AKA_mark("lis===6213###sois===271788###eois===271796###lif===104###soif===4534###eoif===4542###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6213###sois===271788###eois===271796###lif===104###soif===4534###eoif===4542###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (x != 256)); ({AKA_mark("lis===6213###sois===271798###eois===271801###lif===104###soif===4544###eoif===4547###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++x;})) {
        AKA_BLOCK_LOOP_271777++;
        if (AKA_BLOCK_LOOP_271777 > 1000) {
            //break;
        }
            AKA_mark("lis===6214###sois===271818###eois===271842###lif===105###soif===4564###eoif===4588###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");sum += ilog2i(count[x]);
          }
          /*check if this is smallest sum (or if type == 0 it's the first case so always store the values)*/
          if(AKA_mark("lis===6217###sois===271980###eois===272006###lif===108###soif===4726###eoif===4752###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && ((AKA_mark("lis===6217###sois===271980###eois===271989###lif===108###soif===4726###eoif===4735###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (type == 0)) || (AKA_mark("lis===6217###sois===271993###eois===272006###lif===108###soif===4739###eoif===4752###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (sum > bestSum)))) {
            AKA_mark("lis===6218###sois===272023###eois===272039###lif===109###soif===4769###eoif===4785###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");bestType = type;
            AKA_mark("lis===6219###sois===272053###eois===272067###lif===110###soif===4799###eoif===4813###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");bestSum = sum;
          }
else {
AKA_mark("lis===-6217-###sois===-271980-###eois===-27198026-###lif===-108-###soif===-###eoif===-4752-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
}
        }

        AKA_mark("lis===6223###sois===272103###eois===272133###lif===114###soif===4849###eoif===4879###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");prevline = &in[y * linebytes];

        /*now fill the out values*/
        AKA_mark("lis===6226###sois===272182###eois===272218###lif===117###soif===4928###eoif===4964###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");out[y * (linebytes + 1)] = bestType; /*the first byte of a scanline will be the filter type*/
        int AKA_BLOCK_LOOP_272285 = 0;
    AKA_mark("lis===6227###sois===272289###eois===272295###lif===118###soif===5035###eoif===5041###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(x = 0; AKA_mark("lis===6227###sois===272296###eois===272310###lif===118###soif===5042###eoif===5056###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6227###sois===272296###eois===272310###lif===118###soif===5042###eoif===5056###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (x != linebytes)); ({AKA_mark("lis===6227###sois===272312###eois===272315###lif===118###soif===5058###eoif===5061###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++x;})) {
AKA_mark("lis===6227###sois===272317###eois===272373###lif===118###soif===5063###eoif===5119###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");out[y * (linebytes + 1) + 1 + x] = attempt[bestType][x];
}

      }
    }
else {
AKA_mark("lis===-6204-###sois===-271310-###eois===-2713106-###lif===-95-###soif===-###eoif===-4062-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
}

    int AKA_BLOCK_LOOP_272397 = 0;
    AKA_mark("lis===6231###sois===272401###eois===272410###lif===122###soif===5147###eoif===5156###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(type = 0; AKA_mark("lis===6231###sois===272411###eois===272420###lif===122###soif===5157###eoif===5166###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6231###sois===272411###eois===272420###lif===122###soif===5157###eoif===5166###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (type != 5)); ({AKA_mark("lis===6231###sois===272422###eois===272428###lif===122###soif===5168###eoif===5174###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++type;})) {
AKA_mark("lis===6231###sois===272430###eois===272458###lif===122###soif===5176###eoif===5204###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");lodepng_free(attempt[type]);
}

  } else {
if(AKA_mark("lis===6232###sois===272472###eois===272498###lif===123###soif===5218###eoif===5244###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6232###sois===272472###eois===272498###lif===123###soif===5218###eoif===5244###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (strategy == LFS_PREDEFINED))) {
    int AKA_BLOCK_LOOP_272507 = 0;
    AKA_mark("lis===6233###sois===272511###eois===272517###lif===124###soif===5257###eoif===5263###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(y = 0; AKA_mark("lis===6233###sois===272518###eois===272524###lif===124###soif===5264###eoif===5270###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6233###sois===272518###eois===272524###lif===124###soif===5264###eoif===5270###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (y != h)); ({AKA_mark("lis===6233###sois===272526###eois===272529###lif===124###soif===5272###eoif===5275###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++y;})) {
        AKA_BLOCK_LOOP_272507++;
        if (AKA_BLOCK_LOOP_272507 > 1000) {
            //break;
        }
      AKA_mark("lis===6234###sois===272540###eois===272578###lif===125###soif===5286###eoif===5324###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");size_t outindex = (1 + linebytes) * y; /*the extra filterbyte added to each row*/
      AKA_mark("lis===6235###sois===272629###eois===272660###lif===126###soif===5375###eoif===5406###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");size_t inindex = linebytes * y;
      AKA_mark("lis===6236###sois===272668###eois===272721###lif===127###soif===5414###eoif===5467###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");unsigned char type = settings->predefined_filters[y];
      AKA_mark("lis===6237###sois===272729###eois===272750###lif===128###soif===5475###eoif===5496###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");out[outindex] = type; /*filter type byte*/
      AKA_mark("lis===6238###sois===272779###eois===272866###lif===129###soif===5525###eoif===5612###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");filterScanline(&out[outindex + 1], &in[inindex], prevline, linebytes, bytewidth, type);
      AKA_mark("lis===6239###sois===272874###eois===272898###lif===130###soif===5620###eoif===5644###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");prevline = &in[inindex];
    }
  } else {
if(AKA_mark("lis===6241###sois===272919###eois===272946###lif===132###soif===5665###eoif===5692###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6241###sois===272919###eois===272946###lif===132###soif===5665###eoif===5692###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (strategy == LFS_BRUTE_FORCE))) {
    /*brute force filter chooser.
    deflate the scanline after every filter attempt to see which one deflates best.
    This is very slow and gives only slightly smaller, sometimes even larger, result*/
    AKA_mark("lis===6245###sois===273163###eois===273178###lif===136###soif===5909###eoif===5924###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");size_t size[5];
    AKA_mark("lis===6246###sois===273184###eois===273210###lif===137###soif===5930###eoif===5956###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");unsigned char* attempt[5]; /*five filtering attempts, one for each filter type*/
    AKA_mark("lis===6247###sois===273270###eois===273290###lif===138###soif===6016###eoif===6036###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");size_t smallest = 0;
    AKA_mark("lis===6248###sois===273296###eois===273328###lif===139###soif===6042###eoif===6074###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");unsigned type = 0, bestType = 0;
    AKA_mark("lis===6249###sois===273334###eois===273355###lif===140###soif===6080###eoif===6101###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");unsigned char* dummy;
    AKA_mark("lis===6250###sois===273361###eois===273398###lif===141###soif===6107###eoif===6144###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");LodePNGCompressSettings zlibsettings;
    AKA_mark("lis===6251###sois===273404###eois===273492###lif===142###soif===6150###eoif===6238###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");lodepng_memcpy(&zlibsettings, &settings->zlibsettings, sizeof(LodePNGCompressSettings));
    /*use fixed tree on the attempts so that the tree is not adapted to the filtertype on purpose,
    to simulate the true case where the tree is the same for the whole image. Sometimes it gives
    better result with dynamic tree anyway. Using the fixed tree sometimes gives worse, but in rare
    cases better compression. It does make this a bit less slow, so it's worth doing this.*/
    AKA_mark("lis===6256###sois===273891###eois===273914###lif===147###soif===6637###eoif===6660###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");zlibsettings.btype = 1;
    /*a custom encoder likely doesn't read the btype setting and is optimized for complete PNG
    images only, so disable it*/
    AKA_mark("lis===6259###sois===274050###eois===274079###lif===150###soif===6796###eoif===6825###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");zlibsettings.custom_zlib = 0;
    AKA_mark("lis===6260###sois===274085###eois===274117###lif===151###soif===6831###eoif===6863###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");zlibsettings.custom_deflate = 0;
    int AKA_BLOCK_LOOP_274123 = 0;
    AKA_mark("lis===6261###sois===274127###eois===274136###lif===152###soif===6873###eoif===6882###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(type = 0; AKA_mark("lis===6261###sois===274137###eois===274146###lif===152###soif===6883###eoif===6892###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6261###sois===274137###eois===274146###lif===152###soif===6883###eoif===6892###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (type != 5)); ({AKA_mark("lis===6261###sois===274148###eois===274154###lif===152###soif===6894###eoif===6900###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++type;})) {
        AKA_BLOCK_LOOP_274123++;
        if (AKA_BLOCK_LOOP_274123 > 1000) {
            //break;
        }
      AKA_mark("lis===6262###sois===274165###eois===274223###lif===153###soif===6911###eoif===6969###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");attempt[type] = (unsigned char*)lodepng_malloc(linebytes);
      if(AKA_mark("lis===6263###sois===274234###eois===274248###lif===154###soif===6980###eoif===6994###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6263###sois===274234###eois===274248###lif===154###soif===6980###eoif===6994###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (!attempt[type]))) {
AKA_mark("lis===6263###sois===274250###eois===274261###lif===154###soif===6996###eoif===7007###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");error = 83;
}

else {
AKA_mark("lis===-6263-###sois===-274234-###eois===-27423414-###lif===-154-###soif===-###eoif===-6994-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
} /*alloc fail*/
    }
    if(AKA_mark("lis===6265###sois===274292###eois===274298###lif===156###soif===7038###eoif===7044###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6265###sois===274292###eois===274298###lif===156###soif===7038###eoif===7044###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (!error))) {
      int AKA_BLOCK_LOOP_274309 = 0;
    AKA_mark("lis===6266###sois===274313###eois===274319###lif===157###soif===7059###eoif===7065###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(y = 0; AKA_mark("lis===6266###sois===274320###eois===274326###lif===157###soif===7066###eoif===7072###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6266###sois===274320###eois===274326###lif===157###soif===7066###eoif===7072###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (y != h)); ({AKA_mark("lis===6266###sois===274328###eois===274331###lif===157###soif===7074###eoif===7077###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++y;})) /*try the 5 filter types*/ {
        AKA_BLOCK_LOOP_274309++;
        if (AKA_BLOCK_LOOP_274309 > 1000) {
            //break;
        }
        int AKA_BLOCK_LOOP_274371 = 0;
    AKA_mark("lis===6267###sois===274375###eois===274384###lif===158###soif===7121###eoif===7130###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(type = 0; AKA_mark("lis===6267###sois===274385###eois===274394###lif===158###soif===7131###eoif===7140###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6267###sois===274385###eois===274394###lif===158###soif===7131###eoif===7140###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (type != 5)); ({AKA_mark("lis===6267###sois===274396###eois===274402###lif===158###soif===7142###eoif===7148###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++type;})) {
        AKA_BLOCK_LOOP_274371++;
        if (AKA_BLOCK_LOOP_274371 > 1000) {
            //break;
        }
          AKA_mark("lis===6268###sois===274417###eois===274457###lif===159###soif===7163###eoif===7203###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");unsigned testsize = (unsigned)linebytes;
          /*if(testsize > 8) testsize /= 8;*/ /*it already works good enough by testing a part of the row*/

          AKA_mark("lis===6271###sois===274580###eois===274668###lif===162###soif===7326###eoif===7414###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");filterScanline(attempt[type], &in[y * linebytes], prevline, linebytes, bytewidth, type);
          AKA_mark("lis===6272###sois===274680###eois===274695###lif===163###soif===7426###eoif===7441###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");size[type] = 0;
          AKA_mark("lis===6273###sois===274707###eois===274717###lif===164###soif===7453###eoif===7463###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");dummy = 0;
          AKA_mark("lis===6274###sois===274729###eois===274804###lif===165###soif===7475###eoif===7550###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");zlib_compress(&dummy, &size[type], attempt[type], testsize, &zlibsettings);
          AKA_mark("lis===6275###sois===274816###eois===274836###lif===166###soif===7562###eoif===7582###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");lodepng_free(dummy);
          /*check if this is smallest size (or if type == 0 it's the first case so always store the values)*/
          if(AKA_mark("lis===6277###sois===274962###eois===274996###lif===168###soif===7708###eoif===7742###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && ((AKA_mark("lis===6277###sois===274962###eois===274971###lif===168###soif===7708###eoif===7717###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (type == 0)) || (AKA_mark("lis===6277###sois===274975###eois===274996###lif===168###soif===7721###eoif===7742###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (size[type] < smallest)))) {
            AKA_mark("lis===6278###sois===275013###eois===275029###lif===169###soif===7759###eoif===7775###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");bestType = type;
            AKA_mark("lis===6279###sois===275043###eois===275065###lif===170###soif===7789###eoif===7811###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");smallest = size[type];
          }
else {
AKA_mark("lis===-6277-###sois===-274962-###eois===-27496234-###lif===-168-###soif===-###eoif===-7742-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
}
        }
        AKA_mark("lis===6282###sois===275099###eois===275129###lif===173###soif===7845###eoif===7875###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");prevline = &in[y * linebytes];
        AKA_mark("lis===6283###sois===275139###eois===275175###lif===174###soif===7885###eoif===7921###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");out[y * (linebytes + 1)] = bestType; /*the first byte of a scanline will be the filter type*/
        int AKA_BLOCK_LOOP_275242 = 0;
    AKA_mark("lis===6284###sois===275246###eois===275252###lif===175###soif===7992###eoif===7998###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(x = 0; AKA_mark("lis===6284###sois===275253###eois===275267###lif===175###soif===7999###eoif===8013###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6284###sois===275253###eois===275267###lif===175###soif===7999###eoif===8013###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (x != linebytes)); ({AKA_mark("lis===6284###sois===275269###eois===275272###lif===175###soif===8015###eoif===8018###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++x;})) {
AKA_mark("lis===6284###sois===275274###eois===275330###lif===175###soif===8020###eoif===8076###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");out[y * (linebytes + 1) + 1 + x] = attempt[bestType][x];
}

      }
    }
else {
AKA_mark("lis===-6265-###sois===-274292-###eois===-2742926-###lif===-156-###soif===-###eoif===-7044-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
}
    int AKA_BLOCK_LOOP_275352 = 0;
    AKA_mark("lis===6287###sois===275356###eois===275365###lif===178###soif===8102###eoif===8111###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");
for(type = 0; AKA_mark("lis===6287###sois===275366###eois===275375###lif===178###soif===8112###eoif===8121###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6287###sois===275366###eois===275375###lif===178###soif===8112###eoif===8121###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)") && (type != 5)); ({AKA_mark("lis===6287###sois===275377###eois===275383###lif===178###soif===8123###eoif===8129###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");++type;})) {
AKA_mark("lis===6287###sois===275385###eois===275413###lif===178###soif===8131###eoif===8159###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");lodepng_free(attempt[type]);
}

  }
  else {
AKA_mark("lis===6289###sois===275427###eois===275437###lif===180###soif===8173###eoif===8183###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");return 88;
}

}

}

}

}
 /* unknown filter strategy */

  AKA_mark("lis===6291###sois===275473###eois===275486###lif===182###soif===8219###eoif===8232###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\filter(unsigned char*,unsigned char const*,unsigned,unsigned,LodePNGColorMode const*,LodePNGEncoderSettings const*)");return error;
}

/** Instrumented function addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned) */
static void addPaddingBits(unsigned char* out, const unsigned char* in,
                           size_t olinebits, size_t ilinebits, unsigned h) /* << Aka begin of function void addPaddingBits(unsigned char* out, const unsigned char* in,
                           size_t olinebits, size_t ilinebits, unsigned h) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addPaddingBits.275505.stub"

  /*The opposite of the removePaddingBits function
  olinebits must be >= ilinebits*/
  AKA_mark("lis===6298###sois===275734###eois===275745###lif===4###soif===241###eoif===252###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");unsigned y;
  AKA_mark("lis===6299###sois===275749###eois===275785###lif===5###soif===256###eoif===292###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");size_t diff = olinebits - ilinebits;
  AKA_mark("lis===6300###sois===275789###eois===275813###lif===6###soif===296###eoif===320###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");size_t obp = 0, ibp = 0; /*bit pointers*/
  int AKA_BLOCK_LOOP_275834 = 0;
    AKA_mark("lis===6301###sois===275838###eois===275844###lif===7###soif===345###eoif===351###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");
for(y = 0; AKA_mark("lis===6301###sois===275845###eois===275851###lif===7###soif===352###eoif===358###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)") && (AKA_mark("lis===6301###sois===275845###eois===275851###lif===7###soif===352###eoif===358###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)") && (y != h)); ({AKA_mark("lis===6301###sois===275853###eois===275856###lif===7###soif===360###eoif===363###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");++y;})) {
        AKA_BLOCK_LOOP_275834++;
        if (AKA_BLOCK_LOOP_275834 > 1000) {
            //break;
        }
    AKA_mark("lis===6302###sois===275865###eois===275874###lif===8###soif===372###eoif===381###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");size_t x;
    int AKA_BLOCK_LOOP_275880 = 0;
    AKA_mark("lis===6303###sois===275884###eois===275890###lif===9###soif===391###eoif===397###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");
for(x = 0; AKA_mark("lis===6303###sois===275891###eois===275904###lif===9###soif===398###eoif===411###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)") && (AKA_mark("lis===6303###sois===275891###eois===275904###lif===9###soif===398###eoif===411###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)") && (x < ilinebits)); ({AKA_mark("lis===6303###sois===275906###eois===275909###lif===9###soif===413###eoif===416###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");++x;})) {
        AKA_BLOCK_LOOP_275880++;
        if (AKA_BLOCK_LOOP_275880 > 1000) {
            //break;
        }
      AKA_mark("lis===6304###sois===275920###eois===275976###lif===10###soif===427###eoif===483###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");unsigned char bit = readBitFromReversedStream(&ibp, in);
      AKA_mark("lis===6305###sois===275984###eois===276023###lif===11###soif===491###eoif===530###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");setBitOfReversedStream(&obp, out, bit);
    }
    /*obp += diff; --> no, fill in some value in the padding bits too, to avoid
    "Use of uninitialised value of size ###" warning from valgrind*/
    int AKA_BLOCK_LOOP_276187 = 0;
    AKA_mark("lis===6309###sois===276191###eois===276197###lif===15###soif===698###eoif===704###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");
for(x = 0; AKA_mark("lis===6309###sois===276198###eois===276207###lif===15###soif===705###eoif===714###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)") && (AKA_mark("lis===6309###sois===276198###eois===276207###lif===15###soif===705###eoif===714###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)") && (x != diff)); ({AKA_mark("lis===6309###sois===276209###eois===276212###lif===15###soif===716###eoif===719###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");++x;})) {
AKA_mark("lis===6309###sois===276214###eois===276251###lif===15###soif===721###eoif===758###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addPaddingBits(unsigned char*,unsigned char const*,size_t,size_t,unsigned)");setBitOfReversedStream(&obp, out, 0);
}

  }
}

/*
in: non-interlaced image with size w*h
out: the same pixels, but re-ordered according to PNG's Adam7 interlacing, with
 no padding bits between scanlines, but between reduced images so that each
 reduced image starts at a byte.
bpp: bits per pixel
there are no padding bits, not between scanlines, not between reduced images
in has the following size in bits: w * h * bpp.
out is possibly bigger due to padding bits between reduced images
NOTE: comments about padding bits are only relevant if bpp < 8
*/
/** Instrumented function Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned) */
static void Adam7_interlace(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp) /* << Aka begin of function void Adam7_interlace(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.Adam7_interlace.276794.stub"

  AKA_mark("lis===6325###sois===276898###eois===276926###lif===1###soif===116###eoif===144###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");unsigned passw[7], passh[7];
  AKA_mark("lis===6326###sois===276930###eois===276992###lif===2###soif===148###eoif===210###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");size_t filter_passstart[8], padded_passstart[8], passstart[8];
  AKA_mark("lis===6327###sois===276996###eois===277007###lif===3###soif===214###eoif===225###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");unsigned i;

  AKA_mark("lis===6329###sois===277013###eois===277105###lif===5###soif===231###eoif===323###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);

  if(AKA_mark("lis===6331###sois===277114###eois===277122###lif===7###soif===332###eoif===340###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (AKA_mark("lis===6331###sois===277114###eois===277122###lif===7###soif===332###eoif===340###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (bpp >= 8))) {
    int AKA_BLOCK_LOOP_277131 = 0;
    AKA_mark("lis===6332###sois===277135###eois===277141###lif===8###soif===353###eoif===359###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");
for(i = 0; AKA_mark("lis===6332###sois===277142###eois===277148###lif===8###soif===360###eoif===366###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (AKA_mark("lis===6332###sois===277142###eois===277148###lif===8###soif===360###eoif===366###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (i != 7)); ({AKA_mark("lis===6332###sois===277150###eois===277153###lif===8###soif===368###eoif===371###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");++i;})) {
        AKA_BLOCK_LOOP_277131++;
        if (AKA_BLOCK_LOOP_277131 > 1000) {
            //break;
        }
      AKA_mark("lis===6333###sois===277164###eois===277181###lif===9###soif===382###eoif===399###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");unsigned x, y, b;
      AKA_mark("lis===6334###sois===277189###eois===277217###lif===10###soif===407###eoif===435###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");size_t bytewidth = bpp / 8u;
      int AKA_BLOCK_LOOP_277225 = 0;
    AKA_mark("lis===6335###sois===277229###eois===277235###lif===11###soif===447###eoif===453###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");
for(y = 0; AKA_mark("lis===6335###sois===277236###eois===277248###lif===11###soif===454###eoif===466###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (AKA_mark("lis===6335###sois===277236###eois===277248###lif===11###soif===454###eoif===466###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (y < passh[i])); ({AKA_mark("lis===6335###sois===277250###eois===277253###lif===11###soif===468###eoif===471###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");++y;}))
      {
int AKA_BLOCK_LOOP_277262 = 0;
    AKA_mark("lis===6336###sois===277266###eois===277272###lif===12###soif===484###eoif===490###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");
for(x = 0; AKA_mark("lis===6336###sois===277273###eois===277285###lif===12###soif===491###eoif===503###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (AKA_mark("lis===6336###sois===277273###eois===277285###lif===12###soif===491###eoif===503###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (x < passw[i])); ({AKA_mark("lis===6336###sois===277287###eois===277290###lif===12###soif===505###eoif===508###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");++x;})) {
        AKA_BLOCK_LOOP_277262++;
        if (AKA_BLOCK_LOOP_277262 > 1000) {
            //break;
        }
        AKA_mark("lis===6337###sois===277303###eois===277407###lif===13###soif===521###eoif===625###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");size_t pixelinstart = ((ADAM7_IY[i] + y * ADAM7_DY[i]) * w + ADAM7_IX[i] + x * ADAM7_DX[i]) * bytewidth;
        AKA_mark("lis===6338###sois===277417###eois===277486###lif===14###soif===635###eoif===704###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");size_t pixeloutstart = passstart[i] + (y * passw[i] + x) * bytewidth;
        int AKA_BLOCK_LOOP_277496 = 0;
    AKA_mark("lis===6339###sois===277500###eois===277506###lif===15###soif===718###eoif===724###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");
for(b = 0; AKA_mark("lis===6339###sois===277507###eois===277520###lif===15###soif===725###eoif===738###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (AKA_mark("lis===6339###sois===277507###eois===277520###lif===15###soif===725###eoif===738###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (b < bytewidth)); ({AKA_mark("lis===6339###sois===277522###eois===277525###lif===15###soif===740###eoif===743###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");++b;})) {
        AKA_BLOCK_LOOP_277496++;
        if (AKA_BLOCK_LOOP_277496 > 1000) {
            //break;
        }
          AKA_mark("lis===6340###sois===277540###eois===277586###lif===16###soif===758###eoif===804###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");out[pixeloutstart + b] = in[pixelinstart + b];
        }
      }
}

    }
  } else /*bpp < 8: Adam7 with pixels < 8 bit is a bit trickier: with bit pointers*/ {
    int AKA_BLOCK_LOOP_277707 = 0;
    AKA_mark("lis===6345###sois===277711###eois===277717###lif===21###soif===929###eoif===935###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");
for(i = 0; AKA_mark("lis===6345###sois===277718###eois===277724###lif===21###soif===936###eoif===942###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (AKA_mark("lis===6345###sois===277718###eois===277724###lif===21###soif===936###eoif===942###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (i != 7)); ({AKA_mark("lis===6345###sois===277726###eois===277729###lif===21###soif===944###eoif===947###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");++i;})) {
        AKA_BLOCK_LOOP_277707++;
        if (AKA_BLOCK_LOOP_277707 > 1000) {
            //break;
        }
      AKA_mark("lis===6346###sois===277740###eois===277757###lif===22###soif===958###eoif===975###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");unsigned x, y, b;
      AKA_mark("lis===6347###sois===277765###eois===277801###lif===23###soif===983###eoif===1019###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");unsigned ilinebits = bpp * passw[i];
      AKA_mark("lis===6348###sois===277809###eois===277838###lif===24###soif===1027###eoif===1056###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");unsigned olinebits = bpp * w;
      AKA_mark("lis===6349###sois===277846###eois===277862###lif===25###soif===1064###eoif===1080###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");size_t obp, ibp; /*bit pointers (for out and in buffer)*/
      int AKA_BLOCK_LOOP_277911 = 0;
    AKA_mark("lis===6350###sois===277915###eois===277921###lif===26###soif===1133###eoif===1139###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");
for(y = 0; AKA_mark("lis===6350###sois===277922###eois===277934###lif===26###soif===1140###eoif===1152###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (AKA_mark("lis===6350###sois===277922###eois===277934###lif===26###soif===1140###eoif===1152###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (y < passh[i])); ({AKA_mark("lis===6350###sois===277936###eois===277939###lif===26###soif===1154###eoif===1157###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");++y;}))
      {
int AKA_BLOCK_LOOP_277948 = 0;
    AKA_mark("lis===6351###sois===277952###eois===277958###lif===27###soif===1170###eoif===1176###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");
for(x = 0; AKA_mark("lis===6351###sois===277959###eois===277971###lif===27###soif===1177###eoif===1189###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (AKA_mark("lis===6351###sois===277959###eois===277971###lif===27###soif===1177###eoif===1189###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (x < passw[i])); ({AKA_mark("lis===6351###sois===277973###eois===277976###lif===27###soif===1191###eoif===1194###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");++x;})) {
        AKA_BLOCK_LOOP_277948++;
        if (AKA_BLOCK_LOOP_277948 > 1000) {
            //break;
        }
        AKA_mark("lis===6352###sois===277989###eois===278079###lif===28###soif===1207###eoif===1297###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");ibp = (ADAM7_IY[i] + y * ADAM7_DY[i]) * olinebits + (ADAM7_IX[i] + x * ADAM7_DX[i]) * bpp;
        AKA_mark("lis===6353###sois===278089###eois===278142###lif===29###soif===1307###eoif===1360###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");obp = (8 * passstart[i]) + (y * ilinebits + x * bpp);
        int AKA_BLOCK_LOOP_278152 = 0;
    AKA_mark("lis===6354###sois===278156###eois===278162###lif===30###soif===1374###eoif===1380###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");
for(b = 0; AKA_mark("lis===6354###sois===278163###eois===278170###lif===30###soif===1381###eoif===1388###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (AKA_mark("lis===6354###sois===278163###eois===278170###lif===30###soif===1381###eoif===1388###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)") && (b < bpp)); ({AKA_mark("lis===6354###sois===278172###eois===278175###lif===30###soif===1390###eoif===1393###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");++b;})) {
        AKA_BLOCK_LOOP_278152++;
        if (AKA_BLOCK_LOOP_278152 > 1000) {
            //break;
        }
          AKA_mark("lis===6355###sois===278190###eois===278246###lif===31###soif===1408###eoif===1464###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");unsigned char bit = readBitFromReversedStream(&ibp, in);
          AKA_mark("lis===6356###sois===278258###eois===278297###lif===32###soif===1476###eoif===1515###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\Adam7_interlace(unsigned char*,unsigned char const*,unsigned,unsigned,unsigned)");setBitOfReversedStream(&obp, out, bit);
        }
      }
}

    }
  }
}

/*out must be buffer big enough to contain uncompressed IDAT chunk data, and in must contain the full image.
return value is error**/
/** Instrumented function preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*) */
static unsigned preProcessScanlines(unsigned char** out, size_t* outsize, const unsigned char* in,
                                    unsigned w, unsigned h,
                                    const LodePNGInfo* info_png, const LodePNGEncoderSettings* settings) /* << Aka begin of function unsigned preProcessScanlines(unsigned char** out, size_t* outsize, const unsigned char* in,
                                    unsigned w, unsigned h,
                                    const LodePNGInfo* info_png, const LodePNGEncoderSettings* settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.preProcessScanlines.278488.stub"

  /*
  This function converts the pure 2D image with the PNG's colortype, into filtered-padded-interlaced data. Steps:
  *) if no Adam7: 1) add padding bits (= possible extra bits per scanline if bpp < 8) 2) filter
  *) if adam7: 1) Adam7_interlace 2) 7x add padding bits 3) 7x filter
  */
  AKA_mark("lis===6373###sois===279038###eois===279085###lif===8###soif===566###eoif===613###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");size_t bpp = lodepng_get_bpp(&info_png->color);
  AKA_mark("lis===6374###sois===279089###eois===279108###lif===9###soif===617###eoif===636###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");unsigned error = 0;
  if(AKA_mark("lis===6375###sois===279115###eois===279146###lif===10###soif===643###eoif===674###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6375###sois===279115###eois===279146###lif===10###soif===643###eoif===674###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (info_png->interlace_method == 0))) {
    /*image size plus an extra byte per scanline + possible padding bits*/
    AKA_mark("lis===6377###sois===279231###eois===279298###lif===12###soif===759###eoif===826###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");*outsize = (size_t)h + ((size_t)h * (((size_t)w * bpp + 7u) / 8u));
    AKA_mark("lis===6378###sois===279304###eois===279352###lif===13###soif===832###eoif===880###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");*out = (unsigned char*)lodepng_malloc(*outsize);
    if(AKA_mark("lis===6379###sois===279361###eois===279382###lif===14###soif===889###eoif===910###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && ((AKA_mark("lis===6379###sois===279361###eois===279368###lif===14###soif===889###eoif===896###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (!(*out))) && ((AKA_mark("lis===6379###sois===279373###eois===279381###lif===14###soif===901###eoif===909###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (*outsize))))) {
AKA_mark("lis===6379###sois===279384###eois===279395###lif===14###soif===912###eoif===923###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");error = 83;
}

else {
AKA_mark("lis===-6379-###sois===-279361-###eois===-27936121-###lif===-14-###soif===-###eoif===-910-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");
} /*alloc fail*/

    if(AKA_mark("lis===6381###sois===279421###eois===279427###lif===16###soif===949###eoif===955###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6381###sois===279421###eois===279427###lif===16###soif===949###eoif===955###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (!error))) {
      /*non multiple of 8 bits per scanline, padding bits needed per scanline*/
      if(AKA_mark("lis===6383###sois===279522###eois===279586###lif===18###soif===1050###eoif===1114###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && ((AKA_mark("lis===6383###sois===279522###eois===279529###lif===18###soif===1050###eoif===1057###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (bpp < 8)) && (AKA_mark("lis===6383###sois===279533###eois===279586###lif===18###soif===1061###eoif===1114###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && ((size_t)w * bpp != (((size_t)w * bpp + 7u) / 8u) * 8u)))) {
        AKA_mark("lis===6384###sois===279599###eois===279681###lif===19###soif===1127###eoif===1209###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");unsigned char* padded = (unsigned char*)lodepng_malloc(h * ((w * bpp + 7u) / 8u));
        if(AKA_mark("lis===6385###sois===279694###eois===279701###lif===20###soif===1222###eoif===1229###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6385###sois===279694###eois===279701###lif===20###soif===1222###eoif===1229###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (!padded))) {
AKA_mark("lis===6385###sois===279703###eois===279714###lif===20###soif===1231###eoif===1242###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");error = 83;
}

else {
AKA_mark("lis===-6385-###sois===-279694-###eois===-2796947-###lif===-20-###soif===-###eoif===-1229-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");
} /*alloc fail*/
        if(AKA_mark("lis===6386###sois===279742###eois===279748###lif===21###soif===1270###eoif===1276###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6386###sois===279742###eois===279748###lif===21###soif===1270###eoif===1276###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (!error))) {
          AKA_mark("lis===6387###sois===279763###eois===279846###lif===22###soif===1291###eoif===1374###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");addPaddingBits(padded, in, (((size_t)w * bpp + 7u) / 8u) * 8u, (size_t)w * bpp, h);
          AKA_mark("lis===6388###sois===279858###eois===279921###lif===23###soif===1386###eoif===1449###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");error = filter(*out, padded, w, h, &info_png->color, settings);
        }
else {
AKA_mark("lis===-6386-###sois===-279742-###eois===-2797426-###lif===-21-###soif===-###eoif===-1276-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");
}
        AKA_mark("lis===6390###sois===279942###eois===279963###lif===25###soif===1470###eoif===1491###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");lodepng_free(padded);
      } else {
        /*we can immediately filter into the out buffer, no other steps needed*/
        AKA_mark("lis===6393###sois===280071###eois===280130###lif===28###soif===1599###eoif===1658###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");error = filter(*out, in, w, h, &info_png->color, settings);
      }
    }
else {
AKA_mark("lis===-6381-###sois===-279421-###eois===-2794216-###lif===-16-###soif===-###eoif===-955-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");
}
  } else /*interlace_method is 1 (Adam7)*/ {
    AKA_mark("lis===6397###sois===280198###eois===280226###lif===32###soif===1726###eoif===1754###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");unsigned passw[7], passh[7];
    AKA_mark("lis===6398###sois===280232###eois===280294###lif===33###soif===1760###eoif===1822###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");size_t filter_passstart[8], padded_passstart[8], passstart[8];
    AKA_mark("lis===6399###sois===280300###eois===280321###lif===34###soif===1828###eoif===1849###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");unsigned char* adam7;

    AKA_mark("lis===6401###sois===280329###eois===280431###lif===36###soif===1857###eoif===1959###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, (unsigned)bpp);

    AKA_mark("lis===6403###sois===280439###eois===280470###lif===38###soif===1967###eoif===1998###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");*outsize = filter_passstart[7]; /*image size plus an extra byte per scanline + possible padding bits*/
    AKA_mark("lis===6404###sois===280547###eois===280595###lif===39###soif===2075###eoif===2123###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");*out = (unsigned char*)lodepng_malloc(*outsize);
    if(AKA_mark("lis===6405###sois===280604###eois===280611###lif===40###soif===2132###eoif===2139###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6405###sois===280604###eois===280611###lif===40###soif===2132###eoif===2139###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (!(*out)))) {
AKA_mark("lis===6405###sois===280613###eois===280624###lif===40###soif===2141###eoif===2152###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");error = 83;
}

else {
AKA_mark("lis===-6405-###sois===-280604-###eois===-2806047-###lif===-40-###soif===-###eoif===-2139-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");
} /*alloc fail*/

    AKA_mark("lis===6407###sois===280647###eois===280700###lif===42###soif===2175###eoif===2228###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");adam7 = (unsigned char*)lodepng_malloc(passstart[7]);
    if(AKA_mark("lis===6408###sois===280709###eois===280731###lif===43###soif===2237###eoif===2259###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && ((AKA_mark("lis===6408###sois===280709###eois===280715###lif===43###soif===2237###eoif===2243###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (!adam7)) && (AKA_mark("lis===6408###sois===280719###eois===280731###lif===43###soif===2247###eoif===2259###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (passstart[7])))) {
AKA_mark("lis===6408###sois===280733###eois===280744###lif===43###soif===2261###eoif===2272###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");error = 83;
}

else {
AKA_mark("lis===-6408-###sois===-280709-###eois===-28070922-###lif===-43-###soif===-###eoif===-2259-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");
} /*alloc fail*/

    if(AKA_mark("lis===6410###sois===280770###eois===280776###lif===45###soif===2298###eoif===2304###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6410###sois===280770###eois===280776###lif===45###soif===2298###eoif===2304###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (!error))) {
      AKA_mark("lis===6411###sois===280787###eois===280798###lif===46###soif===2315###eoif===2326###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");unsigned i;

      AKA_mark("lis===6413###sois===280808###eois===280856###lif===48###soif===2336###eoif===2384###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");Adam7_interlace(adam7, in, w, h, (unsigned)bpp);
      int AKA_BLOCK_LOOP_280864 = 0;
    AKA_mark("lis===6414###sois===280868###eois===280874###lif===49###soif===2396###eoif===2402###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");
for(i = 0; AKA_mark("lis===6414###sois===280875###eois===280881###lif===49###soif===2403###eoif===2409###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6414###sois===280875###eois===280881###lif===49###soif===2403###eoif===2409###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (i != 7)); ({AKA_mark("lis===6414###sois===280883###eois===280886###lif===49###soif===2411###eoif===2414###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");++i;})) {
        AKA_BLOCK_LOOP_280864++;
        if (AKA_BLOCK_LOOP_280864 > 1000) {
            //break;
        }
        if(AKA_mark("lis===6415###sois===280902###eois===280909###lif===50###soif===2430###eoif===2437###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6415###sois===280902###eois===280909###lif===50###soif===2430###eoif===2437###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (bpp < 8))) {
          AKA_mark("lis===6416###sois===280924###eois===281026###lif===51###soif===2452###eoif===2554###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");unsigned char* padded = (unsigned char*)lodepng_malloc(padded_passstart[i + 1] - padded_passstart[i]);
          if(AKA_mark("lis===6417###sois===281041###eois===281048###lif===52###soif===2569###eoif===2576###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6417###sois===281041###eois===281048###lif===52###soif===2569###eoif===2576###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (!padded))) {AKA_mark("lis===6417###sois===281050###eois===281065###lif===52###soif===2578###eoif===2593###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");AKA_mark("lis===6417###sois===281050###eois===281065###lif===52###soif===2578###eoif===2593###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");ERROR_BREAK(83)}
else {
AKA_mark("lis===-6417-###sois===-281041-###eois===-2810417-###lif===-52-###soif===-###eoif===-2576-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");
}; /*alloc fail*/
          AKA_mark("lis===6418###sois===281093###eois===281241###lif===53###soif===2621###eoif===2769###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");addPaddingBits(padded, &adam7[passstart[i]],
                         (((size_t)passw[i] * bpp + 7u) / 8u) * 8u, (size_t)passw[i] * bpp, passh[i]);
          AKA_mark("lis===6420###sois===281253###eois===281380###lif===55###soif===2781###eoif===2908###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");error = filter(&(*out)[filter_passstart[i]], padded,
                         passw[i], passh[i], &info_png->color, settings);
          AKA_mark("lis===6422###sois===281392###eois===281413###lif===57###soif===2920###eoif===2941###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");lodepng_free(padded);
        } else {
          AKA_mark("lis===6424###sois===281443###eois===281591###lif===59###soif===2971###eoif===3119###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");error = filter(&(*out)[filter_passstart[i]], &adam7[padded_passstart[i]],
                         passw[i], passh[i], &info_png->color, settings);
        }

        if(AKA_mark("lis===6428###sois===281617###eois===281622###lif===63###soif===3145###eoif===3150###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (AKA_mark("lis===6428###sois===281617###eois===281622###lif===63###soif===3145###eoif===3150###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)") && (error))) {
AKA_mark("lis===6428###sois===281624###eois===281630###lif===63###soif===3152###eoif===3158###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");break;
}

else {
AKA_mark("lis===-6428-###sois===-281617-###eois===-2816175-###lif===-63-###soif===-###eoif===-3150-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");
}
      }
    }
else {
AKA_mark("lis===-6410-###sois===-280770-###eois===-2807706-###lif===-45-###soif===-###eoif===-2304-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");
}

    AKA_mark("lis===6432###sois===281654###eois===281674###lif===67###soif===3182###eoif===3202###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");lodepng_free(adam7);
  }

  AKA_mark("lis===6435###sois===281685###eois===281698###lif===70###soif===3213###eoif===3226###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\preProcessScanlines(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGInfo const*,LodePNGEncoderSettings const*)");return error;
}

#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
/** Instrumented function addUnknownChunks(ucvector*,unsigned char*,size_t) */
static unsigned addUnknownChunks(ucvector* out, unsigned char* data, size_t datasize) /* << Aka begin of function unsigned addUnknownChunks(ucvector* out, unsigned char* data, size_t datasize) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\addUnknownChunks(ucvector*,unsigned char*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.addUnknownChunks.281762.stub"

  AKA_mark("lis===6440###sois===281837###eois===281867###lif===1###soif===91###eoif===121###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addUnknownChunks(ucvector*,unsigned char*,size_t)");unsigned char* inchunk = data;
  int AKA_BLOCK_LOOP_281871 = 0;
    while(AKA_mark("lis===6441###sois===281877###eois===281912###lif===2###soif===131###eoif===166###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addUnknownChunks(ucvector*,unsigned char*,size_t)") && (AKA_mark("lis===6441###sois===281877###eois===281912###lif===2###soif===131###eoif===166###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addUnknownChunks(ucvector*,unsigned char*,size_t)") && ((size_t)(inchunk - data) < datasize))) {
        AKA_BLOCK_LOOP_281871++;
        if (AKA_BLOCK_LOOP_281871 > 1000) {
            //break;
        }
    AKA_mark("lis===6442###sois===281921###eois===281993###lif===3###soif===175###eoif===247###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addUnknownChunks(ucvector*,unsigned char*,size_t)");CERROR_TRY_RETURN(lodepng_chunk_append(&out->data, &out->size, inchunk));
    AKA_mark("lis===6443###sois===282000###eois===282027###lif===4###soif===254###eoif===281###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addUnknownChunks(ucvector*,unsigned char*,size_t)");out->allocsize = out->size; /*fix the allocsize again*/
    AKA_mark("lis===6444###sois===282061###eois===282116###lif===5###soif===315###eoif===370###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addUnknownChunks(ucvector*,unsigned char*,size_t)");inchunk = lodepng_chunk_next(inchunk, data + datasize);
  }
  AKA_mark("lis===6446###sois===282125###eois===282134###lif===7###soif===379###eoif===388###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\addUnknownChunks(ucvector*,unsigned char*,size_t)");return 0;
}

/** Instrumented function isGrayICCProfile(unsigned char const*,unsigned) */
static unsigned isGrayICCProfile(const unsigned char* profile, unsigned size) /* << Aka begin of function unsigned isGrayICCProfile(const unsigned char* profile, unsigned size) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\isGrayICCProfile(unsigned char const*,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.isGrayICCProfile.282157.stub"

  /*
  It is a gray profile if bytes 16-19 are "GRAY", rgb profile if bytes 16-19
  are "RGB ". We do not perform any full parsing of the ICC profile here, other
  than check those 4 bytes to grayscale profile. Other than that, validity of
  the profile is not checked. This is needed only because the PNG specification
  requires using a non-gray color model if there is an ICC profile with "RGB "
  (sadly limiting compression opportunities if the input data is grayscale RGB
  data), and requires using a gray color model if it is "GRAY".
  */
  if(AKA_mark("lis===6459###sois===282783###eois===282792###lif===10###soif===642###eoif===651###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\isGrayICCProfile(unsigned char const*,unsigned)") && (AKA_mark("lis===6459###sois===282783###eois===282792###lif===10###soif===642###eoif===651###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\isGrayICCProfile(unsigned char const*,unsigned)") && (size < 20))) {
AKA_mark("lis===6459###sois===282794###eois===282803###lif===10###soif===653###eoif===662###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\isGrayICCProfile(unsigned char const*,unsigned)");return 0;
}

else {
AKA_mark("lis===-6459-###sois===-282783-###eois===-2827839-###lif===-10-###soif===-###eoif===-651-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\isGrayICCProfile(unsigned char const*,unsigned)");
}
  AKA_mark("lis===6460###sois===282807###eois===282902###lif===11###soif===666###eoif===761###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\isGrayICCProfile(unsigned char const*,unsigned)");return profile[16] == 'G' &&  profile[17] == 'R' &&  profile[18] == 'A' &&  profile[19] == 'Y';
}

/** Instrumented function isRGBICCProfile(unsigned char const*,unsigned) */
static unsigned isRGBICCProfile(const unsigned char* profile, unsigned size) /* << Aka begin of function unsigned isRGBICCProfile(const unsigned char* profile, unsigned size) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\isRGBICCProfile(unsigned char const*,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.isRGBICCProfile.282925.stub"

  /* See comment in isGrayICCProfile*/
  if(AKA_mark("lis===6465###sois===283034###eois===283043###lif===2###soif===125###eoif===134###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\isRGBICCProfile(unsigned char const*,unsigned)") && (AKA_mark("lis===6465###sois===283034###eois===283043###lif===2###soif===125###eoif===134###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\isRGBICCProfile(unsigned char const*,unsigned)") && (size < 20))) {
AKA_mark("lis===6465###sois===283045###eois===283054###lif===2###soif===136###eoif===145###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\isRGBICCProfile(unsigned char const*,unsigned)");return 0;
}

else {
AKA_mark("lis===-6465-###sois===-283034-###eois===-2830349-###lif===-2-###soif===-###eoif===-134-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\isRGBICCProfile(unsigned char const*,unsigned)");
}
  AKA_mark("lis===6466###sois===283058###eois===283153###lif===3###soif===149###eoif===244###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\isRGBICCProfile(unsigned char const*,unsigned)");return profile[16] == 'R' &&  profile[17] == 'G' &&  profile[18] == 'B' &&  profile[19] == ' ';
}
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/

/** Instrumented function lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*) */
unsigned lodepng_encode(unsigned char** out, size_t* outsize,
                        const unsigned char* image, unsigned w, unsigned h,
                        LodePNGState* state) /* << Aka begin of function unsigned lodepng_encode(unsigned char** out, size_t* outsize,
                        const unsigned char* image, unsigned w, unsigned h,
                        LodePNGState* state) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_encode.283214.stub"

  AKA_mark("lis===6473###sois===283395###eois===283419###lif===3###soif===190###eoif===214###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");unsigned char* data = 0; /*uncompressed version of the IDAT chunk data*/
  AKA_mark("lis===6474###sois===283471###eois===283491###lif===4###soif===266###eoif===286###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");size_t datasize = 0;
  AKA_mark("lis===6475###sois===283495###eois===283534###lif===5###soif===290###eoif===329###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");ucvector outv = ucvector_init(NULL, 0);
  AKA_mark("lis===6476###sois===283538###eois===283555###lif===6###soif===333###eoif===350###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");LodePNGInfo info;
  AKA_mark("lis===6477###sois===283559###eois===283606###lif===7###soif===354###eoif===401###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");const LodePNGInfo* info_png = &state->info_png;
  AKA_mark("lis===6478###sois===283610###eois===283638###lif===8###soif===405###eoif===433###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");LodePNGColorMode auto_color;

  AKA_mark("lis===6480###sois===283644###eois===283669###lif===10###soif===439###eoif===464###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");lodepng_info_init(&info);
  AKA_mark("lis===6481###sois===283673###eois===283710###lif===11###soif===468###eoif===505###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");lodepng_color_mode_init(&auto_color);

  /*provide some proper output values if error will happen*/
  AKA_mark("lis===6484###sois===283778###eois===283787###lif===14###soif===573###eoif===582###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");*out = 0;
  AKA_mark("lis===6485###sois===283791###eois===283804###lif===15###soif===586###eoif===599###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");*outsize = 0;
  AKA_mark("lis===6486###sois===283808###eois===283825###lif===16###soif===603###eoif===620###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = 0;

  /*check input values validity*/
  if(AKA_mark("lis===6489###sois===283869###eois===284025###lif===19###soif===664###eoif===820###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && ((((AKA_mark("lis===6489###sois===283870###eois===283910###lif===19###soif===665###eoif===705###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info_png->color.colortype == LCT_PALETTE)) || (AKA_mark("lis===6489###sois===283914###eois===283942###lif===19###soif===709###eoif===737###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->encoder.force_palette))))
      && (((AKA_mark("lis===6490###sois===283955###eois===283987###lif===20###soif===750###eoif===782###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info_png->color.palettesize == 0)) || (AKA_mark("lis===6490###sois===283991###eois===284024###lif===20###soif===786###eoif===819###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info_png->color.palettesize > 256)))))) {
    /*this error is returned even if auto_convert is enabled and thus encoder could
    generate the palette by itself: while allowing this could be possible in theory,
    it may complicate the code or edge cases, and always requiring to give a palette
    when setting this color type is a simpler contract*/
    AKA_mark("lis===6495###sois===284349###eois===284367###lif===25###soif===1144###eoif===1162###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = 68; /*invalid palette size, it is only allowed to be 1-256*/
    AKA_mark("lis===6496###sois===284430###eois===284443###lif===26###soif===1225###eoif===1238###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
  }
else {
AKA_mark("lis===-6489-###sois===-283869-###eois===-283869156-###lif===-19-###soif===-###eoif===-820-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
  if(AKA_mark("lis===6498###sois===284455###eois===284492###lif===28###soif===1250###eoif===1287###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6498###sois===284455###eois===284492###lif===28###soif===1250###eoif===1287###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->encoder.zlibsettings.btype > 2))) {
    AKA_mark("lis===6499###sois===284501###eois===284519###lif===29###soif===1296###eoif===1314###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = 61; /*error: invalid btype*/
    AKA_mark("lis===6500###sois===284550###eois===284563###lif===30###soif===1345###eoif===1358###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
  }
else {
AKA_mark("lis===-6498-###sois===-284455-###eois===-28445537-###lif===-28-###soif===-###eoif===-1287-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
  if(AKA_mark("lis===6502###sois===284575###eois===284605###lif===32###soif===1370###eoif===1400###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6502###sois===284575###eois===284605###lif===32###soif===1370###eoif===1400###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info_png->interlace_method > 1))) {
    AKA_mark("lis===6503###sois===284614###eois===284632###lif===33###soif===1409###eoif===1427###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = 71; /*error: invalid interlace mode*/
    AKA_mark("lis===6504###sois===284672###eois===284685###lif===34###soif===1467###eoif===1480###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
  }
else {
AKA_mark("lis===-6502-###sois===-284575-###eois===-28457530-###lif===-32-###soif===-###eoif===-1400-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
  AKA_mark("lis===6506###sois===284694###eois===284781###lif===36###soif===1489###eoif===1576###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = checkColorValidity(info_png->color.colortype, info_png->color.bitdepth);
  if(AKA_mark("lis===6507###sois===284788###eois===284800###lif===37###soif===1583###eoif===1595###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6507###sois===284788###eois===284800###lif===37###soif===1583###eoif===1595###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6507###sois===284802###eois===284815###lif===37###soif===1597###eoif===1610###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6507-###sois===-284788-###eois===-28478812-###lif===-37-###soif===-###eoif===-1595-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
} /*error: invalid color type given*/
  AKA_mark("lis===6508###sois===284855###eois===284942###lif===38###soif===1650###eoif===1737###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = checkColorValidity(state->info_raw.colortype, state->info_raw.bitdepth);
  if(AKA_mark("lis===6509###sois===284949###eois===284961###lif===39###soif===1744###eoif===1756###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6509###sois===284949###eois===284961###lif===39###soif===1744###eoif===1756###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6509###sois===284963###eois===284976###lif===39###soif===1758###eoif===1771###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6509-###sois===-284949-###eois===-28494912-###lif===-39-###soif===-###eoif===-1756-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
} /*error: invalid color type given*/

  /* color convert and compute scanline filter types */
  AKA_mark("lis===6512###sois===285075###eois===285118###lif===42###soif===1870###eoif===1913###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");lodepng_info_copy(&info, &state->info_png);
  if(AKA_mark("lis===6513###sois===285125###eois===285152###lif===43###soif===1920###eoif===1947###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6513###sois===285125###eois===285152###lif===43###soif===1920###eoif===1947###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->encoder.auto_convert))) {
    AKA_mark("lis===6514###sois===285161###eois===285185###lif===44###soif===1956###eoif===1980###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");LodePNGColorStats stats;
    AKA_mark("lis===6515###sois===285191###eois===285218###lif===45###soif===1986###eoif===2013###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");unsigned allow_convert = 1;
    AKA_mark("lis===6516###sois===285224###eois===285257###lif===46###soif===2019###eoif===2052###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");lodepng_color_stats_init(&stats);
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
    if(AKA_mark("lis===6518###sois===285307###eois===285411###lif===48###soif===2102###eoif===2206###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && ((AKA_mark("lis===6518###sois===285307###eois===285329###lif===48###soif===2102###eoif===2124###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info_png->iccp_defined)) &&
        (AKA_mark("lis===6519###sois===285342###eois===285411###lif===49###soif===2137###eoif===2206###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (isGrayICCProfile(info_png->iccp_profile, info_png->iccp_profile_size))))) {
      /*the PNG specification does not allow to use palette with a GRAY ICC profile, even
      if the palette has only gray colors, so disallow it.*/
      AKA_mark("lis===6522###sois===285575###eois===285599###lif===52###soif===2370###eoif===2394###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");stats.allow_palette = 0;
    }
else {
AKA_mark("lis===-6518-###sois===-285307-###eois===-285307104-###lif===-48-###soif===-###eoif===-2206-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    if(AKA_mark("lis===6524###sois===285615###eois===285718###lif===54###soif===2410###eoif===2513###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && ((AKA_mark("lis===6524###sois===285615###eois===285637###lif===54###soif===2410###eoif===2432###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info_png->iccp_defined)) &&
        (AKA_mark("lis===6525###sois===285650###eois===285718###lif===55###soif===2445###eoif===2513###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (isRGBICCProfile(info_png->iccp_profile, info_png->iccp_profile_size))))) {
      /*the PNG specification does not allow to use grayscale color with RGB ICC profile, so disallow gray.*/
      AKA_mark("lis===6527###sois===285840###eois===285866###lif===57###soif===2635###eoif===2661###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");stats.allow_greyscale = 0;
    }
else {
AKA_mark("lis===-6524-###sois===-285615-###eois===-285615103-###lif===-54-###soif===-###eoif===-2513-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
#endif /* LODEPNG_COMPILE_ANCILLARY_CHUNKS */
    AKA_mark("lis===6530###sois===285926###eois===286008###lif===60###soif===2721###eoif===2803###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = lodepng_compute_color_stats(&stats, image, w, h, &state->info_raw);
    if(AKA_mark("lis===6531###sois===286017###eois===286029###lif===61###soif===2812###eoif===2824###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6531###sois===286017###eois===286029###lif===61###soif===2812###eoif===2824###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6531###sois===286031###eois===286044###lif===61###soif===2826###eoif===2839###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6531-###sois===-286017-###eois===-28601712-###lif===-61-###soif===-###eoif===-2824-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
    if(AKA_mark("lis===6533###sois===286094###eois===286122###lif===63###soif===2889###eoif===2917###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6533###sois===286094###eois===286122###lif===63###soif===2889###eoif===2917###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info_png->background_defined))) {
      /*the background chunk's color must be taken into account as well*/
      AKA_mark("lis===6535###sois===286208###eois===286237###lif===65###soif===3003###eoif===3032###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");unsigned r = 0, g = 0, b = 0;
      AKA_mark("lis===6536###sois===286245###eois===286308###lif===66###soif===3040###eoif===3103###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");LodePNGColorMode mode16 = lodepng_color_mode_make(LCT_RGB, 16);
      AKA_mark("lis===6537###sois===286316###eois===286458###lif===67###soif===3111###eoif===3253###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");lodepng_convert_rgb(&r, &g, &b,
          info_png->background_r, info_png->background_g, info_png->background_b, &mode16, &info_png->color);
      AKA_mark("lis===6539###sois===286466###eois===286529###lif===69###soif===3261###eoif===3324###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = lodepng_color_stats_add(&stats, r, g, b, 65535);
      if(AKA_mark("lis===6540###sois===286540###eois===286552###lif===70###soif===3335###eoif===3347###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6540###sois===286540###eois===286552###lif===70###soif===3335###eoif===3347###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6540###sois===286554###eois===286567###lif===70###soif===3349###eoif===3362###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6540-###sois===-286540-###eois===-28654012-###lif===-70-###soif===-###eoif===-3347-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6533-###sois===-286094-###eois===-28609428-###lif===-63-###soif===-###eoif===-2917-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
#endif /* LODEPNG_COMPILE_ANCILLARY_CHUNKS */
    AKA_mark("lis===6543###sois===286627###eois===286699###lif===73###soif===3422###eoif===3494###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = auto_choose_color(&auto_color, &state->info_raw, &stats);
    if(AKA_mark("lis===6544###sois===286708###eois===286720###lif===74###soif===3503###eoif===3515###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6544###sois===286708###eois===286720###lif===74###soif===3503###eoif===3515###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6544###sois===286722###eois===286735###lif===74###soif===3517###eoif===3530###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6544-###sois===-286708-###eois===-28670812-###lif===-74-###soif===-###eoif===-3515-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
    if(AKA_mark("lis===6546###sois===286785###eois===286807###lif===76###soif===3580###eoif===3602###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6546###sois===286785###eois===286807###lif===76###soif===3580###eoif===3602###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info_png->sbit_defined))) {
      /*if sbit is defined, due to strict requirements of which sbit values can be present for which color modes,
      auto_convert can't be done in many cases. However, do support a few cases here.
      TODO: more conversions may be possible, and it may also be possible to get a more appropriate color type out of
            auto_choose_color if knowledge about sbit is used beforehand
      */
      AKA_mark("lis===6552###sois===287223###eois===287381###lif===82###soif===4018###eoif===4176###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");unsigned sbit_max = LODEPNG_MAX(LODEPNG_MAX(LODEPNG_MAX(info_png->sbit_r, info_png->sbit_g),
                           info_png->sbit_b), info_png->sbit_a);
      AKA_mark("lis===6554###sois===287389###eois===287634###lif===84###soif===4184###eoif===4429###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");unsigned equal = (!info_png->sbit_g || info_png->sbit_g == info_png->sbit_r)
                    && (!info_png->sbit_b || info_png->sbit_b == info_png->sbit_r)
                    && (!info_png->sbit_a || info_png->sbit_a == info_png->sbit_r);
      AKA_mark("lis===6557###sois===287642###eois===287660###lif===87###soif===4437###eoif===4455###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");allow_convert = 0;
      if(AKA_mark("lis===6558###sois===287671###eois===287755###lif===88###soif===4466###eoif===4550###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && ((AKA_mark("lis===6558###sois===287671###eois===287706###lif===88###soif===4466###eoif===4501###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.color.colortype == LCT_PALETTE)) &&
         (AKA_mark("lis===6559###sois===287720###eois===287755###lif===89###soif===4515###eoif===4550###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (auto_color.colortype == LCT_PALETTE)))) {
        /* input and output are palette, and in this case it may happen that palette data is
        expected to be copied from info_raw into the info_png */
        AKA_mark("lis===6562###sois===287928###eois===287946###lif===92###soif===4723###eoif===4741###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");allow_convert = 1;
      }
else {
AKA_mark("lis===-6558-###sois===-287671-###eois===-28767184-###lif===-88-###soif===-###eoif===-4550-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
      /*going from 8-bit RGB to palette (or 16-bit as long as sbit_max <= 8) is possible
      since both are 8-bit RGB for sBIT's purposes*/
      if(AKA_mark("lis===6566###sois===288110###eois===288207###lif===96###soif===4905###eoif===5002###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (((AKA_mark("lis===6566###sois===288110###eois===288141###lif===96###soif===4905###eoif===4936###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.color.colortype == LCT_RGB)) &&
         (AKA_mark("lis===6567###sois===288155###eois===288190###lif===97###soif===4950###eoif===4985###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (auto_color.colortype == LCT_PALETTE))) && (AKA_mark("lis===6567###sois===288194###eois===288207###lif===97###soif===4989###eoif===5002###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (sbit_max <= 8)))) {
        AKA_mark("lis===6568###sois===288220###eois===288238###lif===98###soif===5015###eoif===5033###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");allow_convert = 1;
      }
else {
AKA_mark("lis===-6566-###sois===-288110-###eois===-28811097-###lif===-96-###soif===-###eoif===-5002-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
      /*going from 8-bit RGBA to palette is also ok but only if sbit_a is exactly 8*/
      if(AKA_mark("lis===6571###sois===288345###eois===288468###lif===101###soif===5140###eoif===5263###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && ((((AKA_mark("lis===6571###sois===288345###eois===288377###lif===101###soif===5140###eoif===5172###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.color.colortype == LCT_RGBA)) && (AKA_mark("lis===6571###sois===288381###eois===288416###lif===101###soif===5176###eoif===5211###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (auto_color.colortype == LCT_PALETTE))) &&
         (AKA_mark("lis===6572###sois===288430###eois===288451###lif===102###soif===5225###eoif===5246###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info_png->sbit_a == 8))) && (AKA_mark("lis===6572###sois===288455###eois===288468###lif===102###soif===5250###eoif===5263###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (sbit_max <= 8)))) {
        AKA_mark("lis===6573###sois===288481###eois===288499###lif===103###soif===5276###eoif===5294###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");allow_convert = 1;
      }
else {
AKA_mark("lis===-6571-###sois===-288345-###eois===-288345123-###lif===-101-###soif===-###eoif===-5263-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
      /*going from 16-bit RGB(A) to 8-bit RGB(A) is ok if all sbit values are <= 8*/
      if(AKA_mark("lis===6576###sois===288605###eois===288816###lif===106###soif===5400###eoif===5611###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (((((((AKA_mark("lis===6576###sois===288606###eois===288637###lif===106###soif===5401###eoif===5432###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.color.colortype == LCT_RGB)) || (AKA_mark("lis===6576###sois===288641###eois===288673###lif===106###soif===5436###eoif===5468###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.color.colortype == LCT_RGBA)))) && (AKA_mark("lis===6576###sois===288678###eois===288703###lif===106###soif===5473###eoif===5498###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.color.bitdepth == 16))) &&
         (AKA_mark("lis===6577###sois===288717###eois===288761###lif===107###soif===5512###eoif===5556###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (auto_color.colortype == info.color.colortype))) && (AKA_mark("lis===6577###sois===288765###eois===288789###lif===107###soif===5560###eoif===5584###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (auto_color.bitdepth == 8))) &&
         (AKA_mark("lis===6578###sois===288803###eois===288816###lif===108###soif===5598###eoif===5611###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (sbit_max <= 8)))) {
        AKA_mark("lis===6579###sois===288829###eois===288847###lif===109###soif===5624###eoif===5642###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");allow_convert = 1;
      }
else {
AKA_mark("lis===-6576-###sois===-288605-###eois===-288605211-###lif===-106-###soif===-###eoif===-5611-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
      /*going to less channels is ok if all bit values are equal (all possible values in sbit,
        as well as the chosen bitdepth of the result). Due to how auto_convert works,
        we already know that auto_color.colortype has less than or equal amount of channels than
        info.colortype. Palette is not used here. This conversion is not allowed if
        info_png->sbit_r < auto_color.bitdepth, because specifically for alpha, non-presence of
        an sbit value heavily implies that alpha's bit depth is equal to the PNG bit depth (rather
        than the bit depths set in the r, g and b sbit values, by how the PNG specification describes
        handling tRNS chunk case with sBIT), so be conservative here about ignoring user input.*/
      if(AKA_mark("lis===6589###sois===289632###eois===289768###lif===119###soif===6427###eoif===6563###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && ((((AKA_mark("lis===6589###sois===289632###eois===289667###lif===119###soif===6427###eoif===6462###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.color.colortype != LCT_PALETTE)) && (AKA_mark("lis===6589###sois===289671###eois===289706###lif===119###soif===6466###eoif===6501###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (auto_color.colortype != LCT_PALETTE))) &&
         (AKA_mark("lis===6590###sois===289720###eois===289725###lif===120###soif===6515###eoif===6520###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (equal))) && (AKA_mark("lis===6590###sois===289729###eois===289768###lif===120###soif===6524###eoif===6563###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info_png->sbit_r == auto_color.bitdepth)))) {
        AKA_mark("lis===6591###sois===289781###eois===289799###lif===121###soif===6576###eoif===6594###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");allow_convert = 1;
      }
else {
AKA_mark("lis===-6589-###sois===-289632-###eois===-289632136-###lif===-119-###soif===-###eoif===-6563-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6546-###sois===-286785-###eois===-28678522-###lif===-76-###soif===-###eoif===-3602-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
#endif
    if(AKA_mark("lis===6595###sois===289832###eois===289860###lif===125###soif===6627###eoif===6655###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6595###sois===289832###eois===289860###lif===125###soif===6627###eoif===6655###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->encoder.force_palette))) {
      if(AKA_mark("lis===6596###sois===289874###eois===290038###lif===126###soif===6669###eoif===6833###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (((AKA_mark("lis===6596###sois===289874###eois===289906###lif===126###soif===6669###eoif===6701###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.color.colortype != LCT_GREY)) && (AKA_mark("lis===6596###sois===289910###eois===289948###lif===126###soif===6705###eoif===6743###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.color.colortype != LCT_GREY_ALPHA))) &&
         (((AKA_mark("lis===6597###sois===289963###eois===289995###lif===127###soif===6758###eoif===6790###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (auto_color.colortype == LCT_GREY)) || (AKA_mark("lis===6597###sois===289999###eois===290037###lif===127###soif===6794###eoif===6832###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (auto_color.colortype == LCT_GREY_ALPHA)))))) {
        /*user speficially forced a PLTE palette, so cannot convert to grayscale types because
        the PNG specification only allows writing a suggested palette in PLTE for truecolor types*/
        AKA_mark("lis===6600###sois===290248###eois===290266###lif===130###soif===7043###eoif===7061###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");allow_convert = 0;
      }
else {
AKA_mark("lis===-6596-###sois===-289874-###eois===-289874164-###lif===-126-###soif===-###eoif===-6833-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6595-###sois===-289832-###eois===-28983228-###lif===-125-###soif===-###eoif===-6655-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    if(AKA_mark("lis===6603###sois===290291###eois===290304###lif===133###soif===7086###eoif===7099###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6603###sois===290291###eois===290304###lif===133###soif===7086###eoif===7099###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (allow_convert))) {
      AKA_mark("lis===6604###sois===290315###eois===290365###lif===134###soif===7110###eoif===7160###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");lodepng_color_mode_copy(&info.color, &auto_color);
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
      /*also convert the background chunk*/
      if(AKA_mark("lis===6607###sois===290462###eois===290490###lif===137###soif===7257###eoif===7285###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6607###sois===290462###eois===290490###lif===137###soif===7257###eoif===7285###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info_png->background_defined))) {
        if(AKA_mark("lis===6608###sois===290506###eois===290701###lif===138###soif===7301###eoif===7496###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6608###sois===290506###eois===290701###lif===138###soif===7301###eoif===7496###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (lodepng_convert_rgb(&info.background_r, &info.background_g, &info.background_b,
            info_png->background_r, info_png->background_g, info_png->background_b, &info.color, &info_png->color)))) {
          AKA_mark("lis===6610###sois===290716###eois===290735###lif===140###soif===7511###eoif===7530###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = 104;
          AKA_mark("lis===6611###sois===290747###eois===290760###lif===141###soif===7542###eoif===7555###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
        }
else {
AKA_mark("lis===-6608-###sois===-290506-###eois===-290506195-###lif===-138-###soif===-###eoif===-7496-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
      }
else {
AKA_mark("lis===-6607-###sois===-290462-###eois===-29046228-###lif===-137-###soif===-###eoif===-7285-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
#endif /* LODEPNG_COMPILE_ANCILLARY_CHUNKS */
    }
else {
AKA_mark("lis===-6603-###sois===-290291-###eois===-29029113-###lif===-133-###soif===-###eoif===-7099-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
  }
else {
AKA_mark("lis===-6513-###sois===-285125-###eois===-28512527-###lif===-43-###soif===-###eoif===-1947-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
  if(AKA_mark("lis===6618###sois===290887###eois===290909###lif===148###soif===7682###eoif===7704###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6618###sois===290887###eois===290909###lif===148###soif===7682###eoif===7704###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info_png->iccp_defined))) {
    AKA_mark("lis===6619###sois===290918###eois===291008###lif===149###soif===7713###eoif===7803###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");unsigned gray_icc = isGrayICCProfile(info_png->iccp_profile, info_png->iccp_profile_size);
    AKA_mark("lis===6620###sois===291014###eois===291102###lif===150###soif===7809###eoif===7897###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");unsigned rgb_icc = isRGBICCProfile(info_png->iccp_profile, info_png->iccp_profile_size);
    AKA_mark("lis===6621###sois===291108###eois===291203###lif===151###soif===7903###eoif===7998###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");unsigned gray_png = info.color.colortype == LCT_GREY || info.color.colortype == LCT_GREY_ALPHA;
    if(AKA_mark("lis===6622###sois===291212###eois===291233###lif===152###soif===8007###eoif===8028###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && ((AKA_mark("lis===6622###sois===291212###eois===291221###lif===152###soif===8007###eoif===8016###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (!gray_icc)) && (AKA_mark("lis===6622###sois===291225###eois===291233###lif===152###soif===8020###eoif===8028###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (!rgb_icc)))) {
      AKA_mark("lis===6623###sois===291244###eois===291263###lif===153###soif===8039###eoif===8058###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = 100; /* Disallowed profile color type for PNG */
      AKA_mark("lis===6624###sois===291315###eois===291328###lif===154###soif===8110###eoif===8123###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
    }
else {
AKA_mark("lis===-6622-###sois===-291212-###eois===-29121221-###lif===-152-###soif===-###eoif===-8028-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    if(AKA_mark("lis===6626###sois===291344###eois===291364###lif===156###soif===8139###eoif===8159###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6626###sois===291344###eois===291364###lif===156###soif===8139###eoif===8159###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (gray_icc != gray_png))) {
      /*Not allowed to use RGB/RGBA/palette with GRAY ICC profile or vice versa,
      or in case of auto_convert, it wasn't possible to find appropriate model*/
      AKA_mark("lis===6629###sois===291539###eois===291594###lif===159###soif===8334###eoif===8389###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = state->encoder.auto_convert ? 102 : 101;
      AKA_mark("lis===6630###sois===291602###eois===291615###lif===160###soif===8397###eoif===8410###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
    }
else {
AKA_mark("lis===-6626-###sois===-291344-###eois===-29134420-###lif===-156-###soif===-###eoif===-8159-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
  }
else {
AKA_mark("lis===-6618-###sois===-290887-###eois===-29088722-###lif===-148-###soif===-###eoif===-7704-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
  if(AKA_mark("lis===6634###sois===291679###eois===291735###lif===164###soif===8474###eoif===8530###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6634###sois===291679###eois===291735###lif===164###soif===8474###eoif===8530###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (!lodepng_color_mode_equal(&state->info_raw, &info.color)))) {
    AKA_mark("lis===6635###sois===291744###eois===291769###lif===165###soif===8539###eoif===8564###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");unsigned char* converted;
    AKA_mark("lis===6636###sois===291775###eois===291862###lif===166###soif===8570###eoif===8657###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");size_t size = ((size_t)w * (size_t)h * (size_t)lodepng_get_bpp(&info.color) + 7u) / 8u;

    AKA_mark("lis===6638###sois===291870###eois===291919###lif===168###soif===8665###eoif===8714###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");converted = (unsigned char*)lodepng_malloc(size);
    if(AKA_mark("lis===6639###sois===291928###eois===291946###lif===169###soif===8723###eoif===8741###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && ((AKA_mark("lis===6639###sois===291928###eois===291938###lif===169###soif===8723###eoif===8733###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (!converted)) && (AKA_mark("lis===6639###sois===291942###eois===291946###lif===169###soif===8737###eoif===8741###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (size)))) {
AKA_mark("lis===6639###sois===291948###eois===291966###lif===169###soif===8743###eoif===8761###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = 83;
}

else {
AKA_mark("lis===-6639-###sois===-291928-###eois===-29192818-###lif===-169-###soif===-###eoif===-8741-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
} /*alloc fail*/
    if(AKA_mark("lis===6640###sois===291990###eois===292003###lif===170###soif===8785###eoif===8798###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6640###sois===291990###eois===292003###lif===170###soif===8785###eoif===8798###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (!state->error))) {
      AKA_mark("lis===6641###sois===292014###eois===292100###lif===171###soif===8809###eoif===8895###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = lodepng_convert(converted, image, &info.color, &state->info_raw, w, h);
    }
else {
AKA_mark("lis===-6640-###sois===-291990-###eois===-29199013-###lif===-170-###soif===-###eoif===-8798-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    if(AKA_mark("lis===6643###sois===292116###eois===292129###lif===173###soif===8911###eoif===8924###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6643###sois===292116###eois===292129###lif===173###soif===8911###eoif===8924###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (!state->error))) {
      AKA_mark("lis===6644###sois===292140###eois===292234###lif===174###soif===8935###eoif===9029###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = preProcessScanlines(&data, &datasize, converted, w, h, &info, &state->encoder);
    }
else {
AKA_mark("lis===-6643-###sois===-292116-###eois===-29211613-###lif===-173-###soif===-###eoif===-8924-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    AKA_mark("lis===6646###sois===292247###eois===292271###lif===176###soif===9042###eoif===9066###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");lodepng_free(converted);
    if(AKA_mark("lis===6647###sois===292280###eois===292292###lif===177###soif===9075###eoif===9087###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6647###sois===292280###eois===292292###lif===177###soif===9075###eoif===9087###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6647###sois===292294###eois===292307###lif===177###soif===9089###eoif===9102###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6647-###sois===-292280-###eois===-29228012-###lif===-177-###soif===-###eoif===-9087-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
  } else {
    AKA_mark("lis===6649###sois===292325###eois===292415###lif===179###soif===9120###eoif===9210###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = preProcessScanlines(&data, &datasize, image, w, h, &info, &state->encoder);
    if(AKA_mark("lis===6650###sois===292424###eois===292436###lif===180###soif===9219###eoif===9231###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6650###sois===292424###eois===292436###lif===180###soif===9219###eoif===9231###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6650###sois===292438###eois===292451###lif===180###soif===9233###eoif===9246###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6650-###sois===-292424-###eois===-29242412-###lif===-180-###soif===-###eoif===-9231-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
  }

  /* output all PNG chunks */ {
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
    AKA_mark("lis===6655###sois===292538###eois===292547###lif===185###soif===9333###eoif===9342###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");size_t i;
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
    /*write signature and chunks*/
    AKA_mark("lis===6658###sois===292634###eois===292671###lif===188###soif===9429###eoif===9466###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = writeSignature(&outv);
    if(AKA_mark("lis===6659###sois===292680###eois===292692###lif===189###soif===9475###eoif===9487###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6659###sois===292680###eois===292692###lif===189###soif===9475###eoif===9487###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6659###sois===292694###eois===292707###lif===189###soif===9489###eoif===9502###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6659-###sois===-292680-###eois===-29268012-###lif===-189-###soif===-###eoif===-9487-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    /*IHDR*/
    AKA_mark("lis===6661###sois===292727###eois===292835###lif===191###soif===9522###eoif===9630###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_IHDR(&outv, w, h, info.color.colortype, info.color.bitdepth, info.interlace_method);
    if(AKA_mark("lis===6662###sois===292844###eois===292856###lif===192###soif===9639###eoif===9651###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6662###sois===292844###eois===292856###lif===192###soif===9639###eoif===9651###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6662###sois===292858###eois===292871###lif===192###soif===9653###eoif===9666###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6662-###sois===-292844-###eois===-29284412-###lif===-192-###soif===-###eoif===-9651-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
    /*unknown chunks between IHDR and PLTE*/
    if(AKA_mark("lis===6665###sois===292967###eois===292994###lif===195###soif===9762###eoif===9789###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6665###sois===292967###eois===292994###lif===195###soif===9762###eoif===9789###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.unknown_chunks_data[0]))) {
      AKA_mark("lis===6666###sois===293005###eois===293102###lif===196###soif===9800###eoif===9897###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addUnknownChunks(&outv, info.unknown_chunks_data[0], info.unknown_chunks_size[0]);
      if(AKA_mark("lis===6667###sois===293113###eois===293125###lif===197###soif===9908###eoif===9920###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6667###sois===293113###eois===293125###lif===197###soif===9908###eoif===9920###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6667###sois===293127###eois===293140###lif===197###soif===9922###eoif===9935###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6667-###sois===-293113-###eois===-29311312-###lif===-197-###soif===-###eoif===-9920-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6665-###sois===-292967-###eois===-29296727-###lif===-195-###soif===-###eoif===-9789-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    /*color profile chunks must come before PLTE */
    if(AKA_mark("lis===6670###sois===293209###eois===293226###lif===200###soif===10004###eoif===10021###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6670###sois===293209###eois===293226###lif===200###soif===10004###eoif===10021###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.cicp_defined))) {
      AKA_mark("lis===6671###sois===293237###eois===293280###lif===201###soif===10032###eoif===10075###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_cICP(&outv, &info);
      if(AKA_mark("lis===6672###sois===293291###eois===293303###lif===202###soif===10086###eoif===10098###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6672###sois===293291###eois===293303###lif===202###soif===10086###eoif===10098###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6672###sois===293305###eois===293318###lif===202###soif===10100###eoif===10113###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6672-###sois===-293291-###eois===-29329112-###lif===-202-###soif===-###eoif===-10098-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6670-###sois===-293209-###eois===-29320917-###lif===-200-###soif===-###eoif===-10021-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    if(AKA_mark("lis===6674###sois===293334###eois===293351###lif===204###soif===10129###eoif===10146###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6674###sois===293334###eois===293351###lif===204###soif===10129###eoif===10146###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.mdcv_defined))) {
      AKA_mark("lis===6675###sois===293362###eois===293405###lif===205###soif===10157###eoif===10200###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_mDCV(&outv, &info);
      if(AKA_mark("lis===6676###sois===293416###eois===293428###lif===206###soif===10211###eoif===10223###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6676###sois===293416###eois===293428###lif===206###soif===10211###eoif===10223###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6676###sois===293430###eois===293443###lif===206###soif===10225###eoif===10238###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6676-###sois===-293416-###eois===-29341612-###lif===-206-###soif===-###eoif===-10223-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6674-###sois===-293334-###eois===-29333417-###lif===-204-###soif===-###eoif===-10146-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    if(AKA_mark("lis===6678###sois===293459###eois===293476###lif===208###soif===10254###eoif===10271###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6678###sois===293459###eois===293476###lif===208###soif===10254###eoif===10271###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.clli_defined))) {
      AKA_mark("lis===6679###sois===293487###eois===293530###lif===209###soif===10282###eoif===10325###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_cLLI(&outv, &info);
      if(AKA_mark("lis===6680###sois===293541###eois===293553###lif===210###soif===10336###eoif===10348###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6680###sois===293541###eois===293553###lif===210###soif===10336###eoif===10348###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6680###sois===293555###eois===293568###lif===210###soif===10350###eoif===10363###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6680-###sois===-293541-###eois===-29354112-###lif===-210-###soif===-###eoif===-10348-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6678-###sois===-293459-###eois===-29345917-###lif===-208-###soif===-###eoif===-10271-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    if(AKA_mark("lis===6682###sois===293584###eois===293601###lif===212###soif===10379###eoif===10396###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6682###sois===293584###eois===293601###lif===212###soif===10379###eoif===10396###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.iccp_defined))) {
      AKA_mark("lis===6683###sois===293612###eois===293685###lif===213###soif===10407###eoif===10480###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_iCCP(&outv, &info, &state->encoder.zlibsettings);
      if(AKA_mark("lis===6684###sois===293696###eois===293708###lif===214###soif===10491###eoif===10503###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6684###sois===293696###eois===293708###lif===214###soif===10491###eoif===10503###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6684###sois===293710###eois===293723###lif===214###soif===10505###eoif===10518###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6684-###sois===-293696-###eois===-29369612-###lif===-214-###soif===-###eoif===-10503-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6682-###sois===-293584-###eois===-29358417-###lif===-212-###soif===-###eoif===-10396-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    if(AKA_mark("lis===6686###sois===293739###eois===293756###lif===216###soif===10534###eoif===10551###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6686###sois===293739###eois===293756###lif===216###soif===10534###eoif===10551###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.srgb_defined))) {
      AKA_mark("lis===6687###sois===293767###eois===293810###lif===217###soif===10562###eoif===10605###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_sRGB(&outv, &info);
      if(AKA_mark("lis===6688###sois===293821###eois===293833###lif===218###soif===10616###eoif===10628###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6688###sois===293821###eois===293833###lif===218###soif===10616###eoif===10628###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6688###sois===293835###eois===293848###lif===218###soif===10630###eoif===10643###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6688-###sois===-293821-###eois===-29382112-###lif===-218-###soif===-###eoif===-10628-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6686-###sois===-293739-###eois===-29373917-###lif===-216-###soif===-###eoif===-10551-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    if(AKA_mark("lis===6690###sois===293864###eois===293881###lif===220###soif===10659###eoif===10676###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6690###sois===293864###eois===293881###lif===220###soif===10659###eoif===10676###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.gama_defined))) {
      AKA_mark("lis===6691###sois===293892###eois===293935###lif===221###soif===10687###eoif===10730###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_gAMA(&outv, &info);
      if(AKA_mark("lis===6692###sois===293946###eois===293958###lif===222###soif===10741###eoif===10753###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6692###sois===293946###eois===293958###lif===222###soif===10741###eoif===10753###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6692###sois===293960###eois===293973###lif===222###soif===10755###eoif===10768###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6692-###sois===-293946-###eois===-29394612-###lif===-222-###soif===-###eoif===-10753-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6690-###sois===-293864-###eois===-29386417-###lif===-220-###soif===-###eoif===-10676-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    if(AKA_mark("lis===6694###sois===293989###eois===294006###lif===224###soif===10784###eoif===10801###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6694###sois===293989###eois===294006###lif===224###soif===10784###eoif===10801###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.chrm_defined))) {
      AKA_mark("lis===6695###sois===294017###eois===294060###lif===225###soif===10812###eoif===10855###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_cHRM(&outv, &info);
      if(AKA_mark("lis===6696###sois===294071###eois===294083###lif===226###soif===10866###eoif===10878###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6696###sois===294071###eois===294083###lif===226###soif===10866###eoif===10878###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6696###sois===294085###eois===294098###lif===226###soif===10880###eoif===10893###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6696-###sois===-294071-###eois===-29407112-###lif===-226-###soif===-###eoif===-10878-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6694-###sois===-293989-###eois===-29398917-###lif===-224-###soif===-###eoif===-10801-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    if(AKA_mark("lis===6698###sois===294114###eois===294136###lif===228###soif===10909###eoif===10931###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6698###sois===294114###eois===294136###lif===228###soif===10909###eoif===10931###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info_png->sbit_defined))) {
      AKA_mark("lis===6699###sois===294147###eois===294190###lif===229###soif===10942###eoif===10985###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_sBIT(&outv, &info);
      if(AKA_mark("lis===6700###sois===294201###eois===294213###lif===230###soif===10996###eoif===11008###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6700###sois===294201###eois===294213###lif===230###soif===10996###eoif===11008###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6700###sois===294215###eois===294228###lif===230###soif===11010###eoif===11023###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6700-###sois===-294201-###eois===-29420112-###lif===-230-###soif===-###eoif===-11008-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6698-###sois===-294114-###eois===-29411422-###lif===-228-###soif===-###eoif===-10931-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    if(AKA_mark("lis===6702###sois===294244###eois===294261###lif===232###soif===11039###eoif===11056###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6702###sois===294244###eois===294261###lif===232###soif===11039###eoif===11056###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.exif_defined))) {
      AKA_mark("lis===6703###sois===294272###eois===294315###lif===233###soif===11067###eoif===11110###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_eXIf(&outv, &info);
      if(AKA_mark("lis===6704###sois===294326###eois===294338###lif===234###soif===11121###eoif===11133###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6704###sois===294326###eois===294338###lif===234###soif===11121###eoif===11133###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6704###sois===294340###eois===294353###lif===234###soif===11135###eoif===11148###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6704-###sois===-294326-###eois===-29432612-###lif===-234-###soif===-###eoif===-11133-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6702-###sois===-294244-###eois===-29424417-###lif===-232-###soif===-###eoif===-11056-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
    /*PLTE*/
    if(AKA_mark("lis===6708###sois===294428###eois===294463###lif===238###soif===11223###eoif===11258###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6708###sois===294428###eois===294463###lif===238###soif===11223###eoif===11258###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.color.colortype == LCT_PALETTE))) {
      AKA_mark("lis===6709###sois===294474###eois===294523###lif===239###soif===11269###eoif===11318###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_PLTE(&outv, &info.color);
      if(AKA_mark("lis===6710###sois===294534###eois===294546###lif===240###soif===11329###eoif===11341###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6710###sois===294534###eois===294546###lif===240###soif===11329###eoif===11341###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6710###sois===294548###eois===294561###lif===240###soif===11343###eoif===11356###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6710-###sois===-294534-###eois===-29453412-###lif===-240-###soif===-###eoif===-11341-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6708-###sois===-294428-###eois===-29442835-###lif===-238-###soif===-###eoif===-11258-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    if(AKA_mark("lis===6712###sois===294577###eois===294678###lif===242###soif===11372###eoif===11473###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && ((AKA_mark("lis===6712###sois===294577###eois===294605###lif===242###soif===11372###eoif===11400###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->encoder.force_palette)) && (((AKA_mark("lis===6712###sois===294610###eois===294641###lif===242###soif===11405###eoif===11436###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.color.colortype == LCT_RGB)) || (AKA_mark("lis===6712###sois===294645###eois===294677###lif===242###soif===11440###eoif===11472###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.color.colortype == LCT_RGBA)))))) {
      /*force_palette means: write suggested palette for truecolor in PLTE chunk*/
      AKA_mark("lis===6714###sois===294773###eois===294822###lif===244###soif===11568###eoif===11617###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_PLTE(&outv, &info.color);
      if(AKA_mark("lis===6715###sois===294833###eois===294845###lif===245###soif===11628###eoif===11640###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6715###sois===294833###eois===294845###lif===245###soif===11628###eoif===11640###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6715###sois===294847###eois===294860###lif===245###soif===11642###eoif===11655###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6715-###sois===-294833-###eois===-29483312-###lif===-245-###soif===-###eoif===-11640-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6712-###sois===-294577-###eois===-294577101-###lif===-242-###soif===-###eoif===-11473-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    /*tRNS (this will only add if when necessary) */
    AKA_mark("lis===6718###sois===294927###eois===294976###lif===248###soif===11722###eoif===11771###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_tRNS(&outv, &info.color);
    if(AKA_mark("lis===6719###sois===294985###eois===294997###lif===249###soif===11780###eoif===11792###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6719###sois===294985###eois===294997###lif===249###soif===11780###eoif===11792###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6719###sois===294999###eois===295012###lif===249###soif===11794###eoif===11807###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6719-###sois===-294985-###eois===-29498512-###lif===-249-###soif===-###eoif===-11792-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
    /*bKGD (must come between PLTE and the IDAt chunks*/
    if(AKA_mark("lis===6722###sois===295120###eois===295143###lif===252###soif===11915###eoif===11938###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6722###sois===295120###eois===295143###lif===252###soif===11915###eoif===11938###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.background_defined))) {
      AKA_mark("lis===6723###sois===295154###eois===295197###lif===253###soif===11949###eoif===11992###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_bKGD(&outv, &info);
      if(AKA_mark("lis===6724###sois===295208###eois===295220###lif===254###soif===12003###eoif===12015###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6724###sois===295208###eois===295220###lif===254###soif===12003###eoif===12015###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6724###sois===295222###eois===295235###lif===254###soif===12017###eoif===12030###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6724-###sois===-295208-###eois===-29520812-###lif===-254-###soif===-###eoif===-12015-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6722-###sois===-295120-###eois===-29512023-###lif===-252-###soif===-###eoif===-11938-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    /*pHYs (must come before the IDAT chunks)*/
    if(AKA_mark("lis===6727###sois===295300###eois===295317###lif===257###soif===12095###eoif===12112###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6727###sois===295300###eois===295317###lif===257###soif===12095###eoif===12112###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.phys_defined))) {
      AKA_mark("lis===6728###sois===295328###eois===295371###lif===258###soif===12123###eoif===12166###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_pHYs(&outv, &info);
      if(AKA_mark("lis===6729###sois===295382###eois===295394###lif===259###soif===12177###eoif===12189###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6729###sois===295382###eois===295394###lif===259###soif===12177###eoif===12189###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6729###sois===295396###eois===295409###lif===259###soif===12191###eoif===12204###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6729-###sois===-295382-###eois===-29538212-###lif===-259-###soif===-###eoif===-12189-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6727-###sois===-295300-###eois===-29530017-###lif===-257-###soif===-###eoif===-12112-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}

    /*unknown chunks between PLTE and IDAT*/
    if(AKA_mark("lis===6733###sois===295473###eois===295500###lif===263###soif===12268###eoif===12295###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6733###sois===295473###eois===295500###lif===263###soif===12268###eoif===12295###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.unknown_chunks_data[1]))) {
      AKA_mark("lis===6734###sois===295511###eois===295608###lif===264###soif===12306###eoif===12403###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addUnknownChunks(&outv, info.unknown_chunks_data[1], info.unknown_chunks_size[1]);
      if(AKA_mark("lis===6735###sois===295619###eois===295631###lif===265###soif===12414###eoif===12426###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6735###sois===295619###eois===295631###lif===265###soif===12414###eoif===12426###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6735###sois===295633###eois===295646###lif===265###soif===12428###eoif===12441###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6735-###sois===-295619-###eois===-29561912-###lif===-265-###soif===-###eoif===-12426-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6733-###sois===-295473-###eois===-29547327-###lif===-263-###soif===-###eoif===-12295-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
    /*IDAT (multiple IDAT chunks must be consecutive)*/
    AKA_mark("lis===6739###sois===295761###eois===295843###lif===269###soif===12556###eoif===12638###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_IDAT(&outv, data, datasize, &state->encoder.zlibsettings);
    if(AKA_mark("lis===6740###sois===295852###eois===295864###lif===270###soif===12647###eoif===12659###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6740###sois===295852###eois===295864###lif===270###soif===12647###eoif===12659###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6740###sois===295866###eois===295879###lif===270###soif===12661###eoif===12674###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6740-###sois===-295852-###eois===-29585212-###lif===-270-###soif===-###eoif===-12659-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
    /*tIME*/
    if(AKA_mark("lis===6743###sois===295943###eois===295960###lif===273###soif===12738###eoif===12755###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6743###sois===295943###eois===295960###lif===273###soif===12738###eoif===12755###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.time_defined))) {
      AKA_mark("lis===6744###sois===295971###eois===296019###lif===274###soif===12766###eoif===12814###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_tIME(&outv, &info.time);
      if(AKA_mark("lis===6745###sois===296030###eois===296042###lif===275###soif===12825###eoif===12837###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6745###sois===296030###eois===296042###lif===275###soif===12825###eoif===12837###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6745###sois===296044###eois===296057###lif===275###soif===12839###eoif===12852###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6745-###sois===-296030-###eois===-29603012-###lif===-275-###soif===-###eoif===-12837-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6743-###sois===-295943-###eois===-29594317-###lif===-273-###soif===-###eoif===-12755-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    /*tEXt and/or zTXt*/
    int AKA_BLOCK_LOOP_296096 = 0;
    AKA_mark("lis===6748###sois===296100###eois===296106###lif===278###soif===12895###eoif===12901###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
for(i = 0; AKA_mark("lis===6748###sois===296107###eois===296125###lif===278###soif===12902###eoif===12920###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6748###sois===296107###eois===296125###lif===278###soif===12902###eoif===12920###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (i != info.text_num)); ({AKA_mark("lis===6748###sois===296127###eois===296130###lif===278###soif===12922###eoif===12925###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");++i;})) {
        AKA_BLOCK_LOOP_296096++;
        if (AKA_BLOCK_LOOP_296096 > 1000) {
            //break;
        }
      if(AKA_mark("lis===6749###sois===296144###eois===296182###lif===279###soif===12939###eoif===12977###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6749###sois===296144###eois===296182###lif===279###soif===12939###eoif===12977###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (lodepng_strlen(info.text_keys[i]) > 79))) {
        AKA_mark("lis===6750###sois===296195###eois===296213###lif===280###soif===12990###eoif===13008###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = 66; /*text chunk too large*/
        AKA_mark("lis===6751###sois===296248###eois===296261###lif===281###soif===13043###eoif===13056###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
      }
else {
AKA_mark("lis===-6749-###sois===-296144-###eois===-29614438-###lif===-279-###soif===-###eoif===-12977-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
      if(AKA_mark("lis===6753###sois===296281###eois===296318###lif===283###soif===13076###eoif===13113###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6753###sois===296281###eois===296318###lif===283###soif===13076###eoif===13113###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (lodepng_strlen(info.text_keys[i]) < 1))) {
        AKA_mark("lis===6754###sois===296331###eois===296349###lif===284###soif===13126###eoif===13144###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = 67; /*text chunk too small*/
        AKA_mark("lis===6755###sois===296384###eois===296397###lif===285###soif===13179###eoif===13192###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
      }
else {
AKA_mark("lis===-6753-###sois===-296281-###eois===-29628137-###lif===-283-###soif===-###eoif===-13113-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
      if(AKA_mark("lis===6757###sois===296417###eois===296448###lif===287###soif===13212###eoif===13243###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6757###sois===296417###eois===296448###lif===287###soif===13212###eoif===13243###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->encoder.text_compression))) {
        AKA_mark("lis===6758###sois===296461###eois===296568###lif===288###soif===13256###eoif===13363###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_zTXt(&outv, info.text_keys[i], info.text_strings[i], &state->encoder.zlibsettings);
        if(AKA_mark("lis===6759###sois===296581###eois===296593###lif===289###soif===13376###eoif===13388###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6759###sois===296581###eois===296593###lif===289###soif===13376###eoif===13388###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6759###sois===296595###eois===296608###lif===289###soif===13390###eoif===13403###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6759-###sois===-296581-###eois===-29658112-###lif===-289-###soif===-###eoif===-13388-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
      } else {
        AKA_mark("lis===6761###sois===296634###eois===296711###lif===291###soif===13429###eoif===13506###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_tEXt(&outv, info.text_keys[i], info.text_strings[i]);
        if(AKA_mark("lis===6762###sois===296724###eois===296736###lif===292###soif===13519###eoif===13531###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6762###sois===296724###eois===296736###lif===292###soif===13519###eoif===13531###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6762###sois===296738###eois===296751###lif===292###soif===13533###eoif===13546###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6762-###sois===-296724-###eois===-29672412-###lif===-292-###soif===-###eoif===-13531-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
      }
    }
    /*LodePNG version id in text chunk*/
    if(AKA_mark("lis===6766###sois===296818###eois===296839###lif===296###soif===13613###eoif===13634###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6766###sois===296818###eois===296839###lif===296###soif===13613###eoif===13634###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->encoder.add_id))) {
      AKA_mark("lis===6767###sois===296850###eois===296885###lif===297###soif===13645###eoif===13680###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");unsigned already_added_id_text = 0;
      int AKA_BLOCK_LOOP_296893 = 0;
    AKA_mark("lis===6768###sois===296897###eois===296903###lif===298###soif===13692###eoif===13698###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
for(i = 0; AKA_mark("lis===6768###sois===296904###eois===296922###lif===298###soif===13699###eoif===13717###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6768###sois===296904###eois===296922###lif===298###soif===13699###eoif===13717###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (i != info.text_num)); ({AKA_mark("lis===6768###sois===296924###eois===296927###lif===298###soif===13719###eoif===13722###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");++i;})) {
        AKA_BLOCK_LOOP_296893++;
        if (AKA_BLOCK_LOOP_296893 > 1000) {
            //break;
        }
        AKA_mark("lis===6769###sois===296940###eois===296974###lif===299###soif===13735###eoif===13769###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");const char* k = info.text_keys[i];
        /* Could use strcmp, but we're not calling or reimplementing this C library function for this use only */
        if(AKA_mark("lis===6771###sois===297102###eois===297231###lif===301###soif===13897###eoif===14026###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && ((((((((AKA_mark("lis===6771###sois===297102###eois===297113###lif===301###soif===13897###eoif===13908###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (k[0] == 'L')) && (AKA_mark("lis===6771###sois===297117###eois===297128###lif===301###soif===13912###eoif===13923###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (k[1] == 'o'))) && (AKA_mark("lis===6771###sois===297132###eois===297143###lif===301###soif===13927###eoif===13938###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (k[2] == 'd'))) && (AKA_mark("lis===6771###sois===297147###eois===297158###lif===301###soif===13942###eoif===13953###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (k[3] == 'e'))) &&
           (AKA_mark("lis===6772###sois===297174###eois===297185###lif===302###soif===13969###eoif===13980###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (k[4] == 'P'))) && (AKA_mark("lis===6772###sois===297189###eois===297200###lif===302###soif===13984###eoif===13995###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (k[5] == 'N'))) && (AKA_mark("lis===6772###sois===297204###eois===297215###lif===302###soif===13999###eoif===14010###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (k[6] == 'G'))) && (AKA_mark("lis===6772###sois===297219###eois===297231###lif===302###soif===14014###eoif===14026###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (k[7] == '\0')))) {
          AKA_mark("lis===6773###sois===297246###eois===297272###lif===303###soif===14041###eoif===14067###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");already_added_id_text = 1;
          AKA_mark("lis===6774###sois===297284###eois===297290###lif===304###soif===14079###eoif===14085###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");break;
        }
else {
AKA_mark("lis===-6771-###sois===-297102-###eois===-297102129-###lif===-301-###soif===-###eoif===-14026-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
      }
      if(AKA_mark("lis===6777###sois===297321###eois===297347###lif===307###soif===14116###eoif===14142###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6777###sois===297321###eois===297347###lif===307###soif===14116###eoif===14142###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (already_added_id_text == 0))) {
        AKA_mark("lis===6778###sois===297360###eois===297431###lif===308###soif===14155###eoif===14226###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_tEXt(&outv, "LodePNG", LODEPNG_VERSION_STRING); /*it's shorter as tEXt than as zTXt chunk*/
        if(AKA_mark("lis===6779###sois===297488###eois===297500###lif===309###soif===14283###eoif===14295###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6779###sois===297488###eois===297500###lif===309###soif===14283###eoif===14295###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6779###sois===297502###eois===297515###lif===309###soif===14297###eoif===14310###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6779-###sois===-297488-###eois===-29748812-###lif===-309-###soif===-###eoif===-14295-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
      }
else {
AKA_mark("lis===-6777-###sois===-297321-###eois===-29732126-###lif===-307-###soif===-###eoif===-14142-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6766-###sois===-296818-###eois===-29681821-###lif===-296-###soif===-###eoif===-13634-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    /*iTXt*/
    int AKA_BLOCK_LOOP_297551 = 0;
    AKA_mark("lis===6783###sois===297555###eois===297561###lif===313###soif===14350###eoif===14356###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
for(i = 0; AKA_mark("lis===6783###sois===297562###eois===297581###lif===313###soif===14357###eoif===14376###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6783###sois===297562###eois===297581###lif===313###soif===14357###eoif===14376###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (i != info.itext_num)); ({AKA_mark("lis===6783###sois===297583###eois===297586###lif===313###soif===14378###eoif===14381###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");++i;})) {
        AKA_BLOCK_LOOP_297551++;
        if (AKA_BLOCK_LOOP_297551 > 1000) {
            //break;
        }
      if(AKA_mark("lis===6784###sois===297600###eois===297639###lif===314###soif===14395###eoif===14434###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6784###sois===297600###eois===297639###lif===314###soif===14395###eoif===14434###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (lodepng_strlen(info.itext_keys[i]) > 79))) {
        AKA_mark("lis===6785###sois===297652###eois===297670###lif===315###soif===14447###eoif===14465###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = 66; /*text chunk too large*/
        AKA_mark("lis===6786###sois===297705###eois===297718###lif===316###soif===14500###eoif===14513###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
      }
else {
AKA_mark("lis===-6784-###sois===-297600-###eois===-29760039-###lif===-314-###soif===-###eoif===-14434-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
      if(AKA_mark("lis===6788###sois===297738###eois===297776###lif===318###soif===14533###eoif===14571###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6788###sois===297738###eois===297776###lif===318###soif===14533###eoif===14571###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (lodepng_strlen(info.itext_keys[i]) < 1))) {
        AKA_mark("lis===6789###sois===297789###eois===297807###lif===319###soif===14584###eoif===14602###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = 67; /*text chunk too small*/
        AKA_mark("lis===6790###sois===297842###eois===297855###lif===320###soif===14637###eoif===14650###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
      }
else {
AKA_mark("lis===-6788-###sois===-297738-###eois===-29773838-###lif===-318-###soif===-###eoif===-14571-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
      AKA_mark("lis===6792###sois===297872###eois===298097###lif===322###soif===14667###eoif===14892###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_iTXt(
          &outv, state->encoder.text_compression,
          info.itext_keys[i], info.itext_langtags[i], info.itext_transkeys[i], info.itext_strings[i],
          &state->encoder.zlibsettings);
      if(AKA_mark("lis===6796###sois===298108###eois===298120###lif===326###soif===14903###eoif===14915###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6796###sois===298108###eois===298120###lif===326###soif===14903###eoif===14915###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6796###sois===298122###eois===298135###lif===326###soif===14917###eoif===14930###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6796-###sois===-298108-###eois===-29810812-###lif===-326-###soif===-###eoif===-14915-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }

    /*unknown chunks between IDAT and IEND*/
    if(AKA_mark("lis===6800###sois===298199###eois===298226###lif===330###soif===14994###eoif===15021###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6800###sois===298199###eois===298226###lif===330###soif===14994###eoif===15021###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (info.unknown_chunks_data[2]))) {
      AKA_mark("lis===6801###sois===298237###eois===298334###lif===331###soif===15032###eoif===15129###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addUnknownChunks(&outv, info.unknown_chunks_data[2], info.unknown_chunks_size[2]);
      if(AKA_mark("lis===6802###sois===298345###eois===298357###lif===332###soif===15140###eoif===15152###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6802###sois===298345###eois===298357###lif===332###soif===15140###eoif===15152###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6802###sois===298359###eois===298372###lif===332###soif===15154###eoif===15167###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6802-###sois===-298345-###eois===-29834512-###lif===-332-###soif===-###eoif===-15152-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
    }
else {
AKA_mark("lis===-6800-###sois===-298199-###eois===-29819927-###lif===-330-###soif===-###eoif===-15021-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
    AKA_mark("lis===6805###sois===298430###eois===298466###lif===335###soif===15225###eoif===15261###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");state->error = addChunk_IEND(&outv);
    if(AKA_mark("lis===6806###sois===298475###eois===298487###lif===336###soif===15270###eoif===15282###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (AKA_mark("lis===6806###sois===298475###eois===298487###lif===336###soif===15270###eoif===15282###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)") && (state->error))) {
AKA_mark("lis===6806###sois===298489###eois===298502###lif===336###soif===15284###eoif===15297###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");goto cleanup;
}

else {
AKA_mark("lis===-6806-###sois===-298475-###eois===-29847512-###lif===-336-###soif===-###eoif===-15282-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");
}
  }

cleanup:
  AKA_mark("lis===6810###sois===298523###eois===298551###lif===340###soif===15318###eoif===15346###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");lodepng_info_cleanup(&info);
  AKA_mark("lis===6811###sois===298555###eois===298574###lif===341###soif===15350###eoif===15369###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");lodepng_free(data);
  AKA_mark("lis===6812###sois===298578###eois===298618###lif===342###soif===15373###eoif===15413###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");lodepng_color_mode_cleanup(&auto_color);

  /*instead of cleaning the vector up, give it to the output*/
  AKA_mark("lis===6815###sois===298688###eois===298705###lif===345###soif===15483###eoif===15500###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");*out = outv.data;
  AKA_mark("lis===6816###sois===298709###eois===298730###lif===346###soif===15504###eoif===15525###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");*outsize = outv.size;

  AKA_mark("lis===6818###sois===298736###eois===298756###lif===348###soif===15531###eoif===15551###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGState*)");return state->error;
}

/** Instrumented function lodepng_encode_memory(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned) */
unsigned lodepng_encode_memory(unsigned char** out, size_t* outsize, const unsigned char* image,
                               unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth) /* << Aka begin of function unsigned lodepng_encode_memory(unsigned char** out, size_t* outsize, const unsigned char* image,
                               unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_memory(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_encode_memory.298772.stub"

  AKA_mark("lis===6823###sois===298968###eois===298983###lif===2###soif===205###eoif===220###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_memory(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");unsigned error;
  AKA_mark("lis===6824###sois===298987###eois===299006###lif===3###soif===224###eoif===243###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_memory(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");LodePNGState state;
  AKA_mark("lis===6825###sois===299010###eois===299037###lif===4###soif===247###eoif===274###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_memory(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");lodepng_state_init(&state);
  AKA_mark("lis===6826###sois===299041###eois===299078###lif===5###soif===278###eoif===315###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_memory(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");state.info_raw.colortype = colortype;
  AKA_mark("lis===6827###sois===299082###eois===299117###lif===6###soif===319###eoif===354###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_memory(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");state.info_raw.bitdepth = bitdepth;
  AKA_mark("lis===6828###sois===299121###eois===299164###lif===7###soif===358###eoif===401###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_memory(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");state.info_png.color.colortype = colortype;
  AKA_mark("lis===6829###sois===299168###eois===299209###lif===8###soif===405###eoif===446###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_memory(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");state.info_png.color.bitdepth = bitdepth;
  AKA_mark("lis===6830###sois===299213###eois===299263###lif===9###soif===450###eoif===500###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_memory(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");lodepng_encode(out, outsize, image, w, h, &state);
  AKA_mark("lis===6831###sois===299267###eois===299287###lif===10###soif===504###eoif===524###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_memory(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");error = state.error;
  AKA_mark("lis===6832###sois===299291###eois===299321###lif===11###soif===528###eoif===558###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_memory(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");lodepng_state_cleanup(&state);
  AKA_mark("lis===6833###sois===299325###eois===299338###lif===12###soif===562###eoif===575###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_memory(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");return error;
}

/** Instrumented function lodepng_encode32(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned) */
unsigned lodepng_encode32(unsigned char** out, size_t* outsize, const unsigned char* image, unsigned w, unsigned h) /* << Aka begin of function unsigned lodepng_encode32(unsigned char** out, size_t* outsize, const unsigned char* image, unsigned w, unsigned h) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode32(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_encode32.299354.stub"

  AKA_mark("lis===6837###sois===299466###eois===299535###lif===1###soif===121###eoif===190###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode32(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned)");return lodepng_encode_memory(out, outsize, image, w, h, LCT_RGBA, 8);
}

/** Instrumented function lodepng_encode24(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned) */
unsigned lodepng_encode24(unsigned char** out, size_t* outsize, const unsigned char* image, unsigned w, unsigned h) /* << Aka begin of function unsigned lodepng_encode24(unsigned char** out, size_t* outsize, const unsigned char* image, unsigned w, unsigned h) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode24(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_encode24.299551.stub"

  AKA_mark("lis===6841###sois===299663###eois===299731###lif===1###soif===121###eoif===189###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode24(unsigned char**,size_t*,unsigned char const*,unsigned,unsigned)");return lodepng_encode_memory(out, outsize, image, w, h, LCT_RGB, 8);
}

#ifdef LODEPNG_COMPILE_DISK
/** Instrumented function lodepng_encode_file(char const*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned) */
unsigned lodepng_encode_file(const char* filename, const unsigned char* image, unsigned w, unsigned h,
                             LodePNGColorType colortype, unsigned bitdepth) /* << Aka begin of function unsigned lodepng_encode_file(const char* filename, const unsigned char* image, unsigned w, unsigned h,
                             LodePNGColorType colortype, unsigned bitdepth) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_file(char const*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_encode_file.299776.stub"

  AKA_mark("lis===6847###sois===299952###eois===299974###lif===2###soif===185###eoif===207###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_file(char const*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");unsigned char* buffer;
  AKA_mark("lis===6848###sois===299978###eois===299996###lif===3###soif===211###eoif===229###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_file(char const*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");size_t buffersize;
  AKA_mark("lis===6849###sois===300000###eois===300095###lif===4###soif===233###eoif===328###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_file(char const*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");unsigned error = lodepng_encode_memory(&buffer, &buffersize, image, w, h, colortype, bitdepth);
  if(AKA_mark("lis===6850###sois===300102###eois===300108###lif===5###soif===335###eoif===341###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_file(char const*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)") && (AKA_mark("lis===6850###sois===300102###eois===300108###lif===5###soif===335###eoif===341###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_file(char const*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)") && (!error))) {
AKA_mark("lis===6850###sois===300110###eois===300166###lif===5###soif===343###eoif===399###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_file(char const*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");error = lodepng_save_file(buffer, buffersize, filename);
}

else {
AKA_mark("lis===-6850-###sois===-300102-###eois===-3001026-###lif===-5-###soif===-###eoif===-341-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_file(char const*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");
}
  AKA_mark("lis===6851###sois===300170###eois===300191###lif===6###soif===403###eoif===424###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_file(char const*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");lodepng_free(buffer);
  AKA_mark("lis===6852###sois===300195###eois===300208###lif===7###soif===428###eoif===441###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode_file(char const*,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");return error;
}

/** Instrumented function lodepng_encode32_file(char const*,unsigned char const*,unsigned,unsigned) */
unsigned lodepng_encode32_file(const char* filename, const unsigned char* image, unsigned w, unsigned h) /* << Aka begin of function unsigned lodepng_encode32_file(const char* filename, const unsigned char* image, unsigned w, unsigned h) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode32_file(char const*,unsigned char const*,unsigned,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_encode32_file.300224.stub"

  AKA_mark("lis===6856###sois===300325###eois===300388###lif===1###soif===110###eoif===173###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode32_file(char const*,unsigned char const*,unsigned,unsigned)");return lodepng_encode_file(filename, image, w, h, LCT_RGBA, 8);
}

/** Instrumented function lodepng_encode24_file(char const*,unsigned char const*,unsigned,unsigned) */
unsigned lodepng_encode24_file(const char* filename, const unsigned char* image, unsigned w, unsigned h) /* << Aka begin of function unsigned lodepng_encode24_file(const char* filename, const unsigned char* image, unsigned w, unsigned h) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode24_file(char const*,unsigned char const*,unsigned,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_encode24_file.300404.stub"

  AKA_mark("lis===6860###sois===300505###eois===300567###lif===1###soif===110###eoif===172###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encode24_file(char const*,unsigned char const*,unsigned,unsigned)");return lodepng_encode_file(filename, image, w, h, LCT_RGB, 8);
}
#endif /*LODEPNG_COMPILE_DISK*/

/** Instrumented function lodepng_encoder_settings_init(LodePNGEncoderSettings*) */
void lodepng_encoder_settings_init(LodePNGEncoderSettings* settings) /* << Aka begin of function void lodepng_encoder_settings_init(LodePNGEncoderSettings* settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encoder_settings_init(LodePNGEncoderSettings*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_encoder_settings_init.300612.stub"

  AKA_mark("lis===6865###sois===300681###eois===300737###lif===1###soif===74###eoif===130###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encoder_settings_init(LodePNGEncoderSettings*)");lodepng_compress_settings_init(&settings->zlibsettings);
  AKA_mark("lis===6866###sois===300741###eois===300775###lif===2###soif===134###eoif===168###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encoder_settings_init(LodePNGEncoderSettings*)");settings->filter_palette_zero = 1;
  AKA_mark("lis===6867###sois===300779###eois===300818###lif===3###soif===172###eoif===211###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encoder_settings_init(LodePNGEncoderSettings*)");settings->filter_strategy = LFS_MINSUM;
  AKA_mark("lis===6868###sois===300822###eois===300849###lif===4###soif===215###eoif===242###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encoder_settings_init(LodePNGEncoderSettings*)");settings->auto_convert = 1;
  AKA_mark("lis===6869###sois===300853###eois===300881###lif===5###soif===246###eoif===274###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encoder_settings_init(LodePNGEncoderSettings*)");settings->force_palette = 0;
  AKA_mark("lis===6870###sois===300885###eois===300918###lif===6###soif===278###eoif===311###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encoder_settings_init(LodePNGEncoderSettings*)");settings->predefined_filters = 0;
#ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
  AKA_mark("lis===6872###sois===300963###eois===300984###lif===8###soif===356###eoif===377###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encoder_settings_init(LodePNGEncoderSettings*)");settings->add_id = 0;
  AKA_mark("lis===6873###sois===300988###eois===301019###lif===9###soif===381###eoif===412###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_encoder_settings_init(LodePNGEncoderSettings*)");settings->text_compression = 1;
#endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
}

#endif /*LODEPNG_COMPILE_ENCODER*/
#endif /*LODEPNG_COMPILE_PNG*/

#ifdef LODEPNG_COMPILE_ERROR_TEXT
/*
This returns the description of a numerical error code in English. This is also
the documentation of all the error codes.
*/
/** Instrumented function lodepng_error_text(unsigned) */
const char* lodepng_error_text(unsigned code) /* << Aka begin of function const char * lodepng_error_text(unsigned code) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.lodepng_error_text.301318.stub"

  AKA_mark("lis===6886###sois===301366###eois===301370###lif===1###soif===58###eoif===62###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");switch(code) {
    case 0: if (code == 0)
AKA_mark("lis===6887###sois===301379###eois===301386###lif===2###soif===71###eoif===78###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6887###sois===301387###eois===301425###lif===2###soif===79###eoif===117###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "no error, everything went ok";
    case 1: if (code == 1)
AKA_mark("lis===6888###sois===301431###eois===301438###lif===3###soif===123###eoif===130###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6888###sois===301439###eois===301465###lif===3###soif===131###eoif===157###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "nothing done yet"; /*the Encoder/Decoder has done nothing yet, error checking makes no sense yet*/
    case 10: if (code == 10)
AKA_mark("lis===6889###sois===301551###eois===301559###lif===4###soif===243###eoif===251###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6889###sois===301560###eois===301622###lif===4###soif===252###eoif===314###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "end of input memory reached without huffman end code"; /*while huffman decoding*/
    case 11: if (code == 11)
AKA_mark("lis===6890###sois===301655###eois===301663###lif===5###soif===347###eoif===355###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6890###sois===301664###eois===301729###lif===5###soif===356###eoif===421###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "error in code tree made it jump outside of huffman tree"; /*while huffman decoding*/
    case 13: if (code == 13)
AKA_mark("lis===6891###sois===301762###eois===301770###lif===6###soif===454###eoif===462###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6891###sois===301771###eois===301827###lif===6###soif===463###eoif===519###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "problem while processing dynamic deflate block";
    case 14: if (code == 14)
AKA_mark("lis===6892###sois===301833###eois===301841###lif===7###soif===525###eoif===533###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6892###sois===301842###eois===301898###lif===7###soif===534###eoif===590###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "problem while processing dynamic deflate block";
    case 15: if (code == 15)
AKA_mark("lis===6893###sois===301904###eois===301912###lif===8###soif===596###eoif===604###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6893###sois===301913###eois===301969###lif===8###soif===605###eoif===661###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "problem while processing dynamic deflate block";
    /*this error could happen if there are only 0 or 1 symbols present in the huffman code:*/
    case 16: if (code == 16)
AKA_mark("lis===6895###sois===302070###eois===302078###lif===10###soif===762###eoif===770###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6895###sois===302079###eois===302140###lif===10###soif===771###eoif===832###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid code while processing dynamic deflate block";
    case 17: if (code == 17)
AKA_mark("lis===6896###sois===302146###eois===302154###lif===11###soif===838###eoif===846###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6896###sois===302155###eois===302213###lif===11###soif===847###eoif===905###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "end of out buffer memory reached while inflating";
    case 18: if (code == 18)
AKA_mark("lis===6897###sois===302219###eois===302227###lif===12###soif===911###eoif===919###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6897###sois===302228###eois===302275###lif===12###soif===920###eoif===967###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid distance code while inflating";
    case 19: if (code == 19)
AKA_mark("lis===6898###sois===302281###eois===302289###lif===13###soif===973###eoif===981###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6898###sois===302290###eois===302348###lif===13###soif===982###eoif===1040###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "end of out buffer memory reached while inflating";
    case 20: if (code == 20)
AKA_mark("lis===6899###sois===302354###eois===302362###lif===14###soif===1046###eoif===1054###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6899###sois===302363###eois===302427###lif===14###soif===1055###eoif===1119###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid deflate block BTYPE encountered while decoding";
    case 21: if (code == 21)
AKA_mark("lis===6900###sois===302433###eois===302441###lif===15###soif===1125###eoif===1133###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6900###sois===302442###eois===302505###lif===15###soif===1134###eoif===1197###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "NLEN is not ones complement of LEN in a deflate block";

    /*end of out buffer memory reached while inflating:
    This can happen if the inflated deflate data is longer than the amount of bytes required to fill up
    all the pixels of the image, given the color depth and image dimensions. Something that doesn't
    happen in a normal, well encoded, PNG image.*/
    case 22: if (code == 22)
AKA_mark("lis===6906###sois===302828###eois===302836###lif===21###soif===1520###eoif===1528###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6906###sois===302837###eois===302895###lif===21###soif===1529###eoif===1587###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "end of out buffer memory reached while inflating";
    case 23: if (code == 23)
AKA_mark("lis===6907###sois===302901###eois===302909###lif===22###soif===1593###eoif===1601###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6907###sois===302910###eois===302967###lif===22###soif===1602###eoif===1659###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "end of in buffer memory reached while inflating";
    case 24: if (code == 24)
AKA_mark("lis===6908###sois===302973###eois===302981###lif===23###soif===1665###eoif===1673###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6908###sois===302982###eois===303021###lif===23###soif===1674###eoif===1713###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid FCHECK in zlib header";
    case 25: if (code == 25)
AKA_mark("lis===6909###sois===303027###eois===303035###lif===24###soif===1719###eoif===1727###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6909###sois===303036###eois===303087###lif===24###soif===1728###eoif===1779###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid compression method in zlib header";
    case 26: if (code == 26)
AKA_mark("lis===6910###sois===303093###eois===303101###lif===25###soif===1785###eoif===1793###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6910###sois===303102###eois===303172###lif===25###soif===1794###eoif===1864###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "FDICT encountered in zlib header while it's not used for PNG";
    case 27: if (code == 27)
AKA_mark("lis===6911###sois===303178###eois===303186###lif===26###soif===1870###eoif===1878###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6911###sois===303187###eois===303234###lif===26###soif===1879###eoif===1926###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "PNG file is smaller than a PNG header";
    /*Checks the magic file header, the first 8 bytes of the PNG file*/
    case 28: if (code == 28)
AKA_mark("lis===6913###sois===303313###eois===303321###lif===28###soif===2005###eoif===2013###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6913###sois===303322###eois===303381###lif===28###soif===2014###eoif===2073###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "incorrect PNG signature, it's no PNG or corrupted";
    case 29: if (code == 29)
AKA_mark("lis===6914###sois===303387###eois===303395###lif===29###soif===2079###eoif===2087###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6914###sois===303396###eois===303441###lif===29###soif===2088###eoif===2133###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "first chunk is not the header chunk";
    case 30: if (code == 30)
AKA_mark("lis===6915###sois===303447###eois===303455###lif===30###soif===2139###eoif===2147###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6915###sois===303456###eois===303521###lif===30###soif===2148###eoif===2213###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "chunk length too large, chunk broken off at end of file";
    case 31: if (code == 31)
AKA_mark("lis===6916###sois===303527###eois===303535###lif===31###soif===2219###eoif===2227###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6916###sois===303536###eois===303575###lif===31###soif===2228###eoif===2267###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "illegal PNG color type or bpp";
    case 32: if (code == 32)
AKA_mark("lis===6917###sois===303581###eois===303589###lif===32###soif===2273###eoif===2281###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6917###sois===303590###eois===303630###lif===32###soif===2282###eoif===2322###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "illegal PNG compression method";
    case 33: if (code == 33)
AKA_mark("lis===6918###sois===303636###eois===303644###lif===33###soif===2328###eoif===2336###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6918###sois===303645###eois===303680###lif===33###soif===2337###eoif===2372###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "illegal PNG filter method";
    case 34: if (code == 34)
AKA_mark("lis===6919###sois===303686###eois===303694###lif===34###soif===2378###eoif===2386###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6919###sois===303695###eois===303733###lif===34###soif===2387###eoif===2425###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "illegal PNG interlace method";
    case 35: if (code == 35)
AKA_mark("lis===6920###sois===303739###eois===303747###lif===35###soif===2431###eoif===2439###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6920###sois===303748###eois===303817###lif===35###soif===2440###eoif===2509###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "chunk length of a chunk is too large or the chunk too small";
    case 36: if (code == 36)
AKA_mark("lis===6921###sois===303823###eois===303831###lif===36###soif===2515###eoif===2523###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6921###sois===303832###eois===303877###lif===36###soif===2524###eoif===2569###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "illegal PNG filter type encountered";
    case 37: if (code == 37)
AKA_mark("lis===6922###sois===303883###eois===303891###lif===37###soif===2575###eoif===2583###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6922###sois===303892###eois===303945###lif===37###soif===2584###eoif===2637###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "illegal bit depth for this color type given";
    case 38: if (code == 38)
AKA_mark("lis===6923###sois===303951###eois===303959###lif===38###soif===2643###eoif===2651###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6923###sois===303960###eois===304005###lif===38###soif===2652###eoif===2697###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "the palette is too small or too big"; /*0, or more than 256 colors*/
    case 39: if (code == 39)
AKA_mark("lis===6924###sois===304042###eois===304050###lif===39###soif===2734###eoif===2742###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6924###sois===304051###eois===304121###lif===39###soif===2743###eoif===2813###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "tRNS chunk before PLTE or has more entries than palette size";
    case 40: if (code == 40)
AKA_mark("lis===6925###sois===304127###eois===304135###lif===40###soif===2819###eoif===2827###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6925###sois===304136###eois===304191###lif===40###soif===2828###eoif===2883###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "tRNS chunk has wrong size for grayscale image";
    case 41: if (code == 41)
AKA_mark("lis===6926###sois===304197###eois===304205###lif===41###soif===2889###eoif===2897###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6926###sois===304206###eois===304255###lif===41###soif===2898###eoif===2947###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "tRNS chunk has wrong size for RGB image";
    case 42: if (code == 42)
AKA_mark("lis===6927###sois===304261###eois===304269###lif===42###soif===2953###eoif===2961###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6927###sois===304270###eois===304344###lif===42###soif===2962###eoif===3036###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "tRNS chunk appeared while it was not allowed for this color type";
    case 43: if (code == 43)
AKA_mark("lis===6928###sois===304350###eois===304358###lif===43###soif===3042###eoif===3050###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6928###sois===304359###eois===304412###lif===43###soif===3051###eoif===3104###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "bKGD chunk has wrong size for palette image";
    case 44: if (code == 44)
AKA_mark("lis===6929###sois===304418###eois===304426###lif===44###soif===3110###eoif===3118###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6929###sois===304427###eois===304482###lif===44###soif===3119###eoif===3174###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "bKGD chunk has wrong size for grayscale image";
    case 45: if (code == 45)
AKA_mark("lis===6930###sois===304488###eois===304496###lif===45###soif===3180###eoif===3188###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6930###sois===304497###eois===304546###lif===45###soif===3189###eoif===3238###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "bKGD chunk has wrong size for RGB image";
    case 48: if (code == 48)
AKA_mark("lis===6931###sois===304552###eois===304560###lif===46###soif===3244###eoif===3252###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6931###sois===304561###eois===304642###lif===46###soif===3253###eoif===3334###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "empty input buffer given to decoder. Maybe caused by non-existing file?";
    case 49: if (code == 49)
AKA_mark("lis===6932###sois===304648###eois===304656###lif===47###soif===3340###eoif===3348###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6932###sois===304657###eois===304723###lif===47###soif===3349###eoif===3415###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "jumped past memory while generating dynamic huffman tree";
    case 50: if (code == 50)
AKA_mark("lis===6933###sois===304729###eois===304737###lif===48###soif===3421###eoif===3429###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6933###sois===304738###eois===304804###lif===48###soif===3430###eoif===3496###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "jumped past memory while generating dynamic huffman tree";
    case 51: if (code == 51)
AKA_mark("lis===6934###sois===304810###eois===304818###lif===49###soif===3502###eoif===3510###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6934###sois===304819###eois===304877###lif===49###soif===3511###eoif===3569###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "jumped past memory while inflating huffman block";
    case 52: if (code == 52)
AKA_mark("lis===6935###sois===304883###eois===304891###lif===50###soif===3575###eoif===3583###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6935###sois===304892###eois===304936###lif===50###soif===3584###eoif===3628###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "jumped past memory while inflating";
    case 53: if (code == 53)
AKA_mark("lis===6936###sois===304942###eois===304950###lif===51###soif===3634###eoif===3642###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6936###sois===304951###eois===304988###lif===51###soif===3643###eoif===3680###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "size of zlib data too small";
    case 54: if (code == 54)
AKA_mark("lis===6937###sois===304994###eois===305002###lif===52###soif===3686###eoif===3694###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6937###sois===305003###eois===305070###lif===52###soif===3695###eoif===3762###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "repeat symbol in tree while there was no value symbol yet";
    /*jumped past tree while generating huffman tree, this could be when the
    tree will have more leaves than symbols after generating it out of the
    given lengths. They call this an oversubscribed dynamic bit lengths tree in zlib.*/
    case 55: if (code == 55)
AKA_mark("lis===6941###sois===305319###eois===305327###lif===56###soif===4011###eoif===4019###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6941###sois===305328###eois===305384###lif===56###soif===4020###eoif===4076###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "jumped past tree while generating huffman tree";
    case 56: if (code == 56)
AKA_mark("lis===6942###sois===305390###eois===305398###lif===57###soif===4082###eoif===4090###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6942###sois===305399###eois===305484###lif===57###soif===4091###eoif===4176###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "given output image colortype or bitdepth not supported for color conversion";
    case 57: if (code == 57)
AKA_mark("lis===6943###sois===305490###eois===305498###lif===58###soif===4182###eoif===4190###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6943###sois===305499###eois===305563###lif===58###soif===4191###eoif===4255###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid CRC encountered (checking CRC can be disabled)";
    case 58: if (code == 58)
AKA_mark("lis===6944###sois===305569###eois===305577###lif===59###soif===4261###eoif===4269###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6944###sois===305578###eois===305650###lif===59###soif===4270###eoif===4342###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid ADLER32 encountered (checking ADLER32 can be disabled)";
    case 59: if (code == 59)
AKA_mark("lis===6945###sois===305656###eois===305664###lif===60###soif===4348###eoif===4356###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6945###sois===305665###eois===305715###lif===60###soif===4357###eoif===4407###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "requested color conversion not supported";
    case 60: if (code == 60)
AKA_mark("lis===6946###sois===305721###eois===305729###lif===61###soif===4413###eoif===4421###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6946###sois===305730###eois===305814###lif===61###soif===4422###eoif===4506###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid window size given in the settings of the encoder (must be 0-32768)";
    case 61: if (code == 61)
AKA_mark("lis===6947###sois===305820###eois===305828###lif===62###soif===4512###eoif===4520###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6947###sois===305829###eois===305919###lif===62###soif===4521###eoif===4611###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid BTYPE given in the settings of the encoder (only 0, 1 and 2 are allowed)";
    /*LodePNG leaves the choice of RGB to grayscale conversion formula to the user.*/
    case 62: if (code == 62)
AKA_mark("lis===6949###sois===306012###eois===306020###lif===64###soif===4704###eoif===4712###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6949###sois===306021###eois===306079###lif===64###soif===4713###eoif===4771###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "conversion from color to grayscale not supported";
    /*(2^31-1)*/
    case 63: if (code == 63)
AKA_mark("lis===6951###sois===306103###eois===306111###lif===66###soif===4795###eoif===4803###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6951###sois===306112###eois===306199###lif===66###soif===4804###eoif===4891###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "length of a chunk too long, max allowed for PNG is 2147483647 bytes per chunk";
    /*this would result in the inability of a deflated block to ever contain an end code. It must be at least 1.*/
    case 64: if (code == 64)
AKA_mark("lis===6953###sois===306321###eois===306329###lif===68###soif===5013###eoif===5021###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6953###sois===306330###eois===306397###lif===68###soif===5022###eoif===5089###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "the length of the END symbol 256 in the Huffman tree is 0";
    case 66: if (code == 66)
AKA_mark("lis===6954###sois===306403###eois===306411###lif===69###soif===5095###eoif===5103###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6954###sois===306412###eois===306516###lif===69###soif===5104###eoif===5208###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "the length of a text chunk keyword given to the encoder is longer than the maximum of 79 bytes";
    case 67: if (code == 67)
AKA_mark("lis===6955###sois===306522###eois===306530###lif===70###soif===5214###eoif===5222###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6955###sois===306531###eois===306634###lif===70###soif===5223###eoif===5326###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "the length of a text chunk keyword given to the encoder is smaller than the minimum of 1 byte";
    case 68: if (code == 68)
AKA_mark("lis===6956###sois===306640###eois===306648###lif===71###soif===5332###eoif===5340###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6956###sois===306649###eois===306747###lif===71###soif===5341###eoif===5439###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "tried to encode a PLTE chunk with a palette that has less than 1 or more than 256 colors";
    case 69: if (code == 69)
AKA_mark("lis===6957###sois===306753###eois===306761###lif===72###soif===5445###eoif===5453###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6957###sois===306762###eois===306838###lif===72###soif===5454###eoif===5530###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "unknown chunk type with 'critical' flag encountered by the decoder";
    case 71: if (code == 71)
AKA_mark("lis===6958###sois===306844###eois===306852###lif===73###soif===5536###eoif===5544###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6958###sois===306853###eois===306919###lif===73###soif===5545###eoif===5611###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid interlace mode given to encoder (must be 0 or 1)";
    case 72: if (code == 72)
AKA_mark("lis===6959###sois===306925###eois===306933###lif===74###soif===5617###eoif===5625###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6959###sois===306934###eois===307036###lif===74###soif===5626###eoif===5728###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "while decoding, invalid compression method encountering in zTXt or iTXt chunk (it must be 0)";
    case 73: if (code == 73)
AKA_mark("lis===6960###sois===307042###eois===307050###lif===75###soif===5734###eoif===5742###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6960###sois===307051###eois===307084###lif===75###soif===5743###eoif===5776###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid tIME chunk size";
    case 74: if (code == 74)
AKA_mark("lis===6961###sois===307090###eois===307098###lif===76###soif===5782###eoif===5790###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6961###sois===307099###eois===307132###lif===76###soif===5791###eoif===5824###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid pHYs chunk size";
    /*length could be wrong, or data chopped off*/
    case 75: if (code == 75)
AKA_mark("lis===6963###sois===307190###eois===307198###lif===78###soif===5882###eoif===5890###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6963###sois===307199###eois===307265###lif===78###soif===5891###eoif===5957###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "no null termination char found while decoding text chunk";
    case 76: if (code == 76)
AKA_mark("lis===6964###sois===307271###eois===307279###lif===79###soif===5963###eoif===5971###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6964###sois===307280###eois===307336###lif===79###soif===5972###eoif===6028###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "iTXt chunk too short to contain required bytes";
    case 77: if (code == 77)
AKA_mark("lis===6965###sois===307342###eois===307350###lif===80###soif===6034###eoif===6042###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6965###sois===307351###eois===307392###lif===80###soif===6043###eoif===6084###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "integer overflow in buffer size";
    case 78: if (code == 78)
AKA_mark("lis===6966###sois===307398###eois===307406###lif===81###soif===6090###eoif===6098###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6966###sois===307407###eois===307448###lif===81###soif===6099###eoif===6140###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "failed to open file for reading"; /*file doesn't exist or couldn't be opened for reading*/
    case 79: if (code == 79)
AKA_mark("lis===6967###sois===307511###eois===307519###lif===82###soif===6203###eoif===6211###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6967###sois===307520###eois===307561###lif===82###soif===6212###eoif===6253###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "failed to open file for writing";
    case 80: if (code == 80)
AKA_mark("lis===6968###sois===307567###eois===307575###lif===83###soif===6259###eoif===6267###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6968###sois===307576###eois===307620###lif===83###soif===6268###eoif===6312###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "tried creating a tree of 0 symbols";
    case 81: if (code == 81)
AKA_mark("lis===6969###sois===307626###eois===307634###lif===84###soif===6318###eoif===6326###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6969###sois===307635###eois===307681###lif===84###soif===6327###eoif===6373###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "lazy matching at pos 0 is impossible";
    case 82: if (code == 82)
AKA_mark("lis===6970###sois===307687###eois===307695###lif===85###soif===6379###eoif===6387###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6970###sois===307696###eois===307798###lif===85###soif===6388###eoif===6490###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "color conversion to palette requested while a color isn't in palette, or index out of bounds";
    case 83: if (code == 83)
AKA_mark("lis===6971###sois===307804###eois===307812###lif===86###soif===6496###eoif===6504###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6971###sois===307813###eois===307847###lif===86###soif===6505###eoif===6539###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "memory allocation failed";
    case 84: if (code == 84)
AKA_mark("lis===6972###sois===307853###eois===307861###lif===87###soif===6545###eoif===6553###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6972###sois===307862###eois===307929###lif===87###soif===6554###eoif===6621###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "given image too small to contain all pixels to be encoded";
    case 86: if (code == 86)
AKA_mark("lis===6973###sois===307935###eois===307943###lif===88###soif===6627###eoif===6635###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6973###sois===307944###eois===308003###lif===88###soif===6636###eoif===6695###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "impossible offset in lz77 encoding (internal bug)";
    case 87: if (code == 87)
AKA_mark("lis===6974###sois===308009###eois===308017###lif===89###soif===6701###eoif===6709###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6974###sois===308018###eois===308108###lif===89###soif===6710###eoif===6800###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "must provide custom zlib function pointer if LODEPNG_COMPILE_ZLIB is not defined";
    case 88: if (code == 88)
AKA_mark("lis===6975###sois===308114###eois===308122###lif===90###soif===6806###eoif===6814###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6975###sois===308123###eois===308205###lif===90###soif===6815###eoif===6897###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid filter strategy given for LodePNGEncoderSettings.filter_strategy";
    case 89: if (code == 89)
AKA_mark("lis===6976###sois===308211###eois===308219###lif===91###soif===6903###eoif===6911###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6976###sois===308220###eois===308287###lif===91###soif===6912###eoif===6979###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "text chunk keyword too short or long: must have size 1-79";
    /*the windowsize in the LodePNGCompressSettings. Requiring POT(==> & instead of %) makes encoding 12% faster.*/
    case 90: if (code == 90)
AKA_mark("lis===6978###sois===308410###eois===308418###lif===93###soif===7102###eoif===7110###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6978###sois===308419###eois===308462###lif===93###soif===7111###eoif===7154###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "windowsize must be a power of two";
    case 91: if (code == 91)
AKA_mark("lis===6979###sois===308468###eois===308476###lif===94###soif===7160###eoif===7168###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6979###sois===308477###eois===308517###lif===94###soif===7169###eoif===7209###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid decompressed idat size";
    case 92: if (code == 92)
AKA_mark("lis===6980###sois===308523###eois===308531###lif===95###soif===7215###eoif===7223###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6980###sois===308532###eois===308581###lif===95###soif===7224###eoif===7273###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "integer overflow due to too many pixels";
    case 93: if (code == 93)
AKA_mark("lis===6981###sois===308587###eois===308595###lif===96###soif===7279###eoif===7287###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6981###sois===308596###eois===308637###lif===96###soif===7288###eoif===7329###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "zero width or height is invalid";
    case 94: if (code == 94)
AKA_mark("lis===6982###sois===308643###eois===308651###lif===97###soif===7335###eoif===7343###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6982###sois===308652###eois===308703###lif===97###soif===7344###eoif===7395###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "header chunk must have a size of 13 bytes";
    case 95: if (code == 95)
AKA_mark("lis===6983###sois===308709###eois===308717###lif===98###soif===7401###eoif===7409###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6983###sois===308718###eois===308774###lif===98###soif===7410###eoif===7466###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "integer overflow with combined idat chunk size";
    case 96: if (code == 96)
AKA_mark("lis===6984###sois===308780###eois===308788###lif===99###soif===7472###eoif===7480###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6984###sois===308789###eois===308822###lif===99###soif===7481###eoif===7514###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid gAMA chunk size";
    case 97: if (code == 97)
AKA_mark("lis===6985###sois===308828###eois===308836###lif===100###soif===7520###eoif===7528###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6985###sois===308837###eois===308870###lif===100###soif===7529###eoif===7562###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid cHRM chunk size";
    case 98: if (code == 98)
AKA_mark("lis===6986###sois===308876###eois===308884###lif===101###soif===7568###eoif===7576###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6986###sois===308885###eois===308918###lif===101###soif===7577###eoif===7610###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid sRGB chunk size";
    case 99: if (code == 99)
AKA_mark("lis===6987###sois===308924###eois===308932###lif===102###soif===7616###eoif===7624###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6987###sois===308933###eois===308972###lif===102###soif===7625###eoif===7664###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid sRGB rendering intent";
    case 100: if (code == 100)
AKA_mark("lis===6988###sois===308978###eois===308987###lif===103###soif===7670###eoif===7679###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6988###sois===308988###eois===309075###lif===103###soif===7680###eoif===7767###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid ICC profile color type, the PNG specification only allows RGB or GRAY";
    case 101: if (code == 101)
AKA_mark("lis===6989###sois===309081###eois===309090###lif===104###soif===7773###eoif===7782###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6989###sois===309091###eois===309184###lif===104###soif===7783###eoif===7876###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "PNG specification does not allow RGB ICC profile on gray color types and vice versa";
    case 102: if (code == 102)
AKA_mark("lis===6990###sois===309190###eois===309199###lif===105###soif===7882###eoif===7891###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6990###sois===309200###eois===309291###lif===105###soif===7892###eoif===7983###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "not allowed to set grayscale ICC profile with colored pixels by PNG specification";
    case 103: if (code == 103)
AKA_mark("lis===6991###sois===309297###eois===309306###lif===106###soif===7989###eoif===7998###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6991###sois===309307###eois===309386###lif===106###soif===7999###eoif===8078###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid palette index in bKGD chunk. Maybe it came before PLTE chunk?";
    case 104: if (code == 104)
AKA_mark("lis===6992###sois===309392###eois===309401###lif===107###soif===8084###eoif===8093###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6992###sois===309402###eois===309479###lif===107###soif===8094###eoif===8171###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid bKGD color while encoding (e.g. palette index out of range)";
    case 105: if (code == 105)
AKA_mark("lis===6993###sois===309485###eois===309494###lif===108###soif===8177###eoif===8186###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6993###sois===309495###eois===309532###lif===108###soif===8187###eoif===8224###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "integer overflow of bitsize";
    case 106: if (code == 106)
AKA_mark("lis===6994###sois===309538###eois===309547###lif===109###soif===8230###eoif===8239###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6994###sois===309548###eois===309612###lif===109###soif===8240###eoif===8304###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "PNG file must have PLTE chunk if color type is palette";
    case 107: if (code == 107)
AKA_mark("lis===6995###sois===309618###eois===309627###lif===110###soif===8310###eoif===8319###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6995###sois===309628###eois===309718###lif===110###soif===8320###eoif===8410###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "color convert from palette mode requested without setting the palette data in it";
    case 108: if (code == 108)
AKA_mark("lis===6996###sois===309724###eois===309733###lif===111###soif===8416###eoif===8425###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6996###sois===309734###eois===309790###lif===111###soif===8426###eoif===8482###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "tried to add more than 256 values to a palette";
    /*this limit can be configured in LodePNGDecompressSettings*/
    case 109: if (code == 109)
AKA_mark("lis===6998###sois===309863###eois===309872###lif===113###soif===8555###eoif===8564###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6998###sois===309873###eois===309959###lif===113###soif===8565###eoif===8651###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "tried to decompress zlib or deflate data larger than desired max_output_size";
    case 110: if (code == 110)
AKA_mark("lis===6999###sois===309965###eois===309974###lif===114###soif===8657###eoif===8666###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===6999###sois===309975###eois===310028###lif===114###soif===8667###eoif===8720###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "custom zlib or inflate decompression failed";
    case 111: if (code == 111)
AKA_mark("lis===7000###sois===310034###eois===310043###lif===115###soif===8726###eoif===8735###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===7000###sois===310044###eois===310095###lif===115###soif===8736###eoif===8787###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "custom zlib or deflate compression failed";
    /*max text size limit can be configured in LodePNGDecoderSettings. This error prevents
    unreasonable memory consumption when decoding due to impossibly large text sizes.*/
    case 112: if (code == 112)
AKA_mark("lis===7003###sois===310282###eois===310291###lif===118###soif===8974###eoif===8983###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===7003###sois===310292###eois===310336###lif===118###soif===8984###eoif===9028###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "compressed text unreasonably large";
    /*max ICC size limit can be configured in LodePNGDecoderSettings. This error prevents
    unreasonable memory consumption when decoding due to impossibly large ICC profile*/
    case 113: if (code == 113)
AKA_mark("lis===7006###sois===310522###eois===310531###lif===121###soif===9214###eoif===9223###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===7006###sois===310532###eois===310572###lif===121###soif===9224###eoif===9264###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "ICC profile unreasonably large";
    case 114: if (code == 114)
AKA_mark("lis===7007###sois===310578###eois===310587###lif===122###soif===9270###eoif===9279###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===7007###sois===310588###eois===310655###lif===122###soif===9280###eoif===9347###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "sBIT chunk has wrong size for the color type of the image";
    case 115: if (code == 115)
AKA_mark("lis===7008###sois===310661###eois===310670###lif===123###soif===9353###eoif===9362###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===7008###sois===310671###eois===310704###lif===123###soif===9363###eoif===9396###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "sBIT value out of range";
    case 116: if (code == 116)
AKA_mark("lis===7009###sois===310710###eois===310719###lif===124###soif===9402###eoif===9411###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===7009###sois===310720###eois===310753###lif===124###soif===9412###eoif===9445###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "cICP value out of range";
    case 117: if (code == 117)
AKA_mark("lis===7010###sois===310759###eois===310768###lif===125###soif===9451###eoif===9460###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===7010###sois===310769###eois===310802###lif===125###soif===9461###eoif===9494###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid cICP chunk size";
    case 118: if (code == 118)
AKA_mark("lis===7011###sois===310808###eois===310817###lif===126###soif===9500###eoif===9509###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===7011###sois===310818###eois===310851###lif===126###soif===9510###eoif===9543###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "mDCV value out of range";
    case 119: if (code == 119)
AKA_mark("lis===7012###sois===310857###eois===310866###lif===127###soif===9549###eoif===9558###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===7012###sois===310867###eois===310900###lif===127###soif===9559###eoif===9592###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid mDCV chunk size";
    case 120: if (code == 120)
AKA_mark("lis===7013###sois===310906###eois===310915###lif===128###soif===9598###eoif===9607###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===7013###sois===310916###eois===310949###lif===128###soif===9608###eoif===9641###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid cLLI chunk size";
    case 121: if (code == 121)
AKA_mark("lis===7014###sois===310955###eois===310964###lif===129###soif===9647###eoif===9656###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===7014###sois===310965###eois===311025###lif===129###soif===9657###eoif===9717###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid chunk type name: may only contain [a-zA-Z]";
    case 122: if (code == 122)
AKA_mark("lis===7015###sois===311031###eois===311040###lif===130###soif===9723###eoif===9732###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");
 AKA_mark("lis===7015###sois===311041###eois===311109###lif===130###soif===9733###eoif===9801###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "invalid chunk type name: third character must be uppercase";
  }
  AKA_mark("lis===7017###sois===311118###eois===311146###lif===132###soif===9810###eoif===9838###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng_error_text(unsigned)");return "unknown error code";
}
#endif /*LODEPNG_COMPILE_ERROR_TEXT*/

/* ////////////////////////////////////////////////////////////////////////// */
/* ////////////////////////////////////////////////////////////////////////// */
/* // C++ Wrapper                                                          // */
/* ////////////////////////////////////////////////////////////////////////// */
/* ////////////////////////////////////////////////////////////////////////// */

#ifdef LODEPNG_COMPILE_CPP
namespace lodepng {

#ifdef LODEPNG_COMPILE_DISK
/* Resizes the vector to the file size and reads the file into it. Returns error code.*/
/** Instrumented function load_file_(std::vector<unsigned char>&,FILE*) */
static unsigned load_file_(std::vector<unsigned char>& buffer, FILE* file) /* << Aka begin of function unsigned load_file_(std::vector<unsigned char>& buffer, FILE* file) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file_(std::vector<unsigned char>&,FILE*)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.load_file_.311790.stub"

  AKA_mark("lis===7033###sois===311854###eois===311889###lif===1###soif===80###eoif===115###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file_(std::vector<unsigned char>&,FILE*)");long size = lodepng_filesize(file);
  if(AKA_mark("lis===7034###sois===311896###eois===311904###lif===2###soif===122###eoif===130###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file_(std::vector<unsigned char>&,FILE*)") && (AKA_mark("lis===7034###sois===311896###eois===311904###lif===2###soif===122###eoif===130###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file_(std::vector<unsigned char>&,FILE*)") && (size < 0))) {
AKA_mark("lis===7034###sois===311906###eois===311916###lif===2###soif===132###eoif===142###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file_(std::vector<unsigned char>&,FILE*)");return 78;
}

else {
AKA_mark("lis===-7034-###sois===-311896-###eois===-3118968-###lif===-2-###soif===-###eoif===-130-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file_(std::vector<unsigned char>&,FILE*)");
}
  AKA_mark("lis===7035###sois===311920###eois===311948###lif===3###soif===146###eoif===174###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file_(std::vector<unsigned char>&,FILE*)");buffer.resize((size_t)size);
  if(AKA_mark("lis===7036###sois===311955###eois===311964###lif===4###soif===181###eoif===190###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file_(std::vector<unsigned char>&,FILE*)") && (AKA_mark("lis===7036###sois===311955###eois===311964###lif===4###soif===181###eoif===190###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file_(std::vector<unsigned char>&,FILE*)") && (size == 0))) {
AKA_mark("lis===7036###sois===311966###eois===311975###lif===4###soif===192###eoif===201###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file_(std::vector<unsigned char>&,FILE*)");return 0;
}

else {
AKA_mark("lis===-7036-###sois===-311955-###eois===-3119559-###lif===-4-###soif===-###eoif===-190-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file_(std::vector<unsigned char>&,FILE*)");
} /*ok*/
  if(AKA_mark("lis===7037###sois===311989###eois===312047###lif===5###soif===215###eoif===273###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file_(std::vector<unsigned char>&,FILE*)") && (AKA_mark("lis===7037###sois===311989###eois===312047###lif===5###soif===215###eoif===273###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file_(std::vector<unsigned char>&,FILE*)") && (fread(&buffer[0], 1, buffer.size(), file) != buffer.size()))) {
AKA_mark("lis===7037###sois===312049###eois===312059###lif===5###soif===275###eoif===285###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file_(std::vector<unsigned char>&,FILE*)");return 78;
}

else {
AKA_mark("lis===-7037-###sois===-311989-###eois===-31198958-###lif===-5-###soif===-###eoif===-273-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file_(std::vector<unsigned char>&,FILE*)");
}
  AKA_mark("lis===7038###sois===312063###eois===312072###lif===6###soif===289###eoif===298###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file_(std::vector<unsigned char>&,FILE*)");return 0; /*ok*/
}

/** Instrumented function load_file(std::vector<unsigned char>&,std::string const&) */
unsigned load_file(std::vector<unsigned char>& buffer, const std::string& filename) /* << Aka begin of function unsigned load_file(std::vector<unsigned char>& buffer, const std::string& filename) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file(std::vector<unsigned char>&,std::string const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.load_file.312095.stub"

  AKA_mark("lis===7042###sois===312175###eois===312190###lif===1###soif===89###eoif===104###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file(std::vector<unsigned char>&,std::string const&)");unsigned error;
  AKA_mark("lis===7043###sois===312194###eois===312237###lif===2###soif===108###eoif===151###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file(std::vector<unsigned char>&,std::string const&)");FILE* file = fopen(filename.c_str(), "rb");
  if(AKA_mark("lis===7044###sois===312244###eois===312249###lif===3###soif===158###eoif===163###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file(std::vector<unsigned char>&,std::string const&)") && (AKA_mark("lis===7044###sois===312244###eois===312249###lif===3###soif===158###eoif===163###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file(std::vector<unsigned char>&,std::string const&)") && (!file))) {
AKA_mark("lis===7044###sois===312251###eois===312261###lif===3###soif===165###eoif===175###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file(std::vector<unsigned char>&,std::string const&)");return 78;
}

else {
AKA_mark("lis===-7044-###sois===-312244-###eois===-3122445-###lif===-3-###soif===-###eoif===-163-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file(std::vector<unsigned char>&,std::string const&)");
}
  AKA_mark("lis===7045###sois===312265###eois===312298###lif===4###soif===179###eoif===212###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file(std::vector<unsigned char>&,std::string const&)");error = load_file_(buffer, file);
  AKA_mark("lis===7046###sois===312302###eois===312315###lif===5###soif===216###eoif===229###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file(std::vector<unsigned char>&,std::string const&)");fclose(file);
  AKA_mark("lis===7047###sois===312319###eois===312332###lif===6###soif===233###eoif===246###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\load_file(std::vector<unsigned char>&,std::string const&)");return error;
}

/*write given buffer to the file, overwriting the file, it doesn't append to it.*/
/** Instrumented function save_file(std::vector<unsigned char>const&,std::string const&) */
unsigned save_file(const std::vector<unsigned char>& buffer, const std::string& filename) /* << Aka begin of function unsigned save_file(const std::vector<unsigned char>& buffer, const std::string& filename) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\save_file(std::vector<unsigned char>const&,std::string const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.save_file.312432.stub"

  AKA_mark("lis===7052###sois===312518###eois===312609###lif===1###soif===95###eoif===186###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\save_file(std::vector<unsigned char>const&,std::string const&)");return lodepng_save_file(buffer.empty() ? 0 : &buffer[0], buffer.size(), filename.c_str());
}
#endif /* LODEPNG_COMPILE_DISK */

#ifdef LODEPNG_COMPILE_ZLIB
#ifdef LODEPNG_COMPILE_DECODER
/** Instrumented function decompress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGDecompressSettings const&) */
unsigned decompress(std::vector<unsigned char>& out, const unsigned char* in, size_t insize,
                    const LodePNGDecompressSettings& settings) /* << Aka begin of function unsigned decompress(std::vector<unsigned char>& out, const unsigned char* in, size_t insize,
                    const LodePNGDecompressSettings& settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decompress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGDecompressSettings const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.decompress.312721.stub"

  AKA_mark("lis===7060###sois===312874###eois===312900###lif===2###soif===162###eoif===188###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decompress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGDecompressSettings const&)");unsigned char* buffer = 0;
  AKA_mark("lis===7061###sois===312904###eois===312926###lif===3###soif===192###eoif===214###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decompress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGDecompressSettings const&)");size_t buffersize = 0;
  AKA_mark("lis===7062###sois===312930###eois===313011###lif===4###soif===218###eoif===299###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decompress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGDecompressSettings const&)");unsigned error = zlib_decompress(&buffer, &buffersize, 0, in, insize, &settings);
  if(AKA_mark("lis===7063###sois===313018###eois===313024###lif===5###soif===306###eoif===312###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decompress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGDecompressSettings const&)") && (AKA_mark("lis===7063###sois===313018###eois===313024###lif===5###soif===306###eoif===312###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decompress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGDecompressSettings const&)") && (buffer))) {
    AKA_mark("lis===7064###sois===313033###eois===313084###lif===6###soif===321###eoif===372###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decompress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGDecompressSettings const&)");out.insert(out.end(), buffer, &buffer[buffersize]);
    AKA_mark("lis===7065###sois===313090###eois===313111###lif===7###soif===378###eoif===399###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decompress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGDecompressSettings const&)");lodepng_free(buffer);
  }
else {
AKA_mark("lis===-7063-###sois===-313018-###eois===-3130186-###lif===-5-###soif===-###eoif===-312-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decompress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGDecompressSettings const&)");
}
  AKA_mark("lis===7067###sois===313120###eois===313133###lif===9###soif===408###eoif===421###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decompress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGDecompressSettings const&)");return error;
}

/** Instrumented function decompress(std::vector<unsigned char>&,std::vector<unsigned char>const&,LodePNGDecompressSettings const&) */
unsigned decompress(std::vector<unsigned char>& out, const std::vector<unsigned char>& in,
                    const LodePNGDecompressSettings& settings) /* << Aka begin of function unsigned decompress(std::vector<unsigned char>& out, const std::vector<unsigned char>& in,
                    const LodePNGDecompressSettings& settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decompress(std::vector<unsigned char>&,std::vector<unsigned char>const&,LodePNGDecompressSettings const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.decompress.313149.stub"

  AKA_mark("lis===7072###sois===313300###eois===313369###lif===2###soif===160###eoif===229###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decompress(std::vector<unsigned char>&,std::vector<unsigned char>const&,LodePNGDecompressSettings const&)");return decompress(out, in.empty() ? 0 : &in[0], in.size(), settings);
}
#endif /* LODEPNG_COMPILE_DECODER */

#ifdef LODEPNG_COMPILE_ENCODER
/** Instrumented function compress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGCompressSettings const&) */
unsigned compress(std::vector<unsigned char>& out, const unsigned char* in, size_t insize,
                  const LodePNGCompressSettings& settings) /* << Aka begin of function unsigned compress(std::vector<unsigned char>& out, const unsigned char* in, size_t insize,
                  const LodePNGCompressSettings& settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\compress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGCompressSettings const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.compress.313455.stub"

  AKA_mark("lis===7079###sois===313602###eois===313628###lif===2###soif===156###eoif===182###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\compress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGCompressSettings const&)");unsigned char* buffer = 0;
  AKA_mark("lis===7080###sois===313632###eois===313654###lif===3###soif===186###eoif===208###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\compress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGCompressSettings const&)");size_t buffersize = 0;
  AKA_mark("lis===7081###sois===313658###eois===313734###lif===4###soif===212###eoif===288###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\compress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGCompressSettings const&)");unsigned error = zlib_compress(&buffer, &buffersize, in, insize, &settings);
  if(AKA_mark("lis===7082###sois===313741###eois===313747###lif===5###soif===295###eoif===301###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\compress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGCompressSettings const&)") && (AKA_mark("lis===7082###sois===313741###eois===313747###lif===5###soif===295###eoif===301###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\compress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGCompressSettings const&)") && (buffer))) {
    AKA_mark("lis===7083###sois===313756###eois===313807###lif===6###soif===310###eoif===361###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\compress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGCompressSettings const&)");out.insert(out.end(), buffer, &buffer[buffersize]);
    AKA_mark("lis===7084###sois===313813###eois===313834###lif===7###soif===367###eoif===388###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\compress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGCompressSettings const&)");lodepng_free(buffer);
  }
else {
AKA_mark("lis===-7082-###sois===-313741-###eois===-3137416-###lif===-5-###soif===-###eoif===-301-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\compress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGCompressSettings const&)");
}
  AKA_mark("lis===7086###sois===313843###eois===313856###lif===9###soif===397###eoif===410###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\compress(std::vector<unsigned char>&,unsigned char const*,size_t,LodePNGCompressSettings const&)");return error;
}

/** Instrumented function compress(std::vector<unsigned char>&,std::vector<unsigned char>const&,LodePNGCompressSettings const&) */
unsigned compress(std::vector<unsigned char>& out, const std::vector<unsigned char>& in,
                  const LodePNGCompressSettings& settings) /* << Aka begin of function unsigned compress(std::vector<unsigned char>& out, const std::vector<unsigned char>& in,
                  const LodePNGCompressSettings& settings) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\compress(std::vector<unsigned char>&,std::vector<unsigned char>const&,LodePNGCompressSettings const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.compress.313872.stub"

  AKA_mark("lis===7091###sois===314017###eois===314084###lif===2###soif===154###eoif===221###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\compress(std::vector<unsigned char>&,std::vector<unsigned char>const&,LodePNGCompressSettings const&)");return compress(out, in.empty() ? 0 : &in[0], in.size(), settings);
}
#endif /* LODEPNG_COMPILE_ENCODER */
#endif /* LODEPNG_COMPILE_ZLIB */


#ifdef LODEPNG_COMPILE_PNG

/** Instrumented function State::State() */
State::State() /* << Aka begin of function  State::State() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\State::State()");AKA_fCall++;
  AKA_mark("lis===7100###sois===314216###eois===314241###lif===1###soif===20###eoif===45###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\State::State()");lodepng_state_init(this);
}

/** Instrumented function State::State(State const&) */
State::State(const State& other) /* << Aka begin of function  State::State(const State& other) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\State::State(State const&)");AKA_fCall++;
  AKA_mark("lis===7104###sois===314286###eois===314311###lif===1###soif===38###eoif===63###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\State::State(State const&)");lodepng_state_init(this);
  AKA_mark("lis===7105###sois===314315###eois===314348###lif===2###soif===67###eoif===100###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\State::State(State const&)");lodepng_state_copy(this, &other);
}

/** Instrumented function State::~State() */
State::~State() /* << Aka begin of function  State::~State() >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\State::~State()");AKA_fCall++;
  AKA_mark("lis===7109###sois===314376###eois===314404###lif===1###soif===21###eoif===49###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\State::~State()");lodepng_state_cleanup(this);
}

/** Instrumented function State::operator=(State const&) */
State& State::operator=(const State& other) /* << Aka begin of function State & State::operator=(const State& other) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\State::operator=(State const&)");AKA_fCall++;
  AKA_mark("lis===7113###sois===314460###eois===314493###lif===1###soif===49###eoif===82###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\State::operator=(State const&)");lodepng_state_copy(this, &other);
  AKA_mark("lis===7114###sois===314497###eois===314510###lif===2###soif===86###eoif===99###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\State::operator=(State const&)");return *this;
}

#ifdef LODEPNG_COMPILE_DECODER

/** Instrumented function decode(std::vector<unsigned char>&,unsigned&,unsigned&,unsigned char const*,size_t,LodePNGColorType,unsigned) */
unsigned decode(std::vector<unsigned char>& out, unsigned& w, unsigned& h, const unsigned char* in,
                size_t insize, LodePNGColorType colortype, unsigned bitdepth) /* << Aka begin of function unsigned decode(std::vector<unsigned char>& out, unsigned& w, unsigned& h, const unsigned char* in,
                size_t insize, LodePNGColorType colortype, unsigned bitdepth) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,unsigned char const*,size_t,LodePNGColorType,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.decode.314560.stub"

  AKA_mark("lis===7121###sois===314735###eois===314761###lif===2###soif===184###eoif===210###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,unsigned char const*,size_t,LodePNGColorType,unsigned)");unsigned char* buffer = 0;
  AKA_mark("lis===7122###sois===314765###eois===314854###lif===3###soif===214###eoif===303###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,unsigned char const*,size_t,LodePNGColorType,unsigned)");unsigned error = lodepng_decode_memory(&buffer, &w, &h, in, insize, colortype, bitdepth);
  if(AKA_mark("lis===7123###sois===314861###eois===314877###lif===4###soif===310###eoif===326###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,unsigned char const*,size_t,LodePNGColorType,unsigned)") && ((AKA_mark("lis===7123###sois===314861###eois===314867###lif===4###soif===310###eoif===316###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,unsigned char const*,size_t,LodePNGColorType,unsigned)") && (buffer)) && (AKA_mark("lis===7123###sois===314871###eois===314877###lif===4###soif===320###eoif===326###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,unsigned char const*,size_t,LodePNGColorType,unsigned)") && (!error)))) {
    AKA_mark("lis===7124###sois===314886###eois===314898###lif===5###soif===335###eoif===347###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,unsigned char const*,size_t,LodePNGColorType,unsigned)");State state;
    AKA_mark("lis===7125###sois===314904###eois===314941###lif===6###soif===353###eoif===390###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,unsigned char const*,size_t,LodePNGColorType,unsigned)");state.info_raw.colortype = colortype;
    AKA_mark("lis===7126###sois===314947###eois===314982###lif===7###soif===396###eoif===431###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,unsigned char const*,size_t,LodePNGColorType,unsigned)");state.info_raw.bitdepth = bitdepth;
    AKA_mark("lis===7127###sois===314988###eois===315052###lif===8###soif===437###eoif===501###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,unsigned char const*,size_t,LodePNGColorType,unsigned)");size_t buffersize = lodepng_get_raw_size(w, h, &state.info_raw);
    AKA_mark("lis===7128###sois===315058###eois===315109###lif===9###soif===507###eoif===558###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,unsigned char const*,size_t,LodePNGColorType,unsigned)");out.insert(out.end(), buffer, &buffer[buffersize]);
  }
else {
AKA_mark("lis===-7123-###sois===-314861-###eois===-31486116-###lif===-4-###soif===-###eoif===-326-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,unsigned char const*,size_t,LodePNGColorType,unsigned)");
}
  AKA_mark("lis===7130###sois===315118###eois===315139###lif===11###soif===567###eoif===588###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,unsigned char const*,size_t,LodePNGColorType,unsigned)");lodepng_free(buffer);
  AKA_mark("lis===7131###sois===315143###eois===315156###lif===12###soif===592###eoif===605###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,unsigned char const*,size_t,LodePNGColorType,unsigned)");return error;
}

/** Instrumented function decode(std::vector<unsigned char>&,unsigned&,unsigned&,std::vector<unsigned char>const&,LodePNGColorType,unsigned) */
unsigned decode(std::vector<unsigned char>& out, unsigned& w, unsigned& h,
                const std::vector<unsigned char>& in, LodePNGColorType colortype, unsigned bitdepth) /* << Aka begin of function unsigned decode(std::vector<unsigned char>& out, unsigned& w, unsigned& h,
                const std::vector<unsigned char>& in, LodePNGColorType colortype, unsigned bitdepth) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,std::vector<unsigned char>const&,LodePNGColorType,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.decode.315172.stub"

  AKA_mark("lis===7136###sois===315345###eois===315437###lif===2###soif===182###eoif===274###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,std::vector<unsigned char>const&,LodePNGColorType,unsigned)");return decode(out, w, h, in.empty() ? 0 : &in[0], (unsigned)in.size(), colortype, bitdepth);
}

/** Instrumented function decode(std::vector<unsigned char>&,unsigned&,unsigned&,State&,unsigned char const*,size_t) */
unsigned decode(std::vector<unsigned char>& out, unsigned& w, unsigned& h,
                State& state,
                const unsigned char* in, size_t insize) /* << Aka begin of function unsigned decode(std::vector<unsigned char>& out, unsigned& w, unsigned& h,
                State& state,
                const unsigned char* in, size_t insize) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,State&,unsigned char const*,size_t)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.decode.315453.stub"

  AKA_mark("lis===7142###sois===315612###eois===315641###lif===3###soif===168###eoif===197###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,State&,unsigned char const*,size_t)");unsigned char* buffer = NULL;
  AKA_mark("lis===7143###sois===315645###eois===315714###lif===4###soif===201###eoif===270###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,State&,unsigned char const*,size_t)");unsigned error = lodepng_decode(&buffer, &w, &h, &state, in, insize);
  if(AKA_mark("lis===7144###sois===315721###eois===315737###lif===5###soif===277###eoif===293###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,State&,unsigned char const*,size_t)") && ((AKA_mark("lis===7144###sois===315721###eois===315727###lif===5###soif===277###eoif===283###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,State&,unsigned char const*,size_t)") && (buffer)) && (AKA_mark("lis===7144###sois===315731###eois===315737###lif===5###soif===287###eoif===293###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,State&,unsigned char const*,size_t)") && (!error)))) {
    AKA_mark("lis===7145###sois===315746###eois===315810###lif===6###soif===302###eoif===366###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,State&,unsigned char const*,size_t)");size_t buffersize = lodepng_get_raw_size(w, h, &state.info_raw);
    AKA_mark("lis===7146###sois===315816###eois===315867###lif===7###soif===372###eoif===423###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,State&,unsigned char const*,size_t)");out.insert(out.end(), buffer, &buffer[buffersize]);
  }
else {
AKA_mark("lis===-7144-###sois===-315721-###eois===-31572116-###lif===-5-###soif===-###eoif===-293-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,State&,unsigned char const*,size_t)");
}
  AKA_mark("lis===7148###sois===315876###eois===315897###lif===9###soif===432###eoif===453###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,State&,unsigned char const*,size_t)");lodepng_free(buffer);
  AKA_mark("lis===7149###sois===315901###eois===315914###lif===10###soif===457###eoif===470###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,State&,unsigned char const*,size_t)");return error;
}

/** Instrumented function decode(std::vector<unsigned char>&,unsigned&,unsigned&,State&,std::vector<unsigned char>const&) */
unsigned decode(std::vector<unsigned char>& out, unsigned& w, unsigned& h,
                State& state,
                const std::vector<unsigned char>& in) /* << Aka begin of function unsigned decode(std::vector<unsigned char>& out, unsigned& w, unsigned& h,
                State& state,
                const std::vector<unsigned char>& in) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,State&,std::vector<unsigned char>const&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.decode.315930.stub"

  AKA_mark("lis===7155###sois===316087###eois===316155###lif===3###soif===166###eoif===234###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,State&,std::vector<unsigned char>const&)");return decode(out, w, h, state, in.empty() ? 0 : &in[0], in.size());
}

#ifdef LODEPNG_COMPILE_DISK
/** Instrumented function decode(std::vector<unsigned char>&,unsigned&,unsigned&,std::string const&,LodePNGColorType,unsigned) */
unsigned decode(std::vector<unsigned char>& out, unsigned& w, unsigned& h, const std::string& filename,
                LodePNGColorType colortype, unsigned bitdepth) /* << Aka begin of function unsigned decode(std::vector<unsigned char>& out, unsigned& w, unsigned& h, const std::string& filename,
                LodePNGColorType colortype, unsigned bitdepth) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,std::string const&,LodePNGColorType,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.decode.316200.stub"

  AKA_mark("lis===7161###sois===316364###eois===316398###lif===2###soif===173###eoif===207###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,std::string const&,LodePNGColorType,unsigned)");std::vector<unsigned char> buffer;
  /* safe output values in case error happens */
  AKA_mark("lis===7163###sois===316452###eois===316462###lif===4###soif===261###eoif===271###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,std::string const&,LodePNGColorType,unsigned)");w = h = 0;
  AKA_mark("lis===7164###sois===316466###eois===316511###lif===5###soif===275###eoif===320###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,std::string const&,LodePNGColorType,unsigned)");unsigned error = load_file(buffer, filename);
  if(AKA_mark("lis===7165###sois===316518###eois===316523###lif===6###soif===327###eoif===332###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,std::string const&,LodePNGColorType,unsigned)") && (AKA_mark("lis===7165###sois===316518###eois===316523###lif===6###soif===327###eoif===332###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,std::string const&,LodePNGColorType,unsigned)") && (error))) {
AKA_mark("lis===7165###sois===316525###eois===316538###lif===6###soif===334###eoif===347###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,std::string const&,LodePNGColorType,unsigned)");return error;
}

else {
AKA_mark("lis===-7165-###sois===-316518-###eois===-3165185-###lif===-6-###soif===-###eoif===-332-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,std::string const&,LodePNGColorType,unsigned)");
}
  AKA_mark("lis===7166###sois===316542###eois===316596###lif===7###soif===351###eoif===405###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\decode(std::vector<unsigned char>&,unsigned&,unsigned&,std::string const&,LodePNGColorType,unsigned)");return decode(out, w, h, buffer, colortype, bitdepth);
}
#endif /* LODEPNG_COMPILE_DECODER */
#endif /* LODEPNG_COMPILE_DISK */

#ifdef LODEPNG_COMPILE_ENCODER
/** Instrumented function encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned) */
unsigned encode(std::vector<unsigned char>& out, const unsigned char* in, unsigned w, unsigned h,
                LodePNGColorType colortype, unsigned bitdepth) /* << Aka begin of function unsigned encode(std::vector<unsigned char>& out, const unsigned char* in, unsigned w, unsigned h,
                LodePNGColorType colortype, unsigned bitdepth) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.encode.316717.stub"

  AKA_mark("lis===7174###sois===316875###eois===316897###lif===2###soif===167###eoif===189###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");unsigned char* buffer;
  AKA_mark("lis===7175###sois===316901###eois===316919###lif===3###soif===193###eoif===211###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");size_t buffersize;
  AKA_mark("lis===7176###sois===316923###eois===317015###lif===4###soif===215###eoif===307###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");unsigned error = lodepng_encode_memory(&buffer, &buffersize, in, w, h, colortype, bitdepth);
  if(AKA_mark("lis===7177###sois===317022###eois===317028###lif===5###soif===314###eoif===320###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)") && (AKA_mark("lis===7177###sois===317022###eois===317028###lif===5###soif===314###eoif===320###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)") && (buffer))) {
    AKA_mark("lis===7178###sois===317037###eois===317088###lif===6###soif===329###eoif===380###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");out.insert(out.end(), buffer, &buffer[buffersize]);
    AKA_mark("lis===7179###sois===317094###eois===317115###lif===7###soif===386###eoif===407###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");lodepng_free(buffer);
  }
else {
AKA_mark("lis===-7177-###sois===-317022-###eois===-3170226-###lif===-5-###soif===-###eoif===-320-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");
}
  AKA_mark("lis===7181###sois===317124###eois===317137###lif===9###soif===416###eoif===429###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");return error;
}

/** Instrumented function encode(std::vector<unsigned char>&,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorType,unsigned) */
unsigned encode(std::vector<unsigned char>& out,
                const std::vector<unsigned char>& in, unsigned w, unsigned h,
                LodePNGColorType colortype, unsigned bitdepth) /* << Aka begin of function unsigned encode(std::vector<unsigned char>& out,
                const std::vector<unsigned char>& in, unsigned w, unsigned h,
                LodePNGColorType colortype, unsigned bitdepth) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorType,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.encode.317153.stub"

  if(AKA_mark("lis===7187###sois===317344###eois===317407###lif===3###soif===200###eoif===263###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorType,unsigned)") && (AKA_mark("lis===7187###sois===317344###eois===317407###lif===3###soif===200###eoif===263###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorType,unsigned)") && (lodepng_get_raw_size_lct(w, h, colortype, bitdepth) > in.size()))) {
AKA_mark("lis===7187###sois===317409###eois===317419###lif===3###soif===265###eoif===275###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorType,unsigned)");return 84;
}

else {
AKA_mark("lis===-7187-###sois===-317344-###eois===-31734463-###lif===-3-###soif===-###eoif===-263-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorType,unsigned)");
}
  AKA_mark("lis===7188###sois===317423###eois===317494###lif===4###soif===279###eoif===350###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorType,unsigned)");return encode(out, in.empty() ? 0 : &in[0], w, h, colortype, bitdepth);
}

/** Instrumented function encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,State&) */
unsigned encode(std::vector<unsigned char>& out,
                const unsigned char* in, unsigned w, unsigned h,
                State& state) /* << Aka begin of function unsigned encode(std::vector<unsigned char>& out,
                const unsigned char* in, unsigned w, unsigned h,
                State& state) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,State&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.encode.317510.stub"

  AKA_mark("lis===7194###sois===317652###eois===317674###lif===3###soif===151###eoif===173###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,State&)");unsigned char* buffer;
  AKA_mark("lis===7195###sois===317678###eois===317696###lif===4###soif===177###eoif===195###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,State&)");size_t buffersize;
  AKA_mark("lis===7196###sois===317700###eois===317772###lif===5###soif===199###eoif===271###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,State&)");unsigned error = lodepng_encode(&buffer, &buffersize, in, w, h, &state);
  if(AKA_mark("lis===7197###sois===317779###eois===317785###lif===6###soif===278###eoif===284###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,State&)") && (AKA_mark("lis===7197###sois===317779###eois===317785###lif===6###soif===278###eoif===284###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,State&)") && (buffer))) {
    AKA_mark("lis===7198###sois===317794###eois===317845###lif===7###soif===293###eoif===344###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,State&)");out.insert(out.end(), buffer, &buffer[buffersize]);
    AKA_mark("lis===7199###sois===317851###eois===317872###lif===8###soif===350###eoif===371###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,State&)");lodepng_free(buffer);
  }
else {
AKA_mark("lis===-7197-###sois===-317779-###eois===-3177796-###lif===-6-###soif===-###eoif===-284-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,State&)");
}
  AKA_mark("lis===7201###sois===317881###eois===317894###lif===10###soif===380###eoif===393###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,unsigned char const*,unsigned,unsigned,State&)");return error;
}

/** Instrumented function encode(std::vector<unsigned char>&,std::vector<unsigned char>const&,unsigned,unsigned,State&) */
unsigned encode(std::vector<unsigned char>& out,
                const std::vector<unsigned char>& in, unsigned w, unsigned h,
                State& state) /* << Aka begin of function unsigned encode(std::vector<unsigned char>& out,
                const std::vector<unsigned char>& in, unsigned w, unsigned h,
                State& state) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,std::vector<unsigned char>const&,unsigned,unsigned,State&)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.encode.317910.stub"

  if(AKA_mark("lis===7207###sois===318068###eois===318123###lif===3###soif===167###eoif===222###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,std::vector<unsigned char>const&,unsigned,unsigned,State&)") && (AKA_mark("lis===7207###sois===318068###eois===318123###lif===3###soif===167###eoif===222###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,std::vector<unsigned char>const&,unsigned,unsigned,State&)") && (lodepng_get_raw_size(w, h, &state.info_raw) > in.size()))) {
AKA_mark("lis===7207###sois===318125###eois===318135###lif===3###soif===224###eoif===234###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,std::vector<unsigned char>const&,unsigned,unsigned,State&)");return 84;
}

else {
AKA_mark("lis===-7207-###sois===-318068-###eois===-31806855-###lif===-3-###soif===-###eoif===-222-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,std::vector<unsigned char>const&,unsigned,unsigned,State&)");
}
  AKA_mark("lis===7208###sois===318139###eois===318196###lif===4###soif===238###eoif===295###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::vector<unsigned char>&,std::vector<unsigned char>const&,unsigned,unsigned,State&)");return encode(out, in.empty() ? 0 : &in[0], w, h, state);
}

#ifdef LODEPNG_COMPILE_DISK
/** Instrumented function encode(std::string const&,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned) */
unsigned encode(const std::string& filename,
                const unsigned char* in, unsigned w, unsigned h,
                LodePNGColorType colortype, unsigned bitdepth) /* << Aka begin of function unsigned encode(const std::string& filename,
                const unsigned char* in, unsigned w, unsigned h,
                LodePNGColorType colortype, unsigned bitdepth) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::string const&,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.encode.318241.stub"

  AKA_mark("lis===7215###sois===318412###eois===318446###lif===3###soif===180###eoif===214###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::string const&,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");std::vector<unsigned char> buffer;
  AKA_mark("lis===7216###sois===318450###eois===318513###lif===4###soif===218###eoif===281###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::string const&,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");unsigned error = encode(buffer, in, w, h, colortype, bitdepth);
  if(AKA_mark("lis===7217###sois===318520###eois===318526###lif===5###soif===288###eoif===294###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::string const&,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)") && (AKA_mark("lis===7217###sois===318520###eois===318526###lif===5###soif===288###eoif===294###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::string const&,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)") && (!error))) {
AKA_mark("lis===7217###sois===318528###eois===318564###lif===5###soif===296###eoif===332###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::string const&,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");error = save_file(buffer, filename);
}

else {
AKA_mark("lis===-7217-###sois===-318520-###eois===-3185206-###lif===-5-###soif===-###eoif===-294-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::string const&,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");
}
  AKA_mark("lis===7218###sois===318568###eois===318581###lif===6###soif===336###eoif===349###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::string const&,unsigned char const*,unsigned,unsigned,LodePNGColorType,unsigned)");return error;
}

/** Instrumented function encode(std::string const&,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorType,unsigned) */
unsigned encode(const std::string& filename,
                const std::vector<unsigned char>& in, unsigned w, unsigned h,
                LodePNGColorType colortype, unsigned bitdepth) /* << Aka begin of function unsigned encode(const std::string& filename,
                const std::vector<unsigned char>& in, unsigned w, unsigned h,
                LodePNGColorType colortype, unsigned bitdepth) >> */
{AKA_mark("Calling: .\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::string const&,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorType,unsigned)");AKA_fCall++;
	/** Include stub source code */
	#include "lodepng.cpp.encode.318597.stub"

  if(AKA_mark("lis===7224###sois===318784###eois===318847###lif===3###soif===196###eoif===259###ifc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::string const&,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorType,unsigned)") && (AKA_mark("lis===7224###sois===318784###eois===318847###lif===3###soif===196###eoif===259###isc===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::string const&,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorType,unsigned)") && (lodepng_get_raw_size_lct(w, h, colortype, bitdepth) > in.size()))) {
AKA_mark("lis===7224###sois===318849###eois===318859###lif===3###soif===261###eoif===271###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::string const&,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorType,unsigned)");return 84;
}

else {
AKA_mark("lis===-7224-###sois===-318784-###eois===-31878463-###lif===-3-###soif===-###eoif===-259-###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::string const&,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorType,unsigned)");
}
  AKA_mark("lis===7225###sois===318863###eois===318939###lif===4###soif===275###eoif===351###ins===true###function===.\\lvandeve_lodepng\\src\\lodepng.cpp\\lodepng\\encode(std::string const&,std::vector<unsigned char>const&,unsigned,unsigned,LodePNGColorType,unsigned)");return encode(filename, in.empty() ? 0 : &in[0], w, h, colortype, bitdepth);
}
#endif /* LODEPNG_COMPILE_DISK */
#endif /* LODEPNG_COMPILE_ENCODER */
#endif /* LODEPNG_COMPILE_PNG */
} /* namespace lodepng */
#endif /*LODEPNG_COMPILE_CPP*/

#endif
